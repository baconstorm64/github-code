--[ 2019.09.03.11.01.34.958.0 ]--
NewLogger: P01_Hex
Version: 1.3
--[ 2019.09.03.11.01.34.964.0 ]--
InitTree:
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2019.09.03.11.01.34.965.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2019.09.03.11.01.34.965.1 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2019.09.03.11.01.34.966.0 ]--
InitFile: /.cos265


--[ 2019.09.03.11.01.34.967.0 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.09.03.11.01.34.967.1 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/

public class HexBoard {
    public HexBoard(int N) {
    }

    public int getPlayer(int row, int col) {
        return 0;
    }
    
    public boolean isSet(int row, int col) {
        return false;
    }

    public boolean isOnWinningPath(int row, int col) {
        return false;
    }

    public void setTile(int row, int col, int player) {
    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {
        return 0;
    }
}

--[ 2019.09.03.11.01.34.968.0 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public static void main(String[] args) {
    }
}

--[ 2019.09.03.11.07.34.501.0 ]--
:/src/HexBoard.java
+ 7         
--[ 2019.09.03.11.20.10.755.0 ]--
+ 7         
--[ 2019.09.03.11.20.11.260.0 ]--
+ 7         
--[ 2019.09.03.11.20.12.019.0 ]--
- 7
--[ 2019.09.03.11.20.12.244.0 ]--
- 7
--[ 2019.09.03.11.21.23.839.0 ]--
r 7 
--[ 2019.09.03.11.21.31.724.0 ]--
- 7
--[ 2019.09.03.11.21.32.265.0 ]--
+ 7         
--[ 2019.09.03.11.25.32.753.0 ]--
r 7             
--[ 2019.09.03.11.32.19.037.0 ]--
+ 6     
--[ 2019.09.03.11.32.20.744.0 ]--
r 6     d
--[ 2019.09.03.11.32.20.839.0 ]--
r 6     do
--[ 2019.09.03.11.32.20.887.0 ]--
r 6     dou
--[ 2019.09.03.11.32.21.815.0 ]--
r 6     double
--[ 2019.09.03.11.32.22.525.0 ]--
r 6     double[]
--[ 2019.09.03.11.32.22.731.0 ]--
r 6     double[][]
--[ 2019.09.03.11.32.24.528.0 ]--
r 6     double[][] 
--[ 2019.09.03.11.32.28.436.0 ]--
r 6     double[][]  
--[ 2019.09.03.11.32.28.503.0 ]--
r 6     double[][] 
--[ 2019.09.03.11.32.29.609.0 ]--
r 8 
--[ 2019.09.03.11.33.06.945.0 ]--
r 6     double[][] b
--[ 2019.09.03.11.33.06.992.0 ]--
r 6     double[][] bo
--[ 2019.09.03.11.33.07.128.0 ]--
r 6     double[][] boa
--[ 2019.09.03.11.33.07.166.0 ]--
r 6     double[][] boar
--[ 2019.09.03.11.33.07.424.0 ]--
r 6     double[][] board
--[ 2019.09.03.11.33.07.921.0 ]--
r 6     double[][] board[]
--[ 2019.09.03.11.33.08.256.0 ]--
r 6     double[][] board[
--[ 2019.09.03.11.33.08.346.0 ]--
r 6     double[][] board
--[ 2019.09.03.11.33.08.480.0 ]--
r 6     double[][] board;
--[ 2019.09.03.11.33.10.172.0 ]--
r 6     double[][] board; 
--[ 2019.09.03.11.33.10.220.0 ]--
r 6     double[][] board;
--[ 2019.09.03.11.33.11.454.0 ]--
r 8     
--[ 2019.09.03.11.33.12.280.0 ]--
r 8         
--[ 2019.09.03.11.33.18.213.0 ]--
r 8         b
--[ 2019.09.03.11.33.18.288.0 ]--
r 8         bo
--[ 2019.09.03.11.33.18.342.0 ]--
r 8         boa
--[ 2019.09.03.11.33.18.457.0 ]--
r 8         boar
--[ 2019.09.03.11.33.18.692.0 ]--
r 8         boar 
--[ 2019.09.03.11.33.18.838.0 ]--
r 8         boar =
--[ 2019.09.03.11.33.19.064.0 ]--
r 8         boar 
--[ 2019.09.03.11.33.19.138.0 ]--
r 8         boar
--[ 2019.09.03.11.33.19.257.0 ]--
r 8         board
--[ 2019.09.03.11.33.19.323.0 ]--
r 8         board 
--[ 2019.09.03.11.33.19.472.0 ]--
r 8         board =
--[ 2019.09.03.11.33.19.485.0 ]--
r 8         board = 
--[ 2019.09.03.11.33.20.910.0 ]--
r 8         board = n
--[ 2019.09.03.11.33.20.974.0 ]--
r 8         board = ne
--[ 2019.09.03.11.33.21.094.0 ]--
r 8         board = new
--[ 2019.09.03.11.33.21.264.0 ]--
r 8         board = new 
--[ 2019.09.03.11.33.21.289.0 ]--
r 8         board = new d
--[ 2019.09.03.11.33.21.407.0 ]--
r 8         board = new do
--[ 2019.09.03.11.33.21.450.0 ]--
r 8         board = new dou
--[ 2019.09.03.11.33.21.578.0 ]--
r 8         board = new doub
--[ 2019.09.03.11.33.21.675.0 ]--
r 8         board = new doubl
--[ 2019.09.03.11.33.21.758.0 ]--
r 8         board = new double
--[ 2019.09.03.11.33.22.088.0 ]--
r 8         board = new double[]
--[ 2019.09.03.11.33.22.688.0 ]--
r 8         board = new double[] 
--[ 2019.09.03.11.33.22.783.0 ]--
r 8         board = new double[]
--[ 2019.09.03.11.33.23.101.0 ]--
r 8         board = new double[][]
--[ 2019.09.03.11.33.23.332.0 ]--
r 8         board = new double[][
--[ 2019.09.03.11.33.23.465.0 ]--
r 8         board = new double[]
--[ 2019.09.03.11.33.23.669.0 ]--
r 8         board = new double[
--[ 2019.09.03.11.33.23.839.0 ]--
r 8         board = new double
--[ 2019.09.03.11.33.24.675.0 ]--
r 8         board = new double 
--[ 2019.09.03.11.33.37.945.0 ]--
r 8         board = new double
--[ 2019.09.03.11.33.40.004.0 ]--
r 8         board = new double[]
--[ 2019.09.03.11.33.40.145.0 ]--
r 8         board = new double[i]
--[ 2019.09.03.11.33.40.464.0 ]--
r 8         board = new double[i][]
--[ 2019.09.03.11.33.40.685.0 ]--
r 8         board = new double[i][i]
--[ 2019.09.03.11.33.41.402.0 ]--
r 8         board = new double[i][]
--[ 2019.09.03.11.33.41.478.0 ]--
r 8         board = new double[i][j]
--[ 2019.09.03.11.33.41.616.0 ]--
r 8         board = new double[i][j\]
--[ 2019.09.03.11.33.42.350.0 ]--
r 8         board = new double[i][j]
--[ 2019.09.03.11.33.46.205.0 ]--
r 8         board = new double[i][j] 
--[ 2019.09.03.11.33.46.273.0 ]--
r 8         board = new double[i][j]
--[ 2019.09.03.11.33.46.466.0 ]--
r 8         board = new double[i][j
--[ 2019.09.03.11.33.46.860.0 ]--
r 8         board = new double[i][
--[ 2019.09.03.11.33.46.970.0 ]--
r 8         board = new double[i]
--[ 2019.09.03.11.33.47.100.0 ]--
r 8         board = new double[i
--[ 2019.09.03.11.33.47.983.0 ]--
r 8         board = new double[im
--[ 2019.09.03.11.33.48.030.0 ]--
r 8         board = new double[im]
--[ 2019.09.03.11.33.48.208.0 ]--
r 8         board = new double[im][]
--[ 2019.09.03.11.33.48.802.0 ]--
r 8         board = new double[im]
--[ 2019.09.03.11.33.48.908.0 ]--
r 8         board = new double[im
--[ 2019.09.03.11.33.49.311.0 ]--
r 8         board = new double[i
--[ 2019.09.03.11.33.49.358.0 ]--
r 8         board = new double[
--[ 2019.09.03.11.33.49.936.0 ]--
r 8         board = new double[m
--[ 2019.09.03.11.33.50.267.0 ]--
r 8         board = new double[m]
--[ 2019.09.03.11.33.50.382.0 ]--
r 8         board = new double[m][]
--[ 2019.09.03.11.33.50.531.0 ]--
r 8         board = new double[m][n]
--[ 2019.09.03.11.33.50.792.0 ]--
r 8         board = new double[m][n][]
--[ 2019.09.03.11.33.51.583.0 ]--
r 8         board = new double[m][n]
--[ 2019.09.03.11.33.54.348.0 ]--
r 8         board = new double[m][n];
--[ 2019.09.03.11.33.55.177.0 ]--
r 8         board = new double[m][n]; 
--[ 2019.09.03.11.33.55.238.0 ]--
r 8         board = new double[m][n];
--[ 2019.09.03.11.33.56.231.0 ]--
+ 9         
--[ 2019.09.03.11.33.56.624.0 ]--
r 9         f
--[ 2019.09.03.11.33.56.706.0 ]--
r 9         fo
--[ 2019.09.03.11.33.56.757.0 ]--
r 9         for
--[ 2019.09.03.11.33.56.847.0 ]--
r 9         for 
--[ 2019.09.03.11.33.57.279.0 ]--
r 9         for ()
--[ 2019.09.03.11.34.00.707.0 ]--
r 9         for 
--[ 2019.09.03.11.34.00.832.0 ]--
r 9         for
--[ 2019.09.03.11.34.03.289.0 ]--
- 8
r 8         
--[ 2019.09.03.11.34.03.394.0 ]--
- 8
--[ 2019.09.03.11.34.04.165.0 ]--
+ 8         
--[ 2019.09.03.11.34.06.652.0 ]--
r 7     \public HexBoard(int N) {
--[ 2019.09.03.11.34.07.310.0 ]--
r 7     public HexBoard(int N) {
--[ 2019.09.03.11.34.07.506.0 ]--
+ 7     
--[ 2019.09.03.11.34.28.842.0 ]--
r 7 
--[ 2019.09.03.11.34.41.936.0 ]--
r 9         b
--[ 2019.09.03.11.34.42.012.0 ]--
r 9         bo
--[ 2019.09.03.11.34.42.066.0 ]--
r 9         boa
--[ 2019.09.03.11.34.42.164.0 ]--
r 9         boar
--[ 2019.09.03.11.34.42.332.0 ]--
r 9         board
--[ 2019.09.03.11.34.44.590.0 ]--
r 9         board 
--[ 2019.09.03.11.34.44.663.0 ]--
r 9         board =
--[ 2019.09.03.11.34.44.743.0 ]--
r 9         board = 
--[ 2019.09.03.11.34.45.652.0 ]--
r 9         board = n
--[ 2019.09.03.11.34.45.724.0 ]--
r 9         board = ne
--[ 2019.09.03.11.34.45.845.0 ]--
r 9         board = new
--[ 2019.09.03.11.34.45.944.0 ]--
r 9         board = new 
--[ 2019.09.03.11.34.46.386.0 ]--
r 9         board = new d
--[ 2019.09.03.11.34.46.483.0 ]--
r 9         board = new do
--[ 2019.09.03.11.34.46.558.0 ]--
r 9         board = new dou
--[ 2019.09.03.11.34.46.646.0 ]--
r 9         board = new doub
--[ 2019.09.03.11.34.46.695.0 ]--
r 9         board = new doubl
--[ 2019.09.03.11.34.46.775.0 ]--
r 9         board = new double
--[ 2019.09.03.11.34.46.926.0 ]--
r 9         board = new double{}
--[ 2019.09.03.11.34.47.434.0 ]--
r 9         board = new double
--[ 2019.09.03.11.34.47.599.0 ]--
r 9         board = new double[]
--[ 2019.09.03.11.34.48.156.0 ]--
r 9         board = new double[N]
--[ 2019.09.03.11.34.48.385.0 ]--
r 9         board = new double[N][]
--[ 2019.09.03.11.34.48.618.0 ]--
r 9         board = new double[N][N]
--[ 2019.09.03.11.34.51.259.0 ]--
r 9         board = new double[N][N];
--[ 2019.09.03.11.34.51.378.0 ]--
+ 10         
--[ 2019.09.03.11.34.52.710.0 ]--
r 10         f
--[ 2019.09.03.11.34.52.808.0 ]--
r 10         fo
--[ 2019.09.03.11.34.52.848.0 ]--
r 10         for
--[ 2019.09.03.11.34.52.949.0 ]--
r 10         for 
--[ 2019.09.03.11.34.53.157.0 ]--
r 10         for ()
--[ 2019.09.03.11.34.54.149.0 ]--
r 10         for (i)
--[ 2019.09.03.11.34.54.223.0 ]--
r 10         for (in)
--[ 2019.09.03.11.34.54.274.0 ]--
r 10         for (int)
--[ 2019.09.03.11.34.54.329.0 ]--
r 10         for (int )
--[ 2019.09.03.11.34.54.826.0 ]--
r 10         for (int  )
--[ 2019.09.03.11.34.55.081.0 ]--
r 10         for (int )
--[ 2019.09.03.11.34.55.251.0 ]--
r 10         for (int i)
--[ 2019.09.03.11.34.55.320.0 ]--
r 10         for (int i )
--[ 2019.09.03.11.34.55.411.0 ]--
r 10         for (int i =)
--[ 2019.09.03.11.34.55.487.0 ]--
r 10         for (int i = )
--[ 2019.09.03.11.34.55.615.0 ]--
r 10         for (int i = 0)
--[ 2019.09.03.11.34.55.854.0 ]--
r 10         for (int i = 0;)
--[ 2019.09.03.11.34.56.721.0 ]--
r 10         for (int i = 0; )
--[ 2019.09.03.11.34.57.205.0 ]--
r 10         for (int i = 0; i)
--[ 2019.09.03.11.34.57.285.0 ]--
r 10         for (int i = 0; i )
--[ 2019.09.03.11.34.57.411.0 ]--
r 10         for (int i = 0; i <)
--[ 2019.09.03.11.34.57.571.0 ]--
r 10         for (int i = 0; i < )
--[ 2019.09.03.11.34.57.650.0 ]--
r 10         for (int i = 0; i < N)
--[ 2019.09.03.11.34.59.442.0 ]--
r 10         for (int i = 0; i < N;)
--[ 2019.09.03.11.34.59.505.0 ]--
r 10         for (int i = 0; i < N; )
--[ 2019.09.03.11.34.59.597.0 ]--
r 10         for (int i = 0; i < N; o)
--[ 2019.09.03.11.34.59.815.0 ]--
r 10         for (int i = 0; i < N; o+)
--[ 2019.09.03.11.34.59.940.0 ]--
r 10         for (int i = 0; i < N; o++)
--[ 2019.09.03.11.35.00.184.0 ]--
r 10         for (int i = 0; i < N; o+)
--[ 2019.09.03.11.35.00.258.0 ]--
r 10         for (int i = 0; i < N; o)
--[ 2019.09.03.11.35.00.373.0 ]--
r 10         for (int i = 0; i < N; )
--[ 2019.09.03.11.35.00.613.0 ]--
r 10         for (int i = 0; i < N; i)
--[ 2019.09.03.11.35.00.709.0 ]--
r 10         for (int i = 0; i < N; i+)
--[ 2019.09.03.11.35.00.814.0 ]--
r 10         for (int i = 0; i < N; i++)
--[ 2019.09.03.11.35.02.126.0 ]--
r 10         for (int i = 0; i < N; i++){
--[ 2019.09.03.11.35.02.646.0 ]--
+ 11 
+ 12 }
--[ 2019.09.03.11.35.02.656.0 ]--
r 12         }
--[ 2019.09.03.11.35.02.679.0 ]--
r 11             
--[ 2019.09.03.11.35.04.154.0 ]--
r 11             f
--[ 2019.09.03.11.35.04.310.0 ]--
r 11             fo
--[ 2019.09.03.11.35.04.342.0 ]--
r 11             for
--[ 2019.09.03.11.35.05.090.0 ]--
r 11             for()
--[ 2019.09.03.11.35.05.177.0 ]--
r 11             for( )
--[ 2019.09.03.11.35.05.260.0 ]--
r 11             for( i)
--[ 2019.09.03.11.35.05.337.0 ]--
r 11             for( in)
--[ 2019.09.03.11.35.05.479.0 ]--
r 11             for( int)
--[ 2019.09.03.11.35.05.760.0 ]--
r 11             for( int )
--[ 2019.09.03.11.35.06.042.0 ]--
r 11             for( int)
--[ 2019.09.03.11.35.06.153.0 ]--
r 11             for( in)
--[ 2019.09.03.11.35.06.274.0 ]--
r 11             for( i)
--[ 2019.09.03.11.35.06.465.0 ]--
r 11             for( )
--[ 2019.09.03.11.35.06.509.0 ]--
r 11             for()
--[ 2019.09.03.11.35.06.722.0 ]--
r 11             for(i)
--[ 2019.09.03.11.35.06.902.0 ]--
r 11             for(int)
--[ 2019.09.03.11.35.06.925.0 ]--
r 11             for(int )
--[ 2019.09.03.11.35.07.924.0 ]--
r 11             for(int j)
--[ 2019.09.03.11.35.08.024.0 ]--
r 11             for(int j=)
--[ 2019.09.03.11.35.08.534.0 ]--
r 11             for(int j=0)
--[ 2019.09.03.11.35.09.402.0 ]--
r 11             for(int j=)
--[ 2019.09.03.11.35.09.501.0 ]--
r 11             for(int j)
--[ 2019.09.03.11.35.10.336.0 ]--
r 11             for(int j )
--[ 2019.09.03.11.35.10.410.0 ]--
r 11             for(int j =)
--[ 2019.09.03.11.35.10.466.0 ]--
r 11             for(int j = )
--[ 2019.09.03.11.35.10.552.0 ]--
r 11             for(int j = 0)
--[ 2019.09.03.11.35.10.795.0 ]--
r 11             for(int j = 0;)
--[ 2019.09.03.11.35.10.954.0 ]--
r 11             for(int j = 0; )
--[ 2019.09.03.11.35.12.054.0 ]--
r 11             for(int j = 0; j)
--[ 2019.09.03.11.35.12.162.0 ]--
r 11             for(int j = 0; j )
--[ 2019.09.03.11.35.12.291.0 ]--
r 11             for(int j = 0; j <)
--[ 2019.09.03.11.35.12.451.0 ]--
r 11             for(int j = 0; j < )
--[ 2019.09.03.11.35.14.150.0 ]--
r 11             for(int j = 0; j < n)
--[ 2019.09.03.11.35.14.386.0 ]--
r 11             for(int j = 0; j < n;)
--[ 2019.09.03.11.35.14.574.0 ]--
r 11             for(int j = 0; j < n; )
--[ 2019.09.03.11.35.14.833.0 ]--
r 11             for(int j = 0; j < n; j)
--[ 2019.09.03.11.35.15.060.0 ]--
r 11             for(int j = 0; j < n; j+)
--[ 2019.09.03.11.35.15.254.0 ]--
r 11             for(int j = 0; j < n; j++)
--[ 2019.09.03.11.35.15.982.0 ]--
r 11             for(int j = 0; j < n; j+)
--[ 2019.09.03.11.35.16.106.0 ]--
r 11             for(int j = 0; j < n; j)
--[ 2019.09.03.11.35.16.217.0 ]--
r 11             for(int j = 0; j < n; )
--[ 2019.09.03.11.35.16.424.0 ]--
r 11             for(int j = 0; j < n;)
--[ 2019.09.03.11.35.16.465.0 ]--
r 11             for(int j = 0; j < n)
--[ 2019.09.03.11.35.16.628.0 ]--
r 11             for(int j = 0; j < )
--[ 2019.09.03.11.35.16.904.0 ]--
r 11             for(int j = 0; j < N)
--[ 2019.09.03.11.35.17.004.0 ]--
r 11             for(int j = 0; j < N;)
--[ 2019.09.03.11.35.17.464.0 ]--
r 11             for(int j = 0; j < N; )
--[ 2019.09.03.11.35.17.574.0 ]--
r 11             for(int j = 0; j < N; j)
--[ 2019.09.03.11.35.17.738.0 ]--
r 11             for(int j = 0; j < N; j+)
--[ 2019.09.03.11.35.17.928.0 ]--
r 11             for(int j = 0; j < N; j++)
--[ 2019.09.03.11.35.19.248.0 ]--
r 11             for(int j = 0; j < N; j++){
--[ 2019.09.03.11.35.19.400.0 ]--
+ 12 
+ 13 }
--[ 2019.09.03.11.35.19.414.0 ]--
r 13             }
--[ 2019.09.03.11.35.19.442.0 ]--
r 12                 
--[ 2019.09.03.11.35.23.848.0 ]--
r 12                 a
--[ 2019.09.03.11.35.24.704.0 ]--
r 12                 a[]
--[ 2019.09.03.11.35.26.237.0 ]--
r 12                 a
--[ 2019.09.03.11.35.26.353.0 ]--
r 12                 
--[ 2019.09.03.11.35.26.755.0 ]--
r 12                 b
--[ 2019.09.03.11.35.26.822.0 ]--
r 12                 bo
--[ 2019.09.03.11.35.26.890.0 ]--
r 12                 boa
--[ 2019.09.03.11.35.26.981.0 ]--
r 12                 boar
--[ 2019.09.03.11.35.27.122.0 ]--
r 12                 board
--[ 2019.09.03.11.35.27.935.0 ]--
r 12                 board[]
--[ 2019.09.03.11.35.27.954.0 ]--
r 12                 board[i]
--[ 2019.09.03.11.35.28.096.0 ]--
r 12                 board[i][]
--[ 2019.09.03.11.35.29.247.0 ]--
r 12                 board[i][
--[ 2019.09.03.11.35.29.370.0 ]--
r 12                 board[i][j
--[ 2019.09.03.11.35.29.458.0 ]--
r 12                 board[i][j]
--[ 2019.09.03.11.35.30.459.0 ]--
r 12                 board[i][j] 
--[ 2019.09.03.11.35.30.539.0 ]--
r 12                 board[i][j] =
--[ 2019.09.03.11.35.30.618.0 ]--
r 12                 board[i][j] = 
--[ 2019.09.03.11.35.31.862.0 ]--
r 12                 board[i][j] = 0
--[ 2019.09.03.11.35.34.073.0 ]--
r 12                 board[i][j] = 0;
--[ 2019.09.03.11.37.04.297.0 ]--
r 12                 board[i][j] = 0; 
--[ 2019.09.03.11.37.04.399.0 ]--
r 12                 board[i][j] = 0;
--[ 2019.09.03.11.37.05.194.0 ]--
r 12                 board[i][j] = ;
--[ 2019.09.03.11.37.05.850.0 ]--
r 12                 board[i][j] =  ;
--[ 2019.09.03.11.37.05.934.0 ]--
r 12                 board[i][j] = ;
--[ 2019.09.03.11.37.11.134.0 ]--
r 12                 
--[ 2019.09.03.11.40.29.265.0 ]--
- 10
- 10
- 10
- 10
r 10         f
--[ 2019.09.03.11.40.29.360.0 ]--
r 10         
--[ 2019.09.03.11.40.29.476.0 ]--
- 10
--[ 2019.09.03.11.40.29.817.0 ]--
r 9         board = new double[N][N]
--[ 2019.09.03.11.40.30.563.0 ]--
r 9         board = new double[N][N];
--[ 2019.09.03.11.40.31.658.0 ]--
r 9         board = new double[N][N]; 
--[ 2019.09.03.11.40.31.718.0 ]--
r 9         board = new double[N][N];
--[ 2019.09.03.11.40.31.906.0 ]--
+ 10         
--[ 2019.09.03.11.40.32.433.0 ]--
+ 10         System.out.println(Arrays.deepToString(array));
r 11 
--[ 2019.09.03.11.40.33.524.0 ]--
- 11
--[ 2019.09.03.11.40.36.134.0 ]--
r 10         System.out.println(Arrays.deepToString(b));
--[ 2019.09.03.11.40.36.230.0 ]--
r 10         System.out.println(Arrays.deepToString(bo));
--[ 2019.09.03.11.40.36.299.0 ]--
r 10         System.out.println(Arrays.deepToString(boa));
--[ 2019.09.03.11.40.36.374.0 ]--
r 10         System.out.println(Arrays.deepToString(boar));
--[ 2019.09.03.11.40.36.501.0 ]--
r 10         System.out.println(Arrays.deepToString(board));
--[ 2019.09.03.11.40.39.313.0 ]--
+ 4 
--[ 2019.09.03.11.40.40.432.0 ]--
r 4 i
--[ 2019.09.03.11.40.40.493.0 ]--
r 4 im
--[ 2019.09.03.11.40.40.631.0 ]--
r 4 imp
--[ 2019.09.03.11.40.40.781.0 ]--
r 4 impo
--[ 2019.09.03.11.40.40.819.0 ]--
r 4 impor
--[ 2019.09.03.11.40.41.013.0 ]--
r 4 import
--[ 2019.09.03.11.40.41.081.0 ]--
r 4 import 
--[ 2019.09.03.11.40.41.443.0 ]--
r 4 import J
--[ 2019.09.03.11.40.41.880.0 ]--
r 4 import Ja
--[ 2019.09.03.11.40.41.920.0 ]--
r 4 import Jav
--[ 2019.09.03.11.40.41.956.0 ]--
r 4 import Java
--[ 2019.09.03.11.40.42.467.0 ]--
r 4 import Java.
--[ 2019.09.03.11.40.43.796.0 ]--
r 4 import Java.u
--[ 2019.09.03.11.40.44.243.0 ]--
r 4 import Java.uti
--[ 2019.09.03.11.40.44.394.0 ]--
r 4 import Java.ut
--[ 2019.09.03.11.40.44.618.0 ]--
r 4 import Java.
--[ 2019.09.03.11.40.44.742.0 ]--
r 4 import Java
--[ 2019.09.03.11.40.44.881.0 ]--
r 4 import Jav
--[ 2019.09.03.11.40.45.094.0 ]--
r 4 import Ja
--[ 2019.09.03.11.40.45.139.0 ]--
r 4 import J
--[ 2019.09.03.11.40.45.694.0 ]--
r 4 import 
--[ 2019.09.03.11.40.45.805.0 ]--
r 4 import j
--[ 2019.09.03.11.40.45.877.0 ]--
r 4 import ja
--[ 2019.09.03.11.40.45.985.0 ]--
r 4 import jav
--[ 2019.09.03.11.40.46.057.0 ]--
r 4 import java
--[ 2019.09.03.11.40.46.253.0 ]--
r 4 import java.
--[ 2019.09.03.11.40.47.134.0 ]--
r 4 import java.u
--[ 2019.09.03.11.40.47.200.0 ]--
r 4 import java.ut
--[ 2019.09.03.11.40.47.331.0 ]--
r 4 import java.uti
--[ 2019.09.03.11.40.47.629.0 ]--
r 4 import java.util
--[ 2019.09.03.11.40.47.637.0 ]--
r 4 import java.util.
--[ 2019.09.03.11.40.48.466.0 ]--
r 4 import java.util.A
--[ 2019.09.03.11.40.48.590.0 ]--
r 4 import java.util.Ar
--[ 2019.09.03.11.40.49.442.0 ]--
r 4 import java.util.Arr
--[ 2019.09.03.11.40.49.497.0 ]--
r 4 import java.util.Arra
--[ 2019.09.03.11.40.49.719.0 ]--
r 4 import java.util.Array
--[ 2019.09.03.11.40.50.492.0 ]--
r 4 import java.util.Arrays
--[ 2019.09.03.11.40.51.697.0 ]--
r 4 import java.util.Arrays;
--[ 2019.09.03.11.41.16.572.0 ]--
UpdateTree (AD): 25 0
+ /out/production/P01_Hex/.donotlog
+ /out/production/P01_Hex/algs4.jar
+ /out/production/P01_Hex/stdlib.jar
+ /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/input-1-p1.txt
+ /out/production/P01_Hex/input-1-p2.txt
+ /out/production/P01_Hex/input-3-p1.txt
+ /out/production/P01_Hex/input-3-p2.txt
+ /out/production/P01_Hex/input-7-p2.txt
+ /out/production/P01_Hex/input-11-p2.txt
+ /out/production/P01_Hex/input-17-p1.txt
+ /out/production/P01_Hex/input-random-5.txt
+ /out/production/P01_Hex/HexBoardStats.class
+ /out/production/P01_Hex/input-random-13.txt
+ /out/production/P01_Hex/input-random-49.txt
+ /out/production/P01_Hex/input-random-99.txt
+ /out/production/P01_Hex/input-random-199.txt
+ /out/production/P01_Hex/input-1-nowinners.txt
+ /out/production/P01_Hex/input-zigzag-5-p1.txt
+ /out/production/P01_Hex/input-zigzag-5-p2.txt
+ /out/production/P01_Hex/input-zigzag-13-p1.txt
+ /out/production/P01_Hex/input-zigzag-17-p2.txt
+ /out/production/P01_Hex/input-zigzag-31-p2.txt
+ /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/InteractiveHexBoardVisualizer.class

--[ 2019.09.03.11.41.16.626.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.03.11.41.42.710.0 ]--
r 11         
--[ 2019.09.03.11.41.42.904.0 ]--
- 11
--[ 2019.09.03.11.42.21.012.0 ]--
r 10         /board = new double[N][N];
--[ 2019.09.03.11.42.21.085.0 ]--
r 10         //board = new double[N][N];
--[ 2019.09.03.11.42.25.676.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.03.11.42.34.552.0 ]--
r 10         /board = new double[N][N];
--[ 2019.09.03.11.42.34.653.0 ]--
r 10         board = new double[N][N];
--[ 2019.09.03.11.42.57.910.0 ]--
r 10         board = new double[N][N]; 
--[ 2019.09.03.11.42.57.973.0 ]--
r 10         board = new double[N][N];
--[ 2019.09.03.11.42.58.187.0 ]--
+ 11         
--[ 2019.09.03.11.42.58.366.0 ]--
r 11         f
--[ 2019.09.03.11.42.58.416.0 ]--
r 11         fo
--[ 2019.09.03.11.42.58.534.0 ]--
r 11         for
--[ 2019.09.03.11.42.58.656.0 ]--
r 11         for 
--[ 2019.09.03.11.42.59.418.0 ]--
r 11         for i
--[ 2019.09.03.11.42.59.550.0 ]--
r 11         for i 
--[ 2019.09.03.11.42.59.666.0 ]--
r 11         for i i
--[ 2019.09.03.11.42.59.722.0 ]--
r 11         for i in
--[ 2019.09.03.11.43.00.363.0 ]--
r 11         for i i
--[ 2019.09.03.11.43.00.509.0 ]--
r 11         for i 
--[ 2019.09.03.11.43.00.786.0 ]--
r 11         for i
--[ 2019.09.03.11.43.00.838.0 ]--
r 11         for 
--[ 2019.09.03.11.43.01.228.0 ]--
r 11         for
--[ 2019.09.03.11.43.01.680.0 ]--
r 11         for()
--[ 2019.09.03.11.43.01.917.0 ]--
r 11         for(i)
--[ 2019.09.03.11.43.05.296.0 ]--
r 11         for(in)
--[ 2019.09.03.11.43.05.367.0 ]--
r 11         for(int)
--[ 2019.09.03.11.43.05.416.0 ]--
r 11         for(int )
--[ 2019.09.03.11.43.05.520.0 ]--
r 11         for(int i)
--[ 2019.09.03.11.43.05.644.0 ]--
r 11         for(int i )
--[ 2019.09.03.11.43.05.749.0 ]--
r 11         for(int i =)
--[ 2019.09.03.11.43.05.789.0 ]--
r 11         for(int i = )
--[ 2019.09.03.11.43.05.957.0 ]--
r 11         for(int i = 0)
--[ 2019.09.03.11.43.06.320.0 ]--
r 11         for(int i = 0;)
--[ 2019.09.03.11.43.07.104.0 ]--
r 11         for(int i = 0; )
--[ 2019.09.03.11.43.08.577.0 ]--
r 11         for(int i = 0; i)
--[ 2019.09.03.11.43.08.650.0 ]--
r 11         for(int i = 0; i )
--[ 2019.09.03.11.43.08.808.0 ]--
r 11         for(int i = 0; i <)
--[ 2019.09.03.11.43.08.983.0 ]--
r 11         for(int i = 0; i < )
--[ 2019.09.03.11.43.09.278.0 ]--
r 11         for(int i = 0; i < N)
--[ 2019.09.03.11.43.10.182.0 ]--
r 11         for(int i = 0; i < N;)
--[ 2019.09.03.11.43.10.238.0 ]--
r 11         for(int i = 0; i < N; )
--[ 2019.09.03.11.43.10.342.0 ]--
r 11         for(int i = 0; i < N; i)
--[ 2019.09.03.11.43.10.614.0 ]--
r 11         for(int i = 0; i < N; i+)
--[ 2019.09.03.11.43.10.888.0 ]--
r 11         for(int i = 0; i < N; i)
--[ 2019.09.03.11.43.11.033.0 ]--
r 11         for(int i = 0; i < N; i )
--[ 2019.09.03.11.43.11.052.0 ]--
r 11         for(int i = 0; i < N; i +)
--[ 2019.09.03.11.43.11.149.0 ]--
r 11         for(int i = 0; i < N; i ++)
--[ 2019.09.03.11.43.11.442.0 ]--
r 11         for(int i = 0; i < N; i +)
--[ 2019.09.03.11.43.11.467.0 ]--
r 11         for(int i = 0; i < N; i )
--[ 2019.09.03.11.43.11.548.0 ]--
r 11         for(int i = 0; i < N; i)
--[ 2019.09.03.11.43.11.709.0 ]--
r 11         for(int i = 0; i < N; i+)
--[ 2019.09.03.11.43.11.862.0 ]--
r 11         for(int i = 0; i < N; i++)
--[ 2019.09.03.11.43.12.667.0 ]--
r 11         for(int i = 0; i < N; i++){
--[ 2019.09.03.11.43.13.368.0 ]--
+ 12 
+ 13 }
--[ 2019.09.03.11.43.13.401.0 ]--
r 13         }
--[ 2019.09.03.11.43.13.420.0 ]--
r 12             
--[ 2019.09.03.11.43.14.253.0 ]--
r 12             f
--[ 2019.09.03.11.43.14.300.0 ]--
r 12             fo
--[ 2019.09.03.11.43.14.430.0 ]--
r 12             for
--[ 2019.09.03.11.43.14.597.0 ]--
r 12             for 
--[ 2019.09.03.11.43.15.146.0 ]--
r 12             for
--[ 2019.09.03.11.43.15.312.0 ]--
r 12             for()
--[ 2019.09.03.11.43.15.556.0 ]--
r 12             for(i)
--[ 2019.09.03.11.43.15.603.0 ]--
r 12             for(in)
--[ 2019.09.03.11.43.15.668.0 ]--
r 12             for(int)
--[ 2019.09.03.11.43.15.737.0 ]--
r 12             for(int )
--[ 2019.09.03.11.43.16.334.0 ]--
r 12             for(int j)
--[ 2019.09.03.11.43.16.422.0 ]--
r 12             for(int j )
--[ 2019.09.03.11.43.16.549.0 ]--
r 12             for(int j =)
--[ 2019.09.03.11.43.16.623.0 ]--
r 12             for(int j = )
--[ 2019.09.03.11.43.16.757.0 ]--
r 12             for(int j = 0)
--[ 2019.09.03.11.43.17.952.0 ]--
r 12             for(int j = 0;)
--[ 2019.09.03.11.43.18.316.0 ]--
r 12             for(int j = 0; )
--[ 2019.09.03.11.43.18.404.0 ]--
r 12             for(int j = 0; i)
--[ 2019.09.03.11.43.18.492.0 ]--
r 12             for(int j = 0; i )
--[ 2019.09.03.11.43.18.781.0 ]--
r 12             for(int j = 0; i <)
--[ 2019.09.03.11.43.19.105.0 ]--
r 12             for(int j = 0; i )
--[ 2019.09.03.11.43.19.192.0 ]--
r 12             for(int j = 0; i)
--[ 2019.09.03.11.43.19.301.0 ]--
r 12             for(int j = 0; )
--[ 2019.09.03.11.43.19.516.0 ]--
r 12             for(int j = 0; j)
--[ 2019.09.03.11.43.19.541.0 ]--
r 12             for(int j = 0; j )
--[ 2019.09.03.11.43.19.658.0 ]--
r 12             for(int j = 0; j <)
--[ 2019.09.03.11.43.20.027.0 ]--
r 12             for(int j = 0; j < n)
--[ 2019.09.03.11.43.20.729.0 ]--
r 12             for(int j = 0; j < n;)
--[ 2019.09.03.11.43.20.830.0 ]--
r 12             for(int j = 0; j < n; )
--[ 2019.09.03.11.43.21.318.0 ]--
r 12             for(int j = 0; j < n; i)
--[ 2019.09.03.11.43.21.451.0 ]--
r 12             for(int j = 0; j < n; i )
--[ 2019.09.03.11.43.21.562.0 ]--
r 12             for(int j = 0; j < n; i +)
--[ 2019.09.03.11.43.21.737.0 ]--
r 12             for(int j = 0; j < n; i ++)
--[ 2019.09.03.11.43.22.150.0 ]--
r 12             for(int j = 0; j < n; i +)
--[ 2019.09.03.11.43.22.245.0 ]--
r 12             for(int j = 0; j < n; i )
--[ 2019.09.03.11.43.22.363.0 ]--
r 12             for(int j = 0; j < n; i)
--[ 2019.09.03.11.43.22.636.0 ]--
r 12             for(int j = 0; j < n; )
--[ 2019.09.03.11.43.22.665.0 ]--
r 12             for(int j = 0; j < n; j)
--[ 2019.09.03.11.43.22.827.0 ]--
r 12             for(int j = 0; j < n; j+)
--[ 2019.09.03.11.43.23.099.0 ]--
r 12             for(int j = 0; j < n; j++)
--[ 2019.09.03.11.43.24.641.0 ]--
r 12             for(int j = 0; j < ; j++)
--[ 2019.09.03.11.43.24.823.0 ]--
r 12             for(int j = 0; j < N; j++)
--[ 2019.09.03.11.43.26.527.0 ]--
r 12             for(int j = 0; j < N; j++){
--[ 2019.09.03.11.43.26.690.0 ]--
+ 13 
+ 14 }
--[ 2019.09.03.11.43.26.715.0 ]--
r 14             }
--[ 2019.09.03.11.43.26.735.0 ]--
r 13                 
--[ 2019.09.03.11.43.31.599.0 ]--
r 13                 a
--[ 2019.09.03.11.43.31.691.0 ]--
r 13                 a[]
--[ 2019.09.03.11.43.31.767.0 ]--
r 13                 a[i]
--[ 2019.09.03.11.43.32.129.0 ]--
r 13                 a[i][]
--[ 2019.09.03.11.43.32.679.0 ]--
r 13                 a[i][j]
--[ 2019.09.03.11.43.33.501.0 ]--
r 13                 a[i][j].
--[ 2019.09.03.11.43.34.872.0 ]--
r 13                 a[i][j].i
--[ 2019.09.03.11.43.34.908.0 ]--
r 13                 a[i][j].is
--[ 2019.09.03.11.43.35.425.0 ]--
r 13                 a[i][j].is 
--[ 2019.09.03.11.43.35.535.0 ]--
r 13                 a[i][j].is
--[ 2019.09.03.11.43.35.786.0 ]--
r 13                 a[i][j].
--[ 2019.09.03.11.43.36.403.0 ]--
r 13                 a[i][j]
--[ 2019.09.03.11.43.36.651.0 ]--
r 13                 a[i][j
--[ 2019.09.03.11.43.36.793.0 ]--
r 13                 a[i][
--[ 2019.09.03.11.43.36.887.0 ]--
r 13                 a[i]
--[ 2019.09.03.11.43.36.993.0 ]--
r 13                 a[i
--[ 2019.09.03.11.43.37.228.0 ]--
r 13                 a[
--[ 2019.09.03.11.43.37.248.0 ]--
r 13                 a
--[ 2019.09.03.11.43.37.358.0 ]--
r 13                 
--[ 2019.09.03.11.43.37.673.0 ]--
r 13                 b
--[ 2019.09.03.11.43.37.874.0 ]--
r 13                 ba
--[ 2019.09.03.11.43.38.163.0 ]--
r 13                 b
--[ 2019.09.03.11.43.38.324.0 ]--
r 13                 bo
--[ 2019.09.03.11.43.38.389.0 ]--
r 13                 boa
--[ 2019.09.03.11.43.38.450.0 ]--
r 13                 boar
--[ 2019.09.03.11.43.38.579.0 ]--
r 13                 board
--[ 2019.09.03.11.43.38.715.0 ]--
r 13                 board[]
--[ 2019.09.03.11.43.39.294.0 ]--
r 13                 board[ ]
--[ 2019.09.03.11.43.39.370.0 ]--
r 13                 board[]
--[ 2019.09.03.11.43.40.025.0 ]--
r 13                 board[i]
--[ 2019.09.03.11.43.40.214.0 ]--
r 13                 board[i[]]
--[ 2019.09.03.11.43.40.926.0 ]--
r 13                 board[i]
--[ 2019.09.03.11.43.41.818.0 ]--
r 13                 board[i][]
--[ 2019.09.03.11.43.42.270.0 ]--
r 13                 board[i][j]
--[ 2019.09.03.11.43.43.557.0 ]--
r 13                 board[i][j] 
--[ 2019.09.03.11.43.43.606.0 ]--
r 13                 board[i][j]
--[ 2019.09.03.11.45.44.723.0 ]--
- 11
- 11
- 11
- 11
r 11 
--[ 2019.09.03.11.45.45.227.0 ]--
- 11
--[ 2019.09.03.12.35.22.494.0 ]--
r 10         board = new i[N][N];
--[ 2019.09.03.12.35.22.829.0 ]--
r 10         board = new in[N][N];
--[ 2019.09.03.12.35.22.921.0 ]--
r 10         board = new int[N][N];
--[ 2019.09.03.12.35.23.497.0 ]--
r 10         board = new int [N][N];
--[ 2019.09.03.12.35.23.535.0 ]--
r 10         board = new int[N][N];
--[ 2019.09.03.12.35.28.391.0 ]--
r 7     i[][] board;
--[ 2019.09.03.12.35.28.546.0 ]--
r 7     in[][] board;
--[ 2019.09.03.12.35.28.572.0 ]--
r 7     int[][] board;
--[ 2019.09.03.12.39.32.386.0 ]--
- 4
--[ 2019.09.03.12.39.32.786.0 ]--
- 4
--[ 2019.09.03.12.41.14.001.0 ]--
r 5     Pint[][] board;
--[ 2019.09.03.12.41.14.122.0 ]--
r 5     PRint[][] board;
--[ 2019.09.03.12.41.14.215.0 ]--
r 5     PRIint[][] board;
--[ 2019.09.03.12.41.14.572.0 ]--
r 5     PRIVint[][] board;
--[ 2019.09.03.12.41.14.761.0 ]--
r 5     PRIVEint[][] board;
--[ 2019.09.03.12.41.16.145.0 ]--
r 5     int[][] board;
--[ 2019.09.03.12.41.16.408.0 ]--
r 5     iint[][] board;
--[ 2019.09.03.12.41.16.504.0 ]--
r 5     irint[][] board;
--[ 2019.09.03.12.41.16.615.0 ]--
r 5     irpint[][] board;
--[ 2019.09.03.12.41.17.109.0 ]--
r 5     irint[][] board;
--[ 2019.09.03.12.41.17.237.0 ]--
r 5     iint[][] board;
--[ 2019.09.03.12.41.17.724.0 ]--
r 5     int[][] board;
--[ 2019.09.03.12.41.17.836.0 ]--
r 5     pint[][] board;
--[ 2019.09.03.12.41.17.972.0 ]--
r 5     print[][] board;
--[ 2019.09.03.12.41.18.058.0 ]--
r 5     priint[][] board;
--[ 2019.09.03.12.41.18.365.0 ]--
r 5     privint[][] board;
--[ 2019.09.03.12.41.18.511.0 ]--
r 5     privaint[][] board;
--[ 2019.09.03.12.41.18.585.0 ]--
r 5     privatint[][] board;
--[ 2019.09.03.12.41.18.919.0 ]--
r 5     privateint[][] board;
--[ 2019.09.03.12.41.20.570.0 ]--
r 5     private int[][] board;
--[ 2019.09.03.12.48.01.818.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.03.12.48.34.498.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.03.12.49.06.472.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.03.12.49.56.289.0 ]--
r 8         /board = new int[N][N];
--[ 2019.09.03.12.49.56.417.0 ]--
r 8         //board = new int[N][N];
--[ 2019.09.03.12.49.59.287.0 ]--
r 5     /private int[][] board;
--[ 2019.09.03.12.49.59.414.0 ]--
r 5     //private int[][] board;
--[ 2019.09.03.12.50.04.192.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.03.12.50.35.537.0 ]--
r 5     private int[][] board;
--[ 2019.09.03.12.50.37.890.0 ]--
r 8         board = new int[N][N];
--[ 2019.09.03.15.24.45.316.0 ]--
+ 16         
--[ 2019.09.03.15.24.46.134.0 ]--
r 16         i
--[ 2019.09.03.15.24.46.248.0 ]--
r 16         if
--[ 2019.09.03.15.24.46.402.0 ]--
r 16         if 
--[ 2019.09.03.15.24.46.913.0 ]--
r 16         if b
--[ 2019.09.03.15.24.47.015.0 ]--
r 16         if bo
--[ 2019.09.03.15.24.47.046.0 ]--
r 16         if boa
--[ 2019.09.03.15.24.47.104.0 ]--
r 16         if boar
--[ 2019.09.03.15.24.47.267.0 ]--
r 16         if board
--[ 2019.09.03.15.24.47.357.0 ]--
r 16         if board[]
--[ 2019.09.03.15.24.48.814.0 ]--
r 16         if board[ ]
--[ 2019.09.03.15.24.48.855.0 ]--
r 16         if board[]
--[ 2019.09.03.15.24.51.335.0 ]--
r 16         if board[r]
--[ 2019.09.03.15.24.51.434.0 ]--
r 16         if board[ro]
--[ 2019.09.03.15.24.51.489.0 ]--
r 16         if board[row]
--[ 2019.09.03.15.24.51.771.0 ]--
r 16         if board[row][]
--[ 2019.09.03.15.24.51.874.0 ]--
r 16         if board[row][c]
--[ 2019.09.03.15.24.51.949.0 ]--
r 16         if board[row][co]
--[ 2019.09.03.15.24.52.138.0 ]--
r 16         if board[row][col]
--[ 2019.09.03.15.24.52.941.0 ]--
r 16         if board[row][col] 
--[ 2019.09.03.15.24.53.015.0 ]--
r 16         if board[row][col] =
--[ 2019.09.03.15.24.53.140.0 ]--
r 16         if board[row][col] ==
--[ 2019.09.03.15.24.53.198.0 ]--
r 16         if board[row][col] == 
--[ 2019.09.03.15.24.53.463.0 ]--
r 16         if board[row][col] ==
--[ 2019.09.03.15.24.53.618.0 ]--
r 16         if board[row][col] =
--[ 2019.09.03.15.24.53.750.0 ]--
r 16         if board[row][col] 
--[ 2019.09.03.15.24.54.230.0 ]--
r 16         if board[row][col]
--[ 2019.09.03.15.24.54.563.0 ]--
r 16         if board[row][col])
--[ 2019.09.03.15.25.10.820.0 ]--
r 16         if (board[row][col])
--[ 2019.09.03.15.25.18.641.0 ]--
r 16         if (board[row][col]) 
--[ 2019.09.03.15.25.18.827.0 ]--
r 16         if (board[row][col]) =
--[ 2019.09.03.15.25.18.937.0 ]--
r 16         if (board[row][col]) ==
--[ 2019.09.03.15.25.19.064.0 ]--
r 16         if (board[row][col]) == 
--[ 2019.09.03.15.25.22.280.0 ]--
r 16         if (board[row][col]) == 1
--[ 2019.09.03.15.25.23.647.0 ]--
r 16         if (board[row][col]) == 1{
--[ 2019.09.03.15.25.23.853.0 ]--
+ 17 
+ 18 }
--[ 2019.09.03.15.25.23.886.0 ]--
r 18         }
--[ 2019.09.03.15.25.23.913.0 ]--
r 17             
--[ 2019.09.03.15.25.24.059.0 ]--
+ 17             
--[ 2019.09.03.15.25.24.158.0 ]--
r 18             }
--[ 2019.09.03.15.25.24.165.0 ]--
r 16         if (board[row][col]) == 1 {
--[ 2019.09.03.15.25.24.167.0 ]--
r 17 
r 18         }
--[ 2019.09.03.15.25.31.580.0 ]--
r 16         if (board[row][col])  {
--[ 2019.09.03.15.25.31.720.0 ]--
r 16         if (board[row][col]) {
--[ 2019.09.03.15.25.32.797.0 ]--
r 16         if (board[row][col] ) {
--[ 2019.09.03.15.25.32.928.0 ]--
r 16         if (board[row][col] =) {
--[ 2019.09.03.15.25.33.038.0 ]--
r 16         if (board[row][col] ==) {
--[ 2019.09.03.15.25.33.191.0 ]--
r 16         if (board[row][col] == ) {
--[ 2019.09.03.15.25.33.202.0 ]--
r 16         if (board[row][col] == 1) {
--[ 2019.09.03.15.25.34.360.0 ]--
r 16         if (board[row][col] == 1 ) {
--[ 2019.09.03.15.25.34.406.0 ]--
r 16         if (board[row][col] == 1) {
--[ 2019.09.03.15.25.35.871.0 ]--
r 18         
--[ 2019.09.03.15.25.36.174.0 ]--
- 17
r 17             
--[ 2019.09.03.15.25.36.379.0 ]--
- 17
--[ 2019.09.03.15.25.36.758.0 ]--
r 16         if (board[row][col] == 1) 
--[ 2019.09.03.15.25.37.651.0 ]--
r 16         if (board[row][col] == 1)
--[ 2019.09.03.15.25.41.008.0 ]--
r 17         
--[ 2019.09.03.15.25.41.374.0 ]--
- 17
--[ 2019.09.03.15.25.41.660.0 ]--
r 16         if (board[row][col] == 1
--[ 2019.09.03.15.25.42.620.0 ]--
r 16         if (board[row][col] == 1)
--[ 2019.09.03.15.25.42.897.0 ]--
r 16         if (board[row][col] == 1){
--[ 2019.09.03.15.25.43.155.0 ]--
+ 17 
+ 18 }
--[ 2019.09.03.15.25.43.179.0 ]--
r 18         }
--[ 2019.09.03.15.25.43.188.0 ]--
r 17             
--[ 2019.09.03.15.25.43.949.0 ]--
r 17             }
--[ 2019.09.03.15.25.43.977.0 ]--
r 16         if (board[row][col] == 1) {
--[ 2019.09.03.15.25.43.988.0 ]--
r 17         }
--[ 2019.09.03.15.25.45.387.0 ]--
r 16         if (board[row][col] == 1){
r 17             }
--[ 2019.09.03.15.25.46.575.0 ]--
+ 17             
r 18         }
--[ 2019.09.03.15.25.47.279.0 ]--
r 18             }
--[ 2019.09.03.15.25.49.197.0 ]--
- 17
--[ 2019.09.03.15.25.49.593.0 ]--
r 16         if (board[row][col] == 1)
--[ 2019.09.03.15.25.50.886.0 ]--
r 18         
--[ 2019.09.03.15.25.51.149.0 ]--
- 18
--[ 2019.09.03.15.25.51.325.0 ]--
r 17             
--[ 2019.09.03.15.25.51.366.0 ]--
- 17
--[ 2019.09.03.15.25.51.824.0 ]--
r 16         if (board[row][col] == 1
--[ 2019.09.03.15.25.52.798.0 ]--
r 16         if (board[row][col] == 1)
--[ 2019.09.03.15.25.53.034.0 ]--
r 16         if (board[row][col] == 1){
--[ 2019.09.03.15.25.53.331.0 ]--
+ 17 
+ 18 }
--[ 2019.09.03.15.25.53.341.0 ]--
r 18         }
--[ 2019.09.03.15.25.53.361.0 ]--
r 17             
--[ 2019.09.03.15.25.56.994.0 ]--
r 17             r
--[ 2019.09.03.15.25.57.068.0 ]--
r 17             re
--[ 2019.09.03.15.25.57.180.0 ]--
r 17             ret
--[ 2019.09.03.15.25.57.218.0 ]--
r 17             retu
--[ 2019.09.03.15.25.57.367.0 ]--
r 17             retur
--[ 2019.09.03.15.25.57.419.0 ]--
r 17             return
--[ 2019.09.03.15.25.57.462.0 ]--
r 17             return 
--[ 2019.09.03.15.25.57.766.0 ]--
r 17             return t
--[ 2019.09.03.15.25.57.903.0 ]--
r 17             return tr
--[ 2019.09.03.15.25.57.969.0 ]--
r 17             return tru
--[ 2019.09.03.15.25.58.050.0 ]--
r 17             return true
--[ 2019.09.03.15.26.02.040.0 ]--
r 17             return true;
--[ 2019.09.03.15.26.02.965.0 ]--
r 18         }e
--[ 2019.09.03.15.26.03.079.0 ]--
r 18         }el
--[ 2019.09.03.15.26.03.144.0 ]--
r 18         }els
--[ 2019.09.03.15.26.03.272.0 ]--
r 18         }else
--[ 2019.09.03.15.26.04.361.0 ]--
r 18         }els
--[ 2019.09.03.15.26.04.457.0 ]--
r 18         }el
--[ 2019.09.03.15.26.04.571.0 ]--
r 18         }e
--[ 2019.09.03.15.26.04.735.0 ]--
r 18         }
--[ 2019.09.03.15.26.05.535.0 ]--
+ 19         
--[ 2019.09.03.15.26.05.615.0 ]--
r 19         e
--[ 2019.09.03.15.26.05.959.0 ]--
r 19         el
--[ 2019.09.03.15.26.05.980.0 ]--
r 19         els
--[ 2019.09.03.15.26.06.054.0 ]--
r 19         else
--[ 2019.09.03.15.26.06.307.0 ]--
r 19         else{
--[ 2019.09.03.15.26.06.479.0 ]--
+ 20 
+ 21 }
--[ 2019.09.03.15.26.06.489.0 ]--
r 21         }
--[ 2019.09.03.15.26.06.506.0 ]--
r 20             
--[ 2019.09.03.15.26.10.711.0 ]--
r 22         
--[ 2019.09.03.15.26.11.394.0 ]--
r 20         return false;    
--[ 2019.09.03.15.26.11.423.0 ]--
r 20             return false;    
--[ 2019.09.03.15.26.15.085.0 ]--
r 20             return false;
r 22 
--[ 2019.09.03.15.30.27.676.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.03.15.30.44.979.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.03.15.31.10.222.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.03.15.31.23.184.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.03.15.51.08.536.0 ]--
DisposeComponent
--[ 2019.09.04.14.28.33.722.0 ]--
NewLogger: P01_Hex
Version: 1.3
--[ 2019.09.04.14.28.33.994.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2019.09.04.14.28.33.994.1 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2019.09.04.14.28.33.995.0 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/
public class HexBoard {
    private int[][] board;

    public HexBoard(int N) {
        board = new int[N][N];
    }

    public int getPlayer(int row, int col) {
        return 0;
    }
    
    public boolean isSet(int row, int col) {
        if (board[row][col] == 1){
            return true;
        }
        else{
            return false;
        }

    }

    public boolean isOnWinningPath(int row, int col) {
        return false;
    }

    public void setTile(int row, int col, int player) {
    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {
        return 0;
    }
}

--[ 2019.09.04.14.28.33.995.1 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public static void main(String[] args) {
    }
}

--[ 2019.09.04.14.28.33.995.2 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2019.09.04.14.28.33.995.3 ]--
InitFile: /.cos265


--[ 2019.09.04.14.28.33.996.0 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.09.04.14.32.21.139.0 ]--
DisposeComponent
--[ 2019.09.04.19.02.52.699.0 ]--
NewLogger: P01_Hex
Version: 1.3
--[ 2019.09.04.19.02.52.783.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2019.09.04.19.02.52.800.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2019.09.04.19.02.52.800.1 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/
public class HexBoard {
    private int[][] board;

    public HexBoard(int N) {
        board = new int[N][N];
    }

    public int getPlayer(int row, int col) {
        return 0;
    }
    
    public boolean isSet(int row, int col) {
        if (board[row][col] == 1){
            return true;
        }
        else{
            return false;
        }

    }

    public boolean isOnWinningPath(int row, int col) {
        return false;
    }

    public void setTile(int row, int col, int player) {
    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {
        return 0;
    }
}

--[ 2019.09.04.19.02.52.801.0 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public static void main(String[] args) {
    }
}

--[ 2019.09.04.19.02.52.801.1 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2019.09.04.19.02.52.802.0 ]--
InitFile: /.cos265


--[ 2019.09.04.19.02.52.802.1 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.09.04.19.05.42.483.0 ]--
:/src/HexBoard.java
+ 30         
--[ 2019.09.04.19.06.02.900.0 ]--
r 42         return ;
--[ 2019.09.04.19.06.03.091.0 ]--
r 42         return N;
--[ 2019.09.04.19.06.06.309.0 ]--
r 30 
--[ 2019.09.04.19.06.09.800.0 ]--
UpdateTree (AD): 0 1
- /out/production/P01_Hex/HexBoard.class

--[ 2019.09.04.19.06.09.800.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@50865823
--[ 2019.09.04.19.06.14.209.0 ]--
r 42         return ;
--[ 2019.09.04.19.06.14.211.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.04.19.06.14.256.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.04.19.06.14.414.0 ]--
r 42         return 0;
--[ 2019.09.04.19.06.14.417.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.04.19.06.14.441.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.04.19.06.16.356.0 ]--
r 42         return 0 ;
--[ 2019.09.04.19.06.16.357.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.04.19.06.16.360.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.04.19.06.16.421.0 ]--
r 42         return 0;
--[ 2019.09.04.19.06.16.421.1 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.04.19.06.16.424.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.04.19.06.45.633.0 ]--
UpdateTree (AD): 1 0
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.04.19.06.45.634.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.04.19.09.21.028.0 ]--
- 30
--[ 2019.09.04.19.09.21.188.0 ]--
+ 30         
--[ 2019.09.04.19.09.45.035.0 ]--
r 30          
--[ 2019.09.04.19.09.45.090.0 ]--
r 30         
--[ 2019.09.04.19.09.45.304.0 ]--
r 30         b
--[ 2019.09.04.19.09.45.445.0 ]--
r 30         boa
--[ 2019.09.04.19.09.45.519.0 ]--
r 30         boar
--[ 2019.09.04.19.09.45.826.0 ]--
r 30         board
--[ 2019.09.04.19.09.45.871.0 ]--
r 30         board[]
--[ 2019.09.04.19.09.46.846.0 ]--
r 30         board[r]
--[ 2019.09.04.19.09.46.950.0 ]--
r 30         board[ro]
--[ 2019.09.04.19.09.47.004.0 ]--
r 30         board[row]
--[ 2019.09.04.19.09.47.513.0 ]--
r 30         board[row][]
--[ 2019.09.04.19.09.47.665.0 ]--
r 30         board[row][c]
--[ 2019.09.04.19.09.47.811.0 ]--
r 30         board[row][co]
--[ 2019.09.04.19.09.48.591.0 ]--
r 30         board[row][col]
--[ 2019.09.04.19.09.49.482.0 ]--
r 30         board[row][col] 
--[ 2019.09.04.19.09.49.559.0 ]--
r 30         board[row][col] =
--[ 2019.09.04.19.09.49.732.0 ]--
r 30         board[row][col] = 
--[ 2019.09.04.19.09.51.255.0 ]--
r 30         board[row][col] =  
--[ 2019.09.04.19.09.51.300.0 ]--
r 30         board[row][col] = 
--[ 2019.09.04.19.09.51.450.0 ]--
r 30         board[row][col] = 1
--[ 2019.09.04.19.09.52.409.0 ]--
r 30         board[row][col] = 1;
--[ 2019.09.04.19.09.53.143.0 ]--
r 30         board[row][col] = 1; 
--[ 2019.09.04.19.09.53.221.0 ]--
r 30         board[row][col] = 1;
--[ 2019.09.04.19.09.56.980.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.04.19.10.39.744.0 ]--
r 30         
--[ 2019.09.04.19.10.40.126.0 ]--
- 30
--[ 2019.09.04.19.10.40.369.0 ]--
r 29     public void setTile(int row, int col, int player) 
--[ 2019.09.04.19.10.41.213.0 ]--
+ 29     public void setTile(int row, int col, int player) {
r 30         board[row][col] = 1;
--[ 2019.09.04.19.10.47.635.0 ]--
r 30         board[row][col] = 1; 
--[ 2019.09.04.19.10.47.835.0 ]--
r 30         board[row][col] = 
--[ 2019.09.04.19.10.48.003.0 ]--
r 30         board[row][col] =  
--[ 2019.09.04.19.10.48.167.0 ]--
r 30         
--[ 2019.09.04.19.10.48.279.0 ]--
r 30          
--[ 2019.09.04.19.10.48.421.0 ]--
r 30         
--[ 2019.09.04.19.10.48.700.0 ]--
- 30
--[ 2019.09.04.19.10.48.902.0 ]--
+ 30 
--[ 2019.09.04.19.10.49.813.0 ]--
r 42         return 0 ;
--[ 2019.09.04.19.10.50.238.0 ]--
r 42         return ;
--[ 2019.09.04.19.10.50.393.0 ]--
r 42         return N;
--[ 2019.09.04.19.10.50.755.0 ]--
r 30         
r 42         return ;
--[ 2019.09.04.19.10.51.141.0 ]--
r 42         return 0;
--[ 2019.09.04.19.10.52.051.0 ]--
- 30
--[ 2019.09.04.19.11.37.804.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.04.19.13.03.292.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.04.19.13.13.588.0 ]--
r 16         if (board[row][col] == 1 ){
--[ 2019.09.04.19.13.14.928.0 ]--
r 16         if (board[row][col] == 1 |){
--[ 2019.09.04.19.13.15.012.0 ]--
r 16         if (board[row][col] == 1 ||){
--[ 2019.09.04.19.13.15.455.0 ]--
r 16         if (board[row][col] == 1 || ){
--[ 2019.09.04.19.13.15.664.0 ]--
r 16         if (board[row][col] == 1 || b){
--[ 2019.09.04.19.13.15.710.0 ]--
r 16         if (board[row][col] == 1 || bo){
--[ 2019.09.04.19.13.15.839.0 ]--
r 16         if (board[row][col] == 1 || boa){
--[ 2019.09.04.19.13.15.944.0 ]--
r 16         if (board[row][col] == 1 || boar){
--[ 2019.09.04.19.13.16.154.0 ]--
r 16         if (board[row][col] == 1 || board){
--[ 2019.09.04.19.13.16.271.0 ]--
r 16         if (board[row][col] == 1 || board[]){
--[ 2019.09.04.19.13.17.177.0 ]--
r 16         if (board[row][col] == 1 || board[r]){
--[ 2019.09.04.19.13.17.270.0 ]--
r 16         if (board[row][col] == 1 || board[ro]){
--[ 2019.09.04.19.13.17.312.0 ]--
r 16         if (board[row][col] == 1 || board[row]){
--[ 2019.09.04.19.13.17.530.0 ]--
r 16         if (board[row][col] == 1 || board[row][]){
--[ 2019.09.04.19.13.17.858.0 ]--
r 16         if (board[row][col] == 1 || board[row][o]){
--[ 2019.09.04.19.13.18.055.0 ]--
r 16         if (board[row][col] == 1 || board[row][ol]){
--[ 2019.09.04.19.13.18.265.0 ]--
r 16         if (board[row][col] == 1 || board[row][o]){
--[ 2019.09.04.19.13.18.373.0 ]--
r 16         if (board[row][col] == 1 || board[row][]){
--[ 2019.09.04.19.13.18.458.0 ]--
r 16         if (board[row][col] == 1 || board[row][c]){
--[ 2019.09.04.19.13.18.542.0 ]--
r 16         if (board[row][col] == 1 || board[row][co]){
--[ 2019.09.04.19.13.18.696.0 ]--
r 16         if (board[row][col] == 1 || board[row][col]){
--[ 2019.09.04.19.13.19.300.0 ]--
r 16         if (board[row][col] == 1 || board[row][col] ){
--[ 2019.09.04.19.13.19.451.0 ]--
r 16         if (board[row][col] == 1 || board[row][col] =){
--[ 2019.09.04.19.13.19.588.0 ]--
r 16         if (board[row][col] == 1 || board[row][col] ==){
--[ 2019.09.04.19.13.20.237.0 ]--
r 16         if (board[row][col] == 1 || board[row][col] == ){
--[ 2019.09.04.19.13.20.354.0 ]--
r 16         if (board[row][col] == 1 || board[row][col] == 2){
--[ 2019.09.04.19.13.21.557.0 ]--
r 16         if (board[row][col] == 1 || board[row][col] == 2 ){
--[ 2019.09.04.19.13.21.602.0 ]--
r 16         if (board[row][col] == 1 || board[row][col] == 2){
--[ 2019.09.04.19.13.59.393.0 ]--
r 29     public void setTile(int row, int col, int player) { 
--[ 2019.09.04.19.13.59.445.0 ]--
r 29     public void setTile(int row, int col, int player) {
--[ 2019.09.04.19.13.59.669.0 ]--
+ 30         
--[ 2019.09.04.19.14.00.694.0 ]--
r 30         i
--[ 2019.09.04.19.14.00.744.0 ]--
r 30         if
--[ 2019.09.04.19.14.01.025.0 ]--
r 30         if 
--[ 2019.09.04.19.14.01.320.0 ]--
r 30         if p
--[ 2019.09.04.19.14.01.396.0 ]--
r 30         if pa
--[ 2019.09.04.19.14.01.827.0 ]--
r 30         if p
--[ 2019.09.04.19.14.01.962.0 ]--
r 30         if pl
--[ 2019.09.04.19.14.02.045.0 ]--
r 30         if pla
--[ 2019.09.04.19.14.02.135.0 ]--
r 30         if play
--[ 2019.09.04.19.14.02.203.0 ]--
r 30         if playe
--[ 2019.09.04.19.14.02.318.0 ]--
r 30         if player
--[ 2019.09.04.19.14.03.117.0 ]--
r 30         if player 
--[ 2019.09.04.19.14.04.230.0 ]--
r 30         if player
--[ 2019.09.04.19.14.14.339.0 ]--
r 30         if 
--[ 2019.09.04.19.14.14.717.0 ]--
r 30         if
--[ 2019.09.04.19.14.15.091.0 ]--
r 30         if()
--[ 2019.09.04.19.14.15.294.0 ]--
r 30         if(p)
--[ 2019.09.04.19.14.15.364.0 ]--
r 30         if(pl)
--[ 2019.09.04.19.14.15.418.0 ]--
r 30         if(pla)
--[ 2019.09.04.19.14.15.497.0 ]--
r 30         if(play)
--[ 2019.09.04.19.14.15.563.0 ]--
r 30         if(playe)
--[ 2019.09.04.19.14.15.665.0 ]--
r 30         if(player)
--[ 2019.09.04.19.14.15.753.0 ]--
r 30         if(player )
--[ 2019.09.04.19.14.16.466.0 ]--
r 30         if(player =)
--[ 2019.09.04.19.14.16.579.0 ]--
r 30         if(player ==)
--[ 2019.09.04.19.14.16.680.0 ]--
r 30         if(player == )
--[ 2019.09.04.19.14.16.812.0 ]--
r 30         if(player == 1)
--[ 2019.09.04.19.14.18.577.0 ]--
r 30         if(player == 1){
--[ 2019.09.04.19.14.18.792.0 ]--
+ 31 
+ 32 }
--[ 2019.09.04.19.14.18.881.0 ]--
r 32         }
--[ 2019.09.04.19.14.18.904.0 ]--
r 31             
--[ 2019.09.04.19.14.19.502.0 ]--
+ 31             
--[ 2019.09.04.19.14.21.440.0 ]--
- 31
--[ 2019.09.04.19.14.21.656.0 ]--
- 31
--[ 2019.09.04.19.14.22.187.0 ]--
+ 31             
--[ 2019.09.04.19.14.24.548.0 ]--
r 31             b
--[ 2019.09.04.19.14.24.615.0 ]--
r 31             bo
--[ 2019.09.04.19.14.24.692.0 ]--
r 31             boa
--[ 2019.09.04.19.14.24.763.0 ]--
r 31             boar
--[ 2019.09.04.19.14.24.899.0 ]--
r 31             board
--[ 2019.09.04.19.14.24.998.0 ]--
r 31             board[]
--[ 2019.09.04.19.14.25.551.0 ]--
r 31             board[ ]
--[ 2019.09.04.19.14.25.630.0 ]--
r 31             board[]
--[ 2019.09.04.19.14.26.761.0 ]--
r 31             board[r]
--[ 2019.09.04.19.14.26.846.0 ]--
r 31             board[ro]
--[ 2019.09.04.19.14.26.928.0 ]--
r 31             board[row]
--[ 2019.09.04.19.14.27.948.0 ]--
r 31             board[row][]
--[ 2019.09.04.19.14.28.030.0 ]--
r 31             board[row][c]
--[ 2019.09.04.19.14.28.352.0 ]--
r 31             board[row][cl]
--[ 2019.09.04.19.14.29.158.0 ]--
r 31             board[row][cl
--[ 2019.09.04.19.14.29.251.0 ]--
r 31             board[row][c
--[ 2019.09.04.19.14.29.550.0 ]--
r 31             board[row][co
--[ 2019.09.04.19.14.29.662.0 ]--
r 31             board[row][col
--[ 2019.09.04.19.14.29.845.0 ]--
r 31             board[row][col]
--[ 2019.09.04.19.14.30.715.0 ]--
r 31             board[row][col]=
--[ 2019.09.04.19.14.30.803.0 ]--
r 31             board[row][col]==
--[ 2019.09.04.19.14.30.854.0 ]--
r 31             board[row][col]== 
--[ 2019.09.04.19.14.31.027.0 ]--
r 31             board[row][col]== 1
--[ 2019.09.04.19.14.31.203.0 ]--
r 31             board[row][col]== 
--[ 2019.09.04.19.14.31.284.0 ]--
r 31             board[row][col]==
--[ 2019.09.04.19.14.31.393.0 ]--
r 31             board[row][col]=
--[ 2019.09.04.19.14.31.501.0 ]--
r 31             board[row][col]
--[ 2019.09.04.19.14.31.617.0 ]--
r 31             board[row][col] 
--[ 2019.09.04.19.14.31.683.0 ]--
r 31             board[row][col] =
--[ 2019.09.04.19.14.31.795.0 ]--
r 31             board[row][col] ==
--[ 2019.09.04.19.14.31.848.0 ]--
r 31             board[row][col] == 
--[ 2019.09.04.19.14.31.946.0 ]--
r 31             board[row][col] == 1
--[ 2019.09.04.19.14.32.043.0 ]--
r 31             board[row][col] == 1;
--[ 2019.09.04.19.14.35.811.0 ]--
r 31             board[row][col] = 1;
--[ 2019.09.04.19.14.38.507.0 ]--
+ 33         
--[ 2019.09.04.19.14.38.650.0 ]--
r 33         e
--[ 2019.09.04.19.14.38.759.0 ]--
r 33         el
--[ 2019.09.04.19.14.38.828.0 ]--
r 33         els
--[ 2019.09.04.19.14.38.971.0 ]--
r 33         else
--[ 2019.09.04.19.14.39.976.0 ]--
r 33         else{
--[ 2019.09.04.19.14.40.091.0 ]--
+ 34 
+ 35 }
--[ 2019.09.04.19.14.40.103.0 ]--
r 35         }
--[ 2019.09.04.19.14.40.123.0 ]--
r 34             
--[ 2019.09.04.19.14.40.528.0 ]--
r 34             b
--[ 2019.09.04.19.14.40.620.0 ]--
r 34             bo
--[ 2019.09.04.19.14.40.690.0 ]--
r 34             boa
--[ 2019.09.04.19.14.40.770.0 ]--
r 34             boar
--[ 2019.09.04.19.14.40.918.0 ]--
r 34             board
--[ 2019.09.04.19.14.40.964.0 ]--
r 34             board[]
--[ 2019.09.04.19.14.41.095.0 ]--
r 34             board[r]
--[ 2019.09.04.19.14.41.145.0 ]--
r 34             board[ro]
--[ 2019.09.04.19.14.41.286.0 ]--
r 34             board[row]
--[ 2019.09.04.19.14.41.440.0 ]--
r 34             board[row][]
--[ 2019.09.04.19.14.41.587.0 ]--
r 34             board[row][c]
--[ 2019.09.04.19.14.41.682.0 ]--
r 34             board[row][co]
--[ 2019.09.04.19.14.41.850.0 ]--
r 34             board[row][col]
--[ 2019.09.04.19.14.42.733.0 ]--
r 34             board[row][col] 
--[ 2019.09.04.19.14.42.806.0 ]--
r 34             board[row][col] =
--[ 2019.09.04.19.14.42.892.0 ]--
r 34             board[row][col] = 
--[ 2019.09.04.19.14.43.057.0 ]--
r 34             board[row][col] = 2
--[ 2019.09.04.19.14.43.267.0 ]--
r 34             board[row][col] = 2;
--[ 2019.09.04.19.14.47.154.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.04.19.15.16.306.0 ]--
r 34             
--[ 2019.09.04.19.15.16.767.0 ]--
- 34
- 34
--[ 2019.09.04.19.15.16.796.0 ]--
r 33         
--[ 2019.09.04.19.15.16.837.0 ]--
- 33
--[ 2019.09.04.19.15.16.883.0 ]--
r 31             board[row][col] == 1;
--[ 2019.09.04.19.15.16.946.0 ]--
r 31             board[row][col]
--[ 2019.09.04.19.15.16.979.0 ]--
r 31             board[row][col]== 1
--[ 2019.09.04.19.15.17.010.0 ]--
r 31             board[row][c
--[ 2019.09.04.19.15.17.036.0 ]--
r 31             board[row][cl]
--[ 2019.09.04.19.15.17.097.0 ]--
r 31             board[ ]
--[ 2019.09.04.19.15.17.143.0 ]--
r 31             
--[ 2019.09.04.19.15.17.179.0 ]--
- 31
--[ 2019.09.04.19.15.17.220.0 ]--
+ 31             
+ 32             
--[ 2019.09.04.19.15.17.251.0 ]--
- 31
--[ 2019.09.04.19.15.17.502.0 ]--
- 31
- 31
--[ 2019.09.04.19.15.17.977.0 ]--
r 30         if player 
--[ 2019.09.04.19.15.18.004.0 ]--
r 30         if p
--[ 2019.09.04.19.15.18.025.0 ]--
r 30         if pa
--[ 2019.09.04.19.15.18.059.0 ]--
r 30         
--[ 2019.09.04.19.15.18.090.0 ]--
- 30
--[ 2019.09.04.19.15.18.119.0 ]--
r 29     public void setTile(int row, int col, int player) { 
--[ 2019.09.04.19.15.18.152.0 ]--
r 29     public void setTile(int row, int col, int player) {
--[ 2019.09.04.19.15.18.209.0 ]--
r 16         if (board[row][col] == 1 || board[row][col] == 2 ){
--[ 2019.09.04.19.15.18.251.0 ]--
r 16         if (board[row][col] == 1 || board[row][]){
--[ 2019.09.04.19.15.18.291.0 ]--
r 16         if (board[row][col] == 1 || board[row][ol]){
--[ 2019.09.04.19.15.19.576.0 ]--
r 16         if (board[row][col] == 1){
--[ 2019.09.04.19.20.41.024.0 ]--
DisposeComponent
--[ 2019.09.06.12.57.05.609.0 ]--
NewLogger: P01_Hex
Version: 1.3
--[ 2019.09.06.12.57.05.924.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2019.09.06.12.57.05.925.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2019.09.06.12.57.05.925.1 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/
public class HexBoard {
    private int[][] board;

    public HexBoard(int N) {
        board = new int[N][N];
    }

    public int getPlayer(int row, int col) {
        return 0;
    }
    
    public boolean isSet(int row, int col) {
        if (board[row][col] == 1){
            return true;
        }
        else{
            return false;
        }

    }

    public boolean isOnWinningPath(int row, int col) {
        return false;
    }

    public void setTile(int row, int col, int player) {
    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {
        return 0;
    }
}

--[ 2019.09.06.12.57.05.925.2 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public static void main(String[] args) {
    }
}

--[ 2019.09.06.12.57.05.925.3 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2019.09.06.12.57.05.926.0 ]--
InitFile: /.cos265


--[ 2019.09.06.12.57.05.926.1 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.09.06.12.57.54.901.0 ]--
:/src/HexBoard.java
- 16
- 16
- 16
- 16
- 16
r 16         
--[ 2019.09.06.12.57.55.032.0 ]--
- 16
--[ 2019.09.06.12.57.56.626.0 ]--
+ 16         
--[ 2019.09.06.12.57.57.878.0 ]--
+ 16         
--[ 2019.09.06.12.57.58.361.0 ]--
- 16
--[ 2019.09.06.12.58.11.781.0 ]--
- 16
--[ 2019.09.06.12.58.14.668.0 ]--
- 16
--[ 2019.09.06.12.58.14.981.0 ]--
+ 16         
--[ 2019.09.06.12.58.16.521.0 ]--
r 16         re
--[ 2019.09.06.12.58.16.677.0 ]--
r 16         retu
--[ 2019.09.06.12.58.17.720.0 ]--
r 16         retur
--[ 2019.09.06.12.58.17.884.0 ]--
r 16         return
--[ 2019.09.06.12.58.17.901.0 ]--
r 16         return 
--[ 2019.09.06.12.58.17.924.0 ]--
r 16         return f
--[ 2019.09.06.12.58.18.001.0 ]--
r 16         return fa
--[ 2019.09.06.12.58.18.111.0 ]--
r 16         return fal
--[ 2019.09.06.12.58.18.184.0 ]--
r 16         return fals
--[ 2019.09.06.12.58.18.397.0 ]--
r 16         return false
--[ 2019.09.06.12.58.18.446.0 ]--
r 16         return false;
--[ 2019.09.06.12.58.18.573.0 ]--
r 16         return false; 
--[ 2019.09.06.12.58.18.729.0 ]--
r 16         return false;
--[ 2019.09.06.12.58.19.261.0 ]--
r 16         return false
--[ 2019.09.06.12.58.20.142.0 ]--
r 16         return false;
--[ 2019.09.06.12.58.25.791.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.06.14.00.45.147.0 ]--
r 34     public int numberOfUnsetTiles(i) {
--[ 2019.09.06.14.00.45.199.0 ]--
r 34     public int numberOfUnsetTiles(in) {
--[ 2019.09.06.14.00.45.238.0 ]--
r 34     public int numberOfUnsetTiles(int) {
--[ 2019.09.06.14.00.45.388.0 ]--
r 34     public int numberOfUnsetTiles(int ) {
--[ 2019.09.06.14.00.45.491.0 ]--
r 34     public int numberOfUnsetTiles(int N) {
--[ 2019.09.06.14.00.54.945.0 ]--
+ 35         
--[ 2019.09.06.14.00.56.131.0 ]--
r 35         i
--[ 2019.09.06.14.00.56.177.0 ]--
r 35         in
--[ 2019.09.06.14.00.56.267.0 ]--
r 35         int
--[ 2019.09.06.14.00.56.466.0 ]--
r 35         int 
--[ 2019.09.06.14.00.57.120.0 ]--
r 35         int  
--[ 2019.09.06.14.00.57.243.0 ]--
r 35         int 
--[ 2019.09.06.14.00.57.729.0 ]--
r 35         
--[ 2019.09.06.14.00.59.767.0 ]--
r 35          
--[ 2019.09.06.14.00.59.842.0 ]--
r 35         
--[ 2019.09.06.14.01.03.122.0 ]--
r 35          
--[ 2019.09.06.14.01.03.190.0 ]--
r 35         
--[ 2019.09.06.14.01.10.790.0 ]--
r 35         r
--[ 2019.09.06.14.01.10.836.0 ]--
r 35         re
--[ 2019.09.06.14.01.10.969.0 ]--
r 35         ret
--[ 2019.09.06.14.01.11.046.0 ]--
r 35         retu
--[ 2019.09.06.14.01.11.384.0 ]--
r 35         
--[ 2019.09.06.14.01.11.586.0 ]--
- 35
--[ 2019.09.06.14.01.13.340.0 ]--
r 35         return ;
--[ 2019.09.06.14.01.13.460.0 ]--
r 35         return N;
--[ 2019.09.06.14.01.13.811.0 ]--
r 35         return N ;
--[ 2019.09.06.14.01.13.873.0 ]--
r 35         return N;
--[ 2019.09.06.14.01.18.166.0 ]--
UpdateTree (AD): 0 1
- /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.18.166.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@6eaae728
--[ 2019.09.06.14.01.30.745.0 ]--
r 35         return N ;
--[ 2019.09.06.14.01.30.747.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.30.762.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.31.217.0 ]--
r 35         return ;
--[ 2019.09.06.14.01.31.218.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.31.220.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.31.223.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.31.590.0 ]--
r 35         return 0;
--[ 2019.09.06.14.01.31.591.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.31.594.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.32.499.0 ]--
+ 35         retu
--[ 2019.09.06.14.01.32.499.1 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.32.501.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.32.504.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.32.940.0 ]--
r 35         
--[ 2019.09.06.14.01.32.941.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.32.943.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.32.945.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.32.948.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.33.281.0 ]--
r 35          
--[ 2019.09.06.14.01.33.281.1 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.33.284.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.33.618.0 ]--
r 35         
--[ 2019.09.06.14.01.33.619.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.33.621.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.33.898.0 ]--
r 35          
--[ 2019.09.06.14.01.33.900.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.33.906.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.34.122.0 ]--
r 35         
--[ 2019.09.06.14.01.34.122.1 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.34.125.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.34.370.0 ]--
r 35         int  
--[ 2019.09.06.14.01.34.370.1 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.34.375.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.34.379.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.34.383.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.34.589.0 ]--
r 35         
--[ 2019.09.06.14.01.34.589.1 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.34.592.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.34.594.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.34.596.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.34.874.0 ]--
- 35
--[ 2019.09.06.14.01.34.875.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.34.877.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.35.409.0 ]--
r 34     public int numberOfUnsetTiles() {
--[ 2019.09.06.14.01.35.410.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.35.413.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.36.335.0 ]--
r 16         return false
--[ 2019.09.06.14.01.36.335.1 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.36.338.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.37.959.0 ]--
r 16         return false;
--[ 2019.09.06.14.01.37.961.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.37.967.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoardVisualizer.class
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.42.411.0 ]--
UpdateTree (AD): 1 0
+ /out/production/P01_Hex/HexBoardVisualizer.class

--[ 2019.09.06.14.01.42.411.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.06.20.10.26.144.0 ]--
DisposeComponent
--[ 2019.09.09.12.50.41.697.0 ]--
NewLogger: P01_Hex
Version: 1.3
--[ 2019.09.09.12.50.42.087.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2019.09.09.12.50.42.088.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2019.09.09.12.50.42.088.1 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/
public class HexBoard {
    private int[][] board;

    public HexBoard(int N) {
        board = new int[N][N];
    }

    public int getPlayer(int row, int col) {
        return 0;
    }
    
    public boolean isSet(int row, int col) {
        return false;
    }

    public boolean isOnWinningPath(int row, int col) {
        return false;
    }

    public void setTile(int row, int col, int player) {
    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {
        return 0;
    }
}

--[ 2019.09.09.12.50.42.088.2 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public static void main(String[] args) {
    }
}

--[ 2019.09.09.12.50.42.088.3 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2019.09.09.12.50.42.089.0 ]--
InitFile: /.cos265


--[ 2019.09.09.12.50.42.089.1 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.09.09.12.56.42.962.0 ]--
:/src/HexBoard.java
+ 6     
--[ 2019.09.09.12.56.43.985.0 ]--
r 6     pr
--[ 2019.09.09.12.56.44.215.0 ]--
r 6     priv
--[ 2019.09.09.12.56.44.345.0 ]--
r 6     priva
--[ 2019.09.09.12.56.44.438.0 ]--
r 6     privat
--[ 2019.09.09.12.56.44.518.0 ]--
r 6     private
--[ 2019.09.09.12.56.44.862.0 ]--
r 6     private int
--[ 2019.09.09.12.56.44.936.0 ]--
r 6     private int 
--[ 2019.09.09.12.56.46.117.0 ]--
r 6     private int
--[ 2019.09.09.12.56.46.463.0 ]--
r 6     private int 
--[ 2019.09.09.12.56.47.314.0 ]--
r 6     private int t
--[ 2019.09.09.12.56.47.404.0 ]--
r 6     private int tu
--[ 2019.09.09.12.56.47.456.0 ]--
r 6     private int tur
--[ 2019.09.09.12.56.47.549.0 ]--
r 6     private int turn
--[ 2019.09.09.12.56.47.769.0 ]--
r 6     private int turn;
--[ 2019.09.09.12.56.52.091.0 ]--
+ 13         
--[ 2019.09.09.12.56.55.076.0 ]--
r 13         t
--[ 2019.09.09.12.56.55.157.0 ]--
r 13         tu
--[ 2019.09.09.12.56.55.217.0 ]--
r 13         tur
--[ 2019.09.09.12.56.55.299.0 ]--
r 13         turn
--[ 2019.09.09.12.56.55.363.0 ]--
r 13         turn 
--[ 2019.09.09.12.56.56.209.0 ]--
r 13         turn =
--[ 2019.09.09.12.56.56.274.0 ]--
r 13         turn = 
--[ 2019.09.09.12.56.56.310.0 ]--
r 13         turn = n
--[ 2019.09.09.12.56.56.413.0 ]--
r 13         turn = ne
--[ 2019.09.09.12.56.56.562.0 ]--
r 13         turn = new
--[ 2019.09.09.12.56.56.714.0 ]--
r 13         turn = new 
--[ 2019.09.09.12.56.56.844.0 ]--
r 13         turn = new i
--[ 2019.09.09.12.56.56.928.0 ]--
r 13         turn = new in
--[ 2019.09.09.12.56.57.228.0 ]--
r 13         turn = new int
--[ 2019.09.09.12.57.37.168.0 ]--
r 6     
--[ 2019.09.09.12.57.37.422.0 ]--
- 6
--[ 2019.09.09.12.57.40.325.0 ]--
r 12         i
--[ 2019.09.09.12.57.40.376.0 ]--
r 12         in
--[ 2019.09.09.12.57.40.428.0 ]--
r 12         int
--[ 2019.09.09.12.57.40.511.0 ]--
r 12         int 
--[ 2019.09.09.12.57.40.616.0 ]--
r 12         int t
--[ 2019.09.09.12.57.40.704.0 ]--
r 12         int tu
--[ 2019.09.09.12.57.40.777.0 ]--
r 12         int tur
--[ 2019.09.09.12.57.40.873.0 ]--
r 12         int turn
--[ 2019.09.09.12.57.41.046.0 ]--
r 12         int turn 
--[ 2019.09.09.12.57.41.203.0 ]--
r 12         int turn =
--[ 2019.09.09.12.57.41.285.0 ]--
r 12         int turn = 
--[ 2019.09.09.12.57.41.403.0 ]--
r 12         int turn = 0
--[ 2019.09.09.12.57.41.609.0 ]--
r 12         int turn = 0;
--[ 2019.09.09.12.57.42.207.0 ]--
r 12         int turn = 0; 
--[ 2019.09.09.12.57.42.264.0 ]--
r 12         int turn = 0;
--[ 2019.09.09.12.57.43.046.0 ]--
+ 13         
--[ 2019.09.09.12.57.51.270.0 ]--
r 13         f
--[ 2019.09.09.12.57.51.428.0 ]--
r 13         fo
--[ 2019.09.09.12.57.51.488.0 ]--
r 13         for
--[ 2019.09.09.12.57.52.104.0 ]--
r 13         for()
--[ 2019.09.09.12.57.53.223.0 ]--
r 13         for(i)
--[ 2019.09.09.12.57.53.287.0 ]--
r 13         for(in)
--[ 2019.09.09.12.57.53.798.0 ]--
r 13         for(int)
--[ 2019.09.09.12.57.53.853.0 ]--
r 13         for(int )
--[ 2019.09.09.12.57.53.886.0 ]--
r 13         for(int i)
--[ 2019.09.09.12.57.53.948.0 ]--
r 13         for(int i )
--[ 2019.09.09.12.57.54.081.0 ]--
r 13         for(int i =)
--[ 2019.09.09.12.57.54.099.0 ]--
r 13         for(int i = )
--[ 2019.09.09.12.57.54.243.0 ]--
r 13         for(int i = 0)
--[ 2019.09.09.12.57.54.421.0 ]--
r 13         for(int i = 0;)
--[ 2019.09.09.12.57.54.818.0 ]--
r 13         for(int i = 0; )
--[ 2019.09.09.12.57.55.928.0 ]--
r 13         for(int i = 0; i)
--[ 2019.09.09.12.57.56.583.0 ]--
r 13         for(int i = 0; )
--[ 2019.09.09.12.57.56.969.0 ]--
r 13         for(int i = 0; i)
--[ 2019.09.09.12.57.57.032.0 ]--
r 13         for(int i = 0; i )
--[ 2019.09.09.12.57.57.145.0 ]--
r 13         for(int i = 0; i <)
--[ 2019.09.09.12.57.57.301.0 ]--
r 13         for(int i = 0; i < )
--[ 2019.09.09.12.58.10.394.0 ]--
r 13         
--[ 2019.09.09.12.58.10.677.0 ]--
- 13
--[ 2019.09.09.13.58.27.133.0 ]--
r 12         int turn = 0; 
--[ 2019.09.09.13.58.27.723.0 ]--
r 12         int turn = 0;
--[ 2019.09.09.13.58.31.750.0 ]--
DisposeComponent
--[ 2019.09.10.10.18.19.570.0 ]--
NewLogger: P01_Hex
Version: 1.3
--[ 2019.09.10.10.18.20.121.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2019.09.10.10.18.20.121.1 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2019.09.10.10.18.20.122.0 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/
public class HexBoard {
    private int[][] board;

    public HexBoard(int N) {
        board = new int[N][N];
    }

    public int getPlayer(int row, int col) {
        int turn = 0;
        return 0;
    }
    
    public boolean isSet(int row, int col) {
        return false;
    }

    public boolean isOnWinningPath(int row, int col) {
        return false;
    }

    public void setTile(int row, int col, int player) {
    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {
        return 0;
    }
}

--[ 2019.09.10.10.18.20.122.1 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public static void main(String[] args) {
    }
}

--[ 2019.09.10.10.18.20.122.2 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2019.09.10.10.18.20.122.3 ]--
InitFile: /.cos265


--[ 2019.09.10.10.18.20.122.4 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.09.10.10.18.53.077.0 ]--
:/src/HexBoard.java
r 12 
--[ 2019.09.10.10.18.53.693.0 ]--
- 12
--[ 2019.09.10.10.19.28.398.0 ]--
+ 15     public boolean isSet(int row, int col)
r 16      {
--[ 2019.09.10.10.19.28.508.0 ]--
r 16     {
--[ 2019.09.10.10.19.35.783.0 ]--
+ 21         
--[ 2019.09.10.10.19.43.428.0 ]--
+ 29         
--[ 2019.09.10.10.19.47.148.0 ]--
+ 34         
--[ 2019.09.10.10.19.50.362.0 ]--
+ 39         
--[ 2019.09.10.10.20.14.787.0 ]--
r 21 
r 29 
r 34 
r 39 
--[ 2019.09.10.10.20.18.159.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.10.10.24.16.450.0 ]--
- 15
r 15     public boolean isSet(int row, int col) {
--[ 2019.09.10.10.24.23.300.0 ]--
- 20
--[ 2019.09.10.10.24.29.174.0 ]--
- 27
--[ 2019.09.10.10.24.30.537.0 ]--
- 31
--[ 2019.09.10.10.24.32.005.0 ]--
- 35
--[ 2019.09.10.10.42.52.561.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.10.10.43.39.524.0 ]--
+ 16         
--[ 2019.09.10.10.43.40.874.0 ]--
- 16
--[ 2019.09.10.10.43.41.115.0 ]--
r 15     public boolean isSet(int row, int col) 
--[ 2019.09.10.10.43.42.369.0 ]--
r 15     public boolean isSet(int row, int col) {
--[ 2019.09.10.10.43.42.858.0 ]--
+ 16         
--[ 2019.09.10.10.44.11.872.0 ]--
- 16
--[ 2019.09.10.10.46.27.283.0 ]--
+ 12         
--[ 2019.09.10.10.47.10.772.0 ]--
+ 6     
--[ 2019.09.10.10.47.11.667.0 ]--
r 6     p
--[ 2019.09.10.10.47.11.731.0 ]--
r 6     pr
--[ 2019.09.10.10.47.11.859.0 ]--
r 6     pri
--[ 2019.09.10.10.47.12.051.0 ]--
r 6     priv
--[ 2019.09.10.10.47.12.356.0 ]--
r 6     priva
--[ 2019.09.10.10.47.12.372.0 ]--
r 6     privat
--[ 2019.09.10.10.47.12.399.0 ]--
r 6     private
--[ 2019.09.10.10.47.13.011.0 ]--
r 6     private 
--[ 2019.09.10.10.47.17.357.0 ]--
r 6     private t
--[ 2019.09.10.10.47.17.391.0 ]--
r 6     private ti
--[ 2019.09.10.10.47.17.773.0 ]--
r 6     private til
--[ 2019.09.10.10.47.17.807.0 ]--
r 6     private tiles
--[ 2019.09.10.10.47.19.372.0 ]--
r 6     private tiles 
--[ 2019.09.10.10.47.20.205.0 ]--
r 6     private 
--[ 2019.09.10.10.47.20.376.0 ]--
r 6     private i
--[ 2019.09.10.10.47.20.446.0 ]--
r 6     private in
--[ 2019.09.10.10.47.20.495.0 ]--
r 6     private int
--[ 2019.09.10.10.47.20.564.0 ]--
r 6     private int 
--[ 2019.09.10.10.47.20.937.0 ]--
r 6     private int t
--[ 2019.09.10.10.47.21.012.0 ]--
r 6     private int ti
--[ 2019.09.10.10.47.21.118.0 ]--
r 6     private int til
--[ 2019.09.10.10.47.21.186.0 ]--
r 6     private int tile
--[ 2019.09.10.10.47.21.346.0 ]--
r 6     private int tiles
--[ 2019.09.10.10.47.21.469.0 ]--
r 6     private int tiles 
--[ 2019.09.10.10.47.21.867.0 ]--
r 6     private int tiles
--[ 2019.09.10.10.47.22.036.0 ]--
r 6     private int tiles;
--[ 2019.09.10.10.47.28.850.0 ]--
+ 37         
--[ 2019.09.10.10.47.30.033.0 ]--
- 37
--[ 2019.09.10.10.47.30.211.0 ]--
r 36     public int numberOfUnsetTiles() 
--[ 2019.09.10.10.47.31.493.0 ]--
r 36     public int numberOfUnsetTiles() {
--[ 2019.09.10.10.47.34.480.0 ]--
r 6     private int tiles
--[ 2019.09.10.10.47.35.621.0 ]--
r 6     private int tiles 
--[ 2019.09.10.10.47.37.776.0 ]--
r 6     private int tiles =
--[ 2019.09.10.10.47.37.840.0 ]--
r 6     private int tiles = 
--[ 2019.09.10.10.47.37.929.0 ]--
r 6     private int tiles = n
--[ 2019.09.10.10.47.38.456.0 ]--
r 6     private int tiles = 
--[ 2019.09.10.10.47.38.747.0 ]--
r 6     private int tiles = N
--[ 2019.09.10.10.47.40.717.0 ]--
r 6     private int tiles = 
--[ 2019.09.10.10.47.42.395.0 ]--
r 6     private int tiles =
--[ 2019.09.10.10.47.42.509.0 ]--
r 6     private int tiles 
--[ 2019.09.10.10.47.42.613.0 ]--
r 6     private int tiles
--[ 2019.09.10.10.47.42.805.0 ]--
r 6     private int tiles;
--[ 2019.09.10.10.48.07.842.0 ]--
+ 10         
--[ 2019.09.10.10.48.13.096.0 ]--
r 10         t
--[ 2019.09.10.10.48.13.109.0 ]--
r 10         ti
--[ 2019.09.10.10.48.13.399.0 ]--
r 10         til
--[ 2019.09.10.10.48.13.459.0 ]--
r 10         tile
--[ 2019.09.10.10.48.13.754.0 ]--
r 10         tiles
--[ 2019.09.10.10.48.13.843.0 ]--
r 10         tiles 
--[ 2019.09.10.10.48.13.865.0 ]--
r 10         tiles =
--[ 2019.09.10.10.48.13.945.0 ]--
r 10         tiles = 
--[ 2019.09.10.10.48.14.759.0 ]--
r 10         tiles = N
--[ 2019.09.10.10.48.15.105.0 ]--
r 10         tiles = N;
--[ 2019.09.10.10.48.19.272.0 ]--
+ 38         
--[ 2019.09.10.10.48.57.924.0 ]--
- 38
--[ 2019.09.10.10.49.02.844.0 ]--
r 38         return \;
--[ 2019.09.10.10.49.03.635.0 ]--
r 38         return ;
--[ 2019.09.10.10.49.04.491.0 ]--
r 38         return 0;
--[ 2019.09.10.10.50.04.563.0 ]--
r 38         return 0;/
--[ 2019.09.10.10.50.05.911.0 ]--
r 38         return 0;
--[ 2019.09.10.10.50.06.566.0 ]--
r 38         return ;
--[ 2019.09.10.10.50.06.834.0 ]--
r 38         return N;
--[ 2019.09.10.10.50.07.434.0 ]--
r 38         return N*;
--[ 2019.09.10.10.50.07.621.0 ]--
r 38         return N*n;
--[ 2019.09.10.10.50.07.886.0 ]--
r 38         return N*;
--[ 2019.09.10.10.50.08.042.0 ]--
r 38         return N*N;
--[ 2019.09.10.10.50.08.291.0 ]--
r 38         return N*N ;
--[ 2019.09.10.10.50.08.391.0 ]--
r 38         return N*N;
--[ 2019.09.10.10.50.10.926.0 ]--
r 38         return N*;
--[ 2019.09.10.10.50.11.180.0 ]--
r 38         return N;
--[ 2019.09.10.10.50.11.571.0 ]--
r 38         return ;
--[ 2019.09.10.10.50.12.227.0 ]--
r 38         return t;
--[ 2019.09.10.10.50.12.297.0 ]--
r 38         return ti;
--[ 2019.09.10.10.50.13.591.0 ]--
r 38         return til;
--[ 2019.09.10.10.50.13.665.0 ]--
r 38         return tile;
--[ 2019.09.10.10.50.13.784.0 ]--
r 38         return tiles;
--[ 2019.09.10.10.50.14.275.0 ]--
r 38         return tiles ;
--[ 2019.09.10.10.50.14.402.0 ]--
r 38         return tiles *;
--[ 2019.09.10.10.50.14.438.0 ]--
r 38         return tiles * ;
--[ 2019.09.10.10.50.14.568.0 ]--
r 38         return tiles * t;
--[ 2019.09.10.10.50.14.995.0 ]--
r 38         return tiles * ti;
--[ 2019.09.10.10.50.15.191.0 ]--
r 38         return tiles * til;
--[ 2019.09.10.10.50.15.264.0 ]--
r 38         return tiles * tile;
--[ 2019.09.10.10.50.15.388.0 ]--
r 38         return tiles * tiles;
--[ 2019.09.10.10.50.33.969.0 ]--
r 10         tiles = N ;
--[ 2019.09.10.10.50.34.378.0 ]--
r 10         tiles = N *;
--[ 2019.09.10.10.50.34.927.0 ]--
r 10         tiles = N * ;
--[ 2019.09.10.10.50.35.492.0 ]--
r 10         tiles = N * N;
--[ 2019.09.10.10.50.39.244.0 ]--
r 38         return tiles * tile;
--[ 2019.09.10.10.50.39.341.0 ]--
r 38         return tiles * til;
--[ 2019.09.10.10.50.39.442.0 ]--
r 38         return tiles * ti;
--[ 2019.09.10.10.50.39.609.0 ]--
r 38         return tiles * t;
--[ 2019.09.10.10.50.39.658.0 ]--
r 38         return tiles * ;
--[ 2019.09.10.10.50.39.788.0 ]--
r 38         return tiles *;
--[ 2019.09.10.10.50.40.029.0 ]--
r 38         return tiles ;
--[ 2019.09.10.10.50.40.173.0 ]--
r 38         return tiles;
--[ 2019.09.10.10.50.58.526.0 ]--
+ 27         
--[ 2019.09.10.10.51.04.668.0 ]--
- 27
--[ 2019.09.10.10.51.07.114.0 ]--
- 14
--[ 2019.09.10.10.51.07.671.0 ]--
+ 14         
--[ 2019.09.10.10.51.34.979.0 ]--
r 14         f
--[ 2019.09.10.10.51.35.078.0 ]--
r 14         fo
--[ 2019.09.10.10.51.35.121.0 ]--
r 14         for
--[ 2019.09.10.10.51.35.377.0 ]--
r 14         for()
--[ 2019.09.10.10.51.36.757.0 ]--
r 14         for(i)
--[ 2019.09.10.10.51.36.797.0 ]--
r 14         for(i )
--[ 2019.09.10.10.51.36.896.0 ]--
r 14         for(i =)
--[ 2019.09.10.10.51.36.953.0 ]--
r 14         for(i = )
--[ 2019.09.10.10.51.37.095.0 ]--
r 14         for(i = 0)
--[ 2019.09.10.10.51.38.270.0 ]--
r 14         for(i = )
--[ 2019.09.10.10.51.38.532.0 ]--
r 14         for(i =)
--[ 2019.09.10.10.51.38.653.0 ]--
r 14         for(i )
--[ 2019.09.10.10.51.38.792.0 ]--
r 14         for(i)
--[ 2019.09.10.10.51.38.920.0 ]--
r 14         for()
--[ 2019.09.10.10.51.39.041.0 ]--
r 14         for(n)
--[ 2019.09.10.10.51.39.329.0 ]--
r 14         for()
--[ 2019.09.10.10.51.39.452.0 ]--
r 14         for(i)
--[ 2019.09.10.10.51.39.492.0 ]--
r 14         for(in)
--[ 2019.09.10.10.51.39.543.0 ]--
r 14         for(int)
--[ 2019.09.10.10.51.39.864.0 ]--
r 14         for(int )
--[ 2019.09.10.10.51.39.881.0 ]--
r 14         for(int i =)
--[ 2019.09.10.10.51.40.709.0 ]--
r 14         for(int i = )
--[ 2019.09.10.10.51.40.794.0 ]--
r 14         for(int i = 0)
--[ 2019.09.10.10.51.41.041.0 ]--
r 14         for(int i = 0;)
--[ 2019.09.10.10.51.41.771.0 ]--
r 14         for(int i = 0; )
--[ 2019.09.10.10.51.42.139.0 ]--
r 14         for(int i = 0; i)
--[ 2019.09.10.10.51.42.184.0 ]--
r 14         for(int i = 0; i )
--[ 2019.09.10.10.51.42.276.0 ]--
r 14         for(int i = 0; i <)
--[ 2019.09.10.10.51.42.568.0 ]--
r 14         for(int i = 0; i < )
--[ 2019.09.10.10.51.43.119.0 ]--
r 14         for(int i = 0; i < N)
--[ 2019.09.10.10.51.44.563.0 ]--
r 14         for(int i = 0; i < N;)
--[ 2019.09.10.10.51.44.611.0 ]--
r 14         for(int i = 0; i < N; )
--[ 2019.09.10.10.51.45.078.0 ]--
r 14         for(int i = 0; i < N; i)
--[ 2019.09.10.10.51.45.228.0 ]--
r 14         for(int i = 0; i < N; i )
--[ 2019.09.10.10.51.45.322.0 ]--
r 14         for(int i = 0; i < N; i +)
--[ 2019.09.10.10.51.45.518.0 ]--
r 14         for(int i = 0; i < N; i ++)
--[ 2019.09.10.10.51.48.519.0 ]--
r 14         for(int i = 0; i < ; i ++)
--[ 2019.09.10.10.52.21.681.0 ]--
r 14         
--[ 2019.09.10.10.52.23.405.0 ]--
r 14         b
--[ 2019.09.10.10.52.23.524.0 ]--
r 14         bo
--[ 2019.09.10.10.52.23.863.0 ]--
r 14         b
--[ 2019.09.10.10.52.23.981.0 ]--
r 14         
--[ 2019.09.10.10.52.24.855.0 ]--
r 14         b
--[ 2019.09.10.10.52.24.939.0 ]--
r 14         bo
--[ 2019.09.10.10.52.25.308.0 ]--
r 14         b
--[ 2019.09.10.10.52.25.432.0 ]--
r 14         
--[ 2019.09.10.10.52.25.685.0 ]--
- 14
--[ 2019.09.10.10.52.26.510.0 ]--
r 13     public int getPlayer(int row, int col) { 
--[ 2019.09.10.10.52.26.559.0 ]--
r 13     public int getPlayer(int row, int col) {
--[ 2019.09.10.10.52.36.710.0 ]--
r 14         return ;
--[ 2019.09.10.10.52.36.892.0 ]--
r 14         return b;
--[ 2019.09.10.10.52.36.975.0 ]--
r 14         return bo;
--[ 2019.09.10.10.52.37.024.0 ]--
r 14         return boa;
--[ 2019.09.10.10.52.37.090.0 ]--
r 14         return boar;
--[ 2019.09.10.10.52.37.232.0 ]--
r 14         return board;
--[ 2019.09.10.10.52.37.411.0 ]--
r 14         return board[];
--[ 2019.09.10.10.52.37.999.0 ]--
r 14         return board[r];
--[ 2019.09.10.10.52.38.066.0 ]--
r 14         return board[ro];
--[ 2019.09.10.10.52.38.152.0 ]--
r 14         return board[row];
--[ 2019.09.10.10.52.38.376.0 ]--
r 14         return board[row][];
--[ 2019.09.10.10.52.38.535.0 ]--
r 14         return board[row][c];
--[ 2019.09.10.10.52.38.633.0 ]--
r 14         return board[row][co];
--[ 2019.09.10.10.52.38.775.0 ]--
r 14         return board[row][col];
--[ 2019.09.10.10.52.43.715.0 ]--
+ 18         
--[ 2019.09.10.10.52.46.327.0 ]--
r 18         i
--[ 2019.09.10.10.52.46.418.0 ]--
r 18         if
--[ 2019.09.10.10.52.47.540.0 ]--
r 18         if()
--[ 2019.09.10.10.52.48.081.0 ]--
r 18         if(b)
--[ 2019.09.10.10.52.48.172.0 ]--
r 18         if(bp)
--[ 2019.09.10.10.52.48.204.0 ]--
r 18         if(bpa)
--[ 2019.09.10.10.52.48.287.0 ]--
r 18         if(bpar)
--[ 2019.09.10.10.52.48.677.0 ]--
r 18         if(bpard)
--[ 2019.09.10.10.52.48.693.0 ]--
r 18         if(bpard[])
--[ 2019.09.10.10.52.48.952.0 ]--
r 18         if(bpard)
--[ 2019.09.10.10.52.49.079.0 ]--
r 18         if(bpar)
--[ 2019.09.10.10.52.49.175.0 ]--
r 18         if(bpa)
--[ 2019.09.10.10.52.49.345.0 ]--
r 18         if(bp)
--[ 2019.09.10.10.52.49.418.0 ]--
r 18         if(b)
--[ 2019.09.10.10.52.49.753.0 ]--
r 18         if(ba)
--[ 2019.09.10.10.52.50.003.0 ]--
r 18         if(b)
--[ 2019.09.10.10.52.50.178.0 ]--
r 18         if(bo)
--[ 2019.09.10.10.52.50.207.0 ]--
r 18         if(boa)
--[ 2019.09.10.10.52.50.270.0 ]--
r 18         if(boar)
--[ 2019.09.10.10.52.50.386.0 ]--
r 18         if(board)
--[ 2019.09.10.10.52.50.553.0 ]--
r 18         if(board[])
--[ 2019.09.10.10.52.51.027.0 ]--
r 18         if(board[r])
--[ 2019.09.10.10.52.51.103.0 ]--
r 18         if(board[ro])
--[ 2019.09.10.10.52.51.148.0 ]--
r 18         if(board[row])
--[ 2019.09.10.10.52.51.375.0 ]--
r 18         if(board[row][])
--[ 2019.09.10.10.52.51.498.0 ]--
r 18         if(board[row][c])
--[ 2019.09.10.10.52.51.595.0 ]--
r 18         if(board[row][co])
--[ 2019.09.10.10.52.51.809.0 ]--
r 18         if(board[row][col])
--[ 2019.09.10.10.52.52.251.0 ]--
r 18         if(board[row][col] )
--[ 2019.09.10.10.52.52.441.0 ]--
r 18         if(board[row][col] =)
--[ 2019.09.10.10.52.52.616.0 ]--
r 18         if(board[row][col] ==)
--[ 2019.09.10.10.52.52.660.0 ]--
r 18         if(board[row][col] == )
--[ 2019.09.10.10.52.53.032.0 ]--
r 18         if(board[row][col] == 1)
--[ 2019.09.10.10.52.54.970.0 ]--
r 18         if(board[row][col] == 1){
--[ 2019.09.10.10.52.55.120.0 ]--
+ 19 
+ 20 }
--[ 2019.09.10.10.52.55.145.0 ]--
r 20         }
--[ 2019.09.10.10.52.55.181.0 ]--
r 19             
--[ 2019.09.10.10.52.55.260.0 ]--
+ 19             
--[ 2019.09.10.10.52.56.500.0 ]--
- 19
--[ 2019.09.10.10.53.01.628.0 ]--
r 18         if(board[row][col] == 1 ){
--[ 2019.09.10.10.53.01.800.0 ]--
r 18         if(board[row][col] == 1 |){
--[ 2019.09.10.10.53.01.895.0 ]--
r 18         if(board[row][col] == 1 ||){
--[ 2019.09.10.10.53.02.017.0 ]--
r 18         if(board[row][col] == 1 || ){
--[ 2019.09.10.10.53.02.375.0 ]--
r 18         if(board[row][col] == 1 || b){
--[ 2019.09.10.10.53.02.463.0 ]--
r 18         if(board[row][col] == 1 || bo){
--[ 2019.09.10.10.53.02.531.0 ]--
r 18         if(board[row][col] == 1 || boa){
--[ 2019.09.10.10.53.02.619.0 ]--
r 18         if(board[row][col] == 1 || boar){
--[ 2019.09.10.10.53.03.794.0 ]--
r 18         if(board[row][col] == 1 || board){
--[ 2019.09.10.10.53.03.858.0 ]--
r 18         if(board[row][col] == 1 || board[]){
--[ 2019.09.10.10.53.04.156.0 ]--
r 18         if(board[row][col] == 1 || board[r]){
--[ 2019.09.10.10.53.04.229.0 ]--
r 18         if(board[row][col] == 1 || board[ro]){
--[ 2019.09.10.10.53.04.310.0 ]--
r 18         if(board[row][col] == 1 || board[row]){
--[ 2019.09.10.10.53.04.558.0 ]--
r 18         if(board[row][col] == 1 || board[row][]){
--[ 2019.09.10.10.53.04.693.0 ]--
r 18         if(board[row][col] == 1 || board[row][c]){
--[ 2019.09.10.10.53.04.769.0 ]--
r 18         if(board[row][col] == 1 || board[row][co]){
--[ 2019.09.10.10.53.04.951.0 ]--
r 18         if(board[row][col] == 1 || board[row][col]){
--[ 2019.09.10.10.53.05.807.0 ]--
r 18         if(board[row][col] == 1 || board[row][col] ){
--[ 2019.09.10.10.53.06.077.0 ]--
r 18         if(board[row][col] == 1 || board[row][col] =){
--[ 2019.09.10.10.53.06.333.0 ]--
r 18         if(board[row][col] == 1 || board[row][col] ==){
--[ 2019.09.10.10.53.06.494.0 ]--
r 18         if(board[row][col] == 1 || board[row][col] == ){
--[ 2019.09.10.10.53.06.561.0 ]--
r 18         if(board[row][col] == 1 || board[row][col] == 2){
--[ 2019.09.10.10.53.07.911.0 ]--
r 19             r
--[ 2019.09.10.10.53.07.984.0 ]--
r 19             re
--[ 2019.09.10.10.53.08.103.0 ]--
r 19             ret
--[ 2019.09.10.10.53.08.181.0 ]--
r 19             retu
--[ 2019.09.10.10.53.08.275.0 ]--
r 19             retur
--[ 2019.09.10.10.53.08.336.0 ]--
r 19             return
--[ 2019.09.10.10.53.08.457.0 ]--
r 19             return 
--[ 2019.09.10.10.53.08.563.0 ]--
r 19             return t
--[ 2019.09.10.10.53.08.731.0 ]--
r 19             return tr
--[ 2019.09.10.10.53.08.835.0 ]--
r 19             return tru
--[ 2019.09.10.10.53.08.921.0 ]--
r 19             return true
--[ 2019.09.10.10.53.18.608.0 ]--
r 20         };
--[ 2019.09.10.10.53.19.269.0 ]--
r 20         }
--[ 2019.09.10.10.53.22.762.0 ]--
r 19             return true;
--[ 2019.09.10.10.53.30.496.0 ]--
+ 29         
--[ 2019.09.10.10.53.45.505.0 ]--
r 29         b
--[ 2019.09.10.10.53.45.589.0 ]--
r 29         bo
--[ 2019.09.10.10.53.45.637.0 ]--
r 29         boa
--[ 2019.09.10.10.53.45.754.0 ]--
r 29         boar
--[ 2019.09.10.10.53.45.908.0 ]--
r 29         board
--[ 2019.09.10.10.53.46.379.0 ]--
r 29         
--[ 2019.09.10.10.53.46.861.0 ]--
r 29         b
--[ 2019.09.10.10.53.46.937.0 ]--
r 29         bo
--[ 2019.09.10.10.53.46.963.0 ]--
r 29         boa
--[ 2019.09.10.10.53.47.037.0 ]--
r 29         boar
--[ 2019.09.10.10.53.47.165.0 ]--
r 29         board
--[ 2019.09.10.10.53.47.453.0 ]--
r 29         board[]
--[ 2019.09.10.10.53.47.733.0 ]--
r 29         board[r]
--[ 2019.09.10.10.53.47.785.0 ]--
r 29         board[ro]
--[ 2019.09.10.10.53.47.885.0 ]--
r 29         board[row]
--[ 2019.09.10.10.53.48.195.0 ]--
r 29         board[row][]
--[ 2019.09.10.10.53.48.276.0 ]--
r 29         board[row][c]
--[ 2019.09.10.10.53.48.406.0 ]--
r 29         board[row][co]
--[ 2019.09.10.10.53.48.692.0 ]--
r 29         board[row][col]
--[ 2019.09.10.10.53.49.245.0 ]--
r 29         board[row][col] 
--[ 2019.09.10.10.53.49.473.0 ]--
r 29         board[row][col] =
--[ 2019.09.10.10.53.49.591.0 ]--
r 29         board[row][col] = 
--[ 2019.09.10.10.53.50.204.0 ]--
r 29         board[row][col] = p
--[ 2019.09.10.10.53.50.266.0 ]--
r 29         board[row][col] = pl
--[ 2019.09.10.10.53.50.313.0 ]--
r 29         board[row][col] = pla
--[ 2019.09.10.10.53.50.424.0 ]--
r 29         board[row][col] = plae
--[ 2019.09.10.10.53.50.657.0 ]--
r 29         board[row][col] = pla
--[ 2019.09.10.10.53.50.710.0 ]--
r 29         board[row][col] = play
--[ 2019.09.10.10.53.50.765.0 ]--
r 29         board[row][col] = playe
--[ 2019.09.10.10.53.50.890.0 ]--
r 29         board[row][col] = player
--[ 2019.09.10.10.53.51.498.0 ]--
r 29         board[row][col] = player;
--[ 2019.09.10.10.54.13.771.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.10.10.54.27.505.0 ]--
+ 30         
--[ 2019.09.10.10.54.30.411.0 ]--
r 30         t
--[ 2019.09.10.10.54.30.463.0 ]--
r 30         ti
--[ 2019.09.10.10.54.30.650.0 ]--
r 30         til
--[ 2019.09.10.10.54.30.693.0 ]--
r 30         tile
--[ 2019.09.10.10.54.30.885.0 ]--
r 30         tiles
--[ 2019.09.10.10.54.31.021.0 ]--
r 30         tiles 
--[ 2019.09.10.10.54.31.134.0 ]--
r 30         tiles -
--[ 2019.09.10.10.54.31.572.0 ]--
r 30         tiles -=
--[ 2019.09.10.10.54.33.236.0 ]--
r 30         tiles -= 
--[ 2019.09.10.10.54.34.458.0 ]--
r 30         tiles -= 1
--[ 2019.09.10.10.54.34.791.0 ]--
r 30         tiles -= 1;
--[ 2019.09.10.10.54.38.994.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.10.10.59.35.028.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.10.11.13.43.457.0 ]--
r 34         return t;
--[ 2019.09.10.11.13.43.731.0 ]--
r 34         return tr;
--[ 2019.09.10.11.13.43.782.0 ]--
r 34         return tru;
--[ 2019.09.10.11.13.43.860.0 ]--
r 34         return true;
--[ 2019.09.10.11.13.47.137.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.10.11.13.52.160.0 ]--
r 34         return false;
--[ 2019.09.10.11.13.53.644.0 ]--
- 30
--[ 2019.09.10.11.13.54.743.0 ]--
+ 30         tiles -= 1;
--[ 2019.09.10.11.14.01.366.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.10.11.42.49.366.0 ]--
r 25         return t;
--[ 2019.09.10.11.42.49.520.0 ]--
r 25         return tr;
--[ 2019.09.10.11.42.49.601.0 ]--
r 25         return tru;
--[ 2019.09.10.11.42.49.673.0 ]--
r 25         return true;
--[ 2019.09.10.11.42.53.644.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.10.11.43.14.272.0 ]--
r 25         return false;
--[ 2019.09.11.00.10.51.918.0 ]--
DisposeComponent
--[ 2019.09.11.12.56.06.186.0 ]--
NewLogger: P01_Hex
Version: 1.3
--[ 2019.09.11.12.56.06.505.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2019.09.11.12.56.06.506.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2019.09.11.12.56.06.506.1 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/
public class HexBoard {
    private int[][] board;
    private int tiles;

    public HexBoard(int N) {
        board = new int[N][N];
        tiles = N * N;
    }

    public int getPlayer(int row, int col) {
        return board[row][col];
    }
    
    public boolean isSet(int row, int col) {
        if(board[row][col] == 1 || board[row][col] == 2){
            return true;
        }
        return false;
    }

    public boolean isOnWinningPath(int row, int col) {
        return false;
    }

    public void setTile(int row, int col, int player) {
        board[row][col] = player;
        tiles -= 1;
    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {
        return tiles;
    }
}

--[ 2019.09.11.12.56.06.506.2 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public static void main(String[] args) {
    }
}

--[ 2019.09.11.12.56.06.506.3 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2019.09.11.12.56.06.507.0 ]--
InitFile: /.cos265


--[ 2019.09.11.12.56.06.507.1 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.09.11.12.58.00.051.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.11.13.53.43.805.0 ]--
DisposeComponent
--[ 2019.09.11.20.18.09.228.0 ]--
NewLogger: P01_Hex
Version: 1.3
--[ 2019.09.11.20.18.09.272.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2019.09.11.20.18.09.273.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2019.09.11.20.18.09.273.1 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/
public class HexBoard {
    private int[][] board;
    private int tiles;

    public HexBoard(int N) {
        board = new int[N][N];
        tiles = N * N;
    }

    public int getPlayer(int row, int col) {
        return board[row][col];
    }
    
    public boolean isSet(int row, int col) {
        if(board[row][col] == 1 || board[row][col] == 2){
            return true;
        }
        return false;
    }

    public boolean isOnWinningPath(int row, int col) {
        return false;
    }

    public void setTile(int row, int col, int player) {
        board[row][col] = player;
        tiles -= 1;
    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {
        return tiles;
    }
}

--[ 2019.09.11.20.18.09.273.2 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public static void main(String[] args) {
    }
}

--[ 2019.09.11.20.18.09.274.0 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2019.09.11.20.18.09.274.1 ]--
InitFile: /.cos265


--[ 2019.09.11.20.18.09.274.2 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.09.11.23.22.44.771.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.11.23.23.21.423.0 ]--
DisposeComponent
--[ 2019.09.12.19.33.18.528.0 ]--
NewLogger: P01_Hex
Version: 1.3
--[ 2019.09.12.19.33.18.813.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2019.09.12.19.33.18.813.1 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2019.09.12.19.33.18.814.0 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/
public class HexBoard {
    private int[][] board;
    private int tiles;

    public HexBoard(int N) {
        board = new int[N][N];
        tiles = N * N;
    }

    public int getPlayer(int row, int col) {
        return board[row][col];
    }
    
    public boolean isSet(int row, int col) {
        if(board[row][col] == 1 || board[row][col] == 2){
            return true;
        }
        return false;
    }

    public boolean isOnWinningPath(int row, int col) {
        return false;
    }

    public void setTile(int row, int col, int player) {
        board[row][col] = player;
        tiles -= 1;
    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {
        return tiles;
    }
}

--[ 2019.09.12.19.33.18.814.1 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public static void main(String[] args) {
    }
}

--[ 2019.09.12.19.33.18.814.2 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2019.09.12.19.33.18.814.3 ]--
InitFile: /.cos265


--[ 2019.09.12.19.33.18.815.0 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.09.12.19.37.34.592.0 ]--
:/src/HexBoard.java
r 25         return false;3
--[ 2019.09.12.19.39.37.688.0 ]--
r 25         return false;
--[ 2019.09.12.19.39.46.682.0 ]--
+ 42         
--[ 2019.09.12.19.39.50.751.0 ]--
r 6     private int A;
--[ 2019.09.12.19.39.50.877.0 ]--
r 6     private int AB;
--[ 2019.09.12.19.39.51.221.0 ]--
r 6     private int A;
--[ 2019.09.12.19.39.51.247.0 ]--
r 6     private int ;
--[ 2019.09.12.19.39.51.294.0 ]--
r 6     private int B;
--[ 2019.09.12.19.39.51.402.0 ]--
r 6     private int BO;
--[ 2019.09.12.19.39.51.443.0 ]--
r 6     private int BOA;
--[ 2019.09.12.19.39.51.522.0 ]--
r 6     private int BOAR;
--[ 2019.09.12.19.39.52.290.0 ]--
r 6     private int ;
--[ 2019.09.12.19.39.52.470.0 ]--
r 6     private int b;
--[ 2019.09.12.19.39.52.584.0 ]--
r 6     private int bo;
--[ 2019.09.12.19.39.52.651.0 ]--
r 6     private int boa;
--[ 2019.09.12.19.39.52.693.0 ]--
r 6     private int boar;
--[ 2019.09.12.19.39.52.824.0 ]--
r 6     private int board;
--[ 2019.09.12.19.39.53.025.0 ]--
r 6     private int boardZ;
--[ 2019.09.12.19.39.53.479.0 ]--
r 6     private int board;
--[ 2019.09.12.19.39.53.571.0 ]--
r 6     private int boardS;
--[ 2019.09.12.19.39.53.671.0 ]--
r 6     private int boardSi;
--[ 2019.09.12.19.39.53.721.0 ]--
r 6     private int boardSiz;
--[ 2019.09.12.19.39.53.866.0 ]--
r 6     private int boardSize;
--[ 2019.09.12.19.39.53.964.0 ]--
r 6     private int boardSize ;
--[ 2019.09.12.19.39.54.025.0 ]--
r 6     private int boardSize;
--[ 2019.09.12.19.39.57.730.0 ]--
r 10         boardSize = N * N;
--[ 2019.09.12.19.40.02.073.0 ]--
r 30         boardSize -= 1;
--[ 2019.09.12.19.40.04.722.0 ]--
r 43         return boardSize;
--[ 2019.09.12.19.40.41.739.0 ]--
r 42 
--[ 2019.09.12.19.44.38.229.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.19.48.05.684.0 ]--
r 6     private int boardSize; 
--[ 2019.09.12.19.48.05.774.0 ]--
r 6     private int boardSize;
--[ 2019.09.12.19.48.18.301.0 ]--
+ 11         
--[ 2019.09.12.19.48.28.107.0 ]--
r 11          
--[ 2019.09.12.19.48.28.161.0 ]--
r 11         
--[ 2019.09.12.19.49.58.846.0 ]--
+ 15         
--[ 2019.09.12.19.50.10.206.0 ]--
r 15          
--[ 2019.09.12.19.50.10.258.0 ]--
r 15         
--[ 2019.09.12.19.50.10.428.0 ]--
r 15         /
--[ 2019.09.12.19.50.10.610.0 ]--
r 15         //
--[ 2019.09.12.19.50.11.257.0 ]--
r 15         //R
--[ 2019.09.12.19.50.11.425.0 ]--
r 15         //Re
--[ 2019.09.12.19.50.11.613.0 ]--
r 15         //Ret
--[ 2019.09.12.19.50.11.698.0 ]--
r 15         //Retu
--[ 2019.09.12.19.50.11.803.0 ]--
r 15         //Retur
--[ 2019.09.12.19.50.11.891.0 ]--
r 15         //Return
--[ 2019.09.12.19.50.12.041.0 ]--
r 15         //Return 
--[ 2019.09.12.19.50.13.895.0 ]--
r 15         //Return  
--[ 2019.09.12.19.50.13.949.0 ]--
r 15         //Return 
--[ 2019.09.12.19.50.30.586.0 ]--
r 15         //Return  
--[ 2019.09.12.19.50.30.811.0 ]--
r 15         //Return 
--[ 2019.09.12.19.50.31.174.0 ]--
r 15         //
--[ 2019.09.12.19.50.31.719.0 ]--
r 15         //R
--[ 2019.09.12.19.50.31.865.0 ]--
r 15         //Re
--[ 2019.09.12.19.50.31.997.0 ]--
r 15         //Ret
--[ 2019.09.12.19.50.32.107.0 ]--
r 15         //Retu
--[ 2019.09.12.19.50.32.169.0 ]--
r 15         //Retur
--[ 2019.09.12.19.50.32.258.0 ]--
r 15         //Return
--[ 2019.09.12.19.50.32.809.0 ]--
r 15         //
--[ 2019.09.12.19.50.33.039.0 ]--
r 15         //I
--[ 2019.09.12.19.50.33.181.0 ]--
r 15         //If
--[ 2019.09.12.19.50.33.465.0 ]--
r 15         //If 
--[ 2019.09.12.19.50.33.771.0 ]--
r 15         //If b
--[ 2019.09.12.19.50.33.872.0 ]--
r 15         //If bo
--[ 2019.09.12.19.50.33.900.0 ]--
r 15         //If boa
--[ 2019.09.12.19.50.34.037.0 ]--
r 15         //If boar
--[ 2019.09.12.19.50.34.186.0 ]--
r 15         //If board
--[ 2019.09.12.19.50.35.034.0 ]--
r 15         //If board[
--[ 2019.09.12.19.50.35.150.0 ]--
r 15         //If board[r
--[ 2019.09.12.19.50.35.905.0 ]--
r 15         //If board[ro
--[ 2019.09.12.19.50.35.997.0 ]--
r 15         //If board[row
--[ 2019.09.12.19.50.36.039.0 ]--
r 15         //If board[row]
--[ 2019.09.12.19.50.36.112.0 ]--
r 15         //If board[row][
--[ 2019.09.12.19.50.36.249.0 ]--
r 15         //If board[row][c
--[ 2019.09.12.19.50.36.415.0 ]--
r 15         //If board[row][co
--[ 2019.09.12.19.50.36.548.0 ]--
r 15         //If board[row][col
--[ 2019.09.12.19.50.37.092.0 ]--
r 15         //If board[row][col]
--[ 2019.09.12.19.50.37.211.0 ]--
r 15         //If board[row][col] 
--[ 2019.09.12.19.50.37.266.0 ]--
r 15         //If board[row][col] =
--[ 2019.09.12.19.50.37.412.0 ]--
r 15         //If board[row][col] ==
--[ 2019.09.12.19.50.37.496.0 ]--
r 15         //If board[row][col] == 
--[ 2019.09.12.19.50.38.011.0 ]--
r 15         //If board[row][col] == 1
--[ 2019.09.12.19.50.38.723.0 ]--
r 15         //If board[row][col] == 1,
--[ 2019.09.12.19.50.39.214.0 ]--
r 15         //If board[row][col] == 1, 
--[ 2019.09.12.19.50.39.517.0 ]--
r 15         //If board[row][col] == 1, t
--[ 2019.09.12.19.50.39.750.0 ]--
r 15         //If board[row][col] == 1, th
--[ 2019.09.12.19.50.39.822.0 ]--
r 15         //If board[row][col] == 1, the
--[ 2019.09.12.19.50.39.909.0 ]--
r 15         //If board[row][col] == 1, then
--[ 2019.09.12.19.50.39.970.0 ]--
r 15         //If board[row][col] == 1, then 
--[ 2019.09.12.19.50.40.130.0 ]--
r 15         //If board[row][col] == 1, then i
--[ 2019.09.12.19.50.40.204.0 ]--
r 15         //If board[row][col] == 1, then it
--[ 2019.09.12.19.50.40.306.0 ]--
r 15         //If board[row][col] == 1, then it'
--[ 2019.09.12.19.50.40.353.0 ]--
r 15         //If board[row][col] == 1, then it's
--[ 2019.09.12.19.50.40.466.0 ]--
r 15         //If board[row][col] == 1, then it's 
--[ 2019.09.12.19.50.40.510.0 ]--
r 15         //If board[row][col] == 1, then it's p
--[ 2019.09.12.19.50.40.554.0 ]--
r 15         //If board[row][col] == 1, then it's pl
--[ 2019.09.12.19.50.40.600.0 ]--
r 15         //If board[row][col] == 1, then it's pla
--[ 2019.09.12.19.50.40.652.0 ]--
r 15         //If board[row][col] == 1, then it's play
--[ 2019.09.12.19.50.41.602.0 ]--
r 15         //If board[row][col] == 1, then it's 
--[ 2019.09.12.19.50.41.686.0 ]--
r 15         //If board[row][col] == 1, then it'
--[ 2019.09.12.19.50.42.622.0 ]--
r 15         //If board[row][col] == 1, then it
--[ 2019.09.12.19.50.43.274.0 ]--
r 15         //If board[row][col] == 1, then i
--[ 2019.09.12.19.50.43.379.0 ]--
r 15         //If board[row][col] == 1, then 
--[ 2019.09.12.19.50.43.530.0 ]--
r 15         //If board[row][col] == 1, then t
--[ 2019.09.12.19.50.43.654.0 ]--
r 15         //If board[row][col] == 1, then th
--[ 2019.09.12.19.50.43.672.0 ]--
r 15         //If board[row][col] == 1, then the
--[ 2019.09.12.19.50.43.700.0 ]--
r 15         //If board[row][col] == 1, then the 
--[ 2019.09.12.19.50.43.759.0 ]--
r 15         //If board[row][col] == 1, then the p
--[ 2019.09.12.19.50.43.799.0 ]--
r 15         //If board[row][col] == 1, then the pl
--[ 2019.09.12.19.50.43.846.0 ]--
r 15         //If board[row][col] == 1, then the pla
--[ 2019.09.12.19.50.43.896.0 ]--
r 15         //If board[row][col] == 1, then the play
--[ 2019.09.12.19.50.44.003.0 ]--
r 15         //If board[row][col] == 1, then the playe
--[ 2019.09.12.19.50.44.059.0 ]--
r 15         //If board[row][col] == 1, then the player
--[ 2019.09.12.19.50.44.211.0 ]--
r 15         //If board[row][col] == 1, then the player 
--[ 2019.09.12.19.50.44.385.0 ]--
r 15         //If board[row][col] == 1, then the player i
--[ 2019.09.12.19.50.44.451.0 ]--
r 15         //If board[row][col] == 1, then the player is
--[ 2019.09.12.19.50.44.600.0 ]--
r 15         //If board[row][col] == 1, then the player is 
--[ 2019.09.12.19.50.44.786.0 ]--
r 15         //If board[row][col] == 1, then the player is 1
--[ 2019.09.12.19.50.45.214.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 
--[ 2019.09.12.19.50.45.268.0 ]--
r 15         //If board[row][col] == 1, then the player is 1
--[ 2019.09.12.19.50.59.692.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 
--[ 2019.09.12.19.50.59.946.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 o
--[ 2019.09.12.19.51.00.044.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or
--[ 2019.09.12.19.51.00.200.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or 
--[ 2019.09.12.19.51.01.158.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or i
--[ 2019.09.12.19.51.01.207.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if
--[ 2019.09.12.19.51.01.259.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if 
--[ 2019.09.12.19.51.01.600.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if i
--[ 2019.09.12.19.51.01.820.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if i'
--[ 2019.09.12.19.51.02.032.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if i
--[ 2019.09.12.19.51.02.086.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if it
--[ 2019.09.12.19.51.02.207.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if it'
--[ 2019.09.12.19.51.02.277.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if it's
--[ 2019.09.12.19.51.02.324.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if it's 
--[ 2019.09.12.19.51.02.424.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if it's b
--[ 2019.09.12.19.51.02.477.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if it's bo
--[ 2019.09.12.19.51.02.540.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if it's boa
--[ 2019.09.12.19.51.02.615.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if it's boar
--[ 2019.09.12.19.51.02.813.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if it's board
--[ 2019.09.12.19.51.02.935.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if it's board 
--[ 2019.09.12.19.51.03.486.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if it's board
--[ 2019.09.12.19.51.03.843.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if it's 
--[ 2019.09.12.19.51.03.951.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if it'
--[ 2019.09.12.19.51.04.294.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if it
--[ 2019.09.12.19.51.04.429.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if i
--[ 2019.09.12.19.51.04.557.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if 
--[ 2019.09.12.19.51.04.705.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if b
--[ 2019.09.12.19.51.04.784.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if bo
--[ 2019.09.12.19.51.04.831.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if boa
--[ 2019.09.12.19.51.04.897.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if boar
--[ 2019.09.12.19.51.05.047.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board
--[ 2019.09.12.19.51.05.150.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[
--[ 2019.09.12.19.51.05.344.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[r
--[ 2019.09.12.19.51.05.460.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[ro
--[ 2019.09.12.19.51.05.550.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row
--[ 2019.09.12.19.51.05.660.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row]
--[ 2019.09.12.19.51.05.732.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][
--[ 2019.09.12.19.51.06.224.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][c
--[ 2019.09.12.19.51.06.342.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][co
--[ 2019.09.12.19.51.06.430.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col
--[ 2019.09.12.19.51.06.584.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col]
--[ 2019.09.12.19.51.06.695.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] 
--[ 2019.09.12.19.51.06.821.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] =
--[ 2019.09.12.19.51.06.949.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] ==
--[ 2019.09.12.19.51.07.029.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 
--[ 2019.09.12.19.51.07.085.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2
--[ 2019.09.12.19.51.07.237.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 
--[ 2019.09.12.19.51.07.688.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 t
--[ 2019.09.12.19.51.07.753.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 tj
--[ 2019.09.12.19.51.07.824.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 tje
--[ 2019.09.12.19.51.07.914.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 tjen
--[ 2019.09.12.19.51.07.957.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 tjen 
--[ 2019.09.12.19.51.08.133.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 tjen t
--[ 2019.09.12.19.51.08.260.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 tjen te
--[ 2019.09.12.19.51.08.386.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 tjen te 
--[ 2019.09.12.19.51.08.569.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 tjen 
--[ 2019.09.12.19.51.08.672.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 
--[ 2019.09.12.19.51.09.057.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 t
--[ 2019.09.12.19.51.09.133.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 th
--[ 2019.09.12.19.51.09.188.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 the
--[ 2019.09.12.19.51.09.281.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then
--[ 2019.09.12.19.51.09.422.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then 
--[ 2019.09.12.19.51.09.520.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then t
--[ 2019.09.12.19.51.09.542.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then th
--[ 2019.09.12.19.51.09.646.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the
--[ 2019.09.12.19.51.09.711.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the 
--[ 2019.09.12.19.51.09.800.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the pl
--[ 2019.09.12.19.51.09.836.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the pla
--[ 2019.09.12.19.51.09.891.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the play
--[ 2019.09.12.19.51.09.938.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the playe
--[ 2019.09.12.19.51.10.034.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the player
--[ 2019.09.12.19.51.10.335.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the player 
--[ 2019.09.12.19.51.10.457.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the player i
--[ 2019.09.12.19.51.10.515.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the player is
--[ 2019.09.12.19.51.10.561.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the player is 
--[ 2019.09.12.19.51.10.628.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the player is p
--[ 2019.09.12.19.51.10.711.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the player is pl
--[ 2019.09.12.19.51.10.725.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the player is pla
--[ 2019.09.12.19.51.10.760.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the player is play
--[ 2019.09.12.19.51.10.843.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the player is playe
--[ 2019.09.12.19.51.10.932.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the player is player
--[ 2019.09.12.19.51.11.028.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the player is player 
--[ 2019.09.12.19.51.11.096.0 ]--
r 15         //If board[row][col] == 1, then the player is 1 or if board[row][col] == 2 then the player is player 2
--[ 2019.09.12.19.51.13.959.0 ]--
r 15         //If board[row][col] == 1, then the player is p1 or if board[row][col] == 2 then the player is player 2
--[ 2019.09.12.19.51.14.000.0 ]--
r 15         //If board[row][col] == 1, then the player is pl1 or if board[row][col] == 2 then the player is player 2
--[ 2019.09.12.19.51.14.042.0 ]--
r 15         //If board[row][col] == 1, then the player is pla1 or if board[row][col] == 2 then the player is player 2
--[ 2019.09.12.19.51.14.070.0 ]--
r 15         //If board[row][col] == 1, then the player is play1 or if board[row][col] == 2 then the player is player 2
--[ 2019.09.12.19.51.14.137.0 ]--
r 15         //If board[row][col] == 1, then the player is playe1 or if board[row][col] == 2 then the player is player 2
--[ 2019.09.12.19.51.14.229.0 ]--
r 15         //If board[row][col] == 1, then the player is player1 or if board[row][col] == 2 then the player is player 2
--[ 2019.09.12.19.51.15.136.0 ]--
r 15         //If board[row][col] == 1, then the player is player 1 or if board[row][col] == 2 then the player is player 2
--[ 2019.09.12.19.51.20.232.0 ]--
r 7     
--[ 2019.09.12.19.51.20.475.0 ]--
+ 7     
--[ 2019.09.12.19.51.21.120.0 ]--
r 8     /
--[ 2019.09.12.19.51.21.222.0 ]--
r 8     //
--[ 2019.09.12.19.51.21.631.0 ]--
r 8     //I
--[ 2019.09.12.19.51.21.642.0 ]--
r 8     //In
--[ 2019.09.12.19.51.21.787.0 ]--
r 8     //Ini
--[ 2019.09.12.19.51.22.200.0 ]--
r 8     //Init
--[ 2019.09.12.19.51.22.288.0 ]--
r 8     //Initi
--[ 2019.09.12.19.51.22.345.0 ]--
r 8     //Initia
--[ 2019.09.12.19.51.22.446.0 ]--
r 8     //Initial
--[ 2019.09.12.19.51.22.580.0 ]--
r 8     //Initiali
--[ 2019.09.12.19.51.22.642.0 ]--
r 8     //Initializ
--[ 2019.09.12.19.51.22.761.0 ]--
r 8     //Initializa
--[ 2019.09.12.19.51.22.866.0 ]--
r 8     //Initializat
--[ 2019.09.12.19.51.22.956.0 ]--
r 8     //Initializati
--[ 2019.09.12.19.51.22.990.0 ]--
r 8     //Initializatio
--[ 2019.09.12.19.51.23.056.0 ]--
r 8     //Initialization
--[ 2019.09.12.19.51.23.695.0 ]--
r 8     //Initialization 
--[ 2019.09.12.19.51.23.820.0 ]--
r 8     //Initialization
--[ 2019.09.12.19.51.32.307.0 ]--
+ 32         
--[ 2019.09.12.19.51.33.210.0 ]--
r 32         /
--[ 2019.09.12.19.51.33.295.0 ]--
r 32         //
--[ 2019.09.12.19.51.33.473.0 ]--
r 32         //S
--[ 2019.09.12.19.51.33.622.0 ]--
r 32         //Se
--[ 2019.09.12.19.51.33.713.0 ]--
r 32         //Set
--[ 2019.09.12.19.51.33.865.0 ]--
r 32         //Set 
--[ 2019.09.12.19.51.35.071.0 ]--
r 32         //Set t
--[ 2019.09.12.19.51.35.143.0 ]--
r 32         //Set th
--[ 2019.09.12.19.51.35.235.0 ]--
r 32         //Set the
--[ 2019.09.12.19.51.35.405.0 ]--
r 32         //Set the 
--[ 2019.09.12.19.51.35.979.0 ]--
r 32         //Set the b
--[ 2019.09.12.19.51.36.098.0 ]--
r 32         //Set the bo
--[ 2019.09.12.19.51.36.123.0 ]--
r 32         //Set the boa
--[ 2019.09.12.19.51.36.195.0 ]--
r 32         //Set the boar
--[ 2019.09.12.19.51.36.494.0 ]--
r 32         //Set the board
--[ 2019.09.12.19.51.36.964.0 ]--
r 32         //Set the board[
--[ 2019.09.12.19.51.37.124.0 ]--
r 32         //Set the board[c
--[ 2019.09.12.19.51.37.461.0 ]--
r 32         //Set the board[
--[ 2019.09.12.19.51.37.563.0 ]--
r 32         //Set the board[r
--[ 2019.09.12.19.51.37.624.0 ]--
r 32         //Set the board[ro
--[ 2019.09.12.19.51.37.695.0 ]--
r 32         //Set the board[row
--[ 2019.09.12.19.51.37.820.0 ]--
r 32         //Set the board[row]
--[ 2019.09.12.19.51.38.030.0 ]--
r 32         //Set the board[row][
--[ 2019.09.12.19.51.38.186.0 ]--
r 32         //Set the board[row][c
--[ 2019.09.12.19.51.38.248.0 ]--
r 32         //Set the board[row][co
--[ 2019.09.12.19.51.38.531.0 ]--
r 32         //Set the board[row][col
--[ 2019.09.12.19.51.38.654.0 ]--
r 32         //Set the board[row][col]
--[ 2019.09.12.19.51.38.774.0 ]--
r 32         //Set the board[row][col] 
--[ 2019.09.12.19.51.38.869.0 ]--
r 32         //Set the board[row][col] -
--[ 2019.09.12.19.51.38.993.0 ]--
r 32         //Set the board[row][col] -=
--[ 2019.09.12.19.51.39.349.0 ]--
r 32         //Set the board[row][col] -
--[ 2019.09.12.19.51.39.402.0 ]--
r 32         //Set the board[row][col] 
--[ 2019.09.12.19.51.39.885.0 ]--
r 32         //Set the board[row][col] e
--[ 2019.09.12.19.51.40.014.0 ]--
r 32         //Set the board[row][col] eq
--[ 2019.09.12.19.51.40.096.0 ]--
r 32         //Set the board[row][col] equ
--[ 2019.09.12.19.51.40.207.0 ]--
r 32         //Set the board[row][col] equa
--[ 2019.09.12.19.51.40.278.0 ]--
r 32         //Set the board[row][col] equal
--[ 2019.09.12.19.51.40.364.0 ]--
r 32         //Set the board[row][col] equal 
--[ 2019.09.12.19.51.40.430.0 ]--
r 32         //Set the board[row][col] equal t
--[ 2019.09.12.19.51.40.536.0 ]--
r 32         //Set the board[row][col] equal to
--[ 2019.09.12.19.51.42.486.0 ]--
r 32         //Set the board[row][col] equal to 
--[ 2019.09.12.19.51.56.873.0 ]--
r 32         //Set the board[row][col] equal to p
--[ 2019.09.12.19.51.56.888.0 ]--
r 32         //Set the board[row][col] equal to pl
--[ 2019.09.12.19.51.56.948.0 ]--
r 32         //Set the board[row][col] equal to pla
--[ 2019.09.12.19.51.57.031.0 ]--
r 32         //Set the board[row][col] equal to play
--[ 2019.09.12.19.51.57.085.0 ]--
r 32         //Set the board[row][col] equal to playe
--[ 2019.09.12.19.51.57.225.0 ]--
r 32         //Set the board[row][col] equal to player
--[ 2019.09.12.19.51.57.312.0 ]--
r 32         //Set the board[row][col] equal to player 
--[ 2019.09.12.19.51.57.361.0 ]--
r 32         //Set the board[row][col] equal to player 1
--[ 2019.09.12.19.51.57.498.0 ]--
r 32         //Set the board[row][col] equal to player 1 
--[ 2019.09.12.19.51.57.630.0 ]--
r 32         //Set the board[row][col] equal to player 1 o
--[ 2019.09.12.19.51.57.679.0 ]--
r 32         //Set the board[row][col] equal to player 1 or
--[ 2019.09.12.19.51.57.722.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 
--[ 2019.09.12.19.51.57.853.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2
--[ 2019.09.12.19.51.58.082.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2,
--[ 2019.09.12.19.51.58.461.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, 
--[ 2019.09.12.19.51.58.670.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, a
--[ 2019.09.12.19.51.58.794.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, an
--[ 2019.09.12.19.51.58.871.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and
--[ 2019.09.12.19.51.59.028.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and 
--[ 2019.09.12.19.51.59.531.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and d
--[ 2019.09.12.19.51.59.652.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and de
--[ 2019.09.12.19.51.59.743.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and dec
--[ 2019.09.12.19.51.59.921.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decr
--[ 2019.09.12.19.51.59.975.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decre
--[ 2019.09.12.19.52.00.091.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrem
--[ 2019.09.12.19.52.00.168.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decreme
--[ 2019.09.12.19.52.00.220.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decremen
--[ 2019.09.12.19.52.00.321.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement
--[ 2019.09.12.19.52.00.369.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement 
--[ 2019.09.12.19.52.00.457.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement t
--[ 2019.09.12.19.52.00.544.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement th
--[ 2019.09.12.19.52.00.639.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the
--[ 2019.09.12.19.52.00.725.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the 
--[ 2019.09.12.19.52.01.754.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the a
--[ 2019.09.12.19.52.01.842.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the am
--[ 2019.09.12.19.52.01.973.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the amo
--[ 2019.09.12.19.52.02.069.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the amou
--[ 2019.09.12.19.52.02.212.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the amoun
--[ 2019.09.12.19.52.02.281.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the amount
--[ 2019.09.12.19.52.02.531.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the amount 
--[ 2019.09.12.19.52.02.948.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the 
--[ 2019.09.12.19.52.04.399.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the n
--[ 2019.09.12.19.52.04.665.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the nu
--[ 2019.09.12.19.52.04.790.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the num
--[ 2019.09.12.19.52.04.904.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the numb
--[ 2019.09.12.19.52.05.017.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the numbe
--[ 2019.09.12.19.52.05.132.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number
--[ 2019.09.12.19.52.05.270.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number 
--[ 2019.09.12.19.52.05.517.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number o
--[ 2019.09.12.19.52.05.564.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number of
--[ 2019.09.12.19.52.06.911.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number of 
--[ 2019.09.12.19.52.07.359.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number of u
--[ 2019.09.12.19.52.07.421.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number of un
--[ 2019.09.12.19.52.07.450.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number of uns
--[ 2019.09.12.19.52.07.596.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number of unse
--[ 2019.09.12.19.52.07.739.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number of unset
--[ 2019.09.12.19.52.07.759.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number of unset 
--[ 2019.09.12.19.52.07.958.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number of unset t
--[ 2019.09.12.19.52.08.106.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number of unset ti
--[ 2019.09.12.19.52.08.191.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number of unset til
--[ 2019.09.12.19.52.08.229.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number of unset tile
--[ 2019.09.12.19.52.08.355.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number of unset tiles
--[ 2019.09.12.19.52.08.576.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number of unset tiles 
--[ 2019.09.12.19.52.08.738.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number of unset tiles
--[ 2019.09.12.19.52.11.855.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number of unset tiles 
--[ 2019.09.12.19.52.11.894.0 ]--
r 32         //Set the board[row][col] equal to player 1 or 2, and decrement the number of unset tiles
--[ 2019.09.12.19.52.28.235.0 ]--
+ 7     
--[ 2019.09.12.19.52.48.948.0 ]--
r 7     p
--[ 2019.09.12.19.52.49.069.0 ]--
r 7     pr
--[ 2019.09.12.19.52.49.158.0 ]--
r 7     pri
--[ 2019.09.12.19.52.49.368.0 ]--
r 7     priva
--[ 2019.09.12.19.52.49.471.0 ]--
r 7     privat
--[ 2019.09.12.19.52.49.513.0 ]--
r 7     private
--[ 2019.09.12.19.52.49.567.0 ]--
r 7     private 
--[ 2019.09.12.19.52.49.693.0 ]--
r 7     private l
--[ 2019.09.12.19.52.50.021.0 ]--
r 7     private li
--[ 2019.09.12.19.52.50.060.0 ]--
r 7     private link
--[ 2019.09.12.19.52.50.879.0 ]--
r 7     private 
--[ 2019.09.12.19.52.51.075.0 ]--
r 7     private c
--[ 2019.09.12.19.52.51.123.0 ]--
r 7     private co
--[ 2019.09.12.19.52.51.257.0 ]--
r 7     private con
--[ 2019.09.12.19.52.51.349.0 ]--
r 7     private conn
--[ 2019.09.12.19.52.51.422.0 ]--
r 7     private conne
--[ 2019.09.12.19.52.51.492.0 ]--
r 7     private connec
--[ 2019.09.12.19.52.51.644.0 ]--
r 7     private connect
--[ 2019.09.12.19.52.51.724.0 ]--
r 7     private connecti
--[ 2019.09.12.19.52.51.782.0 ]--
r 7     private connectio
--[ 2019.09.12.19.52.51.860.0 ]--
r 7     private connection
--[ 2019.09.12.19.52.56.036.0 ]--
r 7     private  connection
--[ 2019.09.12.19.52.56.066.0 ]--
r 7     private connection
--[ 2019.09.12.19.52.58.670.0 ]--
r 7     private iconnection
--[ 2019.09.12.19.52.58.694.0 ]--
r 7     private inconnection
--[ 2019.09.12.19.52.58.772.0 ]--
r 7     private intconnection
--[ 2019.09.12.19.52.58.888.0 ]--
r 7     private int connection
--[ 2019.09.12.19.52.59.839.0 ]--
r 7     private int connection;
--[ 2019.09.12.19.53.00.386.0 ]--
r 7     private int connection
--[ 2019.09.12.19.53.00.476.0 ]--
r 7     private int connections
--[ 2019.09.12.19.53.00.583.0 ]--
r 7     private int connections;
--[ 2019.09.12.19.53.02.745.0 ]--
+ 13         
--[ 2019.09.12.19.53.04.788.0 ]--
r 13          
--[ 2019.09.12.19.53.04.831.0 ]--
r 13         
--[ 2019.09.12.19.55.12.165.0 ]--
r 7     
--[ 2019.09.12.19.55.12.535.0 ]--
- 7
--[ 2019.09.12.19.55.14.353.0 ]--
r 12         U
--[ 2019.09.12.19.55.14.473.0 ]--
r 12         UF
--[ 2019.09.12.19.55.14.603.0 ]--
r 12         UF 
--[ 2019.09.12.19.55.14.801.0 ]--
r 12         UF n
--[ 2019.09.12.19.55.14.885.0 ]--
r 12         UF ne
--[ 2019.09.12.19.55.14.988.0 ]--
r 12         UF new
--[ 2019.09.12.19.55.15.079.0 ]--
r 12         UF new 
--[ 2019.09.12.19.55.15.581.0 ]--
r 12         UF new  
--[ 2019.09.12.19.55.15.661.0 ]--
r 12         UF new 
--[ 2019.09.12.19.55.16.172.0 ]--
r 12         UF 
--[ 2019.09.12.19.55.16.606.0 ]--
r 12         UF c
--[ 2019.09.12.19.55.16.655.0 ]--
r 12         UF co
--[ 2019.09.12.19.55.16.770.0 ]--
r 12         UF con
--[ 2019.09.12.19.55.16.878.0 ]--
r 12         UF conn
--[ 2019.09.12.19.55.16.975.0 ]--
r 12         UF conne
--[ 2019.09.12.19.55.17.002.0 ]--
r 12         UF connec
--[ 2019.09.12.19.55.17.167.0 ]--
r 12         UF connect
--[ 2019.09.12.19.55.17.258.0 ]--
r 12         UF connecti
--[ 2019.09.12.19.55.17.282.0 ]--
r 12         UF connectio
--[ 2019.09.12.19.55.17.318.0 ]--
r 12         UF connection
--[ 2019.09.12.19.55.17.338.0 ]--
r 12         UF connections
--[ 2019.09.12.19.55.17.441.0 ]--
r 12         UF connections 
--[ 2019.09.12.19.55.17.512.0 ]--
r 12         UF connections =
--[ 2019.09.12.19.55.17.638.0 ]--
r 12         UF connections = 
--[ 2019.09.12.19.55.17.981.0 ]--
r 12         UF connections = n
--[ 2019.09.12.19.55.17.997.0 ]--
r 12         UF connections = ne
--[ 2019.09.12.19.55.18.112.0 ]--
r 12         UF connections = new
--[ 2019.09.12.19.55.18.244.0 ]--
r 12         UF connections = new 
--[ 2019.09.12.19.55.18.479.0 ]--
r 12         UF connections = new I
--[ 2019.09.12.19.55.18.556.0 ]--
r 12         UF connections = new IF
--[ 2019.09.12.19.55.18.945.0 ]--
r 12         UF connections = new I
--[ 2019.09.12.19.55.19.056.0 ]--
r 12         UF connections = new 
--[ 2019.09.12.19.55.19.220.0 ]--
r 12         UF connections = new U
--[ 2019.09.12.19.55.19.343.0 ]--
r 12         UF connections = new UF
--[ 2019.09.12.19.55.19.451.0 ]--
r 12         UF connections = new UF)
--[ 2019.09.12.19.55.19.839.0 ]--
r 12         UF connections = new UF) 
--[ 2019.09.12.19.55.19.899.0 ]--
r 12         UF connections = new UF)
--[ 2019.09.12.19.55.20.032.0 ]--
r 12         UF connections = new UF
--[ 2019.09.12.19.55.20.216.0 ]--
r 12         UF connections = new UF()
--[ 2019.09.12.19.55.22.624.0 ]--
+ 7     
--[ 2019.09.12.19.55.24.696.0 ]--
r 7     p
--[ 2019.09.12.19.55.24.774.0 ]--
r 7     pr
--[ 2019.09.12.19.55.24.907.0 ]--
r 7     pri
--[ 2019.09.12.19.55.25.030.0 ]--
r 7     pria
--[ 2019.09.12.19.55.25.469.0 ]--
r 7     pri
--[ 2019.09.12.19.55.25.576.0 ]--
r 7     priv
--[ 2019.09.12.19.55.25.689.0 ]--
r 7     priva
--[ 2019.09.12.19.55.25.794.0 ]--
r 7     privat
--[ 2019.09.12.19.55.25.856.0 ]--
r 7     private
--[ 2019.09.12.19.55.25.887.0 ]--
r 7     private 
--[ 2019.09.12.19.55.26.021.0 ]--
r 7     private i
--[ 2019.09.12.19.55.26.079.0 ]--
r 7     private in
--[ 2019.09.12.19.55.26.170.0 ]--
r 7     private int
--[ 2019.09.12.19.55.26.231.0 ]--
r 7     private int 
--[ 2019.09.12.19.55.27.213.0 ]--
r 7     private int  
--[ 2019.09.12.19.55.27.254.0 ]--
r 7     private int 
--[ 2019.09.12.19.56.33.234.0 ]--
r 7     private int  
--[ 2019.09.12.19.56.33.292.0 ]--
r 7     private int 
--[ 2019.09.12.19.56.35.152.0 ]--
r 7     private int b
--[ 2019.09.12.19.56.35.227.0 ]--
r 7     private int bo
--[ 2019.09.12.19.56.35.296.0 ]--
r 7     private int boa
--[ 2019.09.12.19.56.35.327.0 ]--
r 7     private int boar
--[ 2019.09.12.19.56.35.559.0 ]--
r 7     private int boars
--[ 2019.09.12.19.56.35.886.0 ]--
r 7     private int boar
--[ 2019.09.12.19.56.35.959.0 ]--
r 7     private int board
--[ 2019.09.12.19.56.36.479.0 ]--
r 7     private int boardS
--[ 2019.09.12.19.56.36.559.0 ]--
r 7     private int boardSi
--[ 2019.09.12.19.56.36.608.0 ]--
r 7     private int boardSiz
--[ 2019.09.12.19.56.36.900.0 ]--
r 7     private int boardSize
--[ 2019.09.12.19.56.37.543.0 ]--
r 7     private int 
--[ 2019.09.12.19.56.54.197.0 ]--
r 7     private int b
--[ 2019.09.12.19.56.54.288.0 ]--
r 7     private int bo
--[ 2019.09.12.19.56.54.323.0 ]--
r 7     private int boa
--[ 2019.09.12.19.56.54.420.0 ]--
r 7     private int boar
--[ 2019.09.12.19.56.54.912.0 ]--
r 7     private int board
--[ 2019.09.12.19.56.55.195.0 ]--
r 7     private int boardP
--[ 2019.09.12.19.56.55.367.0 ]--
r 7     private int boardPl
--[ 2019.09.12.19.56.55.522.0 ]--
r 7     private int boardPli
--[ 2019.09.12.19.56.55.614.0 ]--
r 7     private int boardPliz
--[ 2019.09.12.19.56.55.868.0 ]--
r 7     private int boardPli
--[ 2019.09.12.19.56.55.962.0 ]--
r 7     private int boardPlis
--[ 2019.09.12.19.56.56.161.0 ]--
r 7     private int boardPli
--[ 2019.09.12.19.56.56.304.0 ]--
r 7     private int boardPl
--[ 2019.09.12.19.56.56.479.0 ]--
r 7     private int boardPlu
--[ 2019.09.12.19.56.56.580.0 ]--
r 7     private int boardPlus
--[ 2019.09.12.19.56.57.233.0 ]--
r 7     private int boardPlusG
--[ 2019.09.12.19.56.57.897.0 ]--
r 7     private int boardPlusGh
--[ 2019.09.12.19.56.57.985.0 ]--
r 7     private int boardPlusGho
--[ 2019.09.12.19.56.58.048.0 ]--
r 7     private int boardPlusGhos
--[ 2019.09.12.19.56.58.101.0 ]--
r 7     private int boardPlusGhost
--[ 2019.09.12.19.56.58.709.0 ]--
r 7     private int boardPlusGhostN
--[ 2019.09.12.19.56.58.845.0 ]--
r 7     private int boardPlusGhostNo
--[ 2019.09.12.19.56.58.959.0 ]--
r 7     private int boardPlusGhostNod
--[ 2019.09.12.19.56.58.987.0 ]--
r 7     private int boardPlusGhostNode
--[ 2019.09.12.19.56.59.138.0 ]--
r 7     private int boardPlusGhostNodes
--[ 2019.09.12.19.57.00.415.0 ]--
r 7     private int boardPlusGhostNodes;
--[ 2019.09.12.19.57.02.066.0 ]--
r 7     private int boardPlusGhostNodes; 
--[ 2019.09.12.19.57.02.148.0 ]--
r 7     private int boardPlusGhostNodes;
--[ 2019.09.12.19.57.31.259.0 ]--
+ 13         
--[ 2019.09.12.19.57.32.497.0 ]--
r 13         b
--[ 2019.09.12.19.57.32.852.0 ]--
r 13         boa
--[ 2019.09.12.19.57.32.939.0 ]--
r 13         board
--[ 2019.09.12.19.57.33.034.0 ]--
r 13         boardP
--[ 2019.09.12.19.57.33.112.0 ]--
r 13         boardPl
--[ 2019.09.12.19.57.33.285.0 ]--
r 13         boardPlu
--[ 2019.09.12.19.57.33.380.0 ]--
r 13         boardPlus
--[ 2019.09.12.19.57.33.549.0 ]--
r 13         boardPlusG
--[ 2019.09.12.19.57.33.999.0 ]--
r 13         boardPlusGhostNodes
--[ 2019.09.12.19.57.34.394.0 ]--
r 13         boardPlusGhostNodes 
--[ 2019.09.12.19.57.34.483.0 ]--
r 13         boardPlusGhostNodes =
--[ 2019.09.12.19.57.34.554.0 ]--
r 13         boardPlusGhostNodes = 
--[ 2019.09.12.19.57.40.921.0 ]--
r 13         boardPlusGhostNodes = N
--[ 2019.09.12.19.57.41.285.0 ]--
r 13         boardPlusGhostNodes = N*
--[ 2019.09.12.19.57.41.546.0 ]--
r 13         boardPlusGhostNodes = N*N
--[ 2019.09.12.19.57.42.380.0 ]--
r 13         boardPlusGhostNodes = N*N)
--[ 2019.09.12.19.57.43.946.0 ]--
r 13         boardPlusGhostNodes = (N*N)
--[ 2019.09.12.19.57.45.412.0 ]--
r 13         boardPlusGhostNodes = (N*N) 
--[ 2019.09.12.19.57.45.525.0 ]--
r 13         boardPlusGhostNodes = (N*N) +
--[ 2019.09.12.19.57.45.645.0 ]--
r 13         boardPlusGhostNodes = (N*N) ++
--[ 2019.09.12.19.57.45.994.0 ]--
r 13         boardPlusGhostNodes = (N*N) +
--[ 2019.09.12.19.57.46.207.0 ]--
r 13         boardPlusGhostNodes = (N*N) + 
--[ 2019.09.12.19.57.46.295.0 ]--
r 13         boardPlusGhostNodes = (N*N) + 4
--[ 2019.09.12.19.57.47.145.0 ]--
r 13         boardPlusGhostNodes = (N*N) + 4 
--[ 2019.09.12.19.57.47.204.0 ]--
r 13         boardPlusGhostNodes = (N*N) + 4
--[ 2019.09.12.19.57.49.494.0 ]--
r 14         UF connections = new UF(b)
--[ 2019.09.12.19.57.49.594.0 ]--
r 14         UF connections = new UF(bo)
--[ 2019.09.12.19.57.49.628.0 ]--
r 14         UF connections = new UF(boa)
--[ 2019.09.12.19.57.49.728.0 ]--
r 14         UF connections = new UF(boar)
--[ 2019.09.12.19.57.49.908.0 ]--
r 14         UF connections = new UF(board)
--[ 2019.09.12.19.57.51.338.0 ]--
r 14         UF connections = new UF(boardPlusGhostNodes)
--[ 2019.09.12.19.57.54.427.0 ]--
r 13         boardPlusGhostNodes = (N*N) + 4;
--[ 2019.09.12.19.57.56.451.0 ]--
r 14         UF connections = new UF(boardPlusGhostNodes);
--[ 2019.09.12.19.58.42.433.0 ]--
r 8 
r 15 
--[ 2019.09.12.19.59.07.209.0 ]--
r 14         UF connections = new UF(n);
--[ 2019.09.12.19.59.07.239.0 ]--
r 14         UF connections = new UF(no);
--[ 2019.09.12.19.59.07.277.0 ]--
r 14         UF connections = new UF(nod);
--[ 2019.09.12.19.59.07.354.0 ]--
r 14         UF connections = new UF(node);
--[ 2019.09.12.19.59.07.489.0 ]--
r 14         UF connections = new UF(nodes);
--[ 2019.09.12.19.59.12.273.0 ]--
r 13         nodes = (N*N) + 4;
--[ 2019.09.12.19.59.14.755.0 ]--
r 7     private int nodes;
--[ 2019.09.12.19.59.16.000.0 ]--
r 7     private int nodes ;
--[ 2019.09.12.19.59.16.023.0 ]--
r 7     private int nodes;
--[ 2019.09.12.20.04.01.775.0 ]--
+ 24         
--[ 2019.09.12.20.04.02.119.0 ]--
r 24         /
--[ 2019.09.12.20.04.02.228.0 ]--
r 24         //
--[ 2019.09.12.20.04.02.651.0 ]--
r 24         //C
--[ 2019.09.12.20.04.02.764.0 ]--
r 24         //Cj
--[ 2019.09.12.20.04.02.877.0 ]--
r 24         //Cje
--[ 2019.09.12.20.04.02.981.0 ]--
r 24         //Cjec
--[ 2019.09.12.20.04.03.298.0 ]--
r 24         //Cje
--[ 2019.09.12.20.04.03.390.0 ]--
r 24         //Cj
--[ 2019.09.12.20.04.03.495.0 ]--
r 24         //C
--[ 2019.09.12.20.04.03.723.0 ]--
r 24         //Ch
--[ 2019.09.12.20.04.03.818.0 ]--
r 24         //Che
--[ 2019.09.12.20.04.03.878.0 ]--
r 24         //Chec
--[ 2019.09.12.20.04.03.972.0 ]--
r 24         //Check
--[ 2019.09.12.20.04.04.111.0 ]--
r 24         //Check 
--[ 2019.09.12.20.04.04.164.0 ]--
r 24         //Check i
--[ 2019.09.12.20.04.04.239.0 ]--
r 24         //Check is
--[ 2019.09.12.20.04.04.324.0 ]--
r 24         //Check is 
--[ 2019.09.12.20.04.04.883.0 ]--
r 24         //Check is
--[ 2019.09.12.20.04.05.160.0 ]--
r 24         //Check i
--[ 2019.09.12.20.04.05.301.0 ]--
r 24         //Check 
--[ 2019.09.12.20.04.05.398.0 ]--
r 24         //Check f
--[ 2019.09.12.20.04.05.741.0 ]--
r 24         //Check 
--[ 2019.09.12.20.04.05.828.0 ]--
r 24         //Check i
--[ 2019.09.12.20.04.05.952.0 ]--
r 24         //Check if
--[ 2019.09.12.20.04.06.151.0 ]--
r 24         //Check if 
--[ 2019.09.12.20.04.07.097.0 ]--
r 24         //Check if  
--[ 2019.09.12.20.04.07.166.0 ]--
r 24         //Check if 
--[ 2019.09.12.20.04.07.574.0 ]--
r 24         //Check if t
--[ 2019.09.12.20.04.07.705.0 ]--
r 24         //Check if th
--[ 2019.09.12.20.04.07.783.0 ]--
r 24         //Check if the
--[ 2019.09.12.20.04.08.068.0 ]--
r 24         //Check if the 
--[ 2019.09.12.20.04.09.371.0 ]--
r 24         //Check if the  
--[ 2019.09.12.20.04.09.433.0 ]--
r 24         //Check if the 
--[ 2019.09.12.20.04.10.607.0 ]--
r 24         //Check if the t
--[ 2019.09.12.20.04.10.630.0 ]--
r 24         //Check if the ti
--[ 2019.09.12.20.04.10.788.0 ]--
r 24         //Check if the til
--[ 2019.09.12.20.04.10.854.0 ]--
r 24         //Check if the tile
--[ 2019.09.12.20.04.10.962.0 ]--
r 24         //Check if the tile 
--[ 2019.09.12.20.04.11.013.0 ]--
r 24         //Check if the tile a
--[ 2019.09.12.20.04.11.149.0 ]--
r 24         //Check if the tile at
--[ 2019.09.12.20.04.11.310.0 ]--
r 24         //Check if the tile at 
--[ 2019.09.12.20.04.11.538.0 ]--
r 24         //Check if the tile at o
--[ 2019.09.12.20.04.11.582.0 ]--
r 24         //Check if the tile at oa
--[ 2019.09.12.20.04.11.759.0 ]--
r 24         //Check if the tile at o
--[ 2019.09.12.20.04.11.899.0 ]--
r 24         //Check if the tile at 
--[ 2019.09.12.20.04.11.987.0 ]--
r 24         //Check if the tile at b
--[ 2019.09.12.20.04.12.114.0 ]--
r 24         //Check if the tile at bo
--[ 2019.09.12.20.04.12.154.0 ]--
r 24         //Check if the tile at boa
--[ 2019.09.12.20.04.12.246.0 ]--
r 24         //Check if the tile at boar
--[ 2019.09.12.20.04.12.396.0 ]--
r 24         //Check if the tile at board
--[ 2019.09.12.20.04.12.524.0 ]--
r 24         //Check if the tile at board[
--[ 2019.09.12.20.04.12.662.0 ]--
r 24         //Check if the tile at board[r
--[ 2019.09.12.20.04.13.446.0 ]--
r 24         //Check if the tile at board[ro
--[ 2019.09.12.20.04.13.534.0 ]--
r 24         //Check if the tile at board[row
--[ 2019.09.12.20.04.13.598.0 ]--
r 24         //Check if the tile at board[row]
--[ 2019.09.12.20.04.13.651.0 ]--
r 24         //Check if the tile at board[row][
--[ 2019.09.12.20.04.13.782.0 ]--
r 24         //Check if the tile at board[row][c
--[ 2019.09.12.20.04.13.891.0 ]--
r 24         //Check if the tile at board[row][co
--[ 2019.09.12.20.04.14.285.0 ]--
r 24         //Check if the tile at board[row][col
--[ 2019.09.12.20.04.14.682.0 ]--
r 24         //Check if the tile at board[row][col]
--[ 2019.09.12.20.04.14.815.0 ]--
r 24         //Check if the tile at board[row][col] 
--[ 2019.09.12.20.04.15.409.0 ]--
r 24         //Check if the tile at board[row][col] i
--[ 2019.09.12.20.04.15.492.0 ]--
r 24         //Check if the tile at board[row][col] is
--[ 2019.09.12.20.04.15.663.0 ]--
r 24         //Check if the tile at board[row][col] is 
--[ 2019.09.12.20.04.16.353.0 ]--
r 24         //Check if the tile at board[row][col] is
--[ 2019.09.12.20.04.16.440.0 ]--
r 24         //Check if the tile at board[row][col] i
--[ 2019.09.12.20.04.16.555.0 ]--
r 24         //Check if the tile at board[row][col] 
--[ 2019.09.12.20.04.16.738.0 ]--
r 24         //Check if the tile at board[row][col] h
--[ 2019.09.12.20.04.16.813.0 ]--
r 24         //Check if the tile at board[row][col] ha
--[ 2019.09.12.20.04.16.879.0 ]--
r 24         //Check if the tile at board[row][col] has
--[ 2019.09.12.20.04.16.965.0 ]--
r 24         //Check if the tile at board[row][col] has 
--[ 2019.09.12.20.04.17.133.0 ]--
r 24         //Check if the tile at board[row][col] has b
--[ 2019.09.12.20.04.17.241.0 ]--
r 24         //Check if the tile at board[row][col] has be
--[ 2019.09.12.20.04.17.363.0 ]--
r 24         //Check if the tile at board[row][col] has bee
--[ 2019.09.12.20.04.17.489.0 ]--
r 24         //Check if the tile at board[row][col] has been
--[ 2019.09.12.20.04.17.543.0 ]--
r 24         //Check if the tile at board[row][col] has been 
--[ 2019.09.12.20.04.17.691.0 ]--
r 24         //Check if the tile at board[row][col] has been s
--[ 2019.09.12.20.04.17.865.0 ]--
r 24         //Check if the tile at board[row][col] has been se
--[ 2019.09.12.20.04.17.892.0 ]--
r 24         //Check if the tile at board[row][col] has been set
--[ 2019.09.12.20.04.17.992.0 ]--
r 24         //Check if the tile at board[row][col] has been set 
--[ 2019.09.12.20.04.18.303.0 ]--
r 24         //Check if the tile at board[row][col] has been set b
--[ 2019.09.12.20.04.18.418.0 ]--
r 24         //Check if the tile at board[row][col] has been set by
--[ 2019.09.12.20.04.18.592.0 ]--
r 24         //Check if the tile at board[row][col] has been set by 
--[ 2019.09.12.20.04.18.968.0 ]--
r 24         //Check if the tile at board[row][col] has been set by e
--[ 2019.09.12.20.04.19.078.0 ]--
r 24         //Check if the tile at board[row][col] has been set by ei
--[ 2019.09.12.20.04.19.172.0 ]--
r 24         //Check if the tile at board[row][col] has been set by eit
--[ 2019.09.12.20.04.19.232.0 ]--
r 24         //Check if the tile at board[row][col] has been set by eith
--[ 2019.09.12.20.04.19.303.0 ]--
r 24         //Check if the tile at board[row][col] has been set by eithe
--[ 2019.09.12.20.04.19.365.0 ]--
r 24         //Check if the tile at board[row][col] has been set by either
--[ 2019.09.12.20.04.19.455.0 ]--
r 24         //Check if the tile at board[row][col] has been set by either 
--[ 2019.09.12.20.04.19.492.0 ]--
r 24         //Check if the tile at board[row][col] has been set by either p
--[ 2019.09.12.20.04.19.553.0 ]--
r 24         //Check if the tile at board[row][col] has been set by either pl
--[ 2019.09.12.20.04.19.641.0 ]--
r 24         //Check if the tile at board[row][col] has been set by either pla
--[ 2019.09.12.20.04.19.667.0 ]--
r 24         //Check if the tile at board[row][col] has been set by either play
--[ 2019.09.12.20.04.19.753.0 ]--
r 24         //Check if the tile at board[row][col] has been set by either playe
--[ 2019.09.12.20.04.19.846.0 ]--
r 24         //Check if the tile at board[row][col] has been set by either player
--[ 2019.09.12.20.04.21.928.0 ]--
r 24         //Check if the tile at board[row][col] has been set by either player 
--[ 2019.09.12.20.04.21.952.0 ]--
r 24         //Check if the tile at board[row][col] has been set by either player
--[ 2019.09.12.20.10.48.086.0 ]--
+ 8     
--[ 2019.09.12.20.10.48.825.0 ]--
r 8     p
--[ 2019.09.12.20.10.48.914.0 ]--
r 8     pr
--[ 2019.09.12.20.10.49.008.0 ]--
r 8     pri
--[ 2019.09.12.20.10.49.310.0 ]--
r 8     priv
--[ 2019.09.12.20.10.49.423.0 ]--
r 8     priva
--[ 2019.09.12.20.10.49.513.0 ]--
r 8     privat
--[ 2019.09.12.20.10.49.579.0 ]--
r 8     private
--[ 2019.09.12.20.10.49.642.0 ]--
r 8     private 
--[ 2019.09.12.20.10.49.869.0 ]--
r 8     private i
--[ 2019.09.12.20.10.49.956.0 ]--
r 8     private in
--[ 2019.09.12.20.10.50.000.0 ]--
r 8     private int
--[ 2019.09.12.20.10.50.156.0 ]--
r 8     private int 
--[ 2019.09.12.20.11.03.568.0 ]--
r 8     private int s
--[ 2019.09.12.20.11.03.676.0 ]--
r 8     private int si
--[ 2019.09.12.20.11.03.768.0 ]--
r 8     private int siz
--[ 2019.09.12.20.11.03.938.0 ]--
r 8     private int size
--[ 2019.09.12.20.11.04.560.0 ]--
r 8     private int size 
--[ 2019.09.12.20.11.04.623.0 ]--
r 8     private int size
--[ 2019.09.12.20.11.04.826.0 ]--
r 8     private int 
--[ 2019.09.12.20.11.07.030.0 ]--
r 8     private int s
--[ 2019.09.12.20.11.07.111.0 ]--
r 8     private int si
--[ 2019.09.12.20.11.07.166.0 ]--
r 8     private int siz
--[ 2019.09.12.20.11.07.335.0 ]--
r 8     private int size
--[ 2019.09.12.20.11.07.395.0 ]--
r 8     private int size;
--[ 2019.09.12.20.11.07.570.0 ]--
r 8     private int size; 
--[ 2019.09.12.20.11.07.707.0 ]--
r 8     private int size;
--[ 2019.09.12.20.11.11.307.0 ]--
+ 15         
--[ 2019.09.12.20.11.11.419.0 ]--
r 15         s
--[ 2019.09.12.20.11.11.762.0 ]--
r 15         si
--[ 2019.09.12.20.11.11.801.0 ]--
r 15         size
--[ 2019.09.12.20.11.11.846.0 ]--
r 15         size 
--[ 2019.09.12.20.11.11.882.0 ]--
r 15         size =
--[ 2019.09.12.20.11.11.924.0 ]--
r 15         size = 
--[ 2019.09.12.20.11.12.160.0 ]--
r 15         size = N
--[ 2019.09.12.20.11.12.374.0 ]--
r 15         size = N;
--[ 2019.09.12.20.11.21.824.0 ]--
r 8     private int t;
--[ 2019.09.12.20.11.21.962.0 ]--
r 8     private int ti;
--[ 2019.09.12.20.11.22.143.0 ]--
r 8     private int til;
--[ 2019.09.12.20.11.22.255.0 ]--
r 8     private int tile;
--[ 2019.09.12.20.11.22.353.0 ]--
r 8     private int tiles;
--[ 2019.09.12.20.11.46.629.0 ]--
r 8     private int s;
--[ 2019.09.12.20.11.46.742.0 ]--
r 8     private int si;
--[ 2019.09.12.20.11.46.833.0 ]--
r 8     private int siz;
--[ 2019.09.12.20.11.46.971.0 ]--
r 8     private int size;
--[ 2019.09.12.20.11.48.296.0 ]--
r 8     private int size ;
--[ 2019.09.12.20.11.48.339.0 ]--
r 8     private int size;
--[ 2019.09.12.20.12.08.574.0 ]--
r 14         nodes = (N*N) + 4; 
--[ 2019.09.12.20.12.09.753.0 ]--
r 14         nodes = (N*N) + 4; /
--[ 2019.09.12.20.12.09.850.0 ]--
r 14         nodes = (N*N) + 4; //
--[ 2019.09.12.20.12.10.211.0 ]--
r 14         nodes = (N*N) + 4; //C
--[ 2019.09.12.20.12.10.338.0 ]--
r 14         nodes = (N*N) + 4; //Cr
--[ 2019.09.12.20.12.10.478.0 ]--
r 14         nodes = (N*N) + 4; //Cre
--[ 2019.09.12.20.12.10.633.0 ]--
r 14         nodes = (N*N) + 4; //Crea
--[ 2019.09.12.20.12.10.698.0 ]--
r 14         nodes = (N*N) + 4; //Creat
--[ 2019.09.12.20.12.10.815.0 ]--
r 14         nodes = (N*N) + 4; //Creati
--[ 2019.09.12.20.12.10.901.0 ]--
r 14         nodes = (N*N) + 4; //Creatin
--[ 2019.09.12.20.12.11.015.0 ]--
r 14         nodes = (N*N) + 4; //Creating
--[ 2019.09.12.20.12.11.048.0 ]--
r 14         nodes = (N*N) + 4; //Creating 
--[ 2019.09.12.20.12.11.135.0 ]--
r 14         nodes = (N*N) + 4; //Creating t
--[ 2019.09.12.20.12.11.234.0 ]--
r 14         nodes = (N*N) + 4; //Creating th
--[ 2019.09.12.20.12.11.304.0 ]--
r 14         nodes = (N*N) + 4; //Creating the
--[ 2019.09.12.20.12.11.353.0 ]--
r 14         nodes = (N*N) + 4; //Creating the 
--[ 2019.09.12.20.12.11.434.0 ]--
r 14         nodes = (N*N) + 4; //Creating the n
--[ 2019.09.12.20.12.12.081.0 ]--
r 14         nodes = (N*N) + 4; //Creating the 
--[ 2019.09.12.20.12.12.218.0 ]--
r 14         nodes = (N*N) + 4; //Creating 
--[ 2019.09.12.20.12.14.110.0 ]--
r 14         nodes = (N*N) + 4; //Creating  
--[ 2019.09.12.20.12.14.205.0 ]--
r 14         nodes = (N*N) + 4; //Creating 
--[ 2019.09.12.20.12.14.840.0 ]--
r 14         nodes = (N*N) + 4; //Creating i
--[ 2019.09.12.20.12.14.874.0 ]--
r 14         nodes = (N*N) + 4; //Creating in
--[ 2019.09.12.20.12.15.507.0 ]--
r 14         nodes = (N*N) + 4; //Creating i
--[ 2019.09.12.20.12.15.632.0 ]--
r 14         nodes = (N*N) + 4; //Creating 
--[ 2019.09.12.20.12.15.922.0 ]--
r 14         nodes = (N*N) + 4; //
--[ 2019.09.12.20.12.16.049.0 ]--
r 14         nodes = (N*N) + 4; 
--[ 2019.09.12.20.12.16.637.0 ]--
r 14         nodes = (N*N) + 4;
--[ 2019.09.12.20.14.24.212.0 ]--
r 16         UF connections = new UF(nodes); 
--[ 2019.09.12.20.14.24.253.0 ]--
r 16         UF connections = new UF(nodes);
--[ 2019.09.12.20.14.42.473.0 ]--
r 16         UF connections = new UF(nodes);o
--[ 2019.09.12.20.14.42.995.0 ]--
r 16         UF connections = new UF(nodes);
--[ 2019.09.12.20.14.43.322.0 ]--
+ 17         
--[ 2019.09.12.20.14.43.613.0 ]--
+ 17         
--[ 2019.09.12.20.14.43.915.0 ]--
r 18         f
--[ 2019.09.12.20.14.44.022.0 ]--
r 18         fo
--[ 2019.09.12.20.14.44.047.0 ]--
r 18         for
--[ 2019.09.12.20.14.44.105.0 ]--
r 18         for 
--[ 2019.09.12.20.14.44.192.0 ]--
r 18         for i
--[ 2019.09.12.20.14.44.267.0 ]--
r 18         for in
--[ 2019.09.12.20.14.44.335.0 ]--
r 18         for int
--[ 2019.09.12.20.14.44.396.0 ]--
r 18         for int 
--[ 2019.09.12.20.14.44.647.0 ]--
r 18         for int i
--[ 2019.09.12.20.14.44.813.0 ]--
r 18         for int 
--[ 2019.09.12.20.14.44.972.0 ]--
r 18         for int
--[ 2019.09.12.20.14.45.618.0 ]--
r 18         for 
--[ 2019.09.12.20.14.45.785.0 ]--
r 18         for
--[ 2019.09.12.20.14.46.036.0 ]--
r 18         for()
--[ 2019.09.12.20.14.46.179.0 ]--
r 18         for( )
--[ 2019.09.12.20.14.46.484.0 ]--
r 18         for()
--[ 2019.09.12.20.14.46.626.0 ]--
r 18         for(i)
--[ 2019.09.12.20.14.46.799.0 ]--
r 18         for(int)
--[ 2019.09.12.20.14.46.856.0 ]--
r 18         for(int )
--[ 2019.09.12.20.14.47.113.0 ]--
r 18         for(int i)
--[ 2019.09.12.20.14.49.095.0 ]--
r 18         for(int i )
--[ 2019.09.12.20.14.50.854.0 ]--
r 18         for(int i =)
--[ 2019.09.12.20.14.50.909.0 ]--
r 18         for(int i = )
--[ 2019.09.12.20.14.51.023.0 ]--
r 18         for(int i = 0)
--[ 2019.09.12.20.14.51.605.0 ]--
r 18         for(int i = 0;)
--[ 2019.09.12.20.14.51.676.0 ]--
r 18         for(int i = 0; )
--[ 2019.09.12.20.14.55.500.0 ]--
r 18         for(int i = 0; i)
--[ 2019.09.12.20.14.55.602.0 ]--
r 18         for(int i = 0; i )
--[ 2019.09.12.20.14.55.791.0 ]--
r 18         for(int i = 0; i <)
--[ 2019.09.12.20.14.55.940.0 ]--
r 18         for(int i = 0; i < )
--[ 2019.09.12.20.15.46.866.0 ]--
r 17 
--[ 2019.09.12.20.16.58.403.0 ]--
r 16         UF connections1 = new UF(nodes);
--[ 2019.09.12.20.17.00.680.0 ]--
+ 9     
--[ 2019.09.12.20.17.03.359.0 ]--
- 9
--[ 2019.09.12.20.17.10.104.0 ]--
+ 17         
--[ 2019.09.12.20.17.10.207.0 ]--
r 17         UF connections1 = new UF(nodes);
--[ 2019.09.12.20.17.12.130.0 ]--
r 17         UF connections = new UF(nodes);
--[ 2019.09.12.20.17.12.239.0 ]--
r 17         UF connections2 = new UF(nodes);
--[ 2019.09.12.20.18.15.567.0 ]--
r 19         for(int i = 0; i < N)
--[ 2019.09.12.20.18.16.936.0 ]--
r 19         for(int i = 0; i < N;)
--[ 2019.09.12.20.18.17.024.0 ]--
r 19         for(int i = 0; i < N; )
--[ 2019.09.12.20.18.17.802.0 ]--
r 19         for(int i = 0; i < N; i)
--[ 2019.09.12.20.18.17.898.0 ]--
r 19         for(int i = 0; i < N; i )
--[ 2019.09.12.20.18.18.003.0 ]--
r 19         for(int i = 0; i < N; i +)
--[ 2019.09.12.20.18.18.147.0 ]--
r 19         for(int i = 0; i < N; i ++)
--[ 2019.09.12.20.18.18.674.0 ]--
r 19         for(int i = 0; i < N; i ++
--[ 2019.09.12.20.18.18.777.0 ]--
r 19         for(int i = 0; i < N; i +
--[ 2019.09.12.20.18.18.887.0 ]--
r 19         for(int i = 0; i < N; i 
--[ 2019.09.12.20.18.19.305.0 ]--
r 19         for(int i = 0; i < N; i +
--[ 2019.09.12.20.18.19.409.0 ]--
r 19         for(int i = 0; i < N; i 
--[ 2019.09.12.20.18.19.513.0 ]--
r 19         for(int i = 0; i < N; i
--[ 2019.09.12.20.18.19.671.0 ]--
r 19         for(int i = 0; i < N; i+
--[ 2019.09.12.20.18.19.766.0 ]--
r 19         for(int i = 0; i < N; i++
--[ 2019.09.12.20.18.20.119.0 ]--
r 19         for(int i = 0; i < N; i++[]
--[ 2019.09.12.20.18.20.298.0 ]--
r 19         for(int i = 0; i < N; i++[)]
--[ 2019.09.12.20.18.20.903.0 ]--
r 19         for(int i = 0; i < N; i++[]
--[ 2019.09.12.20.18.21.459.0 ]--
r 19         for(int i = 0; i < N; i++
--[ 2019.09.12.20.18.22.105.0 ]--
r 19         for(int i = 0; i < N; i++)
--[ 2019.09.12.20.18.22.274.0 ]--
r 19         for(int i = 0; i < N; i++){
--[ 2019.09.12.20.18.22.590.0 ]--
+ 20 
+ 21 }
--[ 2019.09.12.20.18.22.607.0 ]--
r 21         }
--[ 2019.09.12.20.18.22.626.0 ]--
r 20             
--[ 2019.09.12.20.18.22.704.0 ]--
+ 20             
--[ 2019.09.12.20.18.23.975.0 ]--
- 20
--[ 2019.09.12.20.18.39.224.0 ]--
r 21         
--[ 2019.09.12.20.18.39.428.0 ]--
- 21
--[ 2019.09.12.20.18.39.630.0 ]--
- 20
--[ 2019.09.12.20.18.39.879.0 ]--
r 19         for(int i = 0; i < N; i++)
--[ 2019.09.12.20.18.40.994.0 ]--
r 19         for(int i = 0; i < N; i++){
--[ 2019.09.12.20.18.41.183.0 ]--
+ 20 
+ 21 }
--[ 2019.09.12.20.18.41.196.0 ]--
r 21         }
--[ 2019.09.12.20.18.41.215.0 ]--
r 20             
--[ 2019.09.12.20.18.41.956.0 ]--
- 20
--[ 2019.09.12.20.18.42.421.0 ]--
r 19         for(int i = 0; i < N; i++)
--[ 2019.09.12.20.18.42.692.0 ]--
r 19         for(int i = 0; i < N; i++){
--[ 2019.09.12.20.18.42.874.0 ]--
+ 20             
--[ 2019.09.12.20.25.19.289.0 ]--
r 20             c
--[ 2019.09.12.20.25.19.326.0 ]--
r 20             co
--[ 2019.09.12.20.25.19.477.0 ]--
r 20             con
--[ 2019.09.12.20.25.19.570.0 ]--
r 20             conn
--[ 2019.09.12.20.25.19.703.0 ]--
r 20             conne
--[ 2019.09.12.20.25.19.960.0 ]--
r 20             connec
--[ 2019.09.12.20.25.20.144.0 ]--
r 20             connect
--[ 2019.09.12.20.25.20.203.0 ]--
r 20             connecti
--[ 2019.09.12.20.25.20.261.0 ]--
r 20             connectio
--[ 2019.09.12.20.25.20.352.0 ]--
r 20             connection
--[ 2019.09.12.20.25.20.407.0 ]--
r 20             connections
--[ 2019.09.12.20.25.20.572.0 ]--
r 20             connections1
--[ 2019.09.12.20.25.21.191.0 ]--
r 20             connections1.
--[ 2019.09.12.20.25.22.407.0 ]--
r 20             connections1.u
--[ 2019.09.12.20.25.22.494.0 ]--
r 20             connections1.un
--[ 2019.09.12.20.25.22.672.0 ]--
r 20             connections1.uni
--[ 2019.09.12.20.25.22.856.0 ]--
r 20             connections1.unio
--[ 2019.09.12.20.25.22.927.0 ]--
r 20             connections1.union
--[ 2019.09.12.20.25.23.415.0 ]--
r 20             connections1.union()
--[ 2019.09.12.20.27.23.741.0 ]--
+ 20             
--[ 2019.09.12.20.27.24.864.0 ]--
r 20              
--[ 2019.09.12.20.27.24.913.0 ]--
r 20             
--[ 2019.09.12.20.27.51.760.0 ]--
r 20              
--[ 2019.09.12.20.27.52.049.0 ]--
r 20               
--[ 2019.09.12.20.27.52.107.0 ]--
r 20             
--[ 2019.09.12.20.27.52.743.0 ]--
r 20              
--[ 2019.09.12.20.27.52.798.0 ]--
r 20             
--[ 2019.09.12.20.27.57.181.0 ]--
- 20
--[ 2019.09.12.20.27.58.506.0 ]--
r 18     
--[ 2019.09.12.20.27.58.837.0 ]--
r 18         
--[ 2019.09.12.20.28.58.560.0 ]--
r 20             connections1.union()''
--[ 2019.09.12.20.28.59.306.0 ]--
r 20             connections1.union()
--[ 2019.09.12.20.28.59.382.0 ]--
r 20             connections1.union();
--[ 2019.09.12.20.29.31.827.0 ]--
r 16         UF connections1 = new UF(nodes); 
--[ 2019.09.12.20.29.31.924.0 ]--
r 16         UF connections1 = new UF(nodes); /
--[ 2019.09.12.20.29.32.037.0 ]--
r 16         UF connections1 = new UF(nodes); //
--[ 2019.09.12.20.29.32.269.0 ]--
r 16         UF connections1 = new UF(nodes); //C
--[ 2019.09.12.20.29.32.359.0 ]--
r 16         UF connections1 = new UF(nodes); //Co
--[ 2019.09.12.20.29.32.469.0 ]--
r 16         UF connections1 = new UF(nodes); //Con
--[ 2019.09.12.20.29.32.616.0 ]--
r 16         UF connections1 = new UF(nodes); //Conn
--[ 2019.09.12.20.29.32.682.0 ]--
r 16         UF connections1 = new UF(nodes); //Conne
--[ 2019.09.12.20.29.32.717.0 ]--
r 16         UF connections1 = new UF(nodes); //Connec
--[ 2019.09.12.20.29.32.893.0 ]--
r 16         UF connections1 = new UF(nodes); //Connect
--[ 2019.09.12.20.29.33.006.0 ]--
r 16         UF connections1 = new UF(nodes); //Connecti
--[ 2019.09.12.20.29.33.034.0 ]--
r 16         UF connections1 = new UF(nodes); //Connectio
--[ 2019.09.12.20.29.33.104.0 ]--
r 16         UF connections1 = new UF(nodes); //Connection
--[ 2019.09.12.20.29.33.178.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections
--[ 2019.09.12.20.29.33.260.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections 
--[ 2019.09.12.20.29.33.421.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections f
--[ 2019.09.12.20.29.33.459.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections fo
--[ 2019.09.12.20.29.33.566.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for
--[ 2019.09.12.20.29.33.787.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for 
--[ 2019.09.12.20.29.34.426.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for t
--[ 2019.09.12.20.29.34.544.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for th
--[ 2019.09.12.20.29.34.575.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the
--[ 2019.09.12.20.29.34.802.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 
--[ 2019.09.12.20.29.36.281.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2
--[ 2019.09.12.20.29.36.421.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2 
--[ 2019.09.12.20.29.36.520.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2 r
--[ 2019.09.12.20.29.36.560.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2 re
--[ 2019.09.12.20.29.36.717.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2 red
--[ 2019.09.12.20.29.37.234.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2 red 
--[ 2019.09.12.20.29.39.382.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2 red  
--[ 2019.09.12.20.29.39.440.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2 red 
--[ 2019.09.12.20.29.40.291.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2 red g
--[ 2019.09.12.20.29.41.021.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2 red gh
--[ 2019.09.12.20.29.41.635.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2 red gho
--[ 2019.09.12.20.29.41.738.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2 red ghos
--[ 2019.09.12.20.29.41.830.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2 red ghost
--[ 2019.09.12.20.29.41.877.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2 red ghost 
--[ 2019.09.12.20.29.41.964.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2 red ghost n
--[ 2019.09.12.20.29.42.011.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2 red ghost no
--[ 2019.09.12.20.29.42.130.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2 red ghost nod
--[ 2019.09.12.20.29.42.199.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2 red ghost node
--[ 2019.09.12.20.29.42.321.0 ]--
r 16         UF connections1 = new UF(nodes); //Connections for the 2 red ghost nodes
--[ 2019.09.12.20.29.42.873.0 ]--
r 17         UF connections2 = new UF(nodes); 
--[ 2019.09.12.20.29.43.043.0 ]--
r 17         UF connections2 = new UF(nodes); /
--[ 2019.09.12.20.29.43.133.0 ]--
r 17         UF connections2 = new UF(nodes); //
--[ 2019.09.12.20.29.43.504.0 ]--
r 17         UF connections2 = new UF(nodes); //C
--[ 2019.09.12.20.29.43.583.0 ]--
r 17         UF connections2 = new UF(nodes); //Co
--[ 2019.09.12.20.29.43.688.0 ]--
r 17         UF connections2 = new UF(nodes); //Con
--[ 2019.09.12.20.29.43.786.0 ]--
r 17         UF connections2 = new UF(nodes); //Conn
--[ 2019.09.12.20.29.43.889.0 ]--
r 17         UF connections2 = new UF(nodes); //Conne
--[ 2019.09.12.20.29.43.924.0 ]--
r 17         UF connections2 = new UF(nodes); //Connec
--[ 2019.09.12.20.29.44.063.0 ]--
r 17         UF connections2 = new UF(nodes); //Connect
--[ 2019.09.12.20.29.44.138.0 ]--
r 17         UF connections2 = new UF(nodes); //Connecti
--[ 2019.09.12.20.29.44.206.0 ]--
r 17         UF connections2 = new UF(nodes); //Connectio
--[ 2019.09.12.20.29.44.258.0 ]--
r 17         UF connections2 = new UF(nodes); //Connection
--[ 2019.09.12.20.29.44.303.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections
--[ 2019.09.12.20.29.44.359.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections 
--[ 2019.09.12.20.29.44.432.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections f
--[ 2019.09.12.20.29.44.594.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections fo
--[ 2019.09.12.20.29.44.612.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for
--[ 2019.09.12.20.29.44.638.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for 
--[ 2019.09.12.20.29.44.689.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for t
--[ 2019.09.12.20.29.44.747.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for th
--[ 2019.09.12.20.29.44.820.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the
--[ 2019.09.12.20.29.44.913.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 
--[ 2019.09.12.20.29.45.443.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2
--[ 2019.09.12.20.29.45.931.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 
--[ 2019.09.12.20.29.46.042.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 b
--[ 2019.09.12.20.29.46.130.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 bl
--[ 2019.09.12.20.29.46.330.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blu
--[ 2019.09.12.20.29.46.363.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blue
--[ 2019.09.12.20.29.46.467.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blue 
--[ 2019.09.12.20.29.46.826.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blue g
--[ 2019.09.12.20.29.47.108.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blue gh
--[ 2019.09.12.20.29.47.140.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blue gho
--[ 2019.09.12.20.29.47.204.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blue ghos
--[ 2019.09.12.20.29.47.272.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blue ghost
--[ 2019.09.12.20.29.47.310.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blue ghost 
--[ 2019.09.12.20.29.47.435.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blue ghost n
--[ 2019.09.12.20.29.47.533.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blue ghost no
--[ 2019.09.12.20.29.47.584.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blue ghost not
--[ 2019.09.12.20.29.47.626.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blue ghost note
--[ 2019.09.12.20.29.47.807.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blue ghost not
--[ 2019.09.12.20.29.47.955.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blue ghost nod
--[ 2019.09.12.20.29.47.982.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blue ghost node
--[ 2019.09.12.20.29.48.114.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blue ghost nodes
--[ 2019.09.12.20.29.48.852.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blue ghost nodes 
--[ 2019.09.12.20.29.48.895.0 ]--
r 17         UF connections2 = new UF(nodes); //Connections for the 2 blue ghost nodes
--[ 2019.09.12.20.32.02.796.0 ]--
+ 14         
--[ 2019.09.12.20.32.03.291.0 ]--
r 14         a
--[ 2019.09.12.20.32.03.382.0 ]--
r 14         al
--[ 2019.09.12.20.32.03.477.0 ]--
r 14         all
--[ 2019.09.12.20.32.04.290.0 ]--
r 14         allT
--[ 2019.09.12.20.32.04.346.0 ]--
r 14         allTi
--[ 2019.09.12.20.32.04.472.0 ]--
r 14         allTil
--[ 2019.09.12.20.32.04.525.0 ]--
r 14         allTile
--[ 2019.09.12.20.32.04.655.0 ]--
r 14         allTiles
--[ 2019.09.12.20.32.04.773.0 ]--
r 14         allTiles 
--[ 2019.09.12.20.32.04.961.0 ]--
r 14         allTiles =
--[ 2019.09.12.20.32.05.004.0 ]--
r 14         allTiles = 
--[ 2019.09.12.20.32.05.866.0 ]--
r 14         allTiles = b
--[ 2019.09.12.20.32.06.046.0 ]--
r 14         allTiles = b*
--[ 2019.09.12.20.32.06.252.0 ]--
r 14         allTiles = b*b
--[ 2019.09.12.20.32.06.528.0 ]--
r 14         allTiles = b*
--[ 2019.09.12.20.32.06.656.0 ]--
r 14         allTiles = b
--[ 2019.09.12.20.32.06.747.0 ]--
r 14         allTiles = 
--[ 2019.09.12.20.32.07.144.0 ]--
r 14         allTiles = N
--[ 2019.09.12.20.32.07.379.0 ]--
r 14         allTiles = N*
--[ 2019.09.12.20.32.07.577.0 ]--
r 14         allTiles = N*n
--[ 2019.09.12.20.32.08.062.0 ]--
r 14         allTiles = N*
--[ 2019.09.12.20.32.08.224.0 ]--
r 14         allTiles = N*N
--[ 2019.09.12.20.32.13.528.0 ]--
r 14         allTiles = N*N;
--[ 2019.09.12.20.32.15.514.0 ]--
+ 9     
--[ 2019.09.12.20.32.16.022.0 ]--
r 9     p
--[ 2019.09.12.20.32.16.121.0 ]--
r 9     pr
--[ 2019.09.12.20.32.16.226.0 ]--
r 9     pri
--[ 2019.09.12.20.32.16.788.0 ]--
r 9     priv
--[ 2019.09.12.20.32.16.925.0 ]--
r 9     priva
--[ 2019.09.12.20.32.17.049.0 ]--
r 9     privat
--[ 2019.09.12.20.32.17.097.0 ]--
r 9     private
--[ 2019.09.12.20.32.17.109.0 ]--
r 9     private 
--[ 2019.09.12.20.32.17.249.0 ]--
r 9     private i
--[ 2019.09.12.20.32.17.290.0 ]--
r 9     private in
--[ 2019.09.12.20.32.17.387.0 ]--
r 9     private int
--[ 2019.09.12.20.32.18.443.0 ]--
r 9     private int 
--[ 2019.09.12.20.32.18.580.0 ]--
r 9     private int a
--[ 2019.09.12.20.32.18.685.0 ]--
r 9     private int al
--[ 2019.09.12.20.32.18.807.0 ]--
r 9     private int all
--[ 2019.09.12.20.32.18.974.0 ]--
r 9     private int allT
--[ 2019.09.12.20.32.19.024.0 ]--
r 9     private int allTi
--[ 2019.09.12.20.32.19.139.0 ]--
r 9     private int allTil
--[ 2019.09.12.20.32.19.168.0 ]--
r 9     private int allTile
--[ 2019.09.12.20.32.19.299.0 ]--
r 9     private int allTiles
--[ 2019.09.12.20.32.19.958.0 ]--
r 9     private int allTiles 
--[ 2019.09.12.20.32.19.996.0 ]--
r 9     private int allTiles
--[ 2019.09.12.20.32.36.033.0 ]--
r 9     private int allTiles;
--[ 2019.09.12.20.32.39.563.0 ]--
r 22             connections1.union(t);
--[ 2019.09.12.20.32.39.654.0 ]--
r 22             connections1.union(to);
--[ 2019.09.12.20.32.39.740.0 ]--
r 22             connections1.union(tot);
--[ 2019.09.12.20.32.39.809.0 ]--
r 22             connections1.union(tota);
--[ 2019.09.12.20.32.39.881.0 ]--
r 22             connections1.union(total);
--[ 2019.09.12.20.32.40.126.0 ]--
r 22             connections1.union(totalT);
--[ 2019.09.12.20.32.40.217.0 ]--
r 22             connections1.union(totalTi);
--[ 2019.09.12.20.32.40.371.0 ]--
r 22             connections1.union(totalTil);
--[ 2019.09.12.20.32.40.474.0 ]--
r 22             connections1.union(totalTile);
--[ 2019.09.12.20.32.40.804.0 ]--
r 22             connections1.union(totalTiles);
--[ 2019.09.12.20.32.41.322.0 ]--
r 22             connections1.union(totalTiles,);
--[ 2019.09.12.20.32.41.609.0 ]--
r 22             connections1.union(totalTiles, );
--[ 2019.09.12.20.32.45.019.0 ]--
r 22             connections1.union(aTiles, );
--[ 2019.09.12.20.32.45.228.0 ]--
r 22             connections1.union(alTiles, );
--[ 2019.09.12.20.32.45.252.0 ]--
r 22             connections1.union(allTiles, );
--[ 2019.09.12.20.34.01.792.0 ]--
r 20 
--[ 2019.09.12.20.34.51.225.0 ]--
r 22             connections1.union(allTiles, i);
--[ 2019.09.12.20.34.52.417.0 ]--
r 22             connections1.union(allTiles, i*);
--[ 2019.09.12.20.34.52.582.0 ]--
r 22             connections1.union(allTiles, i*N);
--[ 2019.09.12.20.34.55.049.0 ]--
r 22             connections1.union(allTiles, i*N );
--[ 2019.09.12.20.34.55.098.0 ]--
r 22             connections1.union(allTiles, i*N);
--[ 2019.09.12.20.35.40.686.0 ]--
+ 23             
--[ 2019.09.12.20.35.42.432.0 ]--
r 23             c
--[ 2019.09.12.20.35.42.507.0 ]--
r 23             co
--[ 2019.09.12.20.35.42.622.0 ]--
r 23             con
--[ 2019.09.12.20.35.42.770.0 ]--
r 23             conn
--[ 2019.09.12.20.35.42.839.0 ]--
r 23             conne
--[ 2019.09.12.20.35.42.868.0 ]--
r 23             connec
--[ 2019.09.12.20.35.43.161.0 ]--
r 23             connecio
--[ 2019.09.12.20.35.43.233.0 ]--
r 23             connecion
--[ 2019.09.12.20.35.43.417.0 ]--
r 23             connecio
--[ 2019.09.12.20.35.43.536.0 ]--
r 23             conneci
--[ 2019.09.12.20.35.46.844.0 ]--
r 23             conneci 
--[ 2019.09.12.20.35.46.882.0 ]--
r 23             conneci
--[ 2019.09.12.20.35.47.882.0 ]--
r 23             connec
--[ 2019.09.12.20.35.48.239.0 ]--
r 23             connect
--[ 2019.09.12.20.35.50.200.0 ]--
r 23             connections2
--[ 2019.09.12.20.35.52.474.0 ]--
r 23             connections2.
--[ 2019.09.12.20.35.52.760.0 ]--
r 23             connections2.u
--[ 2019.09.12.20.35.52.880.0 ]--
r 23             connections2.un
--[ 2019.09.12.20.35.53.637.0 ]--
r 23             connections2.uni
--[ 2019.09.12.20.35.53.674.0 ]--
r 23             connections2.unio
--[ 2019.09.12.20.35.53.762.0 ]--
r 23             connections2.uniot
--[ 2019.09.12.20.35.53.801.0 ]--
r 23             connections2.uniotn
--[ 2019.09.12.20.35.54.240.0 ]--
r 23             connections2.uniot
--[ 2019.09.12.20.35.54.337.0 ]--
r 23             connections2.unio
--[ 2019.09.12.20.35.54.479.0 ]--
r 23             connections2.uni
--[ 2019.09.12.20.35.54.815.0 ]--
r 23             connections2.unio
--[ 2019.09.12.20.35.54.887.0 ]--
r 23             connections2.union
--[ 2019.09.12.20.35.55.151.0 ]--
r 23             connections2.union,
--[ 2019.09.12.20.35.55.513.0 ]--
r 23             connections2.union
--[ 2019.09.12.20.35.55.641.0 ]--
r 23             connections2.union()
--[ 2019.09.12.20.35.59.638.0 ]--
r 23             connections2.union(a)
--[ 2019.09.12.20.35.59.742.0 ]--
r 23             connections2.union(al)
--[ 2019.09.12.20.35.59.845.0 ]--
r 23             connections2.union(all)
--[ 2019.09.12.20.36.00.222.0 ]--
r 23             connections2.union(allT)
--[ 2019.09.12.20.36.00.313.0 ]--
r 23             connections2.union(allTi)
--[ 2019.09.12.20.36.00.467.0 ]--
r 23             connections2.union(allTil)
--[ 2019.09.12.20.36.00.510.0 ]--
r 23             connections2.union(allTile)
--[ 2019.09.12.20.36.00.627.0 ]--
r 23             connections2.union(allTiles)
--[ 2019.09.12.20.36.00.769.0 ]--
r 23             connections2.union(allTiles,)
--[ 2019.09.12.20.36.00.960.0 ]--
r 23             connections2.union(allTiles, )
--[ 2019.09.12.20.36.13.150.0 ]--
r 23             connections2.union(allTiles+, )
--[ 2019.09.12.20.36.13.327.0 ]--
r 23             connections2.union(allTiles+1, )
--[ 2019.09.12.20.36.17.408.0 ]--
r 23             connections2.union(allTiles+1, 1)
--[ 2019.09.12.20.36.17.753.0 ]--
r 23             connections2.union(allTiles+1, 1+)
--[ 2019.09.12.20.36.18.422.0 ]--
r 23             connections2.union(allTiles+1, 1+i)
--[ 2019.09.12.20.36.19.109.0 ]--
r 23             connections2.union(allTiles+1, 1+i*)
--[ 2019.09.12.20.36.19.449.0 ]--
r 23             connections2.union(allTiles+1, 1+i*N)
--[ 2019.09.12.20.36.21.357.0 ]--
r 23             connections2.union(allTiles+1, 1+i*N )
--[ 2019.09.12.20.36.21.392.0 ]--
r 23             connections2.union(allTiles+1, 1+i*N)
--[ 2019.09.12.20.36.55.893.0 ]--
r 23             connections2.union(allTiles+1, +i*N)
--[ 2019.09.12.20.37.03.526.0 ]--
r 23             connections2.union(allTiles+1, (+i*N)
--[ 2019.09.12.20.37.04.062.0 ]--
r 23             connections2.union(allTiles+1, (N+i*N)
--[ 2019.09.12.20.37.04.244.0 ]--
r 23             connections2.union(allTiles+1, (N-+i*N)
--[ 2019.09.12.20.37.04.679.0 ]--
r 23             connections2.union(allTiles+1, (N-1+i*N)
--[ 2019.09.12.20.37.05.410.0 ]--
r 23             connections2.union(allTiles+1, (N-1)+i*N)
--[ 2019.09.12.20.37.05.639.0 ]--
r 23             connections2.union(allTiles+1, (N-1+i*N)
--[ 2019.09.12.20.37.05.652.0 ]--
r 23             connections2.union(allTiles+1, (N-1++i*N)
--[ 2019.09.12.20.37.06.192.0 ]--
r 23             connections2.union(allTiles+1, (N-1+i*N)
--[ 2019.09.12.20.37.07.738.0 ]--
r 23             connections2.union(allTiles+1, (N-1 +i*N)
--[ 2019.09.12.20.37.07.756.0 ]--
r 23             connections2.union(allTiles+1, (N-1+i*N)
--[ 2019.09.12.20.37.10.903.0 ]--
r 23             connections2.union(allTiles+1, (N-1+(i*N)
--[ 2019.09.12.20.37.12.598.0 ]--
r 23             connections2.union(allTiles+1, (N-1+(i*N))
--[ 2019.09.12.20.37.19.191.0 ]--
+ 24             
--[ 2019.09.12.20.37.19.213.0 ]--
r 24                     
--[ 2019.09.12.20.37.21.480.0 ]--
- 24
--[ 2019.09.12.20.37.21.623.0 ]--
r 23             connections2.union(allTiles+1, (N-1+(i*N)
--[ 2019.09.12.20.37.22.874.0 ]--
r 23             connections2.union(allTiles+1, (N-1+(i*N))
--[ 2019.09.12.20.37.23.591.0 ]--
r 23             connections2.union(allTiles+1, (N-1+(i*N));
--[ 2019.09.12.20.37.24.050.0 ]--
+ 24             
--[ 2019.09.12.20.37.24.596.0 ]--
r 24             c
--[ 2019.09.12.20.37.24.684.0 ]--
r 24             co
--[ 2019.09.12.20.37.24.838.0 ]--
r 24             con
--[ 2019.09.12.20.37.24.929.0 ]--
r 24             conn
--[ 2019.09.12.20.37.25.030.0 ]--
r 24             conne
--[ 2019.09.12.20.37.25.084.0 ]--
r 24             connec
--[ 2019.09.12.20.37.25.286.0 ]--
r 24             connect
--[ 2019.09.12.20.37.25.344.0 ]--
r 24             connecti
--[ 2019.09.12.20.37.25.416.0 ]--
r 24             connectio
--[ 2019.09.12.20.37.25.480.0 ]--
r 24             connection
--[ 2019.09.12.20.37.25.534.0 ]--
r 24             connections
--[ 2019.09.12.20.37.25.655.0 ]--
r 24             connections1
--[ 2019.09.12.20.37.26.093.0 ]--
r 24             connections1.
--[ 2019.09.12.20.37.26.283.0 ]--
r 24             connections1.u
--[ 2019.09.12.20.37.26.351.0 ]--
r 24             connections1.un
--[ 2019.09.12.20.37.26.710.0 ]--
r 24             connections1.unt
--[ 2019.09.12.20.37.26.974.0 ]--
r 24             connections1.un
--[ 2019.09.12.20.37.27.206.0 ]--
r 24             connections1.uni
--[ 2019.09.12.20.37.27.289.0 ]--
r 24             connections1.unio
--[ 2019.09.12.20.37.27.458.0 ]--
r 24             connections1.union
--[ 2019.09.12.20.37.27.660.0 ]--
r 24             connections1.union 
--[ 2019.09.12.20.37.27.686.0 ]--
r 24             connections1.union
--[ 2019.09.12.20.37.29.994.0 ]--
r 24             
--[ 2019.09.12.20.37.30.596.0 ]--
+ 23             
--[ 2019.09.12.20.37.31.149.0 ]--
r 23             connections1.union
--[ 2019.09.12.20.37.32.431.0 ]--
r 23             connections1.union()
--[ 2019.09.12.20.37.35.130.0 ]--
r 23             connections1.union(t)
--[ 2019.09.12.20.37.35.224.0 ]--
r 23             connections1.union(to)
--[ 2019.09.12.20.37.35.280.0 ]--
r 23             connections1.union(tot)
--[ 2019.09.12.20.37.35.314.0 ]--
r 23             connections1.union(tota)
--[ 2019.09.12.20.37.35.384.0 ]--
r 23             connections1.union(total)
--[ 2019.09.12.20.37.35.728.0 ]--
r 23             connections1.union(totalT)
--[ 2019.09.12.20.37.35.804.0 ]--
r 23             connections1.union(totalTi)
--[ 2019.09.12.20.37.35.946.0 ]--
r 23             connections1.union(totalTil)
--[ 2019.09.12.20.37.35.996.0 ]--
r 23             connections1.union(totalTile)
--[ 2019.09.12.20.37.36.141.0 ]--
r 23             connections1.union(totalTiles)
--[ 2019.09.12.20.37.36.491.0 ]--
r 23             connections1.union(totalTiles+)
--[ 2019.09.12.20.37.36.581.0 ]--
r 23             connections1.union(totalTiles+2)
--[ 2019.09.12.20.37.42.955.0 ]--
r 23             connections1.union(a+2)
--[ 2019.09.12.20.37.43.004.0 ]--
r 23             connections1.union(al+2)
--[ 2019.09.12.20.37.43.132.0 ]--
r 23             connections1.union(all+2)
--[ 2019.09.12.20.37.43.346.0 ]--
r 23             connections1.union(allT+2)
--[ 2019.09.12.20.37.43.420.0 ]--
r 23             connections1.union(allTi+2)
--[ 2019.09.12.20.37.43.543.0 ]--
r 23             connections1.union(allTil+2)
--[ 2019.09.12.20.37.43.597.0 ]--
r 23             connections1.union(allTile+2)
--[ 2019.09.12.20.37.43.967.0 ]--
r 23             connections1.union(allTiles+2)
--[ 2019.09.12.20.37.45.310.0 ]--
r 23             connections1.union(allTiles+2,)
--[ 2019.09.12.20.37.45.403.0 ]--
r 23             connections1.union(allTiles+2, )
--[ 2019.09.12.20.37.50.192.0 ]--
r 23             connections1.union(allTiles+2, ())
--[ 2019.09.12.20.37.58.115.0 ]--
r 23             connections1.union(allTiles+2, (i))
--[ 2019.09.12.20.38.00.037.0 ]--
r 23             connections1.union(allTiles+2, (i)+)
--[ 2019.09.12.20.38.02.717.0 ]--
r 23             connections1.union(allTiles+2, (i)+())
--[ 2019.09.12.20.38.03.168.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N))
--[ 2019.09.12.20.38.03.700.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N0))
--[ 2019.09.12.20.38.04.257.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N))
--[ 2019.09.12.20.38.04.277.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-))
--[ 2019.09.12.20.38.04.347.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1))
--[ 2019.09.12.20.38.04.355.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1-))
--[ 2019.09.12.20.38.04.982.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1))
--[ 2019.09.12.20.38.06.966.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)&)
--[ 2019.09.12.20.38.07.136.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)&N)
--[ 2019.09.12.20.38.07.628.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)&)
--[ 2019.09.12.20.38.07.764.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1))
--[ 2019.09.12.20.38.08.051.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*)
--[ 2019.09.12.20.38.08.141.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N)
--[ 2019.09.12.20.38.08.740.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N )
--[ 2019.09.12.20.38.08.779.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N)
--[ 2019.09.12.20.38.33.427.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N);
--[ 2019.09.12.20.38.39.263.0 ]--
+ 25             
--[ 2019.09.12.20.38.39.379.0 ]--
r 25             connections2.union(allTiles+1, (N-1+(i*N));
--[ 2019.09.12.20.38.40.651.0 ]--
r 25             connections2.union(allTiles+1, (N-1+(i*N)); 
--[ 2019.09.12.20.38.40.687.0 ]--
r 25             connections2.union(allTiles+1, (N-1+(i*N));
--[ 2019.09.12.20.38.45.666.0 ]--
r 25             connections2.union(allTiles+, (N-1+(i*N));
--[ 2019.09.12.20.38.45.749.0 ]--
r 25             connections2.union(allTiles+3, (N-1+(i*N));
--[ 2019.09.12.20.38.47.870.0 ]--
r 25             connections2.union(allTiles+3, (N-1)+(i*N));
--[ 2019.09.12.20.38.49.895.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N));
--[ 2019.09.12.20.38.53.589.0 ]--
r 25             connections2.union(allTiles+3, (N-)+(i*N));
--[ 2019.09.12.20.38.53.672.0 ]--
r 25             connections2.union(allTiles+3, (N)+(i*N));
--[ 2019.09.12.20.38.53.794.0 ]--
r 25             connections2.union(allTiles+3, ()+(i*N));
--[ 2019.09.12.20.38.54.348.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));
--[ 2019.09.12.20.38.57.777.0 ]--
r 26 
--[ 2019.09.12.20.40.50.399.0 ]--
r 22             connections1.union(allTiles, i*N); 
--[ 2019.09.12.20.40.50.545.0 ]--
r 22             connections1.union(allTiles, i*N); /
--[ 2019.09.12.20.40.50.639.0 ]--
r 22             connections1.union(allTiles, i*N); //
--[ 2019.09.12.20.40.50.864.0 ]--
r 22             connections1.union(allTiles, i*N); //N
--[ 2019.09.12.20.40.50.966.0 ]--
r 22             connections1.union(allTiles, i*N); //No
--[ 2019.09.12.20.40.51.055.0 ]--
r 22             connections1.union(allTiles, i*N); //Nor
--[ 2019.09.12.20.40.51.219.0 ]--
r 22             connections1.union(allTiles, i*N); //Nort
--[ 2019.09.12.20.40.51.231.0 ]--
r 22             connections1.union(allTiles, i*N); //North
--[ 2019.09.12.20.40.51.343.0 ]--
r 22             connections1.union(allTiles, i*N); //Northe
--[ 2019.09.12.20.40.51.488.0 ]--
r 22             connections1.union(allTiles, i*N); //Northe 
--[ 2019.09.12.20.40.51.833.0 ]--
r 22             connections1.union(allTiles, i*N); //Northe
--[ 2019.09.12.20.40.51.942.0 ]--
r 22             connections1.union(allTiles, i*N); //North
--[ 2019.09.12.20.40.52.135.0 ]--
r 22             connections1.union(allTiles, i*N); //North 
--[ 2019.09.12.20.40.52.282.0 ]--
r 22             connections1.union(allTiles, i*N); //North W
--[ 2019.09.12.20.40.52.346.0 ]--
r 22             connections1.union(allTiles, i*N); //North We
--[ 2019.09.12.20.40.52.481.0 ]--
r 22             connections1.union(allTiles, i*N); //North Wes
--[ 2019.09.12.20.40.52.635.0 ]--
r 22             connections1.union(allTiles, i*N); //North West
--[ 2019.09.12.20.40.52.692.0 ]--
r 22             connections1.union(allTiles, i*N); //North West 
--[ 2019.09.12.20.40.53.586.0 ]--
r 22             connections1.union(allTiles, i*N); //North West r
--[ 2019.09.12.20.40.53.637.0 ]--
r 22             connections1.union(allTiles, i*N); //North West re
--[ 2019.09.12.20.40.53.659.0 ]--
r 22             connections1.union(allTiles, i*N); //North West rea
--[ 2019.09.12.20.40.53.939.0 ]--
r 22             connections1.union(allTiles, i*N); //North West read
--[ 2019.09.12.20.40.54.019.0 ]--
r 22             connections1.union(allTiles, i*N); //North West read 
--[ 2019.09.12.20.40.54.327.0 ]--
r 22             connections1.union(allTiles, i*N); //North West read
--[ 2019.09.12.20.40.54.369.0 ]--
r 22             connections1.union(allTiles, i*N); //North West rea
--[ 2019.09.12.20.40.54.476.0 ]--
r 22             connections1.union(allTiles, i*N); //North West re
--[ 2019.09.12.20.40.54.615.0 ]--
r 22             connections1.union(allTiles, i*N); //North West red
--[ 2019.09.12.20.40.54.756.0 ]--
r 22             connections1.union(allTiles, i*N); //North West red 
--[ 2019.09.12.20.40.54.810.0 ]--
r 22             connections1.union(allTiles, i*N); //North West red t
--[ 2019.09.12.20.40.54.865.0 ]--
r 22             connections1.union(allTiles, i*N); //North West red ti
--[ 2019.09.12.20.40.55.016.0 ]--
r 22             connections1.union(allTiles, i*N); //North West red til
--[ 2019.09.12.20.40.55.153.0 ]--
r 22             connections1.union(allTiles, i*N); //North West red tile
--[ 2019.09.12.20.40.55.196.0 ]--
r 22             connections1.union(allTiles, i*N); //North West red tiles
--[ 2019.09.12.20.40.55.311.0 ]--
r 22             connections1.union(allTiles, i*N); //North West red tiles 
--[ 2019.09.12.20.40.55.423.0 ]--
r 22             connections1.union(allTiles, i*N); //North West red tiles
--[ 2019.09.12.20.40.56.035.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); 
--[ 2019.09.12.20.40.56.407.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); /
--[ 2019.09.12.20.40.56.530.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); //
--[ 2019.09.12.20.40.56.968.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // 
--[ 2019.09.12.20.41.00.077.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // S
--[ 2019.09.12.20.41.00.173.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // So
--[ 2019.09.12.20.41.00.203.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // Sou
--[ 2019.09.12.20.41.00.321.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // Sout
--[ 2019.09.12.20.41.00.428.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // South
--[ 2019.09.12.20.41.00.438.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // South 
--[ 2019.09.12.20.41.00.560.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // South E
--[ 2019.09.12.20.41.00.768.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // South Ea
--[ 2019.09.12.20.41.00.958.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // South Eas
--[ 2019.09.12.20.41.01.127.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // South East
--[ 2019.09.12.20.41.01.215.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // South East 
--[ 2019.09.12.20.41.01.589.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // South East re
--[ 2019.09.12.20.41.01.630.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // South East red
--[ 2019.09.12.20.41.01.793.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // South East red 
--[ 2019.09.12.20.41.02.027.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // South East red t
--[ 2019.09.12.20.41.02.039.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // South East red ti
--[ 2019.09.12.20.41.02.168.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // South East red til
--[ 2019.09.12.20.41.02.226.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // South East red tile
--[ 2019.09.12.20.41.02.319.0 ]--
r 23             connections1.union(allTiles+2, (i)+(N-1)*N); // South East red tiles
--[ 2019.09.12.20.41.02.895.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); 
--[ 2019.09.12.20.41.03.008.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); /
--[ 2019.09.12.20.41.03.113.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); //
--[ 2019.09.12.20.41.03.185.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // 
--[ 2019.09.12.20.41.12.731.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // S
--[ 2019.09.12.20.41.12.838.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // So
--[ 2019.09.12.20.41.12.930.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // Sou
--[ 2019.09.12.20.41.13.068.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // Sout
--[ 2019.09.12.20.41.13.106.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // South
--[ 2019.09.12.20.41.13.161.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // South 
--[ 2019.09.12.20.41.13.323.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // South E
--[ 2019.09.12.20.41.13.471.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // South Ea
--[ 2019.09.12.20.41.13.826.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // South 
--[ 2019.09.12.20.41.30.586.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // 
--[ 2019.09.12.20.41.37.141.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // N
--[ 2019.09.12.20.41.37.304.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // No
--[ 2019.09.12.20.41.37.512.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // Nor
--[ 2019.09.12.20.41.37.716.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // Nort
--[ 2019.09.12.20.41.37.871.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North
--[ 2019.09.12.20.41.37.998.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North 
--[ 2019.09.12.20.41.38.257.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North E
--[ 2019.09.12.20.41.38.588.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North Ea
--[ 2019.09.12.20.41.38.713.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North Eas
--[ 2019.09.12.20.41.38.869.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North East
--[ 2019.09.12.20.41.39.031.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North East 
--[ 2019.09.12.20.41.39.629.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North East b
--[ 2019.09.12.20.41.39.680.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North East bl
--[ 2019.09.12.20.41.39.831.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North East blu
--[ 2019.09.12.20.41.40.016.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North East blue
--[ 2019.09.12.20.41.40.034.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North East blue 
--[ 2019.09.12.20.41.40.221.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North East blue t
--[ 2019.09.12.20.41.40.286.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North East blue ti
--[ 2019.09.12.20.41.40.461.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North East blue til
--[ 2019.09.12.20.41.40.469.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North East blue tile
--[ 2019.09.12.20.41.40.595.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North East blue tiles
--[ 2019.09.12.20.41.40.662.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North East blue tiles 
--[ 2019.09.12.20.41.40.748.0 ]--
r 24             connections2.union(allTiles+1, (N-1)+(i*N)); // North East blue tiles
--[ 2019.09.12.20.41.43.073.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N)); 
--[ 2019.09.12.20.41.43.641.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));  
--[ 2019.09.12.20.41.43.928.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N)); 
--[ 2019.09.12.20.41.44.072.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));  
--[ 2019.09.12.20.41.44.608.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N)); 
--[ 2019.09.12.20.41.45.022.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));  
--[ 2019.09.12.20.41.45.064.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   
--[ 2019.09.12.20.41.45.212.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));    
--[ 2019.09.12.20.41.45.502.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   
--[ 2019.09.12.20.41.45.697.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   /
--[ 2019.09.12.20.41.45.811.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   //
--[ 2019.09.12.20.41.46.071.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   //N
--[ 2019.09.12.20.41.46.420.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   //
--[ 2019.09.12.20.41.46.476.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // 
--[ 2019.09.12.20.41.46.571.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // N
--[ 2019.09.12.20.41.46.718.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // No
--[ 2019.09.12.20.41.46.800.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // Nor
--[ 2019.09.12.20.41.46.871.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // Nort
--[ 2019.09.12.20.41.46.977.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // North
--[ 2019.09.12.20.41.47.685.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // North 
--[ 2019.09.12.20.41.47.799.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // North W
--[ 2019.09.12.20.41.47.971.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // North We
--[ 2019.09.12.20.41.48.128.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // North Wes
--[ 2019.09.12.20.41.48.225.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // North West
--[ 2019.09.12.20.41.49.022.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // North 
--[ 2019.09.12.20.41.49.308.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // 
--[ 2019.09.12.20.41.50.668.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // S
--[ 2019.09.12.20.41.50.784.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // So
--[ 2019.09.12.20.41.50.833.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // Sou
--[ 2019.09.12.20.41.50.925.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // Sout
--[ 2019.09.12.20.41.51.053.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South
--[ 2019.09.12.20.41.51.332.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South 
--[ 2019.09.12.20.41.51.753.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South W
--[ 2019.09.12.20.41.51.948.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South We
--[ 2019.09.12.20.41.52.138.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South Wes
--[ 2019.09.12.20.41.52.220.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West
--[ 2019.09.12.20.41.52.582.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West 
--[ 2019.09.12.20.41.52.778.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West b
--[ 2019.09.12.20.41.52.856.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West bl
--[ 2019.09.12.20.41.53.005.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blu
--[ 2019.09.12.20.41.53.033.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue
--[ 2019.09.12.20.41.53.095.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue 
--[ 2019.09.12.20.41.53.143.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue t
--[ 2019.09.12.20.41.53.425.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue te
--[ 2019.09.12.20.41.53.627.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue t
--[ 2019.09.12.20.41.53.782.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue 
--[ 2019.09.12.20.41.54.262.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue t
--[ 2019.09.12.20.41.54.336.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue ti
--[ 2019.09.12.20.41.54.468.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue til
--[ 2019.09.12.20.41.54.511.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue tile
--[ 2019.09.12.20.41.54.652.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue tiles
--[ 2019.09.12.20.41.55.177.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue tiles 
--[ 2019.09.12.20.41.55.228.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue tiles
--[ 2019.09.12.20.42.41.489.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue tiles   
--[ 2019.09.12.20.42.42.952.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue tiles       
--[ 2019.09.12.20.42.43.828.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue tiles      
--[ 2019.09.12.20.42.43.990.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue tiles     
--[ 2019.09.12.20.42.44.763.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue tiles    
--[ 2019.09.12.20.42.45.198.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue tiles   
--[ 2019.09.12.20.42.45.456.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue tiles  
--[ 2019.09.12.20.42.45.620.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue tiles 
--[ 2019.09.12.20.42.48.037.0 ]--
r 25             connections2.union(allTiles+3, (i)+(i*N));   // South West blue tiles
--[ 2019.09.12.20.43.09.742.0 ]--
r 24             connections2.union(allTiles+1, (N0)+(i*N)); // North East blue tiles
--[ 2019.09.12.20.43.10.484.0 ]--
r 24             connections2.union(allTiles+1, (N)+(i*N)); // North East blue tiles
--[ 2019.09.12.20.43.10.590.0 ]--
r 24             connections2.union(allTiles+1, ()+(i*N)); // North East blue tiles
--[ 2019.09.12.20.43.10.721.0 ]--
r 24             connections2.union(allTiles+1, (0)+(i*N)); // North East blue tiles
--[ 2019.09.12.20.43.30.427.0 ]--
r 25             connections2.union(allTiles+3, (N)+(i*N));   // South West blue tiles
--[ 2019.09.12.20.43.30.779.0 ]--
r 25             connections2.union(allTiles+3, (N-)+(i*N));   // South West blue tiles
--[ 2019.09.12.20.43.30.992.0 ]--
r 25             connections2.union(allTiles+3, (N-1)+(i*N));   // South West blue tiles
--[ 2019.09.12.20.45.00.248.0 ]--
r 22             connections1.union(allTiles, i*); //North West red tiles
--[ 2019.09.12.20.45.00.647.0 ]--
r 22             connections1.union(allTiles, i); //North West red tiles
--[ 2019.09.12.20.45.50.963.0 ]--
r 21         for(int i = 0; i < N; i++){ 
--[ 2019.09.12.20.45.51.171.0 ]--
r 21         for(int i = 0; i < N; i++){
--[ 2019.09.12.20.45.51.699.0 ]--
r 21         for(int i = 0; i < N; i++){ 
--[ 2019.09.12.20.45.52.467.0 ]--
r 21         for(int i = 0; i < N; i++){
--[ 2019.09.12.20.45.52.749.0 ]--
r 21         for(int i = 0; i < N; i++){ 
--[ 2019.09.12.20.45.53.057.0 ]--
r 21         for(int i = 0; i < N; i++){
--[ 2019.09.12.20.45.55.173.0 ]--
r 28     
--[ 2019.09.12.20.45.55.747.0 ]--
r 28     \
--[ 2019.09.12.20.45.56.305.0 ]--
r 28     
--[ 2019.09.12.20.45.56.643.0 ]--
- 28
--[ 2019.09.12.20.45.57.412.0 ]--
+ 28         
--[ 2019.09.12.20.45.57.849.0 ]--
- 28
--[ 2019.09.12.20.45.58.919.0 ]--
r 27         } 
--[ 2019.09.12.20.45.59.002.0 ]--
r 27         }
--[ 2019.09.12.20.46.21.321.0 ]--
r 20     
--[ 2019.09.12.20.46.21.717.0 ]--
r 20         
--[ 2019.09.12.20.46.22.056.0 ]--
+ 20         
--[ 2019.09.12.20.46.22.357.0 ]--
r 21         /
--[ 2019.09.12.20.46.22.598.0 ]--
r 21         /C
--[ 2019.09.12.20.46.22.662.0 ]--
r 21         /CO
--[ 2019.09.12.20.46.22.807.0 ]--
r 21         /COn
--[ 2019.09.12.20.46.22.900.0 ]--
r 21         /COnn
--[ 2019.09.12.20.46.22.962.0 ]--
r 21         /COnne
--[ 2019.09.12.20.46.23.006.0 ]--
r 21         /COnnec
--[ 2019.09.12.20.46.23.150.0 ]--
r 21         /COnne
--[ 2019.09.12.20.46.23.345.0 ]--
r 21         /COnn
--[ 2019.09.12.20.46.23.460.0 ]--
r 21         /COn
--[ 2019.09.12.20.46.23.575.0 ]--
r 21         /CO
--[ 2019.09.12.20.46.23.746.0 ]--
r 21         /C
--[ 2019.09.12.20.46.24.021.0 ]--
r 21         /Co
--[ 2019.09.12.20.46.24.128.0 ]--
r 21         /Con
--[ 2019.09.12.20.46.24.228.0 ]--
r 21         /Conn
--[ 2019.09.12.20.46.24.322.0 ]--
r 21         /Conne
--[ 2019.09.12.20.46.24.368.0 ]--
r 21         /Connec
--[ 2019.09.12.20.46.24.546.0 ]--
r 21         /Connect
--[ 2019.09.12.20.46.25.036.0 ]--
r 21         /Connec
--[ 2019.09.12.20.46.25.070.0 ]--
r 21         /
--[ 2019.09.12.20.46.25.505.0 ]--
r 21         //
--[ 2019.09.12.20.46.25.874.0 ]--
r 21         //C
--[ 2019.09.12.20.46.25.933.0 ]--
r 21         //Co
--[ 2019.09.12.20.46.26.057.0 ]--
r 21         //Con
--[ 2019.09.12.20.46.26.145.0 ]--
r 21         //Conn
--[ 2019.09.12.20.46.26.225.0 ]--
r 21         //Conne
--[ 2019.09.12.20.46.26.261.0 ]--
r 21         //Connec
--[ 2019.09.12.20.46.26.413.0 ]--
r 21         //Connect
--[ 2019.09.12.20.46.26.528.0 ]--
r 21         //Connect 
--[ 2019.09.12.20.46.26.909.0 ]--
r 21         //Connect b
--[ 2019.09.12.20.46.27.015.0 ]--
r 21         //Connect bi
--[ 2019.09.12.20.46.27.073.0 ]--
r 21         //Connect bir
--[ 2019.09.12.20.46.27.202.0 ]--
r 21         //Connect birt
--[ 2019.09.12.20.46.27.309.0 ]--
r 21         //Connect birtu
--[ 2019.09.12.20.46.27.336.0 ]--
r 21         //Connect birtua
--[ 2019.09.12.20.46.27.458.0 ]--
r 21         //Connect birtual
--[ 2019.09.12.20.46.27.717.0 ]--
r 21         //Connect 
--[ 2019.09.12.20.46.27.785.0 ]--
r 21         //
--[ 2019.09.12.20.46.28.368.0 ]--
r 21         //Connect birtual
--[ 2019.09.12.20.46.28.903.0 ]--
r 21         //Connect 
--[ 2019.09.12.20.46.29.301.0 ]--
r 21         //Connect v
--[ 2019.09.12.20.46.29.369.0 ]--
r 21         //Connect vi
--[ 2019.09.12.20.46.29.458.0 ]--
r 21         //Connect vir
--[ 2019.09.12.20.46.29.789.0 ]--
r 21         //Connect virt
--[ 2019.09.12.20.46.29.828.0 ]--
r 21         //Connect virti
--[ 2019.09.12.20.46.29.905.0 ]--
r 21         //Connect virtia
--[ 2019.09.12.20.46.29.983.0 ]--
r 21         //Connect virtial
--[ 2019.09.12.20.46.30.183.0 ]--
r 21         //Connect virtial 
--[ 2019.09.12.20.46.30.200.0 ]--
r 21         //Connect virtial n
--[ 2019.09.12.20.46.30.262.0 ]--
r 21         //Connect virtial no
--[ 2019.09.12.20.46.30.332.0 ]--
r 21         //Connect virtial not
--[ 2019.09.12.20.46.30.619.0 ]--
r 21         //Connect virtial 
--[ 2019.09.12.20.46.30.713.0 ]--
r 21         //Connect 
--[ 2019.09.12.20.46.31.422.0 ]--
r 21         //Connect v
--[ 2019.09.12.20.46.31.714.0 ]--
r 21         //Connect vi
--[ 2019.09.12.20.46.31.821.0 ]--
r 21         //Connect vir
--[ 2019.09.12.20.46.31.871.0 ]--
r 21         //Connect virt
--[ 2019.09.12.20.46.31.938.0 ]--
r 21         //Connect virtu
--[ 2019.09.12.20.46.32.014.0 ]--
r 21         //Connect virtua
--[ 2019.09.12.20.46.32.102.0 ]--
r 21         //Connect virtual
--[ 2019.09.12.20.46.32.202.0 ]--
r 21         //Connect virtual 
--[ 2019.09.12.20.46.32.267.0 ]--
r 21         //Connect virtual n
--[ 2019.09.12.20.46.32.332.0 ]--
r 21         //Connect virtual no
--[ 2019.09.12.20.46.32.369.0 ]--
r 21         //Connect virtual not
--[ 2019.09.12.20.46.32.462.0 ]--
r 21         //Connect virtual note
--[ 2019.09.12.20.46.32.625.0 ]--
r 21         //Connect virtual notes
--[ 2019.09.12.20.46.32.678.0 ]--
r 21         //Connect virtual notes 
--[ 2019.09.12.20.46.33.001.0 ]--
r 21         //Connect virtual notes
--[ 2019.09.12.20.46.33.117.0 ]--
r 21         //Connect virtual note
--[ 2019.09.12.20.46.33.225.0 ]--
r 21         //Connect virtual not
--[ 2019.09.12.20.46.33.358.0 ]--
r 21         //Connect virtual no
--[ 2019.09.12.20.46.33.382.0 ]--
r 21         //Connect virtual nod
--[ 2019.09.12.20.46.33.467.0 ]--
r 21         //Connect virtual node
--[ 2019.09.12.20.46.33.584.0 ]--
r 21         //Connect virtual nodes
--[ 2019.09.12.20.46.33.660.0 ]--
r 21         //Connect virtual nodes 
--[ 2019.09.12.20.46.33.747.0 ]--
r 21         //Connect virtual nodes t
--[ 2019.09.12.20.46.33.810.0 ]--
r 21         //Connect virtual nodes to
--[ 2019.09.12.20.46.33.879.0 ]--
r 21         //Connect virtual nodes to 
--[ 2019.09.12.20.46.35.423.0 ]--
r 21         //Connect virtual nodes to e
--[ 2019.09.12.20.46.35.506.0 ]--
r 21         //Connect virtual nodes to ev
--[ 2019.09.12.20.46.35.569.0 ]--
r 21         //Connect virtual nodes to eve
--[ 2019.09.12.20.46.35.681.0 ]--
r 21         //Connect virtual nodes to ever
--[ 2019.09.12.20.46.35.830.0 ]--
r 21         //Connect virtual nodes to every
--[ 2019.09.12.20.46.35.939.0 ]--
r 21         //Connect virtual nodes to every 
--[ 2019.09.12.20.46.36.028.0 ]--
r 21         //Connect virtual nodes to every o
--[ 2019.09.12.20.46.36.116.0 ]--
r 21         //Connect virtual nodes to every ot
--[ 2019.09.12.20.46.36.216.0 ]--
r 21         //Connect virtual nodes to every oth
--[ 2019.09.12.20.46.36.250.0 ]--
r 21         //Connect virtual nodes to every othe
--[ 2019.09.12.20.46.36.328.0 ]--
r 21         //Connect virtual nodes to every other
--[ 2019.09.12.20.46.36.392.0 ]--
r 21         //Connect virtual nodes to every other 
--[ 2019.09.12.20.46.36.555.0 ]--
r 21         //Connect virtual nodes to every other n
--[ 2019.09.12.20.46.36.595.0 ]--
r 21         //Connect virtual nodes to every other no
--[ 2019.09.12.20.46.36.664.0 ]--
r 21         //Connect virtual nodes to every other not
--[ 2019.09.12.20.46.36.699.0 ]--
r 21         //Connect virtual nodes to every other note
--[ 2019.09.12.20.46.40.088.0 ]--
r 21         //Connect virtual nodes to e
--[ 2019.09.12.20.46.40.125.0 ]--
r 21         //Connect virtual nodes to ea
--[ 2019.09.12.20.46.40.264.0 ]--
r 21         //Connect virtual nodes to eac
--[ 2019.09.12.20.46.40.354.0 ]--
r 21         //Connect virtual nodes to each
--[ 2019.09.12.20.46.40.619.0 ]--
r 21         //Connect virtual nodes to each 
--[ 2019.09.12.20.46.40.754.0 ]--
r 21         //Connect virtual nodes to each n
--[ 2019.09.12.20.46.40.808.0 ]--
r 21         //Connect virtual nodes to each no
--[ 2019.09.12.20.46.40.833.0 ]--
r 21         //Connect virtual nodes to each not
--[ 2019.09.12.20.46.40.926.0 ]--
r 21         //Connect virtual nodes to each note
--[ 2019.09.12.20.46.41.016.0 ]--
r 21         //Connect virtual nodes to each note 
--[ 2019.09.12.20.46.41.181.0 ]--
r 21         //Connect virtual nodes to each note i
--[ 2019.09.12.20.46.41.257.0 ]--
r 21         //Connect virtual nodes to each note in
--[ 2019.09.12.20.46.41.382.0 ]--
r 21         //Connect virtual nodes to each note in 
--[ 2019.09.12.20.46.41.396.0 ]--
r 21         //Connect virtual nodes to each note in t
--[ 2019.09.12.20.46.41.438.0 ]--
r 21         //Connect virtual nodes to each note in th
--[ 2019.09.12.20.46.41.538.0 ]--
r 21         //Connect virtual nodes to each note in the
--[ 2019.09.12.20.46.41.561.0 ]--
r 21         //Connect virtual nodes to each note in the 
--[ 2019.09.12.20.46.41.661.0 ]--
r 21         //Connect virtual nodes to each note in the c
--[ 2019.09.12.20.46.41.797.0 ]--
r 21         //Connect virtual nodes to each note in the co
--[ 2019.09.12.20.46.41.817.0 ]--
r 21         //Connect virtual nodes to each note in the cor
--[ 2019.09.12.20.46.41.938.0 ]--
r 21         //Connect virtual nodes to each note in the corr
--[ 2019.09.12.20.46.42.034.0 ]--
r 21         //Connect virtual nodes to each note in the corre
--[ 2019.09.12.20.46.42.177.0 ]--
r 21         //Connect virtual nodes to each note in the corres
--[ 2019.09.12.20.46.42.247.0 ]--
r 21         //Connect virtual nodes to each note in the corresp
--[ 2019.09.12.20.46.42.404.0 ]--
r 21         //Connect virtual nodes to each note in the correspo
--[ 2019.09.12.20.46.42.543.0 ]--
r 21         //Connect virtual nodes to each note in the correspon
--[ 2019.09.12.20.46.42.652.0 ]--
r 21         //Connect virtual nodes to each note in the correspond
--[ 2019.09.12.20.46.42.725.0 ]--
r 21         //Connect virtual nodes to each note in the correspondi
--[ 2019.09.12.20.46.42.747.0 ]--
r 21         //Connect virtual nodes to each note in the correspondin
--[ 2019.09.12.20.46.42.834.0 ]--
r 21         //Connect virtual nodes to each note in the corresponding
--[ 2019.09.12.20.46.42.988.0 ]--
r 21         //Connect virtual nodes to each note in the corresponding 
--[ 2019.09.12.20.46.43.047.0 ]--
r 21         //Connect virtual nodes to each note in the corresponding c
--[ 2019.09.12.20.46.43.134.0 ]--
r 21         //Connect virtual nodes to each note in the corresponding co
--[ 2019.09.12.20.46.43.208.0 ]--
r 21         //Connect virtual nodes to each note in the corresponding cor
--[ 2019.09.12.20.46.43.400.0 ]--
r 21         //Connect virtual nodes to each note in the corresponding corn
--[ 2019.09.12.20.46.43.521.0 ]--
r 21         //Connect virtual nodes to each note in the corresponding corne
--[ 2019.09.12.20.46.43.582.0 ]--
r 21         //Connect virtual nodes to each note in the corresponding corner
--[ 2019.09.12.20.46.43.796.0 ]--
r 21         //Connect virtual nodes to each note in the corresponding corners
--[ 2019.09.12.20.46.45.665.0 ]--
r 18         UF connections1 = new UF(nodes); //Connections for the 2 red v nodes
--[ 2019.09.12.20.46.45.775.0 ]--
r 18         UF connections1 = new UF(nodes); //Connections for the 2 red vi nodes
--[ 2019.09.12.20.46.45.833.0 ]--
r 18         UF connections1 = new UF(nodes); //Connections for the 2 red vir nodes
--[ 2019.09.12.20.46.46.008.0 ]--
r 18         UF connections1 = new UF(nodes); //Connections for the 2 red virt nodes
--[ 2019.09.12.20.46.46.052.0 ]--
r 18         UF connections1 = new UF(nodes); //Connections for the 2 red virtu nodes
--[ 2019.09.12.20.46.46.096.0 ]--
r 18         UF connections1 = new UF(nodes); //Connections for the 2 red virtua nodes
--[ 2019.09.12.20.46.46.175.0 ]--
r 18         UF connections1 = new UF(nodes); //Connections for the 2 red virtual nodes
--[ 2019.09.12.20.46.47.323.0 ]--
r 19         UF connections2 = new UF(nodes); //Connections for the 2 blue v nodes
--[ 2019.09.12.20.46.47.420.0 ]--
r 19         UF connections2 = new UF(nodes); //Connections for the 2 blue vi nodes
--[ 2019.09.12.20.46.47.460.0 ]--
r 19         UF connections2 = new UF(nodes); //Connections for the 2 blue vir nodes
--[ 2019.09.12.20.46.47.599.0 ]--
r 19         UF connections2 = new UF(nodes); //Connections for the 2 blue virt nodes
--[ 2019.09.12.20.46.47.688.0 ]--
r 19         UF connections2 = new UF(nodes); //Connections for the 2 blue virtu nodes
--[ 2019.09.12.20.46.47.708.0 ]--
r 19         UF connections2 = new UF(nodes); //Connections for the 2 blue virtua nodes
--[ 2019.09.12.20.46.47.803.0 ]--
r 19         UF connections2 = new UF(nodes); //Connections for the 2 blue virtual nodes
--[ 2019.09.12.20.46.48.308.0 ]--
r 19         UF connections2 = new UF(nodes); //Connections for the 2 blue virtual  nodes
--[ 2019.09.12.20.46.48.393.0 ]--
r 19         UF connections2 = new UF(nodes); //Connections for the 2 blue virtual nodes
--[ 2019.09.12.20.46.58.531.0 ]--
r 25             connections2.union(allTiles+1, (0)(i*N)); // North East blue tiles
--[ 2019.09.12.20.46.58.872.0 ]--
r 25             connections2.union(allTiles+1, (0(i*N)); // North East blue tiles
--[ 2019.09.12.20.46.59.095.0 ]--
r 25             connections2.union(allTiles+1, ((i*N)); // North East blue tiles
--[ 2019.09.12.20.47.00.518.0 ]--
r 25             connections2.union(allTiles+1, (i*N)); // North East blue tiles
--[ 2019.09.12.20.47.02.707.0 ]--
r 25             connections2.union(allTiles+1, (i*N); // North East blue tiles
--[ 2019.09.12.20.47.49.988.0 ]--
r 20 
--[ 2019.09.12.20.47.51.553.0 ]--
UpdateTree (AD): 0 1
- /out/production/P01_Hex/HexBoard.class

--[ 2019.09.12.20.47.51.553.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@74be4e0d
--[ 2019.09.12.20.48.00.065.0 ]--
r 25             connections2.union(allTiles+1, i*N); // North East blue tiles
--[ 2019.09.12.20.48.00.067.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.12.20.48.00.099.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.12.20.48.00.105.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.12.20.48.04.824.0 ]--
UpdateTree (AD): 1 0
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.12.20.48.04.824.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.20.49.04.733.0 ]--
+ 52         
--[ 2019.09.12.20.49.04.870.0 ]--
+ 52         
--[ 2019.09.12.20.49.28.002.0 ]--
r 52 
--[ 2019.09.12.20.49.29.540.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.20.53.11.009.0 ]--
- 52
--[ 2019.09.12.20.53.11.295.0 ]--
- 52
--[ 2019.09.12.20.53.23.427.0 ]--
+ 52         
--[ 2019.09.12.20.53.23.643.0 ]--
+ 52         
--[ 2019.09.12.20.53.26.530.0 ]--
r 52 
--[ 2019.09.12.21.01.11.201.0 ]--
r 53          
--[ 2019.09.12.21.01.11.261.0 ]--
r 53         
--[ 2019.09.12.21.09.19.244.0 ]--
- 52
r 52         \
--[ 2019.09.12.21.09.19.967.0 ]--
r 52         
--[ 2019.09.12.21.09.20.269.0 ]--
+ 52         
--[ 2019.09.12.21.09.22.988.0 ]--
r 53         /
--[ 2019.09.12.21.09.23.187.0 ]--
r 53         /C
--[ 2019.09.12.21.09.23.269.0 ]--
r 53         /Co
--[ 2019.09.12.21.09.23.387.0 ]--
r 53         /Con
--[ 2019.09.12.21.09.23.487.0 ]--
r 53         /Conn
--[ 2019.09.12.21.09.23.560.0 ]--
r 53         /Conne
--[ 2019.09.12.21.09.23.608.0 ]--
r 53         /Connec
--[ 2019.09.12.21.09.23.792.0 ]--
r 53         /Connect
--[ 2019.09.12.21.09.23.961.0 ]--
r 53         /Connect 
--[ 2019.09.12.21.09.24.227.0 ]--
r 53         /
--[ 2019.09.12.21.09.24.621.0 ]--
r 53         //
--[ 2019.09.12.21.09.24.855.0 ]--
r 53         //C
--[ 2019.09.12.21.09.24.989.0 ]--
r 53         //Co
--[ 2019.09.12.21.09.25.104.0 ]--
r 53         //Con
--[ 2019.09.12.21.09.25.221.0 ]--
r 53         //Conn
--[ 2019.09.12.21.09.25.280.0 ]--
r 53         //Conne
--[ 2019.09.12.21.09.25.402.0 ]--
r 53         //Connec
--[ 2019.09.12.21.09.25.769.0 ]--
r 53         //Connect
--[ 2019.09.12.21.09.25.862.0 ]--
r 53         //Connect 
--[ 2019.09.12.21.09.25.941.0 ]--
r 53         //Connect n
--[ 2019.09.12.21.09.25.983.0 ]--
r 53         //Connect no
--[ 2019.09.12.21.09.26.006.0 ]--
r 53         //Connect not
--[ 2019.09.12.21.09.26.321.0 ]--
r 53         //Connect no
--[ 2019.09.12.21.09.26.362.0 ]--
r 53         //Connect nod
--[ 2019.09.12.21.09.26.443.0 ]--
r 53         //Connect node
--[ 2019.09.12.21.09.26.544.0 ]--
r 53         //Connect nodes
--[ 2019.09.12.21.09.26.701.0 ]--
r 53         //Connect nodes 
--[ 2019.09.12.21.09.26.872.0 ]--
r 53         //Connect nodes t
--[ 2019.09.12.21.09.26.989.0 ]--
r 53         //Connect nodes to
--[ 2019.09.12.21.09.28.204.0 ]--
r 53         //Connect nodes to 
--[ 2019.09.12.21.09.35.922.0 ]--
r 53         //Connect nodes 
--[ 2019.09.12.21.09.36.040.0 ]--
r 53         //Connect 
--[ 2019.09.12.21.09.36.568.0 ]--
r 53         //Connect a
--[ 2019.09.12.21.09.36.683.0 ]--
r 53         //Connect a 
--[ 2019.09.12.21.09.36.766.0 ]--
r 53         //Connect a p
--[ 2019.09.12.21.09.36.813.0 ]--
r 53         //Connect a pl
--[ 2019.09.12.21.09.36.867.0 ]--
r 53         //Connect a pla
--[ 2019.09.12.21.09.36.966.0 ]--
r 53         //Connect a plac
--[ 2019.09.12.21.09.36.979.0 ]--
r 53         //Connect a place
--[ 2019.09.12.21.09.37.074.0 ]--
r 53         //Connect a place 
--[ 2019.09.12.21.09.37.481.0 ]--
r 53         //Connect a place
--[ 2019.09.12.21.09.37.559.0 ]--
r 53         //Connect a placed
--[ 2019.09.12.21.09.37.657.0 ]--
r 53         //Connect a placed 
--[ 2019.09.12.21.09.37.877.0 ]--
r 53         //Connect a placed t
--[ 2019.09.12.21.09.37.914.0 ]--
r 53         //Connect a placed ti
--[ 2019.09.12.21.09.38.057.0 ]--
r 53         //Connect a placed til
--[ 2019.09.12.21.09.38.155.0 ]--
r 53         //Connect a placed tile
--[ 2019.09.12.21.09.38.313.0 ]--
r 53         //Connect a placed tile 
--[ 2019.09.12.21.09.39.427.0 ]--
r 53         //Connect a placed tile t
--[ 2019.09.12.21.09.39.554.0 ]--
r 53         //Connect a placed tile to
--[ 2019.09.12.21.09.39.687.0 ]--
r 53         //Connect a placed tile to 
--[ 2019.09.12.21.09.40.467.0 ]--
r 53         //Connect a placed tile to e
--[ 2019.09.12.21.09.40.515.0 ]--
r 53         //Connect a placed tile to ea
--[ 2019.09.12.21.09.40.673.0 ]--
r 53         //Connect a placed tile to eac
--[ 2019.09.12.21.09.40.829.0 ]--
r 53         //Connect a placed tile to each
--[ 2019.09.12.21.09.41.320.0 ]--
r 53         //Connect a placed tile to each 
--[ 2019.09.12.21.09.41.427.0 ]--
r 53         //Connect a placed tile to each o
--[ 2019.09.12.21.09.41.537.0 ]--
r 53         //Connect a placed tile to each ot
--[ 2019.09.12.21.09.41.591.0 ]--
r 53         //Connect a placed tile to each oth
--[ 2019.09.12.21.09.41.708.0 ]--
r 53         //Connect a placed tile to each othe
--[ 2019.09.12.21.09.41.716.0 ]--
r 53         //Connect a placed tile to each other
--[ 2019.09.12.21.09.42.814.0 ]--
r 53         //Connect a placed tile to each other 
--[ 2019.09.12.21.09.42.866.0 ]--
r 53         //Connect a placed tile to each other
--[ 2019.09.12.21.09.51.205.0 ]--
r 52 
--[ 2019.09.12.21.11.09.102.0 ]--
r 53         //Connect a placed tile to o
--[ 2019.09.12.21.11.09.146.0 ]--
r 53         //Connect a placed tile to ot
--[ 2019.09.12.21.11.09.230.0 ]--
r 53         //Connect a placed tile to oth
--[ 2019.09.12.21.11.09.278.0 ]--
r 53         //Connect a placed tile to othe
--[ 2019.09.12.21.11.09.329.0 ]--
r 53         //Connect a placed tile to other
--[ 2019.09.12.21.11.09.449.0 ]--
r 53         //Connect a placed tile to other 
--[ 2019.09.12.21.11.09.568.0 ]--
r 53         //Connect a placed tile to other t
--[ 2019.09.12.21.11.09.652.0 ]--
r 53         //Connect a placed tile to other ti
--[ 2019.09.12.21.11.09.849.0 ]--
r 53         //Connect a placed tile to other til
--[ 2019.09.12.21.11.09.863.0 ]--
r 53         //Connect a placed tile to other tile
--[ 2019.09.12.21.11.10.436.0 ]--
r 53         //Connect a placed tile to other 
--[ 2019.09.12.21.11.11.074.0 ]--
r 53         //Connect a placed tile to 
--[ 2019.09.12.21.11.11.232.0 ]--
r 53         //Connect a placed tile to a
--[ 2019.09.12.21.11.11.314.0 ]--
r 53         //Connect a placed tile to an
--[ 2019.09.12.21.11.11.358.0 ]--
r 53         //Connect a placed tile to ano
--[ 2019.09.12.21.11.11.458.0 ]--
r 53         //Connect a placed tile to anot
--[ 2019.09.12.21.11.11.522.0 ]--
r 53         //Connect a placed tile to anoth
--[ 2019.09.12.21.11.11.572.0 ]--
r 53         //Connect a placed tile to anothe
--[ 2019.09.12.21.11.11.636.0 ]--
r 53         //Connect a placed tile to another
--[ 2019.09.12.21.11.11.714.0 ]--
r 53         //Connect a placed tile to another 
--[ 2019.09.12.21.11.11.879.0 ]--
r 53         //Connect a placed tile to another t
--[ 2019.09.12.21.11.11.886.0 ]--
r 53         //Connect a placed tile to another ti
--[ 2019.09.12.21.11.12.014.0 ]--
r 53         //Connect a placed tile to another til
--[ 2019.09.12.21.11.12.095.0 ]--
r 53         //Connect a placed tile to another tile
--[ 2019.09.12.21.11.12.545.0 ]--
r 53         //Connect a placed tile to another tile 
--[ 2019.09.12.21.11.12.600.0 ]--
r 53         //Connect a placed tile to another tile
--[ 2019.09.12.21.11.18.031.0 ]--
r 53         //
--[ 2019.09.12.21.11.53.533.0 ]--
r 53         /
--[ 2019.09.12.21.11.54.037.0 ]--
r 53         
--[ 2019.09.12.21.14.56.801.0 ]--
r 53         /
--[ 2019.09.12.21.14.56.910.0 ]--
r 53         //
--[ 2019.09.12.21.14.57.508.0 ]--
r 53         // 
--[ 2019.09.12.21.14.57.574.0 ]--
r 53         //
--[ 2019.09.12.21.15.01.541.0 ]--
r 53         //E
--[ 2019.09.12.21.15.01.713.0 ]--
r 53         //Ea
--[ 2019.09.12.21.15.01.846.0 ]--
r 53         //Eac
--[ 2019.09.12.21.15.01.945.0 ]--
r 53         //Each
--[ 2019.09.12.21.15.02.014.0 ]--
r 53         //Each 
--[ 2019.09.12.21.15.02.175.0 ]--
r 53         //Each e
--[ 2019.09.12.21.15.02.336.0 ]--
r 53         //Each ed
--[ 2019.09.12.21.15.02.471.0 ]--
r 53         //Each edg
--[ 2019.09.12.21.15.02.552.0 ]--
r 53         //Each edge
--[ 2019.09.12.21.15.03.899.0 ]--
r 53         //Each 
--[ 2019.09.12.21.15.04.173.0 ]--
r 53         //Each n
--[ 2019.09.12.21.15.04.236.0 ]--
r 53         //Each no
--[ 2019.09.12.21.15.04.264.0 ]--
r 53         //Each nod
--[ 2019.09.12.21.15.04.329.0 ]--
r 53         //Each node
--[ 2019.09.12.21.15.04.400.0 ]--
r 53         //Each node 
--[ 2019.09.12.21.15.04.457.0 ]--
r 53         //Each node w
--[ 2019.09.12.21.15.04.484.0 ]--
r 53         //Each node wi
--[ 2019.09.12.21.15.04.629.0 ]--
r 53         //Each node wil
--[ 2019.09.12.21.15.04.747.0 ]--
r 53         //Each node will
--[ 2019.09.12.21.15.04.825.0 ]--
r 53         //Each node will 
--[ 2019.09.12.21.15.04.864.0 ]--
r 53         //Each node will c
--[ 2019.09.12.21.15.04.976.0 ]--
r 53         //Each node will co
--[ 2019.09.12.21.15.05.013.0 ]--
r 53         //Each node will com
--[ 2019.09.12.21.15.05.063.0 ]--
r 53         //Each node will come
--[ 2019.09.12.21.15.05.467.0 ]--
r 53         //Each node will come 
--[ 2019.09.12.21.15.05.958.0 ]--
r 53         //Each node will 
--[ 2019.09.12.21.15.06.036.0 ]--
r 53         //Each node 
--[ 2019.09.12.21.15.06.255.0 ]--
r 53         //Each 
--[ 2019.09.12.21.15.06.892.0 ]--
r 53         //Each n
--[ 2019.09.12.21.15.06.916.0 ]--
r 53         //Each no
--[ 2019.09.12.21.15.07.064.0 ]--
r 53         //Each noe
--[ 2019.09.12.21.15.07.114.0 ]--
r 53         //Each noe 
--[ 2019.09.12.21.15.07.304.0 ]--
r 53         //Each noe
--[ 2019.09.12.21.15.07.358.0 ]--
r 53         //Each noed
--[ 2019.09.12.21.15.07.430.0 ]--
r 53         //Each noede
--[ 2019.09.12.21.15.07.562.0 ]--
r 53         //Each noed
--[ 2019.09.12.21.15.07.678.0 ]--
r 53         //Each noe
--[ 2019.09.12.21.15.07.942.0 ]--
r 53         //Each no
--[ 2019.09.12.21.15.08.043.0 ]--
r 53         //Each nod
--[ 2019.09.12.21.15.08.052.0 ]--
r 53         //Each node
--[ 2019.09.12.21.15.08.103.0 ]--
r 53         //Each node 
--[ 2019.09.12.21.15.08.213.0 ]--
r 53         //Each node (
--[ 2019.09.12.21.15.08.436.0 ]--
r 53         //Each node (t
--[ 2019.09.12.21.15.08.468.0 ]--
r 53         //Each node (th
--[ 2019.09.12.21.15.08.490.0 ]--
r 53         //Each node (tha
--[ 2019.09.12.21.15.08.568.0 ]--
r 53         //Each node (that
--[ 2019.09.12.21.15.08.642.0 ]--
r 53         //Each node (that 
--[ 2019.09.12.21.15.08.963.0 ]--
r 53         //Each node (that i
--[ 2019.09.12.21.15.09.056.0 ]--
r 53         //Each node (that is
--[ 2019.09.12.21.15.09.118.0 ]--
r 53         //Each node (that isn
--[ 2019.09.12.21.15.09.273.0 ]--
r 53         //Each node (that isn't
--[ 2019.09.12.21.15.09.388.0 ]--
r 53         //Each node (that isn't 
--[ 2019.09.12.21.15.09.411.0 ]--
r 53         //Each node (that isn't a
--[ 2019.09.12.21.15.09.439.0 ]--
r 53         //Each node (that isn't an
--[ 2019.09.12.21.15.09.489.0 ]--
r 53         //Each node (that isn't an 
--[ 2019.09.12.21.15.09.995.0 ]--
r 53         //Each node (that isn't an e
--[ 2019.09.12.21.15.10.126.0 ]--
r 53         //Each node (that isn't an ed
--[ 2019.09.12.21.15.10.365.0 ]--
r 53         //Each node (that isn't an edg
--[ 2019.09.12.21.15.10.378.0 ]--
r 53         //Each node (that isn't an edge
--[ 2019.09.12.21.15.10.441.0 ]--
r 53         //Each node (that isn't an edge 
--[ 2019.09.12.21.15.10.595.0 ]--
r 53         //Each node (that isn't an edge c
--[ 2019.09.12.21.15.10.724.0 ]--
r 53         //Each node (that isn't an edge ca
--[ 2019.09.12.21.15.10.816.0 ]--
r 53         //Each node (that isn't an edge cas
--[ 2019.09.12.21.15.11.632.0 ]--
r 53         //Each node (that isn't an edge case
--[ 2019.09.12.21.15.11.819.0 ]--
r 53         //Each node (that isn't an edge case)
--[ 2019.09.12.21.15.11.958.0 ]--
r 53         //Each node (that isn't an edge case) 
--[ 2019.09.12.21.15.11.966.0 ]--
r 53         //Each node (that isn't an edge case) w
--[ 2019.09.12.21.15.11.997.0 ]--
r 53         //Each node (that isn't an edge case) wi
--[ 2019.09.12.21.15.12.161.0 ]--
r 53         //Each node (that isn't an edge case) wil
--[ 2019.09.12.21.15.12.294.0 ]--
r 53         //Each node (that isn't an edge case) will
--[ 2019.09.12.21.15.12.314.0 ]--
r 53         //Each node (that isn't an edge case) will 
--[ 2019.09.12.21.15.12.342.0 ]--
r 53         //Each node (that isn't an edge case) will c
--[ 2019.09.12.21.15.12.416.0 ]--
r 53         //Each node (that isn't an edge case) will co
--[ 2019.09.12.21.15.12.477.0 ]--
r 53         //Each node (that isn't an edge case) will com
--[ 2019.09.12.21.15.12.522.0 ]--
r 53         //Each node (that isn't an edge case) will come
--[ 2019.09.12.21.15.12.562.0 ]--
r 53         //Each node (that isn't an edge case) will come 
--[ 2019.09.12.21.15.12.682.0 ]--
r 53         //Each node (that isn't an edge case) will come o
--[ 2019.09.12.21.15.12.778.0 ]--
r 53         //Each node (that isn't an edge case) will come ou
--[ 2019.09.12.21.15.12.873.0 ]--
r 53         //Each node (that isn't an edge case) will come out
--[ 2019.09.12.21.15.12.900.0 ]--
r 53         //Each node (that isn't an edge case) will come out 
--[ 2019.09.12.21.15.13.073.0 ]--
r 53         //Each node (that isn't an edge case) will come out to
--[ 2019.09.12.21.15.13.144.0 ]--
r 53         //Each node (that isn't an edge case) will come out to 
--[ 2019.09.12.21.15.13.233.0 ]--
r 53         //Each node (that isn't an edge case) will come out to
--[ 2019.09.12.21.15.13.475.0 ]--
+ 54         
--[ 2019.09.12.21.15.13.753.0 ]--
r 54         /
--[ 2019.09.12.21.15.13.896.0 ]--
r 54         //
--[ 2019.09.12.21.15.14.954.0 ]--
r 54         // 
--[ 2019.09.12.21.15.15.005.0 ]--
r 54         //
--[ 2019.09.12.21.15.16.326.0 ]--
r 54         //)
--[ 2019.09.12.21.15.17.284.0 ]--
r 54         //)r
--[ 2019.09.12.21.15.17.435.0 ]--
r 54         //)r,
--[ 2019.09.12.21.15.17.573.0 ]--
r 54         //)r,c
--[ 2019.09.12.21.15.18.024.0 ]--
r 54         //)r,
--[ 2019.09.12.21.15.18.141.0 ]--
r 54         //)r
--[ 2019.09.12.21.15.18.229.0 ]--
r 54         //)
--[ 2019.09.12.21.15.18.461.0 ]--
r 54         //
--[ 2019.09.12.21.15.18.723.0 ]--
r 54         //(
--[ 2019.09.12.21.15.18.886.0 ]--
r 54         //(r
--[ 2019.09.12.21.15.18.924.0 ]--
r 54         //(ro
--[ 2019.09.12.21.15.18.969.0 ]--
r 54         //(row
--[ 2019.09.12.21.15.19.052.0 ]--
r 54         //(row,
--[ 2019.09.12.21.15.19.163.0 ]--
r 54         //(row, 
--[ 2019.09.12.21.15.19.244.0 ]--
r 54         //(row, c
--[ 2019.09.12.21.15.19.277.0 ]--
r 54         //(row, co
--[ 2019.09.12.21.15.19.390.0 ]--
r 54         //(row, col
--[ 2019.09.12.21.15.19.617.0 ]--
r 54         //(row, col)
--[ 2019.09.12.21.15.20.364.0 ]--
+ 55         
--[ 2019.09.12.21.15.20.819.0 ]--
r 55         /
--[ 2019.09.12.21.15.20.849.0 ]--
r 55         //
--[ 2019.09.12.21.15.21.589.0 ]--
r 55         //)
--[ 2019.09.12.21.15.21.767.0 ]--
r 55         //)r
--[ 2019.09.12.21.15.21.990.0 ]--
r 55         //)ro
--[ 2019.09.12.21.15.22.066.0 ]--
r 55         //)row
--[ 2019.09.12.21.15.22.240.0 ]--
r 55         //)ro
--[ 2019.09.12.21.15.22.347.0 ]--
r 55         //)r
--[ 2019.09.12.21.15.22.427.0 ]--
r 55         //)
--[ 2019.09.12.21.15.22.858.0 ]--
r 55         //
--[ 2019.09.12.21.15.23.125.0 ]--
r 55         //(
--[ 2019.09.12.21.15.23.274.0 ]--
r 55         //(r
--[ 2019.09.12.21.15.23.377.0 ]--
r 55         //(ro
--[ 2019.09.12.21.15.23.449.0 ]--
r 55         //(row
--[ 2019.09.12.21.15.23.547.0 ]--
r 55         //(row,
--[ 2019.09.12.21.15.23.776.0 ]--
r 55         //(row, 
--[ 2019.09.12.21.15.23.979.0 ]--
r 55         //(row, c
--[ 2019.09.12.21.15.24.090.0 ]--
r 55         //(row, co
--[ 2019.09.12.21.15.24.228.0 ]--
r 55         //(row, col
--[ 2019.09.12.21.15.26.774.0 ]--
r 55         //(row, col-
--[ 2019.09.12.21.15.26.819.0 ]--
r 55         //(row, col-1
--[ 2019.09.12.21.15.27.148.0 ]--
r 55         //(row, col-1)
--[ 2019.09.12.21.15.27.362.0 ]--
+ 56         
--[ 2019.09.12.21.15.27.733.0 ]--
r 56         /
--[ 2019.09.12.21.15.27.828.0 ]--
r 56         //
--[ 2019.09.12.21.15.28.023.0 ]--
r 56         // 
--[ 2019.09.12.21.15.28.278.0 ]--
r 56         //
--[ 2019.09.12.21.15.28.460.0 ]--
r 56         //)
--[ 2019.09.12.21.15.29.026.0 ]--
r 56         //
--[ 2019.09.12.21.15.29.483.0 ]--
r 56         //(
--[ 2019.09.12.21.15.29.938.0 ]--
r 56         //(o
--[ 2019.09.12.21.15.31.304.0 ]--
r 56         //(
--[ 2019.09.12.21.15.31.450.0 ]--
r 56         //(r
--[ 2019.09.12.21.15.31.513.0 ]--
r 56         //(ro
--[ 2019.09.12.21.15.31.577.0 ]--
r 56         //(row
--[ 2019.09.12.21.15.31.746.0 ]--
r 56         //(row+
--[ 2019.09.12.21.15.31.916.0 ]--
r 56         //(row+1
--[ 2019.09.12.21.15.32.325.0 ]--
r 56         //(row+1,
--[ 2019.09.12.21.15.32.446.0 ]--
r 56         //(row+1, 
--[ 2019.09.12.21.15.33.792.0 ]--
r 56         //(row+1, c
--[ 2019.09.12.21.15.33.849.0 ]--
r 56         //(row+1, co
--[ 2019.09.12.21.15.33.996.0 ]--
r 56         //(row+1, col
--[ 2019.09.12.21.15.34.147.0 ]--
r 56         //(row+1, col-
--[ 2019.09.12.21.15.34.433.0 ]--
r 56         //(row+1, col-1
--[ 2019.09.12.21.15.34.611.0 ]--
r 56         //(row+1, col-1,
--[ 2019.09.12.21.15.35.716.0 ]--
r 56         //(row+1, col-1, 
--[ 2019.09.12.21.15.35.797.0 ]--
r 56         //(row+1, col-1,
--[ 2019.09.12.21.15.36.304.0 ]--
r 56         //(row+1, col-1
--[ 2019.09.12.21.15.36.537.0 ]--
r 56         //(row+1, col-1)
--[ 2019.09.12.21.15.37.016.0 ]--
+ 57         
--[ 2019.09.12.21.15.37.242.0 ]--
r 57         /
--[ 2019.09.12.21.15.37.389.0 ]--
r 57         //
--[ 2019.09.12.21.15.37.554.0 ]--
r 57         // 
--[ 2019.09.12.21.15.37.879.0 ]--
r 57         //
--[ 2019.09.12.21.15.38.223.0 ]--
r 57         //)
--[ 2019.09.12.21.15.38.779.0 ]--
r 57         //
--[ 2019.09.12.21.15.39.052.0 ]--
r 57         //(
--[ 2019.09.12.21.15.40.872.0 ]--
r 57         //(r
--[ 2019.09.12.21.15.40.975.0 ]--
r 57         //(ro
--[ 2019.09.12.21.15.41.028.0 ]--
r 57         //(row
--[ 2019.09.12.21.15.41.527.0 ]--
r 57         //(row 
--[ 2019.09.12.21.15.41.781.0 ]--
r 57         //(row
--[ 2019.09.12.21.15.41.962.0 ]--
r 57         //(row+
--[ 2019.09.12.21.15.42.154.0 ]--
r 57         //(row+1
--[ 2019.09.12.21.15.42.650.0 ]--
r 57         //(row+1,
--[ 2019.09.12.21.15.42.765.0 ]--
r 57         //(row+1, 
--[ 2019.09.12.21.15.43.018.0 ]--
r 57         //(row+1, c
--[ 2019.09.12.21.15.43.055.0 ]--
r 57         //(row+1, co
--[ 2019.09.12.21.15.43.230.0 ]--
r 57         //(row+1, col
--[ 2019.09.12.21.15.43.720.0 ]--
r 57         //(row+1, col_
--[ 2019.09.12.21.15.44.210.0 ]--
r 57         //(row+1, col
--[ 2019.09.12.21.15.44.382.0 ]--
r 57         //(row+1, col)
--[ 2019.09.12.21.15.44.671.0 ]--
+ 58         
--[ 2019.09.12.21.15.44.857.0 ]--
r 58         /
--[ 2019.09.12.21.15.44.981.0 ]--
r 58         //
--[ 2019.09.12.21.15.45.170.0 ]--
r 58         // 
--[ 2019.09.12.21.15.45.287.0 ]--
r 58         // )
--[ 2019.09.12.21.15.45.853.0 ]--
r 58         // 
--[ 2019.09.12.21.15.46.203.0 ]--
r 58         // (
--[ 2019.09.12.21.15.46.444.0 ]--
r 58         // 
--[ 2019.09.12.21.15.46.564.0 ]--
r 58         //
--[ 2019.09.12.21.15.46.737.0 ]--
r 58         //(
--[ 2019.09.12.21.15.46.954.0 ]--
r 58         //(R
--[ 2019.09.12.21.15.47.126.0 ]--
r 58         //(Ro
--[ 2019.09.12.21.15.47.204.0 ]--
r 58         //(Row
--[ 2019.09.12.21.15.47.329.0 ]--
r 58         //(Ro
--[ 2019.09.12.21.15.47.449.0 ]--
r 58         //(R
--[ 2019.09.12.21.15.47.558.0 ]--
r 58         //(
--[ 2019.09.12.21.15.47.701.0 ]--
r 58         //(r
--[ 2019.09.12.21.15.47.740.0 ]--
r 58         //(ro
--[ 2019.09.12.21.15.47.851.0 ]--
r 58         //(row
--[ 2019.09.12.21.15.48.554.0 ]--
r 58         //(row 
--[ 2019.09.12.21.15.48.634.0 ]--
r 58         //(row -
--[ 2019.09.12.21.15.48.704.0 ]--
r 58         //(row - 
--[ 2019.09.12.21.15.49.118.0 ]--
r 58         //(row -
--[ 2019.09.12.21.15.49.284.0 ]--
r 58         //(row -1
--[ 2019.09.12.21.15.50.133.0 ]--
r 58         //(row -
--[ 2019.09.12.21.15.50.251.0 ]--
r 58         //(row 
--[ 2019.09.12.21.15.50.368.0 ]--
r 58         //(row
--[ 2019.09.12.21.15.50.504.0 ]--
r 58         //(row-
--[ 2019.09.12.21.15.50.556.0 ]--
r 58         //(row-1
--[ 2019.09.12.21.15.51.096.0 ]--
r 58         //(row-1 
--[ 2019.09.12.21.15.51.517.0 ]--
r 58         //(row-1
--[ 2019.09.12.21.15.51.675.0 ]--
r 58         //(row-1,
--[ 2019.09.12.21.15.52.342.0 ]--
r 58         //(row-1, 
--[ 2019.09.12.21.15.52.536.0 ]--
r 58         //(row-1, c
--[ 2019.09.12.21.15.52.609.0 ]--
r 58         //(row-1, co
--[ 2019.09.12.21.15.52.754.0 ]--
r 58         //(row-1, col
--[ 2019.09.12.21.15.52.974.0 ]--
r 58         //(row-1, col+
--[ 2019.09.12.21.15.53.147.0 ]--
r 58         //(row-1, col+1
--[ 2019.09.12.21.15.53.447.0 ]--
r 58         //(row-1, col+1)
--[ 2019.09.12.21.15.54.314.0 ]--
+ 59         
--[ 2019.09.12.21.15.54.506.0 ]--
r 59         /
--[ 2019.09.12.21.15.54.588.0 ]--
r 59         //
--[ 2019.09.12.21.15.55.083.0 ]--
r 59         //(
--[ 2019.09.12.21.15.55.347.0 ]--
r 59         //(R
--[ 2019.09.12.21.15.55.942.0 ]--
r 59         //(
--[ 2019.09.12.21.15.57.054.0 ]--
r 59         //(r
--[ 2019.09.12.21.15.57.140.0 ]--
r 59         //(ro
--[ 2019.09.12.21.15.57.205.0 ]--
r 59         //(row
--[ 2019.09.12.21.15.57.310.0 ]--
r 59         //(row-
--[ 2019.09.12.21.15.57.432.0 ]--
r 59         //(row-1
--[ 2019.09.12.21.15.58.158.0 ]--
r 59         //(row-1,
--[ 2019.09.12.21.15.58.244.0 ]--
r 59         //(row-1, 
--[ 2019.09.12.21.15.58.413.0 ]--
r 59         //(row-1, c
--[ 2019.09.12.21.15.58.527.0 ]--
r 59         //(row-1, co
--[ 2019.09.12.21.15.58.616.0 ]--
r 59         //(row-1, col
--[ 2019.09.12.21.15.58.807.0 ]--
r 59         //(row-1, col)
--[ 2019.09.12.21.16.31.746.0 ]--
r 57         //(row+, col)
--[ 2019.09.12.21.16.31.990.0 ]--
r 57         //(row, col)
--[ 2019.09.12.21.16.35.592.0 ]--
r 57         //(row, col+)
--[ 2019.09.12.21.16.35.818.0 ]--
r 57         //(row, col+1)
--[ 2019.09.12.21.16.37.168.0 ]--
r 57         //(row, col+1 )
--[ 2019.09.12.21.16.37.215.0 ]--
r 57         //(row, col+1)
--[ 2019.09.12.21.16.57.661.0 ]--
r 53         //t
--[ 2019.09.12.21.16.57.811.0 ]--
r 53         //tH
--[ 2019.09.12.21.16.57.899.0 ]--
r 53         //tHE
--[ 2019.09.12.21.16.58.030.0 ]--
r 53         //tHE 
--[ 2019.09.12.21.16.59.112.0 ]--
r 53         //tHE
--[ 2019.09.12.21.16.59.221.0 ]--
r 53         //tH
--[ 2019.09.12.21.16.59.315.0 ]--
r 53         //t
--[ 2019.09.12.21.16.59.476.0 ]--
r 53         //
--[ 2019.09.12.21.16.59.967.0 ]--
r 53         //T
--[ 2019.09.12.21.17.00.275.0 ]--
r 53         //Th
--[ 2019.09.12.21.17.00.413.0 ]--
r 53         //The
--[ 2019.09.12.21.17.00.455.0 ]--
r 53         //The 
--[ 2019.09.12.21.17.00.520.0 ]--
r 53         //The n
--[ 2019.09.12.21.17.00.573.0 ]--
r 53         //The no
--[ 2019.09.12.21.17.00.668.0 ]--
r 53         //The nod
--[ 2019.09.12.21.17.00.770.0 ]--
r 53         //The node
--[ 2019.09.12.21.17.00.857.0 ]--
r 53         //The nodes
--[ 2019.09.12.21.17.00.958.0 ]--
r 53         //The nodes 
--[ 2019.09.12.21.17.01.216.0 ]--
r 53         //The nodes t
--[ 2019.09.12.21.17.01.286.0 ]--
r 53         //The nodes th
--[ 2019.09.12.21.17.01.326.0 ]--
r 53         //The nodes tha
--[ 2019.09.12.21.17.01.393.0 ]--
r 53         //The nodes that
--[ 2019.09.12.21.17.01.509.0 ]--
r 53         //The nodes that 
--[ 2019.09.12.21.17.01.605.0 ]--
r 53         //The nodes that c
--[ 2019.09.12.21.17.01.619.0 ]--
r 53         //The nodes that co
--[ 2019.09.12.21.17.01.746.0 ]--
r 53         //The nodes that con
--[ 2019.09.12.21.17.01.840.0 ]--
r 53         //The nodes that conn
--[ 2019.09.12.21.17.01.977.0 ]--
r 53         //The nodes that conne
--[ 2019.09.12.21.17.01.991.0 ]--
r 53         //The nodes that connec
--[ 2019.09.12.21.17.02.185.0 ]--
r 53         //The nodes that connect
--[ 2019.09.12.21.17.02.403.0 ]--
r 53         //The nodes that connect 
--[ 2019.09.12.21.17.03.347.0 ]--
r 53         //The nodes that connect a
--[ 2019.09.12.21.17.03.442.0 ]--
r 53         //The nodes that connect ar
--[ 2019.09.12.21.17.03.551.0 ]--
r 53         //The nodes that connect aro
--[ 2019.09.12.21.17.03.592.0 ]--
r 53         //The nodes that connect arou
--[ 2019.09.12.21.17.04.434.0 ]--
r 53         //The nodes that connect aroun
--[ 2019.09.12.21.17.04.543.0 ]--
r 53         //The nodes that connect around
--[ 2019.09.12.21.17.04.725.0 ]--
r 53         //The nodes that connect around 
--[ 2019.09.12.21.17.05.017.0 ]--
r 53         //The nodes that connect around a
--[ 2019.09.12.21.17.05.127.0 ]--
r 53         //The nodes that connect around an
--[ 2019.09.12.21.17.05.167.0 ]--
r 53         //The nodes that connect around ano
--[ 2019.09.12.21.17.05.259.0 ]--
r 53         //The nodes that connect around anot
--[ 2019.09.12.21.17.05.297.0 ]--
r 53         //The nodes that connect around anoth
--[ 2019.09.12.21.17.05.402.0 ]--
r 53         //The nodes that connect around anothe
--[ 2019.09.12.21.17.05.455.0 ]--
r 53         //The nodes that connect around another
--[ 2019.09.12.21.17.05.570.0 ]--
r 53         //The nodes that connect around another 
--[ 2019.09.12.21.17.05.666.0 ]--
r 53         //The nodes that connect around another n
--[ 2019.09.12.21.17.05.749.0 ]--
r 53         //The nodes that connect around another no
--[ 2019.09.12.21.17.05.784.0 ]--
r 53         //The nodes that connect around another not
--[ 2019.09.12.21.17.05.848.0 ]--
r 53         //The nodes that connect around another note
--[ 2019.09.12.21.17.06.477.0 ]--
r 53         //The nodes that connect around another not
--[ 2019.09.12.21.17.06.558.0 ]--
r 53         //The nodes that connect around another no
--[ 2019.09.12.21.17.06.623.0 ]--
r 53         //The nodes that connect around another nod
--[ 2019.09.12.21.17.06.722.0 ]--
r 53         //The nodes that connect around another node
--[ 2019.09.12.21.17.07.291.0 ]--
r 53         //The nodes that connect around another node 
--[ 2019.09.12.21.17.07.328.0 ]--
r 53         //The nodes that connect around another node w
--[ 2019.09.12.21.17.07.672.0 ]--
r 53         //The nodes that connect around another node wi
--[ 2019.09.12.21.17.07.814.0 ]--
r 53         //The nodes that connect around another node wil
--[ 2019.09.12.21.17.07.903.0 ]--
r 53         //The nodes that connect around another node will
--[ 2019.09.12.21.17.07.944.0 ]--
r 53         //The nodes that connect around another node will 
--[ 2019.09.12.21.17.08.045.0 ]--
r 53         //The nodes that connect around another node will b
--[ 2019.09.12.21.17.08.093.0 ]--
r 53         //The nodes that connect around another node will be
--[ 2019.09.12.21.17.08.201.0 ]--
r 53         //The nodes that connect around another node will be 
--[ 2019.09.12.21.17.08.489.0 ]--
r 53         //The nodes that connect around another node will be e
--[ 2019.09.12.21.17.08.652.0 ]--
r 53         //The nodes that connect around another node will be eq
--[ 2019.09.12.21.17.08.865.0 ]--
r 53         //The nodes that connect around another node will be equ
--[ 2019.09.12.21.17.08.954.0 ]--
r 53         //The nodes that connect around another node will be equa
--[ 2019.09.12.21.17.09.111.0 ]--
r 53         //The nodes that connect around another node will be equal
--[ 2019.09.12.21.17.09.267.0 ]--
r 53         //The nodes that connect around another node will be equal 
--[ 2019.09.12.21.17.09.341.0 ]--
r 53         //The nodes that connect around another node will be equal t
--[ 2019.09.12.21.17.09.447.0 ]--
r 53         //The nodes that connect around another node will be equal to
--[ 2019.09.12.21.17.09.844.0 ]--
r 53         //The nodes that connect around another node will be equal to:
--[ 2019.09.12.21.18.34.946.0 ]--
+ 57         
--[ 2019.09.12.21.18.36.862.0 ]--
r 57         /
--[ 2019.09.12.21.18.36.964.0 ]--
r 57         //
--[ 2019.09.12.21.18.37.778.0 ]--
r 57         //(
--[ 2019.09.12.21.18.37.953.0 ]--
r 57         //(r
--[ 2019.09.12.21.18.38.007.0 ]--
r 57         //(ro
--[ 2019.09.12.21.18.38.131.0 ]--
r 57         //(row
--[ 2019.09.12.21.18.38.585.0 ]--
r 57         //(row+
--[ 2019.09.12.21.18.38.674.0 ]--
r 57         //(row+1
--[ 2019.09.12.21.18.38.864.0 ]--
r 57         //(row+1,
--[ 2019.09.12.21.18.39.048.0 ]--
r 57         //(row+1, 
--[ 2019.09.12.21.18.39.245.0 ]--
r 57         //(row+1, c
--[ 2019.09.12.21.18.39.326.0 ]--
r 57         //(row+1, co
--[ 2019.09.12.21.18.39.472.0 ]--
r 57         //(row+1, col
--[ 2019.09.12.21.18.39.654.0 ]--
r 57         //(row+1, col)
--[ 2019.09.12.21.18.39.908.0 ]--
r 57         //(row+1, col) 
--[ 2019.09.12.21.18.39.953.0 ]--
r 57         //(row+1, col)
--[ 2019.09.12.21.19.03.864.0 ]--
+ 61         
--[ 2019.09.12.21.19.03.985.0 ]--
+ 61         
--[ 2019.09.12.21.19.06.891.0 ]--
r 62          
--[ 2019.09.12.21.19.06.953.0 ]--
r 62         
--[ 2019.09.12.21.19.15.987.0 ]--
- 61
--[ 2019.09.12.21.19.21.560.0 ]--
+ 61         
--[ 2019.09.12.21.19.22.203.0 ]--
r 62         i
--[ 2019.09.12.21.19.22.301.0 ]--
r 62         if
--[ 2019.09.12.21.19.22.444.0 ]--
r 62         if()
--[ 2019.09.12.21.19.23.018.0 ]--
r 62         if(g)
--[ 2019.09.12.21.19.23.132.0 ]--
r 62         if(ge)
--[ 2019.09.12.21.19.23.203.0 ]--
r 62         if(get)
--[ 2019.09.12.21.19.23.745.0 ]--
r 62         if(getP)
--[ 2019.09.12.21.19.23.832.0 ]--
r 62         if(getPl)
--[ 2019.09.12.21.19.23.870.0 ]--
r 62         if(getPla)
--[ 2019.09.12.21.19.23.926.0 ]--
r 62         if(getPlay)
--[ 2019.09.12.21.19.23.991.0 ]--
r 62         if(getPlaye)
--[ 2019.09.12.21.19.24.096.0 ]--
r 62         if(getPlayer)
--[ 2019.09.12.21.19.24.220.0 ]--
r 62         if(getPlayer )
--[ 2019.09.12.21.19.24.322.0 ]--
r 62         if(getPlayer =)
--[ 2019.09.12.21.19.24.435.0 ]--
r 62         if(getPlayer ==)
--[ 2019.09.12.21.19.24.480.0 ]--
r 62         if(getPlayer == )
--[ 2019.09.12.21.19.24.611.0 ]--
r 62         if(getPlayer == 1)
--[ 2019.09.12.21.19.25.405.0 ]--
r 62         if(getPlayer == 1 )
--[ 2019.09.12.21.19.25.448.0 ]--
r 62         if(getPlayer == 1)
--[ 2019.09.12.21.19.27.383.0 ]--
r 62         if()
--[ 2019.09.12.21.19.29.706.0 ]--
r 62         if
--[ 2019.09.12.21.19.29.806.0 ]--
r 62         i
--[ 2019.09.12.21.19.29.960.0 ]--
r 62         
--[ 2019.09.12.21.19.57.045.0 ]--
- 61
--[ 2019.09.12.21.19.57.311.0 ]--
- 61
--[ 2019.09.12.21.20.02.154.0 ]--
+ 75     
--[ 2019.09.12.21.20.02.863.0 ]--
+ 75     
--[ 2019.09.12.21.20.04.917.0 ]--
- 75
--[ 2019.09.12.21.20.07.472.0 ]--
r 75     p
--[ 2019.09.12.21.20.07.550.0 ]--
r 75     pr
--[ 2019.09.12.21.20.07.655.0 ]--
r 75     pri
--[ 2019.09.12.21.20.07.744.0 ]--
r 75     priv
--[ 2019.09.12.21.20.07.916.0 ]--
r 75     priva
--[ 2019.09.12.21.20.08.018.0 ]--
r 75     privat
--[ 2019.09.12.21.20.08.086.0 ]--
r 75     private
--[ 2019.09.12.21.20.08.095.0 ]--
r 75     private 
--[ 2019.09.12.21.20.08.255.0 ]--
r 75     private b
--[ 2019.09.12.21.20.08.323.0 ]--
r 75     private bo
--[ 2019.09.12.21.20.08.398.0 ]--
r 75     private boo
--[ 2019.09.12.21.20.08.543.0 ]--
r 75     private bool
--[ 2019.09.12.21.20.08.969.0 ]--
r 75     private bool 
--[ 2019.09.12.21.20.10.044.0 ]--
r 75     private bool i
--[ 2019.09.12.21.20.10.123.0 ]--
r 75     private bool in
--[ 2019.09.12.21.20.10.599.0 ]--
r 75     private bool inR
--[ 2019.09.12.21.20.10.754.0 ]--
r 75     private bool inRa
--[ 2019.09.12.21.20.10.846.0 ]--
r 75     private bool inRan
--[ 2019.09.12.21.20.10.976.0 ]--
r 75     private bool inRang
--[ 2019.09.12.21.20.10.999.0 ]--
r 75     private bool inRange
--[ 2019.09.12.21.20.12.279.0 ]--
r 75     private bool inRange()
--[ 2019.09.12.21.20.12.537.0 ]--
r 75     private bool inRange(){}
--[ 2019.09.12.21.20.12.716.0 ]--
+ 75     private bool inRange(){
r 76     }
--[ 2019.09.12.21.20.12.735.0 ]--
+ 76         
--[ 2019.09.12.21.20.12.843.0 ]--
+ 76         
--[ 2019.09.12.21.20.15.932.0 ]--
r 75     private boole inRange(){
--[ 2019.09.12.21.20.15.958.0 ]--
r 75     private boolea inRange(){
--[ 2019.09.12.21.20.16.098.0 ]--
r 75     private boolean inRange(){
--[ 2019.09.12.21.20.17.109.0 ]--
r 75     private boolean  inRange(){
--[ 2019.09.12.21.20.17.162.0 ]--
r 75     private boolean inRange(){
--[ 2019.09.12.21.20.18.937.0 ]--
- 76
--[ 2019.09.12.21.20.32.530.0 ]--
r 75     private boolean inRange(i){
--[ 2019.09.12.21.20.32.583.0 ]--
r 75     private boolean inRange(in){
--[ 2019.09.12.21.20.32.718.0 ]--
r 75     private boolean inRange(inr){
--[ 2019.09.12.21.20.33.044.0 ]--
r 75     private boolean inRange(in){
--[ 2019.09.12.21.20.33.123.0 ]--
r 75     private boolean inRange(int){
--[ 2019.09.12.21.20.33.212.0 ]--
r 75     private boolean inRange(int ){
--[ 2019.09.12.21.20.33.298.0 ]--
r 75     private boolean inRange(int r){
--[ 2019.09.12.21.20.33.385.0 ]--
r 75     private boolean inRange(int ro){
--[ 2019.09.12.21.20.33.443.0 ]--
r 75     private boolean inRange(int row){
--[ 2019.09.12.21.20.33.606.0 ]--
r 75     private boolean inRange(int row,){
--[ 2019.09.12.21.20.34.097.0 ]--
r 75     private boolean inRange(int row, ){
--[ 2019.09.12.21.20.34.253.0 ]--
r 75     private boolean inRange(int row, i){
--[ 2019.09.12.21.20.34.314.0 ]--
r 75     private boolean inRange(int row, in){
--[ 2019.09.12.21.20.34.896.0 ]--
r 75     private boolean inRange(int row, int){
--[ 2019.09.12.21.20.34.971.0 ]--
r 75     private boolean inRange(int row, int ){
--[ 2019.09.12.21.20.35.017.0 ]--
r 75     private boolean inRange(int row, int c){
--[ 2019.09.12.21.20.35.049.0 ]--
r 75     private boolean inRange(int row, int co){
--[ 2019.09.12.21.20.35.241.0 ]--
r 75     private boolean inRange(int row, int col){
--[ 2019.09.12.21.20.36.418.0 ]--
r 75     private boolean inRange(int row, int col ){
--[ 2019.09.12.21.20.36.480.0 ]--
r 75     private boolean inRange(int row, int col){
--[ 2019.09.12.21.20.53.891.0 ]--
r 76         i
--[ 2019.09.12.21.20.53.990.0 ]--
r 76         if
--[ 2019.09.12.21.20.54.783.0 ]--
r 76         if()
--[ 2019.09.12.21.20.56.451.0 ]--
r 76         if( )
--[ 2019.09.12.21.20.56.545.0 ]--
r 76         if()
--[ 2019.09.12.21.21.12.141.0 ]--
r 76         
--[ 2019.09.12.21.22.12.934.0 ]--
r 76         i
--[ 2019.09.12.21.22.13.026.0 ]--
r 76         if
--[ 2019.09.12.21.22.13.127.0 ]--
r 76         if()
--[ 2019.09.12.21.22.15.212.0 ]--
r 76         if( )
--[ 2019.09.12.21.22.15.284.0 ]--
r 76         if()
--[ 2019.09.12.21.22.16.898.0 ]--
r 76         if(r)
--[ 2019.09.12.21.22.17.000.0 ]--
r 76         if(ro)
--[ 2019.09.12.21.22.17.040.0 ]--
r 76         if(row)
--[ 2019.09.12.21.22.17.130.0 ]--
r 76         if(row )
--[ 2019.09.12.21.22.17.243.0 ]--
r 76         if(row >)
--[ 2019.09.12.21.22.17.402.0 ]--
r 76         if(row > )
--[ 2019.09.12.21.22.18.217.0 ]--
r 76         if(row > N)
--[ 2019.09.12.21.22.19.351.0 ]--
r 76         if(row > N|)
--[ 2019.09.12.21.22.19.529.0 ]--
r 76         if(row > N||)
--[ 2019.09.12.21.22.19.789.0 ]--
r 76         if(row > N|| )
--[ 2019.09.12.21.22.19.823.0 ]--
r 76         if(row > N|| c)
--[ 2019.09.12.21.22.19.927.0 ]--
r 76         if(row > N|| co)
--[ 2019.09.12.21.22.20.051.0 ]--
r 76         if(row > N|| col)
--[ 2019.09.12.21.22.22.397.0 ]--
r 76         if(row > || col)
--[ 2019.09.12.21.22.22.554.0 ]--
r 76         if(row > s|| col)
--[ 2019.09.12.21.22.22.726.0 ]--
r 76         if(row > sz|| col)
--[ 2019.09.12.21.22.22.742.0 ]--
r 76         if(row > szi|| col)
--[ 2019.09.12.21.22.22.886.0 ]--
r 76         if(row > szie|| col)
--[ 2019.09.12.21.22.24.216.0 ]--
r 76         if(row > szi|| col)
--[ 2019.09.12.21.22.24.294.0 ]--
r 76         if(row > sz|| col)
--[ 2019.09.12.21.22.24.416.0 ]--
r 76         if(row > s|| col)
--[ 2019.09.12.21.22.24.568.0 ]--
r 76         if(row > si|| col)
--[ 2019.09.12.21.22.24.615.0 ]--
r 76         if(row > siz|| col)
--[ 2019.09.12.21.22.24.759.0 ]--
r 76         if(row > size|| col)
--[ 2019.09.12.21.22.35.382.0 ]--
r 76         if(row > size|| col )
--[ 2019.09.12.21.22.36.698.0 ]--
r 76         if(row > size|| col >)
--[ 2019.09.12.21.22.37.103.0 ]--
r 76         if(row > size|| col >=)
--[ 2019.09.12.21.22.38.397.0 ]--
r 76         if(row > size|| col >= )
--[ 2019.09.12.21.22.38.941.0 ]--
r 76         if(row > size|| col >= s)
--[ 2019.09.12.21.22.39.019.0 ]--
r 76         if(row > size|| col >= su)
--[ 2019.09.12.21.22.39.156.0 ]--
r 76         if(row > size|| col >= suz)
--[ 2019.09.12.21.22.39.364.0 ]--
r 76         if(row > size|| col >= suze)
--[ 2019.09.12.21.22.46.070.0 ]--
r 76         if(row > size|| col >= suz)
--[ 2019.09.12.21.22.46.177.0 ]--
r 76         if(row > size|| col >= su)
--[ 2019.09.12.21.22.46.281.0 ]--
r 76         if(row > size|| col >= s)
--[ 2019.09.12.21.22.46.479.0 ]--
r 76         if(row > size|| col >= si)
--[ 2019.09.12.21.22.46.575.0 ]--
r 76         if(row > size|| col >= siz)
--[ 2019.09.12.21.22.46.719.0 ]--
r 76         if(row > size|| col >= size)
--[ 2019.09.12.21.22.47.979.0 ]--
r 76         if(row > size|| col >= size )
--[ 2019.09.12.21.22.48.086.0 ]--
r 76         if(row > size|| col >= size |)
--[ 2019.09.12.21.22.48.189.0 ]--
r 76         if(row > size|| col >= size ||)
--[ 2019.09.12.21.22.48.304.0 ]--
r 76         if(row > size|| col >= size || )
--[ 2019.09.12.21.22.50.023.0 ]--
r 76         if(row > size|| col >= size || r)
--[ 2019.09.12.21.22.50.104.0 ]--
r 76         if(row > size|| col >= size || ro)
--[ 2019.09.12.21.22.50.190.0 ]--
r 76         if(row > size|| col >= size || row)
--[ 2019.09.12.21.22.50.293.0 ]--
r 76         if(row > size|| col >= size || row )
--[ 2019.09.12.21.22.50.593.0 ]--
r 76         if(row > size|| col >= size || row <)
--[ 2019.09.12.21.22.50.733.0 ]--
r 76         if(row > size|| col >= size || row < )
--[ 2019.09.12.21.22.50.825.0 ]--
r 76         if(row > size|| col >= size || row < 0)
--[ 2019.09.12.21.22.52.253.0 ]--
r 76         if(row > size|| col >= size || row < 0 )
--[ 2019.09.12.21.22.52.369.0 ]--
r 76         if(row > size|| col >= size || row < 0 |)
--[ 2019.09.12.21.22.52.469.0 ]--
r 76         if(row > size|| col >= size || row < 0 ||)
--[ 2019.09.12.21.22.52.623.0 ]--
r 76         if(row > size|| col >= size || row < 0 || )
--[ 2019.09.12.21.22.53.035.0 ]--
r 76         if(row > size|| col >= size || row < 0 || c)
--[ 2019.09.12.21.22.53.045.0 ]--
r 76         if(row > size|| col >= size || row < 0 || co)
--[ 2019.09.12.21.22.53.169.0 ]--
r 76         if(row > size|| col >= size || row < 0 || col)
--[ 2019.09.12.21.22.53.284.0 ]--
r 76         if(row > size|| col >= size || row < 0 || col )
--[ 2019.09.12.21.22.53.396.0 ]--
r 76         if(row > size|| col >= size || row < 0 || col <)
--[ 2019.09.12.21.22.53.468.0 ]--
r 76         if(row > size|| col >= size || row < 0 || col < )
--[ 2019.09.12.21.22.53.922.0 ]--
r 76         if(row > size|| col >= size || row < 0 || col < 0)
--[ 2019.09.12.21.23.04.091.0 ]--
r 76         if(row > size|| col >= size || row < 0 || col < 0){
--[ 2019.09.12.21.23.04.280.0 ]--
+ 77 
+ 78 }
--[ 2019.09.12.21.23.04.287.0 ]--
r 78         }
--[ 2019.09.12.21.23.04.305.0 ]--
r 77             
--[ 2019.09.12.21.23.26.337.0 ]--
r 77             r
--[ 2019.09.12.21.23.26.409.0 ]--
r 77             re
--[ 2019.09.12.21.23.26.586.0 ]--
r 77             ret
--[ 2019.09.12.21.23.26.617.0 ]--
r 77             retu
--[ 2019.09.12.21.23.26.799.0 ]--
r 77             retun
--[ 2019.09.12.21.23.27.047.0 ]--
r 77             retu
--[ 2019.09.12.21.23.27.064.0 ]--
r 77             retu\
--[ 2019.09.12.21.23.27.208.0 ]--
r 77             retu\r
--[ 2019.09.12.21.23.27.217.0 ]--
r 77             retu\rn
--[ 2019.09.12.21.23.27.315.0 ]--
r 77             retu\rn 
--[ 2019.09.12.21.23.27.392.0 ]--
r 77             retu\rn f
--[ 2019.09.12.21.23.27.677.0 ]--
r 77             retu\rn 
--[ 2019.09.12.21.23.28.326.0 ]--
r 77             retu\rn
--[ 2019.09.12.21.23.28.422.0 ]--
r 77             retu\r
--[ 2019.09.12.21.23.28.515.0 ]--
r 77             retu\
--[ 2019.09.12.21.23.28.694.0 ]--
r 77             retu
--[ 2019.09.12.21.23.29.185.0 ]--
r 77             retur
--[ 2019.09.12.21.23.29.251.0 ]--
r 77             return
--[ 2019.09.12.21.23.29.556.0 ]--
r 77             return 
--[ 2019.09.12.21.23.29.580.0 ]--
r 77             return f
--[ 2019.09.12.21.23.29.614.0 ]--
r 77             return fa
--[ 2019.09.12.21.23.29.690.0 ]--
r 77             return fal
--[ 2019.09.12.21.23.29.755.0 ]--
r 77             return fals
--[ 2019.09.12.21.23.29.940.0 ]--
r 77             return false
--[ 2019.09.12.21.23.30.009.0 ]--
r 77             return false 
--[ 2019.09.12.21.23.30.091.0 ]--
r 77             return false
--[ 2019.09.12.21.23.32.044.0 ]--
r 77             return false;
--[ 2019.09.12.21.23.36.499.0 ]--
+ 79         
--[ 2019.09.12.21.23.36.743.0 ]--
r 79         r
--[ 2019.09.12.21.23.36.804.0 ]--
r 79         re
--[ 2019.09.12.21.23.36.940.0 ]--
r 79         ret
--[ 2019.09.12.21.23.37.064.0 ]--
r 79         retu
--[ 2019.09.12.21.23.37.111.0 ]--
r 79         retur
--[ 2019.09.12.21.23.37.186.0 ]--
r 79         return
--[ 2019.09.12.21.23.37.288.0 ]--
r 79         return 
--[ 2019.09.12.21.23.37.484.0 ]--
r 79         return t
--[ 2019.09.12.21.23.37.607.0 ]--
r 79         return tr
--[ 2019.09.12.21.23.37.672.0 ]--
r 79         return tru
--[ 2019.09.12.21.23.37.755.0 ]--
r 79         return true
--[ 2019.09.12.21.23.37.896.0 ]--
r 79         return true;
--[ 2019.09.12.21.23.52.734.0 ]--
+ 61         
--[ 2019.09.12.21.23.53.461.0 ]--
r 61         i
--[ 2019.09.12.21.23.53.562.0 ]--
r 61         if
--[ 2019.09.12.21.23.53.891.0 ]--
r 61         if()
--[ 2019.09.12.21.23.55.526.0 ]--
r 61         if( )
--[ 2019.09.12.21.23.55.564.0 ]--
r 61         if()
--[ 2019.09.12.21.24.07.063.0 ]--
r 61         if(b)
--[ 2019.09.12.21.24.07.170.0 ]--
r 61         if(bo)
--[ 2019.09.12.21.24.07.201.0 ]--
r 61         if(boa)
--[ 2019.09.12.21.24.07.319.0 ]--
r 61         if(boar)
--[ 2019.09.12.21.24.07.463.0 ]--
r 61         if(board)
--[ 2019.09.12.21.24.07.568.0 ]--
r 61         if(board[])
--[ 2019.09.12.21.24.08.290.0 ]--
r 61         if(board[r])
--[ 2019.09.12.21.24.08.397.0 ]--
r 61         if(board[rp])
--[ 2019.09.12.21.24.08.466.0 ]--
r 61         if(board[rpw])
--[ 2019.09.12.21.24.09.872.0 ]--
r 61         if(board[rpw ])
--[ 2019.09.12.21.24.09.936.0 ]--
r 61         if(board[rpw])
--[ 2019.09.12.21.24.10.134.0 ]--
r 61         if(board[])
--[ 2019.09.12.21.24.10.377.0 ]--
r 61         if(board)
--[ 2019.09.12.21.24.10.904.0 ]--
r 61         if(boar)
--[ 2019.09.12.21.24.11.029.0 ]--
r 61         if(boa)
--[ 2019.09.12.21.24.11.177.0 ]--
r 61         if(bo)
--[ 2019.09.12.21.24.11.321.0 ]--
r 61         if(b)
--[ 2019.09.12.21.24.11.405.0 ]--
r 61         if()
--[ 2019.09.12.21.24.22.462.0 ]--
r 61         if(i)
--[ 2019.09.12.21.24.22.587.0 ]--
r 61         if(is)
--[ 2019.09.12.21.24.23.627.0 ]--
r 61         if(i)
--[ 2019.09.12.21.24.23.714.0 ]--
r 61         if()
--[ 2019.09.12.21.24.23.882.0 ]--
r 61         if(i)
--[ 2019.09.12.21.24.23.965.0 ]--
r 61         if(in)
--[ 2019.09.12.21.24.24.161.0 ]--
r 61         if(inR)
--[ 2019.09.12.21.24.24.272.0 ]--
r 61         if(inRa)
--[ 2019.09.12.21.24.24.353.0 ]--
r 61         if(inRan)
--[ 2019.09.12.21.24.24.462.0 ]--
r 61         if(inRang)
--[ 2019.09.12.21.24.24.505.0 ]--
r 61         if(inRange)
--[ 2019.09.12.21.24.24.979.0 ]--
r 61         if(inRange())
--[ 2019.09.12.21.24.25.330.0 ]--
r 61         if(inRange( ))
--[ 2019.09.12.21.24.25.354.0 ]--
r 61         if(inRange())
--[ 2019.09.12.21.24.25.469.0 ]--
r 61         if(inRange(r))
--[ 2019.09.12.21.24.25.590.0 ]--
r 61         if(inRange(ro))
--[ 2019.09.12.21.24.25.652.0 ]--
r 61         if(inRange(row))
--[ 2019.09.12.21.24.25.734.0 ]--
r 61         if(inRange(row,))
--[ 2019.09.12.21.24.25.901.0 ]--
r 61         if(inRange(row, ))
--[ 2019.09.12.21.24.34.203.0 ]--
r 61         if(inRange(row, c))
--[ 2019.09.12.21.24.34.277.0 ]--
r 61         if(inRange(row, co))
--[ 2019.09.12.21.24.34.410.0 ]--
r 61         if(inRange(row, col))
--[ 2019.09.12.21.24.34.588.0 ]--
r 61         if(inRange(row, col-))
--[ 2019.09.12.21.24.34.834.0 ]--
r 61         if(inRange(row, col-1))
--[ 2019.09.12.21.24.37.095.0 ]--
r 61         if(inRange(row, col-1) )
--[ 2019.09.12.21.24.37.470.0 ]--
r 61         if(inRange(row, col-1) &)
--[ 2019.09.12.21.24.37.572.0 ]--
r 61         if(inRange(row, col-1) &&)
--[ 2019.09.12.21.24.37.747.0 ]--
r 61         if(inRange(row, col-1) && )
--[ 2019.09.12.21.24.39.803.0 ]--
r 61         if(inRange(row, col-1) &&  )
--[ 2019.09.12.21.24.39.841.0 ]--
r 61         if(inRange(row, col-1) && )
--[ 2019.09.12.21.24.41.382.0 ]--
+ 61         
--[ 2019.09.12.21.24.55.993.0 ]--
- 61
--[ 2019.09.12.21.24.58.787.0 ]--
r 61         if(inRange(row, col-1)  )
--[ 2019.09.12.21.24.59.140.0 ]--
r 61         if(inRange(row, col-1) )
--[ 2019.09.12.21.24.59.657.0 ]--
r 61         if(inRange(row, col-1))
--[ 2019.09.12.21.25.18.332.0 ]--
r 61         if(inRange(row, col-1) )
--[ 2019.09.12.21.25.18.810.0 ]--
r 61         if(inRange(row, col-1) &)
--[ 2019.09.12.21.25.18.917.0 ]--
r 61         if(inRange(row, col-1) &&)
--[ 2019.09.12.21.25.19.041.0 ]--
r 61         if(inRange(row, col-1) && )
--[ 2019.09.12.21.25.20.815.0 ]--
r 61         if(inRange(row, col-1) &&  )
--[ 2019.09.12.21.25.20.883.0 ]--
r 61         if(inRange(row, col-1) && )
--[ 2019.09.12.21.25.34.657.0 ]--
+ 61         
--[ 2019.09.12.21.25.35.271.0 ]--
r 61         i
--[ 2019.09.12.21.25.35.369.0 ]--
r 61         if
--[ 2019.09.12.21.25.36.325.0 ]--
r 61         if()
--[ 2019.09.12.21.25.36.492.0 ]--
r 61         if(p)
--[ 2019.09.12.21.25.36.531.0 ]--
r 61         if(pl)
--[ 2019.09.12.21.25.36.557.0 ]--
r 61         if(pla)
--[ 2019.09.12.21.25.36.647.0 ]--
r 61         if(play)
--[ 2019.09.12.21.25.36.713.0 ]--
r 61         if(playe)
--[ 2019.09.12.21.25.36.794.0 ]--
r 61         if(player)
--[ 2019.09.12.21.25.37.307.0 ]--
r 61         if(player )
--[ 2019.09.12.21.25.37.370.0 ]--
r 61         if(player =)
--[ 2019.09.12.21.25.37.461.0 ]--
r 61         if(player ==)
--[ 2019.09.12.21.25.37.468.0 ]--
r 61         if(player == )
--[ 2019.09.12.21.25.37.572.0 ]--
r 61         if(player == 1)
--[ 2019.09.12.21.25.39.280.0 ]--
r 61         if(player == 1 )
--[ 2019.09.12.21.25.39.302.0 ]--
r 61         if(player == 1)
--[ 2019.09.12.21.25.40.149.0 ]--
r 61         if(player == 1){
--[ 2019.09.12.21.25.40.840.0 ]--
+ 62 
+ 63 }
--[ 2019.09.12.21.25.40.878.0 ]--
r 63         }
--[ 2019.09.12.21.25.40.910.0 ]--
r 62             
--[ 2019.09.12.21.25.44.495.0 ]--
r 64          && )
--[ 2019.09.12.21.25.45.538.0 ]--
r 64         
--[ 2019.09.12.21.25.45.922.0 ]--
- 64
--[ 2019.09.12.21.25.47.147.0 ]--
r 62          \   
--[ 2019.09.12.21.25.47.410.0 ]--
r 62             
--[ 2019.09.12.21.25.47.663.0 ]--
- 62
--[ 2019.09.12.21.25.48.073.0 ]--
+ 62             
--[ 2019.09.12.21.25.48.492.0 ]--
r 62             if(inRange(row, col-1)
--[ 2019.09.12.21.26.19.888.0 ]--
r 62             if(inRange(row, col-1) 
--[ 2019.09.12.21.26.20.275.0 ]--
r 62             if(inRange(row, col-1)
--[ 2019.09.12.21.26.21.526.0 ]--
r 62             if(inRange(row, col-1) 
--[ 2019.09.12.21.26.21.793.0 ]--
r 62             if(inRange(row, col-1)
--[ 2019.09.12.21.26.25.836.0 ]--
r 62             if(inRange(row, col-1))
--[ 2019.09.12.21.26.30.149.0 ]--
r 62             if(inRange(row, col-1)) 
--[ 2019.09.12.21.26.30.403.0 ]--
r 62             if(inRange(row, col-1)) &
--[ 2019.09.12.21.26.30.522.0 ]--
r 62             if(inRange(row, col-1)) &&
--[ 2019.09.12.21.26.30.674.0 ]--
r 62             if(inRange(row, col-1)) && 
--[ 2019.09.12.21.26.33.004.0 ]--
r 62             if(inRange(row, col-1)) &&
--[ 2019.09.12.21.26.33.117.0 ]--
r 62             if(inRange(row, col-1)) &
--[ 2019.09.12.21.26.33.232.0 ]--
r 62             if(inRange(row, col-1)) 
--[ 2019.09.12.21.26.35.656.0 ]--
r 62             if(inRange(row, col-1))
--[ 2019.09.12.21.27.03.870.0 ]--
r 62             if(inRange(row, col-1) )
--[ 2019.09.12.21.27.04.279.0 ]--
r 62             if(inRange(row, col-1) &)
--[ 2019.09.12.21.27.04.358.0 ]--
r 62             if(inRange(row, col-1) &&)
--[ 2019.09.12.21.27.04.471.0 ]--
r 62             if(inRange(row, col-1) && )
--[ 2019.09.12.21.27.05.903.0 ]--
r 62             if(inRange(row, col-1) && g)
--[ 2019.09.12.21.27.05.952.0 ]--
r 62             if(inRange(row, col-1) && ge)
--[ 2019.09.12.21.27.06.078.0 ]--
r 62             if(inRange(row, col-1) && get)
--[ 2019.09.12.21.27.06.269.0 ]--
r 62             if(inRange(row, col-1) && getP)
--[ 2019.09.12.21.27.06.387.0 ]--
r 62             if(inRange(row, col-1) && getPl)
--[ 2019.09.12.21.27.06.471.0 ]--
r 62             if(inRange(row, col-1) && getPla)
--[ 2019.09.12.21.27.06.522.0 ]--
r 62             if(inRange(row, col-1) && getPlay)
--[ 2019.09.12.21.27.06.634.0 ]--
r 62             if(inRange(row, col-1) && getPlaye)
--[ 2019.09.12.21.27.06.723.0 ]--
r 62             if(inRange(row, col-1) && getPlayer)
--[ 2019.09.12.21.27.07.123.0 ]--
r 62             if(inRange(row, col-1) && getPlayer)r
--[ 2019.09.12.21.27.07.206.0 ]--
r 62             if(inRange(row, col-1) && getPlayer)ro
--[ 2019.09.12.21.27.07.275.0 ]--
r 62             if(inRange(row, col-1) && getPlayer)row
--[ 2019.09.12.21.27.07.355.0 ]--
r 62             if(inRange(row, col-1) && getPlayer)row,
--[ 2019.09.12.21.27.07.491.0 ]--
r 62             if(inRange(row, col-1) && getPlayer)row, 
--[ 2019.09.12.21.27.07.619.0 ]--
r 62             if(inRange(row, col-1) && getPlayer)row, c
--[ 2019.09.12.21.27.08.015.0 ]--
r 62             if(inRange(row, col-1) && getPlayer)row, 
--[ 2019.09.12.21.27.08.172.0 ]--
r 62             if(inRange(row, col-1) && getPlayer)row, c
--[ 2019.09.12.21.27.08.224.0 ]--
r 62             if(inRange(row, col-1) && getPlayer)row, co
--[ 2019.09.12.21.27.08.396.0 ]--
r 62             if(inRange(row, col-1) && getPlayer)row, col
--[ 2019.09.12.21.27.08.543.0 ]--
r 62             if(inRange(row, col-1) && getPlayer)row, col-
--[ 2019.09.12.21.27.08.634.0 ]--
r 62             if(inRange(row, col-1) && getPlayer)row, col-1
--[ 2019.09.12.21.27.12.402.0 ]--
r 62             if(inRange(row, col-1) 
--[ 2019.09.12.21.27.12.604.0 ]--
r 62             if(inRange(row, col-1)
--[ 2019.09.12.21.27.14.214.0 ]--
r 62             if(inRange(row, col-1))
--[ 2019.09.12.21.27.15.114.0 ]--
r 62             if(inRange(row, col-1) )
--[ 2019.09.12.21.27.15.743.0 ]--
r 62             if(inRange(row, col-1) &)
--[ 2019.09.12.21.27.15.850.0 ]--
r 62             if(inRange(row, col-1) &&)
--[ 2019.09.12.21.27.15.939.0 ]--
r 62             if(inRange(row, col-1) && )
--[ 2019.09.12.21.27.17.320.0 ]--
r 62             if(inRange(row, col-1) && g)
--[ 2019.09.12.21.27.17.397.0 ]--
r 62             if(inRange(row, col-1) && ge)
--[ 2019.09.12.21.27.17.539.0 ]--
r 62             if(inRange(row, col-1) && get)
--[ 2019.09.12.21.27.17.630.0 ]--
r 62             if(inRange(row, col-1) && getP)
--[ 2019.09.12.21.27.17.766.0 ]--
r 62             if(inRange(row, col-1) && getPl)
--[ 2019.09.12.21.27.17.842.0 ]--
r 62             if(inRange(row, col-1) && getPla)
--[ 2019.09.12.21.27.18.277.0 ]--
r 62             if(inRange(row, col-1) && getPlat)
--[ 2019.09.12.21.27.18.342.0 ]--
r 62             if(inRange(row, col-1) && getPlate)
--[ 2019.09.12.21.27.18.656.0 ]--
r 62             if(inRange(row, col-1) && getPlat)
--[ 2019.09.12.21.27.18.739.0 ]--
r 62             if(inRange(row, col-1) && getPla)
--[ 2019.09.12.21.27.18.843.0 ]--
r 62             if(inRange(row, col-1) && getPlay)
--[ 2019.09.12.21.27.18.912.0 ]--
r 62             if(inRange(row, col-1) && getPlaye)
--[ 2019.09.12.21.27.18.958.0 ]--
r 62             if(inRange(row, col-1) && getPlayer)
--[ 2019.09.12.21.27.19.147.0 ]--
r 62             if(inRange(row, col-1) && getPlayer())
--[ 2019.09.12.21.27.19.754.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(r))
--[ 2019.09.12.21.27.19.830.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(rp))
--[ 2019.09.12.21.27.19.925.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(rpw))
--[ 2019.09.12.21.27.20.029.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(rpw,))
--[ 2019.09.12.21.27.20.155.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(rpw, ))
--[ 2019.09.12.21.27.20.228.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(rpw, c))
--[ 2019.09.12.21.27.20.294.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(rpw, co))
--[ 2019.09.12.21.27.20.422.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(rpw, col))
--[ 2019.09.12.21.27.20.597.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(rpw, col=))
--[ 2019.09.12.21.27.21.129.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(rpw, col))
--[ 2019.09.12.21.27.21.254.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(rpw, col-))
--[ 2019.09.12.21.27.21.324.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(rpw, col-1))
--[ 2019.09.12.21.27.24.764.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(rw, col-1))
--[ 2019.09.12.21.27.24.812.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(row, col-1))
--[ 2019.09.12.21.27.26.519.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(row, col-1) )
--[ 2019.09.12.21.27.26.602.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(row, col-1) =)
--[ 2019.09.12.21.27.26.728.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(row, col-1) ==)
--[ 2019.09.12.21.27.26.755.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(row, col-1) == )
--[ 2019.09.12.21.27.26.861.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(row, col-1) == 1)
--[ 2019.09.12.21.27.28.123.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(row, col-1) == 1 )
--[ 2019.09.12.21.27.28.219.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(row, col-1) == 1)
--[ 2019.09.12.21.28.15.050.0 ]--
r 64     } 
--[ 2019.09.12.21.28.15.097.0 ]--
r 64     }
--[ 2019.09.12.21.28.40.259.0 ]--
r 62             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){
--[ 2019.09.12.21.28.40.462.0 ]--
+ 63 
+ 64 }
--[ 2019.09.12.21.28.40.490.0 ]--
r 64             }
--[ 2019.09.12.21.28.40.512.0 ]--
r 63                 
--[ 2019.09.12.21.28.40.614.0 ]--
+ 63                 
--[ 2019.09.12.21.28.41.772.0 ]--
- 63
--[ 2019.09.12.21.28.42.217.0 ]--
r 63                 c
--[ 2019.09.12.21.28.42.292.0 ]--
r 63                 co
--[ 2019.09.12.21.28.42.411.0 ]--
r 63                 con
--[ 2019.09.12.21.28.42.546.0 ]--
r 63                 conn
--[ 2019.09.12.21.28.42.642.0 ]--
r 63                 conne
--[ 2019.09.12.21.28.42.727.0 ]--
r 63                 connec
--[ 2019.09.12.21.28.42.939.0 ]--
r 63                 connect
--[ 2019.09.12.21.28.42.971.0 ]--
r 63                 connecti
--[ 2019.09.12.21.28.43.033.0 ]--
r 63                 connectio
--[ 2019.09.12.21.28.43.119.0 ]--
r 63                 connection
--[ 2019.09.12.21.28.43.195.0 ]--
r 63                 connections
--[ 2019.09.12.21.28.45.076.0 ]--
r 63                 connections1
--[ 2019.09.12.21.28.45.866.0 ]--
r 63                 connections1 
--[ 2019.09.12.21.28.45.935.0 ]--
r 63                 connections1
--[ 2019.09.12.21.28.46.427.0 ]--
r 63                 
--[ 2019.09.12.21.28.52.701.0 ]--
r 63                 c
--[ 2019.09.12.21.28.53.109.0 ]--
r 63                 co
--[ 2019.09.12.21.28.53.251.0 ]--
r 63                 con
--[ 2019.09.12.21.28.53.363.0 ]--
r 63                 conn
--[ 2019.09.12.21.28.53.532.0 ]--
r 63                 conne
--[ 2019.09.12.21.28.53.569.0 ]--
r 63                 connec
--[ 2019.09.12.21.28.53.750.0 ]--
r 63                 connect
--[ 2019.09.12.21.28.53.830.0 ]--
r 63                 connecti
--[ 2019.09.12.21.28.53.901.0 ]--
r 63                 connectio
--[ 2019.09.12.21.28.53.964.0 ]--
r 63                 connection
--[ 2019.09.12.21.28.54.269.0 ]--
r 63                 connection 
--[ 2019.09.12.21.28.54.279.0 ]--
r 63                 connection
--[ 2019.09.12.21.28.55.906.0 ]--
r 63                 connection.
--[ 2019.09.12.21.28.56.252.0 ]--
r 63                 connection.u
--[ 2019.09.12.21.28.56.375.0 ]--
r 63                 connection.un
--[ 2019.09.12.21.28.56.702.0 ]--
r 63                 connection.unio
--[ 2019.09.12.21.28.56.799.0 ]--
r 63                 connection.union
--[ 2019.09.12.21.29.02.400.0 ]--
r 63                 connection.union 
--[ 2019.09.12.21.29.02.460.0 ]--
r 63                 connection.union
--[ 2019.09.12.21.29.06.392.0 ]--
+ 20         
--[ 2019.09.12.21.29.07.098.0 ]--
r 20         U
--[ 2019.09.12.21.29.07.205.0 ]--
r 20         UF
--[ 2019.09.12.21.29.07.269.0 ]--
r 20         UF 
--[ 2019.09.12.21.29.07.341.0 ]--
r 20         UF c
--[ 2019.09.12.21.29.07.386.0 ]--
r 20         UF co
--[ 2019.09.12.21.29.07.510.0 ]--
r 20         UF con
--[ 2019.09.12.21.29.07.616.0 ]--
r 20         UF conn
--[ 2019.09.12.21.29.07.770.0 ]--
r 20         UF conne
--[ 2019.09.12.21.29.07.790.0 ]--
r 20         UF connec
--[ 2019.09.12.21.29.07.955.0 ]--
r 20         UF connect
--[ 2019.09.12.21.29.08.031.0 ]--
r 20         UF connecti
--[ 2019.09.12.21.29.08.164.0 ]--
r 20         UF connectio
--[ 2019.09.12.21.29.08.181.0 ]--
r 20         UF connection
--[ 2019.09.12.21.29.08.289.0 ]--
r 20         UF connection 
--[ 2019.09.12.21.29.08.361.0 ]--
r 20         UF connection =
--[ 2019.09.12.21.29.08.432.0 ]--
r 20         UF connection = 
--[ 2019.09.12.21.29.08.618.0 ]--
r 20         UF connection = n
--[ 2019.09.12.21.29.08.722.0 ]--
r 20         UF connection = ne
--[ 2019.09.12.21.29.08.882.0 ]--
r 20         UF connection = new
--[ 2019.09.12.21.29.09.355.0 ]--
r 20         UF connection = new 
--[ 2019.09.12.21.29.09.620.0 ]--
r 20         UF connection = new
--[ 2019.09.12.21.29.10.095.0 ]--
r 20         UF connection = new 
--[ 2019.09.12.21.29.10.355.0 ]--
r 20         UF connection = new U
--[ 2019.09.12.21.29.10.452.0 ]--
r 20         UF connection = new UF
--[ 2019.09.12.21.29.10.669.0 ]--
r 20         UF connection = new UF9
--[ 2019.09.12.21.29.11.071.0 ]--
r 20         UF connection = new UF
--[ 2019.09.12.21.29.11.275.0 ]--
r 20         UF connection = new UF*
--[ 2019.09.12.21.29.11.693.0 ]--
r 20         UF connection = new UF*n
--[ 2019.09.12.21.29.11.703.0 ]--
r 20         UF connection = new UF*no
--[ 2019.09.12.21.29.11.772.0 ]--
r 20         UF connection = new UF*not
--[ 2019.09.12.21.29.11.815.0 ]--
r 20         UF connection = new UF*note
--[ 2019.09.12.21.29.11.971.0 ]--
r 20         UF connection = new UF*notes
--[ 2019.09.12.21.29.12.111.0 ]--
r 20         UF connection = new UF*notes)
--[ 2019.09.12.21.29.12.295.0 ]--
r 20         UF connection = new UF*notes
--[ 2019.09.12.21.29.12.516.0 ]--
r 20         UF connection = new UF*not
--[ 2019.09.12.21.29.12.592.0 ]--
r 20         UF connection = new UF*no
--[ 2019.09.12.21.29.12.705.0 ]--
r 20         UF connection = new UF*n
--[ 2019.09.12.21.29.12.859.0 ]--
r 20         UF connection = new UF*
--[ 2019.09.12.21.29.13.287.0 ]--
r 20         UF connection = new UF*()
--[ 2019.09.12.21.29.13.426.0 ]--
r 20         UF connection = new UF*(n)
--[ 2019.09.12.21.29.13.500.0 ]--
r 20         UF connection = new UF*(no)
--[ 2019.09.12.21.29.13.536.0 ]--
r 20         UF connection = new UF*(not)
--[ 2019.09.12.21.29.13.606.0 ]--
r 20         UF connection = new UF*(note)
--[ 2019.09.12.21.29.13.968.0 ]--
r 20         UF connection = new UF*(not)
--[ 2019.09.12.21.29.14.019.0 ]--
r 20         UF connection = new UF*(no)
--[ 2019.09.12.21.29.14.120.0 ]--
r 20         UF connection = new UF*(n)
--[ 2019.09.12.21.29.14.245.0 ]--
r 20         UF connection = new UF*()
--[ 2019.09.12.21.29.14.372.0 ]--
r 20         UF connection = new UF*
--[ 2019.09.12.21.29.14.555.0 ]--
r 20         UF connection = new UF
--[ 2019.09.12.21.29.14.773.0 ]--
r 20         UF connection = new UF()
--[ 2019.09.12.21.29.15.042.0 ]--
r 20         UF connection = new UF(n)
--[ 2019.09.12.21.29.15.122.0 ]--
r 20         UF connection = new UF(no)
--[ 2019.09.12.21.29.15.163.0 ]--
r 20         UF connection = new UF(not)
--[ 2019.09.12.21.29.15.214.0 ]--
r 20         UF connection = new UF(note)
--[ 2019.09.12.21.29.15.775.0 ]--
r 20         UF connection = new UF(not)
--[ 2019.09.12.21.29.15.872.0 ]--
r 20         UF connection = new UF(no)
--[ 2019.09.12.21.29.15.912.0 ]--
r 20         UF connection = new UF(nod)
--[ 2019.09.12.21.29.15.980.0 ]--
r 20         UF connection = new UF(node)
--[ 2019.09.12.21.29.16.155.0 ]--
r 20         UF connection = new UF(nodes)
--[ 2019.09.12.21.29.16.546.0 ]--
r 20         UF connection = new UF(nodes);
--[ 2019.09.12.21.29.18.829.0 ]--
r 20         UF connection = new UF(nodes); 
--[ 2019.09.12.21.29.18.871.0 ]--
r 20         UF connection = new UF(nodes);
--[ 2019.09.12.21.29.26.777.0 ]--
r 64                 connection1.union
--[ 2019.09.12.21.29.28.633.0 ]--
r 64                 connection.union
--[ 2019.09.12.21.29.31.543.0 ]--
+ 10     
--[ 2019.09.12.21.29.32.221.0 ]--
r 10     p
--[ 2019.09.12.21.29.32.304.0 ]--
r 10     pr
--[ 2019.09.12.21.29.32.389.0 ]--
r 10     pri
--[ 2019.09.12.21.29.32.708.0 ]--
r 10     priv
--[ 2019.09.12.21.29.32.862.0 ]--
r 10     priva
--[ 2019.09.12.21.29.33.003.0 ]--
r 10     privat
--[ 2019.09.12.21.29.33.044.0 ]--
r 10     private
--[ 2019.09.12.21.29.33.175.0 ]--
r 10     private 
--[ 2019.09.12.21.29.33.290.0 ]--
r 10     private i
--[ 2019.09.12.21.29.33.323.0 ]--
r 10     private in
--[ 2019.09.12.21.29.33.396.0 ]--
r 10     private int
--[ 2019.09.12.21.29.33.493.0 ]--
r 10     private int 
--[ 2019.09.12.21.29.34.252.0 ]--
r 10     private 
--[ 2019.09.12.21.29.36.382.0 ]--
r 10     private
--[ 2019.09.12.21.29.36.513.0 ]--
r 10     privat
--[ 2019.09.12.21.29.36.596.0 ]--
r 10     priva
--[ 2019.09.12.21.29.36.768.0 ]--
r 10     priv
--[ 2019.09.12.21.29.37.026.0 ]--
r 10     pri
--[ 2019.09.12.21.29.37.178.0 ]--
r 10     pr
--[ 2019.09.12.21.29.37.227.0 ]--
r 10     p
--[ 2019.09.12.21.29.37.737.0 ]--
r 10     
--[ 2019.09.12.21.29.38.000.0 ]--
r 10     U
--[ 2019.09.12.21.29.38.169.0 ]--
r 10     UF
--[ 2019.09.12.21.29.38.412.0 ]--
r 10     UF 
--[ 2019.09.12.21.29.38.649.0 ]--
r 10     UF c
--[ 2019.09.12.21.29.38.723.0 ]--
r 10     UF co
--[ 2019.09.12.21.29.38.838.0 ]--
r 10     UF con
--[ 2019.09.12.21.29.39.048.0 ]--
r 10     UF conn
--[ 2019.09.12.21.29.39.063.0 ]--
r 10     UF conne
--[ 2019.09.12.21.29.39.095.0 ]--
r 10     UF connec
--[ 2019.09.12.21.29.39.265.0 ]--
r 10     UF connect
--[ 2019.09.12.21.29.39.344.0 ]--
r 10     UF connecti
--[ 2019.09.12.21.29.39.387.0 ]--
r 10     UF connectio
--[ 2019.09.12.21.29.39.421.0 ]--
r 10     UF connection
--[ 2019.09.12.21.29.39.606.0 ]--
r 10     UF connection;
--[ 2019.09.12.21.29.44.610.0 ]--
r 10     UF connection; 
--[ 2019.09.12.21.29.44.645.0 ]--
r 10     UF connection;
--[ 2019.09.12.21.30.01.840.0 ]--
r 65                 connection.union()
--[ 2019.09.12.21.30.20.958.0 ]--
r 65                 connection.union(())
--[ 2019.09.12.21.30.21.630.0 ]--
r 65                 connection.union((c))
--[ 2019.09.12.21.30.21.717.0 ]--
r 65                 connection.union((co))
--[ 2019.09.12.21.30.21.891.0 ]--
r 65                 connection.union((col))
--[ 2019.09.12.21.30.24.095.0 ]--
r 65                 connection.union((col ))
--[ 2019.09.12.21.30.24.286.0 ]--
r 65                 connection.union((col +))
--[ 2019.09.12.21.30.24.497.0 ]--
r 65                 connection.union((col + ))
--[ 2019.09.12.21.30.24.955.0 ]--
r 65                 connection.union((col + ()))
--[ 2019.09.12.21.30.25.014.0 ]--
r 65                 connection.union((col + (r)))
--[ 2019.09.12.21.30.25.114.0 ]--
r 65                 connection.union((col + (ro)))
--[ 2019.09.12.21.30.25.194.0 ]--
r 65                 connection.union((col + (row)))
--[ 2019.09.12.21.30.26.091.0 ]--
r 65                 connection.union((col + (row*)))
--[ 2019.09.12.21.30.26.340.0 ]--
r 65                 connection.union((col + (row*N)))
--[ 2019.09.12.21.30.29.043.0 ]--
r 65                 connection.union((col + (row*N)),)
--[ 2019.09.12.21.30.29.124.0 ]--
r 65                 connection.union((col + (row*N)), )
--[ 2019.09.12.21.30.29.888.0 ]--
r 65                 connection.union((col + (row*N)),  )
--[ 2019.09.12.21.30.29.913.0 ]--
r 65                 connection.union((col + (row*N)), )
--[ 2019.09.12.21.30.30.946.0 ]--
r 65                 connection.union((col + (row*)), )
--[ 2019.09.12.21.30.31.005.0 ]--
r 65                 connection.union((col + (row*s)), )
--[ 2019.09.12.21.30.31.107.0 ]--
r 65                 connection.union((col + (row*si)), )
--[ 2019.09.12.21.30.31.152.0 ]--
r 65                 connection.union((col + (row*siz)), )
--[ 2019.09.12.21.30.31.307.0 ]--
r 65                 connection.union((col + (row*size)), )
--[ 2019.09.12.21.30.32.718.0 ]--
r 65                 connection.union((col + (row*size)),  )
--[ 2019.09.12.21.30.34.032.0 ]--
r 65                 connection.union((col + (row*size)), () )
--[ 2019.09.12.21.30.34.179.0 ]--
r 65                 connection.union((col + (row*size)), (c) )
--[ 2019.09.12.21.30.34.282.0 ]--
r 65                 connection.union((col + (row*size)), (co) )
--[ 2019.09.12.21.30.34.412.0 ]--
r 65                 connection.union((col + (row*size)), (col) )
--[ 2019.09.12.21.30.34.624.0 ]--
r 65                 connection.union((col + (row*size)), (col-) )
--[ 2019.09.12.21.30.35.195.0 ]--
r 65                 connection.union((col + (row*size)), (col-1) )
--[ 2019.09.12.21.30.35.702.0 ]--
r 65                 connection.union((col + (row*size)), (col-1 ) )
--[ 2019.09.12.21.30.35.900.0 ]--
r 65                 connection.union((col + (row*size)), (col-1 +) )
--[ 2019.09.12.21.30.36.155.0 ]--
r 65                 connection.union((col + (row*size)), (col-1 + ) )
--[ 2019.09.12.21.30.36.591.0 ]--
r 65                 connection.union((col + (row*size)), (col-1 + r) )
--[ 2019.09.12.21.30.36.606.0 ]--
r 65                 connection.union((col + (row*size)), (col-1 + ro) )
--[ 2019.09.12.21.30.36.656.0 ]--
r 65                 connection.union((col + (row*size)), (col-1 + row) )
--[ 2019.09.12.21.30.39.279.0 ]--
r 65                 connection.union((col + (row*size)), (col-1 + row*) )
--[ 2019.09.12.21.30.39.460.0 ]--
r 65                 connection.union((col + (row*size)), (col-1 + row*s) )
--[ 2019.09.12.21.30.39.553.0 ]--
r 65                 connection.union((col + (row*size)), (col-1 + row*si) )
--[ 2019.09.12.21.30.39.613.0 ]--
r 65                 connection.union((col + (row*size)), (col-1 + row*siz) )
--[ 2019.09.12.21.30.39.797.0 ]--
r 65                 connection.union((col + (row*size)), (col-1 + row*size) )
--[ 2019.09.12.21.30.41.351.0 ]--
r 65                 connection.union((col + (row*size)), (col-1 + row*size))
--[ 2019.09.12.21.30.45.099.0 ]--
r 65                 connection.union((col + (row*size)), (col-1 + row*size));
--[ 2019.09.12.21.30.45.466.0 ]--
r 65                 connection.union((col + (row*size)), (col-1 + row*size)); 
--[ 2019.09.12.21.30.45.494.0 ]--
r 65                 connection.union((col + (row*size)), (col-1 + row*size));
--[ 2019.09.12.21.31.06.763.0 ]--
- 65
r 65                 connection.union((col + (row*size)), (col-1 + row*size)); }
--[ 2019.09.12.21.31.11.715.0 ]--
- 64
r 64             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){ connection.union((col + (row*size)), (col-1 + row*size)); }
--[ 2019.09.12.21.31.12.775.0 ]--
r 64             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size)); }
--[ 2019.09.12.21.31.16.868.0 ]--
r 64             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.31.22.918.0 ]--
- 64
r 64 0        }
--[ 2019.09.12.21.31.23.560.0 ]--
+ 64             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
r 65         }
--[ 2019.09.12.21.31.25.131.0 ]--
+ 65             
--[ 2019.09.12.21.31.25.251.0 ]--
+ 65                         if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
r 66 
--[ 2019.09.12.21.31.25.275.0 ]--
r 65             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.31.25.675.0 ]--
+ 67             
--[ 2019.09.12.21.31.26.149.0 ]--
- 66
--[ 2019.09.12.21.31.26.711.0 ]--
+ 66                         if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
r 67 
--[ 2019.09.12.21.31.26.756.0 ]--
r 66             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.31.27.102.0 ]--
+ 64             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.31.27.463.0 ]--
+ 64             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.31.27.734.0 ]--
+ 64             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.31.28.549.0 ]--
+ 64             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.32.18.825.0 ]--
r 65             if(inRange(row, col-1 ) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.32.19.036.0 ]--
r 65             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.32.25.430.0 ]--
r 65             if(inRange(row+, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.32.25.533.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.32.32.137.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.32.32.376.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.32.50.206.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row+*size));}
--[ 2019.09.12.21.32.50.331.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row+!*size));}
--[ 2019.09.12.21.32.51.210.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row+*size));}
--[ 2019.09.12.21.32.51.455.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row+1*size));}
--[ 2019.09.12.21.32.53.339.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + (row+1*size));}
--[ 2019.09.12.21.33.04.284.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row+1*size));}
--[ 2019.09.12.21.33.05.709.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + (row+1*size));}
--[ 2019.09.12.21.33.08.005.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + (row+1*size)));}
--[ 2019.09.12.21.33.08.844.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + (row+1*size) ));}
--[ 2019.09.12.21.33.08.876.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + (row+1*size)));}
--[ 2019.09.12.21.34.19.266.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + (row+1*size) ));}
--[ 2019.09.12.21.34.19.457.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + (row+1*size));}
--[ 2019.09.12.21.34.19.739.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row+1*size));}
--[ 2019.09.12.21.34.20.213.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row+*size));}
--[ 2019.09.12.21.34.20.430.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row+!*size));}
--[ 2019.09.12.21.34.20.658.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.21.202.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.22.104.0 ]--
- 65
--[ 2019.09.12.21.34.23.728.0 ]--
- 64
--[ 2019.09.12.21.34.24.168.0 ]--
- 64
--[ 2019.09.12.21.34.24.980.0 ]--
+ 64             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
+ 65             if(inRange(row+1, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
+ 66             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.25.867.0 ]--
r 65             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.26.992.0 ]--
r 65             if(inRange(row, col-1 ) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.27.441.0 ]--
r 65             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.28.697.0 ]--
- 64
--[ 2019.09.12.21.34.28.852.0 ]--
- 64
--[ 2019.09.12.21.34.29.059.0 ]--
- 64
--[ 2019.09.12.21.34.29.761.0 ]--
- 68
--[ 2019.09.12.21.34.29.875.0 ]--
- 68
--[ 2019.09.12.21.34.30.187.0 ]--
- 68
--[ 2019.09.12.21.34.30.221.0 ]--
- 68
--[ 2019.09.12.21.34.30.321.0 ]--
- 68
--[ 2019.09.12.21.34.31.195.0 ]--
+ 68 
+ 69         }
+ 70     }
+ 71 
+ 72     public boolean hasPlayer1Won() {
--[ 2019.09.12.21.34.31.505.0 ]--
- 64
--[ 2019.09.12.21.34.31.853.0 ]--
- 64
r 66             
--[ 2019.09.12.21.34.32.282.0 ]--
- 66
--[ 2019.09.12.21.34.32.514.0 ]--
- 66
--[ 2019.09.12.21.34.32.693.0 ]--
- 66
--[ 2019.09.12.21.34.36.221.0 ]--
+ 66             
+ 67         }
+ 68     }
--[ 2019.09.12.21.34.39.630.0 ]--
+ 65                         if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
r 66 if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.39.657.0 ]--
r 65             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
r 66             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.40.073.0 ]--
+ 66                         if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
r 67 if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.40.079.0 ]--
r 66             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
r 67             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.41.961.0 ]--
+ 67                         if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
r 68 if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.41.970.0 ]--
r 67             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
r 68             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.42.231.0 ]--
+ 68                         if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
r 69 if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.42.240.0 ]--
r 68             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
r 69             if(inRange(row, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.49.883.0 ]--
r 65             if(inRange(row+, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.50.091.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.50.604.0 ]--
r 65             if(inRange(row+1 , col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.50.657.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.52.753.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.52.915.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.34.57.702.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row+*size));}
--[ 2019.09.12.21.34.57.837.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row+1*size));}
--[ 2019.09.12.21.34.59.661.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row+1)*size));}
--[ 2019.09.12.21.35.01.515.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + (row+1)*size));}
--[ 2019.09.12.21.35.02.115.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + ( row+1)*size));}
--[ 2019.09.12.21.35.02.170.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + (row+1)*size));}
--[ 2019.09.12.21.35.10.997.0 ]--
r 66             if(inRange(row+, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.35.11.243.0 ]--
r 66             if(inRange(row+1, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.35.13.043.0 ]--
r 66             if(inRange(row+1, col-) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.35.13.168.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.35.16.958.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.35.17.111.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.35.18.479.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+1, col1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.35.18.585.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+1, co1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.35.18.696.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+1, c1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.35.19.264.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.35.20.498.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+1, col-) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.35.20.613.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+1, col) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.35.21.014.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+1, col ) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.35.21.038.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+1, col) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.35.37.300.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+1, col) == 1){connection.union((col + (row*size)), (col- + row*size));}
--[ 2019.09.12.21.35.37.313.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+1, col) == 1){connection.union((col + (row*size)), (col-+ row*size));}
--[ 2019.09.12.21.35.38.033.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+1, col) == 1){connection.union((col + (row*size)), (col+ row*size));}
--[ 2019.09.12.21.35.39.335.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+1, col) == 1){connection.union((col + (row*size)), (col+ (row*size));}
--[ 2019.09.12.21.35.40.550.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+1, col) == 1){connection.union((col + (row*size)), (col+ (row+*size));}
--[ 2019.09.12.21.35.40.682.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+1, col) == 1){connection.union((col + (row*size)), (col+ (row+1*size));}
--[ 2019.09.12.21.35.40.977.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+1, col) == 1){connection.union((col + (row*size)), (col+ (row+1)*size));}
--[ 2019.09.12.21.35.42.448.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+1, col) == 1){connection.union((col + (row*size)), (col+ (row+1) *size));}
--[ 2019.09.12.21.35.42.457.0 ]--
r 66             if(inRange(row+1, col) && getPlayer(row+1, col) == 1){connection.union((col + (row*size)), (col+ (row+1)*size));}
--[ 2019.09.12.21.36.00.484.0 ]--
r 67             if(inRange(row, col1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.36.00.641.0 ]--
r 67             if(inRange(row, col+1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.36.03.066.0 ]--
r 67             if(inRange(row, col+1) && getPlayer(row, col1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.36.03.227.0 ]--
r 67             if(inRange(row, col+1) && getPlayer(row, col+1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.36.09.373.0 ]--
r 67             if(inRange(row, col+1) && getPlayer(row, col+1) == 1){connection.union((col + (row*size)), (col1 + row*size));}
--[ 2019.09.12.21.36.09.553.0 ]--
r 67             if(inRange(row, col+1) && getPlayer(row, col+1) == 1){connection.union((col + (row*size)), (col+1 + row*size));}
--[ 2019.09.12.21.36.11.470.0 ]--
r 67             if(inRange(row, col+1) && getPlayer(row, col+1) == 1){connection.union((col + (row*size)), (col+ 1 + row*size));}
--[ 2019.09.12.21.36.11.492.0 ]--
r 67             if(inRange(row, col+1) && getPlayer(row, col+1) == 1){connection.union((col + (row*size)), (col+1 + row*size));}
--[ 2019.09.12.21.37.14.778.0 ]--
r 68             if(inRange(row-, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.14.887.0 ]--
r 68             if(inRange(row-1, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.17.392.0 ]--
r 68             if(inRange(row-1, col1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.17.547.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.17.840.0 ]--
r 68             if(inRange(row-1, col+ 1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.17.914.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.19.852.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.20.243.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.21.594.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.21.792.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.24.714.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+ + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.24.876.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.28.187.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + (row-*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.28.255.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + (row-1*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.31.474.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + ((row-1*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.33.247.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + ((row-1)*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.35.217.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + ((row-1) *size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.35.258.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + ((row-1)*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.38.949.0 ]--
r 69             if(inRange(row-, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.39.024.0 ]--
r 69             if(inRange(row-1, col-1) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.40.171.0 ]--
r 69             if(inRange(row-1, col-) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.40.299.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.41.802.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.41.888.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.45.207.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col-) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.45.301.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.48.775.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == 1){connection.union((col + ((row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.49.905.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == 1){connection.union((col + ((row-*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.50.023.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == 1){connection.union((col + ((row-1*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.50.328.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == 1){connection.union((col + ((row-1)*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.53.316.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == 1){connection.union((col + ((row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.55.088.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.56.204.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col-1) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.57.285.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col-) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.37.57.408.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == 1){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.21.38.13.515.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + ((row-1)*size)), (col1 + row*size));}
--[ 2019.09.12.21.38.13.679.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + ((row-1)*size)), (col+1 + row*size));}
--[ 2019.09.12.21.38.15.146.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + ((row-1)*size)), (col+1 + (row*size));}
--[ 2019.09.12.21.38.16.309.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + ((row-1)*size)), (col+1 + (row-*size));}
--[ 2019.09.12.21.38.16.678.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + ((row-1)*size)), (col+1 + (row-1*size));}
--[ 2019.09.12.21.38.16.945.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + ((row-1)*size)), (col+1 + (row-1)*size));}
--[ 2019.09.12.21.38.17.537.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + ((row-1)*size)), (col+1 + (row-1) *size));}
--[ 2019.09.12.21.38.17.554.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + ((row-1)*size)), (col+1 + (row-1)*size));}
--[ 2019.09.12.21.38.21.236.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + ((row-1*size)), (col+1 + (row-1)*size));}
--[ 2019.09.12.21.38.21.376.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + ((row-*size)), (col+1 + (row-1)*size));}
--[ 2019.09.12.21.38.24.034.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + (row-*size)), (col+1 + (row-1)*size));}
--[ 2019.09.12.21.38.27.260.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+1 + (row*size)), (col+1 + (row-1)*size));}
--[ 2019.09.12.21.38.35.469.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col+ + (row*size)), (col+1 + (row-1)*size));}
--[ 2019.09.12.21.38.35.883.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == 1){connection.union((col + (row*size)), (col+1 + (row-1)*size));}
--[ 2019.09.12.21.38.58.427.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == 1){connection.union((col + (row*size)), (col- + row*size));}
--[ 2019.09.12.21.38.58.552.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == 1){connection.union((col + (row*size)), (col + row*size));}
--[ 2019.09.12.21.39.02.454.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == 1){connection.union((col + (row*size)), (col + (row*size));}
--[ 2019.09.12.21.39.04.098.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == 1){connection.union((col + (row*size)), (col + (row-*size));}
--[ 2019.09.12.21.39.04.233.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == 1){connection.union((col + (row*size)), (col + (row-1*size));}
--[ 2019.09.12.21.39.04.507.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == 1){connection.union((col + (row*size)), (col + (row-1)*size));}
--[ 2019.09.12.21.39.04.914.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == 1){connection.union((col + (row*size)), (col + (row-1) *size));}
--[ 2019.09.12.21.39.04.984.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == 1){connection.union((col + (row*size)), (col + (row-1)*size));}
--[ 2019.09.12.21.41.09.709.0 ]--
r 70 
--[ 2019.09.12.21.46.33.074.0 ]--
+ 70             
--[ 2019.09.12.21.46.33.650.0 ]--
r 70             i
--[ 2019.09.12.21.46.33.745.0 ]--
r 70             if
--[ 2019.09.12.21.46.33.877.0 ]--
r 70             if()
--[ 2019.09.12.21.48.57.779.0 ]--
+ 70             
--[ 2019.09.12.21.48.59.448.0 ]--
+ 64             
--[ 2019.09.12.21.49.00.500.0 ]--
r 64             /
--[ 2019.09.12.21.49.00.599.0 ]--
r 64             //
--[ 2019.09.12.21.49.02.792.0 ]--
r 64             //o
--[ 2019.09.12.21.49.03.060.0 ]--
r 64             //
--[ 2019.09.12.21.49.03.617.0 ]--
r 64             //C
--[ 2019.09.12.21.49.03.749.0 ]--
r 64             //Co
--[ 2019.09.12.21.49.03.849.0 ]--
r 64             //Con
--[ 2019.09.12.21.49.03.981.0 ]--
r 64             //Conn
--[ 2019.09.12.21.49.04.032.0 ]--
r 64             //Conne
--[ 2019.09.12.21.49.04.094.0 ]--
r 64             //Connec
--[ 2019.09.12.21.49.04.355.0 ]--
r 64             //Connect
--[ 2019.09.12.21.49.04.516.0 ]--
r 64             //Connect 
--[ 2019.09.12.21.49.05.494.0 ]--
r 64             //Connect s
--[ 2019.09.12.21.49.05.649.0 ]--
r 64             //Connect se
--[ 2019.09.12.21.49.05.774.0 ]--
r 64             //Connect set
--[ 2019.09.12.21.49.05.925.0 ]--
r 64             //Connect set 
--[ 2019.09.12.21.49.06.064.0 ]--
r 64             //Connect set t
--[ 2019.09.12.21.49.06.148.0 ]--
r 64             //Connect set ti
--[ 2019.09.12.21.49.06.321.0 ]--
r 64             //Connect set til
--[ 2019.09.12.21.49.06.342.0 ]--
r 64             //Connect set tile
--[ 2019.09.12.21.49.06.404.0 ]--
r 64             //Connect set tile 
--[ 2019.09.12.21.49.06.475.0 ]--
r 64             //Connect set tile t
--[ 2019.09.12.21.49.06.586.0 ]--
r 64             //Connect set tile to
--[ 2019.09.12.21.49.06.681.0 ]--
r 64             //Connect set tile to 
--[ 2019.09.12.21.49.07.348.0 ]--
r 64             //Connect set tile to  
--[ 2019.09.12.21.49.07.438.0 ]--
r 64             //Connect set tile to 
--[ 2019.09.12.21.49.10.687.0 ]--
r 64             //Connect set tile to a
--[ 2019.09.12.21.49.10.737.0 ]--
r 64             //Connect set tile to al
--[ 2019.09.12.21.49.10.865.0 ]--
r 64             //Connect set tile to all
--[ 2019.09.12.21.49.10.958.0 ]--
r 64             //Connect set tile to all 
--[ 2019.09.12.21.49.11.030.0 ]--
r 64             //Connect set tile to all t
--[ 2019.09.12.21.49.11.046.0 ]--
r 64             //Connect set tile to all ti
--[ 2019.09.12.21.49.11.185.0 ]--
r 64             //Connect set tile to all til
--[ 2019.09.12.21.49.11.216.0 ]--
r 64             //Connect set tile to all tile
--[ 2019.09.12.21.49.11.392.0 ]--
r 64             //Connect set tile to all tiles
--[ 2019.09.12.21.49.11.410.0 ]--
r 64             //Connect set tile to all tiles 
--[ 2019.09.12.21.49.11.460.0 ]--
r 64             //Connect set tile to all tiles a
--[ 2019.09.12.21.49.11.551.0 ]--
r 64             //Connect set tile to all tiles ar
--[ 2019.09.12.21.49.11.634.0 ]--
r 64             //Connect set tile to all tiles aro
--[ 2019.09.12.21.49.11.732.0 ]--
r 64             //Connect set tile to all tiles arou
--[ 2019.09.12.21.49.11.860.0 ]--
r 64             //Connect set tile to all tiles aroun
--[ 2019.09.12.21.49.11.948.0 ]--
r 64             //Connect set tile to all tiles around
--[ 2019.09.12.21.49.12.133.0 ]--
r 64             //Connect set tile to all tiles around 
--[ 2019.09.12.21.49.12.753.0 ]--
r 64             //Connect set tile to all tiles around  
--[ 2019.09.12.21.49.12.862.0 ]--
r 64             //Connect set tile to all tiles around 
--[ 2019.09.12.21.49.13.614.0 ]--
r 64             //Connect set tile to all tiles around  
--[ 2019.09.12.21.49.13.669.0 ]--
r 64             //Connect set tile to all tiles around 
--[ 2019.09.12.21.49.13.812.0 ]--
r 64             //Connect set tile to all tiles around i
--[ 2019.09.12.21.49.13.883.0 ]--
r 64             //Connect set tile to all tiles around it
--[ 2019.09.12.21.49.19.753.0 ]--
r 72             if(p)
--[ 2019.09.12.21.49.19.820.0 ]--
r 72             if(pl)
--[ 2019.09.12.21.49.19.844.0 ]--
r 72             if(pla)
--[ 2019.09.12.21.49.19.916.0 ]--
r 72             if(play)
--[ 2019.09.12.21.49.19.982.0 ]--
r 72             if(playe)
--[ 2019.09.12.21.49.20.091.0 ]--
r 72             if(player)
--[ 2019.09.12.21.49.20.180.0 ]--
r 72             if(player )
--[ 2019.09.12.21.49.20.562.0 ]--
r 72             if(player ==)
--[ 2019.09.12.21.49.20.609.0 ]--
r 72             if(player == )
--[ 2019.09.12.21.49.20.692.0 ]--
r 72             if(player == 1)
--[ 2019.09.12.21.49.21.201.0 ]--
r 72             if(player == 1 )
--[ 2019.09.12.21.49.21.314.0 ]--
r 72             if(player == 1)
--[ 2019.09.12.21.49.25.685.0 ]--
r 72             if(player == 1)[]
--[ 2019.09.12.21.49.26.359.0 ]--
r 72             if(player == 1)
--[ 2019.09.12.21.49.26.669.0 ]--
r 72             if(player == 1){
--[ 2019.09.12.21.49.27.576.0 ]--
+ 73 
+ 74 }
--[ 2019.09.12.21.49.27.609.0 ]--
r 74             }
--[ 2019.09.12.21.49.27.628.0 ]--
r 73                 
--[ 2019.09.12.21.49.29.592.0 ]--
- 72
r 72             if(player == 1){\
--[ 2019.09.12.21.49.30.472.0 ]--
r 72             if(player == 1){
--[ 2019.09.12.21.49.30.860.0 ]--
r 72             if(player == 1)
--[ 2019.09.12.21.49.31.406.0 ]--
r 72             if(player == 1
--[ 2019.09.12.21.49.33.538.0 ]--
r 72             if(player == 1 
--[ 2019.09.12.21.49.33.826.0 ]--
r 72             if(player == 1 {
--[ 2019.09.12.21.49.39.249.0 ]--
+ 73                 
--[ 2019.09.12.21.49.40.411.0 ]--
- 73
--[ 2019.09.12.21.49.42.470.0 ]--
r 73             
--[ 2019.09.12.21.49.44.477.0 ]--
- 73
--[ 2019.09.12.21.49.45.201.0 ]--
+ 73 
+ 74 }
--[ 2019.09.12.21.49.45.229.0 ]--
r 74             }
--[ 2019.09.12.21.49.45.245.0 ]--
r 73                 
--[ 2019.09.12.21.49.46.842.0 ]--
- 73
--[ 2019.09.12.21.49.47.987.0 ]--
r 73             
--[ 2019.09.12.21.49.50.299.0 ]--
r 73             }
--[ 2019.09.12.21.49.51.957.0 ]--
r 73             
--[ 2019.09.12.21.49.52.124.0 ]--
- 73
--[ 2019.09.12.21.49.52.633.0 ]--
r 72             if(player == 1 
--[ 2019.09.12.21.49.53.257.0 ]--
r 72             if(player == 1
--[ 2019.09.12.21.49.54.133.0 ]--
r 72             if(player == 1)
--[ 2019.09.12.21.49.54.390.0 ]--
r 72             if(player == 1){
--[ 2019.09.12.21.49.54.684.0 ]--
+ 73 
+ 74 }
--[ 2019.09.12.21.49.54.695.0 ]--
r 74             }
--[ 2019.09.12.21.49.54.714.0 ]--
r 73                 
--[ 2019.09.12.21.49.59.946.0 ]--
r 72             if(player == 1 ){
--[ 2019.09.12.21.50.00.405.0 ]--
r 72             if(player == 1 &){
--[ 2019.09.12.21.50.00.491.0 ]--
r 72             if(player == 1 &&){
--[ 2019.09.12.21.50.00.589.0 ]--
r 72             if(player == 1 && ){
--[ 2019.09.12.21.50.24.620.0 ]--
r 71 
r 73 
--[ 2019.09.12.21.51.19.894.0 ]--
r 72             if(player == 1 && ()){
--[ 2019.09.12.21.51.20.025.0 ]--
r 72             if(player == 1 && (r)){
--[ 2019.09.12.21.51.20.079.0 ]--
r 72             if(player == 1 && (ro)){
--[ 2019.09.12.21.51.20.151.0 ]--
r 72             if(player == 1 && (row)){
--[ 2019.09.12.21.51.20.274.0 ]--
r 72             if(player == 1 && (row )){
--[ 2019.09.12.21.51.21.013.0 ]--
r 72             if(player == 1 && (row)){
--[ 2019.09.12.21.51.21.137.0 ]--
r 72             if(player == 1 && (ro)){
--[ 2019.09.12.21.51.21.229.0 ]--
r 72             if(player == 1 && (r)){
--[ 2019.09.12.21.51.21.432.0 ]--
r 72             if(player == 1 && ()){
--[ 2019.09.12.21.51.21.465.0 ]--
r 72             if(player == 1 && ){
--[ 2019.09.12.21.51.21.756.0 ]--
r 72             if(player == 1 && r){
--[ 2019.09.12.21.51.21.821.0 ]--
r 72             if(player == 1 && ro){
--[ 2019.09.12.21.51.21.893.0 ]--
r 72             if(player == 1 && row){
--[ 2019.09.12.21.51.21.936.0 ]--
r 72             if(player == 1 && row ){
--[ 2019.09.12.21.51.22.016.0 ]--
r 72             if(player == 1 && row =){
--[ 2019.09.12.21.51.23.239.0 ]--
r 72             if(player == 1 && row ==){
--[ 2019.09.12.21.51.23.386.0 ]--
r 72             if(player == 1 && row == ){
--[ 2019.09.12.21.51.23.418.0 ]--
r 72             if(player == 1 && row == 0){
--[ 2019.09.12.21.51.24.745.0 ]--
r 72             if(player == 1 && row == 0 ){
--[ 2019.09.12.21.51.24.801.0 ]--
r 72             if(player == 1 && row == 0){
--[ 2019.09.12.21.51.28.947.0 ]--
r 72             if(player == 1 && row == 0){ 
--[ 2019.09.12.21.51.29.010.0 ]--
r 72             if(player == 1 && row == 0){
--[ 2019.09.12.21.51.32.201.0 ]--
- 73
--[ 2019.09.12.21.51.32.676.0 ]--
+ 73                 
--[ 2019.09.12.21.53.03.835.0 ]--
r 73                 c
--[ 2019.09.12.21.53.03.911.0 ]--
r 73                 co
--[ 2019.09.12.21.53.04.044.0 ]--
r 73                 con
--[ 2019.09.12.21.53.04.178.0 ]--
r 73                 conn
--[ 2019.09.12.21.53.04.264.0 ]--
r 73                 conne
--[ 2019.09.12.21.53.04.450.0 ]--
r 73                 connec
--[ 2019.09.12.21.53.04.578.0 ]--
r 73                 connect
--[ 2019.09.12.21.53.04.636.0 ]--
r 73                 connecti
--[ 2019.09.12.21.53.04.702.0 ]--
r 73                 connectio
--[ 2019.09.12.21.53.04.775.0 ]--
r 73                 connection
--[ 2019.09.12.21.53.05.493.0 ]--
r 73                 connection 
--[ 2019.09.12.21.53.05.562.0 ]--
r 73                 connection
--[ 2019.09.12.21.53.05.699.0 ]--
r 73                 connection.
--[ 2019.09.12.21.53.07.225.0 ]--
r 73                 connection.u
--[ 2019.09.12.21.53.07.330.0 ]--
r 73                 connection.un
--[ 2019.09.12.21.53.07.550.0 ]--
r 73                 connection.uni
--[ 2019.09.12.21.53.07.596.0 ]--
r 73                 connection.unio
--[ 2019.09.12.21.53.07.746.0 ]--
r 73                 connection.union
--[ 2019.09.12.21.53.08.675.0 ]--
r 73                 connection.union()
--[ 2019.09.12.21.53.24.575.0 ]--
r 73                 
--[ 2019.09.12.21.53.35.580.0 ]--
r 73                 connection.union((col + (row*size)), (col + (row-1)*size))
--[ 2019.09.12.21.53.57.029.0 ]--
r 73                 connection.union((col + (row*size)), ))
--[ 2019.09.12.21.54.01.429.0 ]--
r 73                 connection.union((col + (row*size)), N))
--[ 2019.09.12.21.54.02.613.0 ]--
r 73                 connection.union((col + (row*size)), N ))
--[ 2019.09.12.21.54.02.624.0 ]--
r 73                 connection.union((col + (row*size)), N))
--[ 2019.09.12.21.54.03.138.0 ]--
r 73                 connection.union((col + (row*size)), ))
--[ 2019.09.12.21.54.05.668.0 ]--
r 73                 connection.union((col + (row*size)), a))
--[ 2019.09.12.21.54.05.734.0 ]--
r 73                 connection.union((col + (row*size)), al))
--[ 2019.09.12.21.54.05.829.0 ]--
r 73                 connection.union((col + (row*size)), all))
--[ 2019.09.12.21.54.06.011.0 ]--
r 73                 connection.union((col + (row*size)), allT))
--[ 2019.09.12.21.54.06.235.0 ]--
r 73                 connection.union((col + (row*size)), allTi))
--[ 2019.09.12.21.54.06.353.0 ]--
r 73                 connection.union((col + (row*size)), allTil))
--[ 2019.09.12.21.54.06.418.0 ]--
r 73                 connection.union((col + (row*size)), allTile))
--[ 2019.09.12.21.54.06.590.0 ]--
r 73                 connection.union((col + (row*size)), allTiles))
--[ 2019.09.12.21.54.07.119.0 ]--
r 73                 connection.union((col + (row*size)), allTiles ))
--[ 2019.09.12.21.54.07.205.0 ]--
r 73                 connection.union((col + (row*size)), allTiles))
--[ 2019.09.12.21.54.07.792.0 ]--
r 73                 connection.union((col + (row*size)), allTiles ))
--[ 2019.09.12.21.54.07.867.0 ]--
r 73                 connection.union((col + (row*size)), allTiles))
--[ 2019.09.12.21.54.27.096.0 ]--
- 72
r 72             if(player == 1 && row == 0){ connection.union((col + (row*size)), allTiles))
--[ 2019.09.12.21.54.28.247.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles))
--[ 2019.09.12.21.54.30.464.0 ]--
- 72
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles))}
--[ 2019.09.12.21.54.31.161.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles)) }
--[ 2019.09.12.21.54.31.238.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles))}
--[ 2019.09.12.21.54.32.602.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles)) }
--[ 2019.09.12.21.54.33.585.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles)); }
--[ 2019.09.12.21.54.36.671.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); }
--[ 2019.09.12.21.54.45.539.0 ]--
+ 73             
--[ 2019.09.12.21.54.45.598.0 ]--
r 73             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); }
--[ 2019.09.12.21.54.54.619.0 ]--
r 73             if(player == 1 && row == ){connection.union((col + (row*size)), allTiles); }
--[ 2019.09.12.21.54.55.460.0 ]--
r 73             if(player == 1 && row == s){connection.union((col + (row*size)), allTiles); }
--[ 2019.09.12.21.54.55.571.0 ]--
r 73             if(player == 1 && row == si){connection.union((col + (row*size)), allTiles); }
--[ 2019.09.12.21.54.55.637.0 ]--
r 73             if(player == 1 && row == siz){connection.union((col + (row*size)), allTiles); }
--[ 2019.09.12.21.54.55.758.0 ]--
r 73             if(player == 1 && row == size){connection.union((col + (row*size)), allTiles); }
--[ 2019.09.12.21.54.55.942.0 ]--
r 73             if(player == 1 && row == size+){connection.union((col + (row*size)), allTiles); }
--[ 2019.09.12.21.54.56.208.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles); }
--[ 2019.09.12.21.54.57.305.0 ]--
r 73             if(player == 1 && row == size+1 ){connection.union((col + (row*size)), allTiles); }
--[ 2019.09.12.21.54.57.354.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles); }
--[ 2019.09.12.21.55.13.190.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles*); }
--[ 2019.09.12.21.55.13.466.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles*2); }
--[ 2019.09.12.21.55.13.916.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles*2 ); }
--[ 2019.09.12.21.55.13.990.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles*2); }
--[ 2019.09.12.21.55.16.345.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles*); }
--[ 2019.09.12.21.55.16.436.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles); }
--[ 2019.09.12.21.55.16.604.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+); }
--[ 2019.09.12.21.55.16.953.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); }
--[ 2019.09.12.21.55.22.300.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } 
--[ 2019.09.12.21.55.22.357.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } /
--[ 2019.09.12.21.55.22.440.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //
--[ 2019.09.12.21.55.22.504.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } // 
--[ 2019.09.12.21.55.22.996.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //
--[ 2019.09.12.21.55.23.384.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //C
--[ 2019.09.12.21.55.23.537.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Co
--[ 2019.09.12.21.55.23.689.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Con
--[ 2019.09.12.21.55.23.783.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Conn
--[ 2019.09.12.21.55.23.841.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Conne
--[ 2019.09.12.21.55.23.906.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connec
--[ 2019.09.12.21.55.24.231.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect
--[ 2019.09.12.21.55.24.825.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect 
--[ 2019.09.12.21.55.25.699.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect t
--[ 2019.09.12.21.55.25.743.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to
--[ 2019.09.12.21.55.25.878.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to 
--[ 2019.09.12.21.55.27.272.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to  
--[ 2019.09.12.21.55.27.325.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to 
--[ 2019.09.12.21.55.41.800.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to r
--[ 2019.09.12.21.55.41.836.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to re
--[ 2019.09.12.21.55.42.498.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red
--[ 2019.09.12.21.55.42.546.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red'
--[ 2019.09.12.21.55.42.645.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's
--[ 2019.09.12.21.55.43.814.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's 
--[ 2019.09.12.21.55.44.130.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's s
--[ 2019.09.12.21.55.44.300.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's 
--[ 2019.09.12.21.55.44.433.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's n
--[ 2019.09.12.21.55.44.490.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's no
--[ 2019.09.12.21.55.44.571.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's nor
--[ 2019.09.12.21.55.44.711.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's nort
--[ 2019.09.12.21.55.44.747.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's north
--[ 2019.09.12.21.55.45.133.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's north 
--[ 2019.09.12.21.55.45.149.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's north w
--[ 2019.09.12.21.55.45.226.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's north we
--[ 2019.09.12.21.55.45.395.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's north wes
--[ 2019.09.12.21.55.45.549.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's north west
--[ 2019.09.12.21.55.45.603.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's north west 
--[ 2019.09.12.21.55.46.068.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's north west e
--[ 2019.09.12.21.55.46.608.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's north west ed
--[ 2019.09.12.21.55.46.906.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's north west edge
--[ 2019.09.12.21.55.47.926.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's north west edge 
--[ 2019.09.12.21.55.47.961.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's north west edge
--[ 2019.09.12.21.55.49.527.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } 
--[ 2019.09.12.21.55.49.629.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } /
--[ 2019.09.12.21.55.49.733.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //
--[ 2019.09.12.21.55.49.832.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } // 
--[ 2019.09.12.21.55.50.203.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //
--[ 2019.09.12.21.55.50.344.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //c
--[ 2019.09.12.21.55.50.414.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //co
--[ 2019.09.12.21.55.50.645.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //con
--[ 2019.09.12.21.55.50.706.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //conn
--[ 2019.09.12.21.55.50.945.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //con
--[ 2019.09.12.21.55.51.057.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //co
--[ 2019.09.12.21.55.51.113.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //c
--[ 2019.09.12.21.55.51.324.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //cC
--[ 2019.09.12.21.55.51.466.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //cCo
--[ 2019.09.12.21.55.51.625.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //cC
--[ 2019.09.12.21.55.51.709.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //c
--[ 2019.09.12.21.55.51.858.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //
--[ 2019.09.12.21.55.51.987.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //C
--[ 2019.09.12.21.55.52.040.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //CO
--[ 2019.09.12.21.55.52.204.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //COn
--[ 2019.09.12.21.55.52.266.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //COnn
--[ 2019.09.12.21.55.52.377.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //COnne
--[ 2019.09.12.21.55.52.440.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //COnnec
--[ 2019.09.12.21.55.52.660.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //COnne
--[ 2019.09.12.21.55.52.716.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //COnn
--[ 2019.09.12.21.55.52.816.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //COn
--[ 2019.09.12.21.55.52.930.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //CO
--[ 2019.09.12.21.55.53.133.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //C
--[ 2019.09.12.21.55.53.215.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Co
--[ 2019.09.12.21.55.53.382.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Con
--[ 2019.09.12.21.55.53.533.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Conne
--[ 2019.09.12.21.55.53.563.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connec
--[ 2019.09.12.21.55.53.765.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect
--[ 2019.09.12.21.55.53.959.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect 
--[ 2019.09.12.21.55.54.586.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect r
--[ 2019.09.12.21.55.54.659.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect re
--[ 2019.09.12.21.55.54.713.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect rea
--[ 2019.09.12.21.55.55.197.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect re
--[ 2019.09.12.21.55.57.023.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect r
--[ 2019.09.12.21.55.57.125.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect 
--[ 2019.09.12.21.55.57.248.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect t
--[ 2019.09.12.21.55.57.300.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to
--[ 2019.09.12.21.55.57.364.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to 
--[ 2019.09.12.21.55.57.397.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to r
--[ 2019.09.12.21.55.57.526.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to re
--[ 2019.09.12.21.55.57.596.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red
--[ 2019.09.12.21.55.57.826.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red'
--[ 2019.09.12.21.55.57.959.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's
--[ 2019.09.12.21.55.58.219.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's 
--[ 2019.09.12.21.56.02.018.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's S
--[ 2019.09.12.21.56.02.164.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's So
--[ 2019.09.12.21.56.02.230.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's Sou
--[ 2019.09.12.21.56.02.332.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's Sout
--[ 2019.09.12.21.56.02.398.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's South
--[ 2019.09.12.21.56.02.529.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's Southe
--[ 2019.09.12.21.56.02.836.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's South
--[ 2019.09.12.21.56.03.090.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's South 
--[ 2019.09.12.21.56.03.337.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's South e
--[ 2019.09.12.21.56.03.382.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's South ea
--[ 2019.09.12.21.56.03.552.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's South eas
--[ 2019.09.12.21.56.03.778.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's South east
--[ 2019.09.12.21.56.03.886.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's South east 
--[ 2019.09.12.21.56.04.192.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's South east e
--[ 2019.09.12.21.56.04.247.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's South east ed
--[ 2019.09.12.21.56.04.448.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's South east edg
--[ 2019.09.12.21.56.04.548.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's South east edge
--[ 2019.09.12.21.56.05.974.0 ]--
r 73             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.12.955.0 ]--
+ 74             
--[ 2019.09.12.21.56.13.104.0 ]--
r 74             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.13.242.0 ]--
+ 75             
--[ 2019.09.12.21.56.13.382.0 ]--
r 75             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.16.468.0 ]--
r 74             if(player ==  && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.16.552.0 ]--
r 74             if(player == 2 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.17.104.0 ]--
r 75             if(player ==  && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.17.228.0 ]--
r 75             if(player == 2 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.26.258.0 ]--
r 74             if(player == 2 && c == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.26.327.0 ]--
r 74             if(player == 2 && co == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.26.449.0 ]--
r 74             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.28.739.0 ]--
r 74             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.30.401.0 ]--
r 75             if(player == 2 && c == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.30.469.0 ]--
r 75             if(player == 2 && co == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.30.672.0 ]--
r 75             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.47.894.0 ]--
r 75             if(player == 2 && col == N){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.48.099.0 ]--
r 75             if(player == 2 && col == N-){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.48.874.0 ]--
r 75             if(player == 2 && col == N- ){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.48.884.0 ]--
r 75             if(player == 2 && col == N-){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.49.751.0 ]--
r 75             if(player == 2 && col == N){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.49.912.0 ]--
r 75             if(player == 2 && col == N+){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.50.197.0 ]--
r 75             if(player == 2 && col == N+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.50.878.0 ]--
r 75             if(player == 2 && col == N+1 ){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.50.946.0 ]--
r 75             if(player == 2 && col == N+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.53.873.0 ]--
r 75             if(player == 2 && col == +1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.54.187.0 ]--
r 75             if(player == 2 && col == s+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.54.302.0 ]--
r 75             if(player == 2 && col == si+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.54.351.0 ]--
r 75             if(player == 2 && col == siz+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.54.573.0 ]--
r 75             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.54.950.0 ]--
r 75             if(player == 2 && col == size +1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.56.55.043.0 ]--
r 75             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's outh east edge
--[ 2019.09.12.21.57.11.822.0 ]--
r 74             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+); } //Connect to red's outh east edge
--[ 2019.09.12.21.57.11.865.0 ]--
r 74             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to red's outh east edge
--[ 2019.09.12.21.57.13.797.0 ]--
r 75             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+); } //Connect to red's outh east edge
--[ 2019.09.12.21.57.13.882.0 ]--
r 75             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+3); } //Connect to red's outh east edge
--[ 2019.09.12.21.57.16.376.0 ]--
r 74             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to b's outh east edge
--[ 2019.09.12.21.57.16.461.0 ]--
r 74             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to bl's outh east edge
--[ 2019.09.12.21.57.16.568.0 ]--
r 74             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blu's outh east edge
--[ 2019.09.12.21.57.16.613.0 ]--
r 74             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blue's outh east edge
--[ 2019.09.12.21.57.16.774.0 ]--
r 74             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blues's outh east edge
--[ 2019.09.12.21.57.18.420.0 ]--
r 74             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blues's uth east edge
--[ 2019.09.12.21.57.19.269.0 ]--
r 74             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blues's th east edge
--[ 2019.09.12.21.57.19.475.0 ]--
r 74             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blues's nth east edge
--[ 2019.09.12.21.57.19.510.0 ]--
r 74             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blues's noth east edge
--[ 2019.09.12.21.57.19.562.0 ]--
r 74             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blues's north east edge
--[ 2019.09.12.21.57.19.706.0 ]--
r 74             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blues's nortth east edge
--[ 2019.09.12.21.57.19.817.0 ]--
r 74             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blues's northth east edge
--[ 2019.09.12.21.57.19.868.0 ]--
r 74             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blues's north th east edge
--[ 2019.09.12.21.57.19.995.0 ]--
r 74             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blues's northth east edge
--[ 2019.09.12.21.57.21.893.0 ]--
r 75             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+3); } //Connect to red's south east edge
--[ 2019.09.12.21.57.23.982.0 ]--
r 75             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+3); } //Connect to red's south est edge
--[ 2019.09.12.21.57.24.105.0 ]--
r 75             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+3); } //Connect to red's south st edge
--[ 2019.09.12.21.57.24.252.0 ]--
r 75             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+3); } //Connect to red's south wst edge
--[ 2019.09.12.21.57.24.408.0 ]--
r 75             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+3); } //Connect to red's south west edge
--[ 2019.09.12.21.57.27.166.0 ]--
r 75             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+3); } //Connect to b's south west edge
--[ 2019.09.12.21.57.27.218.0 ]--
r 75             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+3); } //Connect to bl's south west edge
--[ 2019.09.12.21.57.27.984.0 ]--
r 75             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+3); } //Connect to blu's south west edge
--[ 2019.09.12.21.57.28.045.0 ]--
r 75             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+3); } //Connect to blue's south west edge
--[ 2019.09.12.21.57.29.495.0 ]--
r 74             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blue's northth east edge
--[ 2019.09.12.22.01.15.826.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.02.05.418.0 ]--
r 72             if(player == 1 && row == 0){0connection.union((col + (row*size)), allTiles); } //Connect to red's north west edge
--[ 2019.09.12.22.02.07.421.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size)), allTiles); } //Connect to red's north west edge
--[ 2019.09.12.22.03.38.092.0 ]--
r 72             if(player == 1 && row == 0){connection.union((col + (row*size), allTiles); } //Connect to red's north west edge
--[ 2019.09.12.22.03.43.130.0 ]--
r 72             if(player == 1 && row == 0){connection.union(col + (row*size), allTiles); } //Connect to red's north west edge
--[ 2019.09.12.22.03.47.166.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.05.22.694.0 ]--
r 65             if(inRange(row, col-1) && getPlayer(row, col-1) == ){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.22.05.23.047.0 ]--
r 65             if(inRange(row, col-1) && getPlayer(row, col-1) == p){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.22.05.23.110.0 ]--
r 65             if(inRange(row, col-1) && getPlayer(row, col-1) == pl){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.22.05.23.182.0 ]--
r 65             if(inRange(row, col-1) && getPlayer(row, col-1) == pla){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.22.05.23.273.0 ]--
r 65             if(inRange(row, col-1) && getPlayer(row, col-1) == play){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.22.05.23.340.0 ]--
r 65             if(inRange(row, col-1) && getPlayer(row, col-1) == playe){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.22.05.23.496.0 ]--
r 65             if(inRange(row, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.22.05.26.970.0 ]--
r 66             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == player){connection.union((col + (row*size)), (col-1 + (row+1)*size));}
--[ 2019.09.12.22.05.34.290.0 ]--
r 67             if(inRange(row+1, col) && getPlayer(row+1, col) == player){connection.union((col + (row*size)), (col+ (row+1)*size));}
--[ 2019.09.12.22.05.36.154.0 ]--
r 68             if(inRange(row, col+1) && getPlayer(row, col+1) == player){connection.union((col + (row*size)), (col+1 + row*size));}
--[ 2019.09.12.22.05.38.354.0 ]--
r 69             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == player){connection.union((col + (row*size)), (col+1 + (row-1)*size));}
--[ 2019.09.12.22.05.40.017.0 ]--
r 70             if(inRange(row-1, col) && getPlayer(row-1, col) == player){connection.union((col + (row*size)), (col + (row-1)*size));}
--[ 2019.09.12.22.05.47.316.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.06.43.219.0 ]--
r 70             if(inRange(row-1, col) && getPlayer(row-1, col) == player){connection.union((col + (row*size)), (col + (row-1)*size);}
--[ 2019.09.12.22.06.45.574.0 ]--
r 70             if(inRange(row-1, col) && getPlayer(row-1, col) == player){connection.union((col + (row*size)), col + (row-1)*size);}
--[ 2019.09.12.22.06.50.963.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.08.36.829.0 ]--
r 63         
--[ 2019.09.12.22.08.37.285.0 ]--
- 63
--[ 2019.09.12.22.08.39.359.0 ]--
r 76         
--[ 2019.09.12.22.08.39.631.0 ]--
- 75
--[ 2019.09.12.22.08.43.593.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.09.43.399.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == player){connection.union( (col + (row*size)), col + (row-1)*size);}
--[ 2019.09.12.22.09.47.909.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == player){connection.union( (col + row*size)), col + (row-1)*size);}
--[ 2019.09.12.22.09.49.859.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == player){connection.union( (col + row*size), col + (row-1)*size);}
--[ 2019.09.12.22.09.54.780.0 ]--
r 75 
--[ 2019.09.12.22.09.56.474.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.10.16.876.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == player){connection.union( (col + row*size), col+ + (row-1)*size);}
--[ 2019.09.12.22.10.17.276.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == player){connection.union( (col + row*size), col+0 + (row-1)*size);}
--[ 2019.09.12.22.10.18.505.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == player){connection.union( (col + row*size), col+0  + (row-1)*size);}
--[ 2019.09.12.22.10.18.575.0 ]--
r 69             if(inRange(row-1, col) && getPlayer(row-1, col) == player){connection.union( (col + row*size), col+0 + (row-1)*size);}
--[ 2019.09.12.22.10.25.698.0 ]--
r 69             if(inRange(row-1, col+) && getPlayer(row-1, col) == player){connection.union( (col + row*size), col+0 + (row-1)*size);}
--[ 2019.09.12.22.10.25.858.0 ]--
r 69             if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){connection.union( (col + row*size), col+0 + (row-1)*size);}
--[ 2019.09.12.22.10.30.550.0 ]--
r 67             if(inRange(row+, col+1) && getPlayer(row, col+1) == player){connection.union((col + (row*size)), (col+1 + row*size));}
--[ 2019.09.12.22.10.30.939.0 ]--
r 67             if(inRange(row+0, col+1) && getPlayer(row, col+1) == player){connection.union((col + (row*size)), (col+1 + row*size));}
--[ 2019.09.12.22.10.34.735.0 ]--
r 66             if(inRange(row+1, col+) && getPlayer(row+1, col) == player){connection.union((col + (row*size)), (col+ (row+1)*size));}
--[ 2019.09.12.22.10.34.875.0 ]--
r 66             if(inRange(row+1, col+0) && getPlayer(row+1, col) == player){connection.union((col + (row*size)), (col+ (row+1)*size));}
--[ 2019.09.12.22.10.39.286.0 ]--
r 65             if(inRange(+row+1, col-1) && getPlayer(row+1, col-1) == player){connection.union((col + (row*size)), (col-1 + (row+1)*size));}
--[ 2019.09.12.22.10.39.467.0 ]--
r 65             if(inRange(+0row+1, col-1) && getPlayer(row+1, col-1) == player){connection.union((col + (row*size)), (col-1 + (row+1)*size));}
--[ 2019.09.12.22.10.41.225.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == player){connection.union((col + (row*size)), (col-1 + (row+1)*size));}
--[ 2019.09.12.22.10.46.761.0 ]--
r 64             if(inRange(row+, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.22.10.46.949.0 ]--
r 64             if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.22.10.48.065.0 ]--
r 64             if(inRange(row+0 , col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.22.10.48.108.0 ]--
r 64             if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.22.10.59.777.0 ]--
r 64             if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row+*size));}
--[ 2019.09.12.22.11.00.153.0 ]--
r 64             if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row+0*size));}
--[ 2019.09.12.22.11.01.303.0 ]--
r 64             if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row+*size));}
--[ 2019.09.12.22.11.01.388.0 ]--
r 64             if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.22.11.01.826.0 ]--
r 64             if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row *size));}
--[ 2019.09.12.22.11.01.879.0 ]--
r 64             if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.12.22.11.18.640.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.11.34.671.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.12.05.816.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.12.50.788.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.13.19.655.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.14.09.546.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.15.33.393.0 ]--
r 91         if(row >= size|| col >= size || row < 0 || col < 0){
--[ 2019.09.12.22.15.39.525.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.15.55.479.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.16.12.321.0 ]--
r 73             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blue's northt east edge
--[ 2019.09.12.22.16.14.105.0 ]--
r 72             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
--[ 2019.09.12.22.16.16.588.0 ]--
r 73             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blue's north east edge
--[ 2019.09.12.22.17.28.978.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.19.43.500.0 ]--
r 71 0            if(player == 1 && row == 0){connection.union(col + (row*size), allTiles); } //Connect to red's north west edge
--[ 2019.09.12.22.19.44.430.0 ]--
r 71             if(player == 1 && row == 0){connection.union(col + (row*size), allTiles); } //Connect to red's north west edge
--[ 2019.09.12.22.19.51.556.0 ]--
+ 69             if(inRange(row-1, col+0) 
r 70             && getPlayer(row-1, col) == player){connection.union( (col + row*size), col+0 + (row-1)*size);}
--[ 2019.09.12.22.19.51.569.0 ]--
r 70                     && getPlayer(row-1, col) == player){connection.union( (col + row*size), col+0 + (row-1)*size);}
--[ 2019.09.12.22.20.12.278.0 ]--
+ 70                     && getPlayer(row-1, col) == player)
r 71             {connection.union( (col + row*size), col+0 + (row-1)*size);}
--[ 2019.09.12.22.20.15.273.0 ]--
- 70
r 70                     && getPlayer(row-1, col) == player) {connection.union( (col + row*size), col+0 + (row-1)*size);}
--[ 2019.09.12.22.20.26.283.0 ]--
+ 70                     && getPlayer(row-1, col) == player) {
r 71                 connection.union( (col + row*size), col+0 + (row-1)*size);}
--[ 2019.09.12.22.20.27.701.0 ]--
- 70
r 70                     && getPlayer(row-1, col) == player) {connection.union( (col + row*size), col+0 + (row-1)*size);}
--[ 2019.09.12.22.20.28.468.0 ]--
+ 70                     && getPlayer(row-1, col) == player) 
r 71             {connection.union( (col + row*size), col+0 + (row-1)*size);}
--[ 2019.09.12.22.20.34.760.0 ]--
r 69             if(inRange(row-1, col+0)
r 70                     && getPlayer(row-1, col) == player)
--[ 2019.09.12.22.20.36.451.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.24.30.013.0 ]--
+ 72             
--[ 2019.09.12.22.24.31.826.0 ]--
- 72
--[ 2019.09.12.22.24.35.020.0 ]--
+ 71             
--[ 2019.09.12.22.24.35.810.0 ]--
r 71              
--[ 2019.09.12.22.24.35.870.0 ]--
r 71             
--[ 2019.09.12.22.24.37.157.0 ]--
r 71             S
--[ 2019.09.12.22.24.37.293.0 ]--
r 71             St
--[ 2019.09.12.22.24.37.409.0 ]--
r 71             Std
--[ 2019.09.12.22.24.38.117.0 ]--
r 71             StdOut
--[ 2019.09.12.22.24.38.524.0 ]--
r 71             StdOut.
--[ 2019.09.12.22.24.38.905.0 ]--
r 71             StdOut.p
--[ 2019.09.12.22.24.38.986.0 ]--
r 71             StdOut.pr
--[ 2019.09.12.22.24.39.013.0 ]--
r 71             StdOut.pri
--[ 2019.09.12.22.24.39.066.0 ]--
r 71             StdOut.prin
--[ 2019.09.12.22.24.39.118.0 ]--
r 71             StdOut.print
--[ 2019.09.12.22.24.40.055.0 ]--
r 71             StdOut.printl
--[ 2019.09.12.22.24.40.186.0 ]--
r 71             StdOut.println
--[ 2019.09.12.22.24.40.329.0 ]--
r 71             StdOut.println()
--[ 2019.09.12.22.24.53.441.0 ]--
r 71             StdOut.println((col + row*size))
--[ 2019.09.12.22.24.58.119.0 ]--
+ 72             
--[ 2019.09.12.22.24.58.281.0 ]--
r 72             StdOut.println((col + row*size))
--[ 2019.09.12.22.24.58.308.0 ]--
r 72         StdOut.println((col + row*size))
--[ 2019.09.12.22.25.01.109.0 ]--
r 72             StdOut.println((col + row*size))
--[ 2019.09.12.22.25.02.993.0 ]--
r 71             StdOut.println((col + row*size));
--[ 2019.09.12.22.25.03.429.0 ]--
r 72             StdOut.println((col + row*size));
--[ 2019.09.12.22.25.12.896.0 ]--
r 72             StdOut.println(col+0 + (row-1)*size));
--[ 2019.09.12.22.25.13.584.0 ]--
r 72             StdOut.println(col+0 + (row-1)*size) );
--[ 2019.09.12.22.25.13.652.0 ]--
r 72             StdOut.println(col+0 + (row-1)*size));
--[ 2019.09.12.22.25.17.486.0 ]--
UpdateTree (AD): 0 1
- /out/production/P01_Hex/HexBoard.class

--[ 2019.09.12.22.25.17.486.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@74cde973
--[ 2019.09.12.22.25.20.804.0 ]--
r 72             StdOut.println(col+0 + (row-1)*size);
--[ 2019.09.12.22.25.20.805.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.12.22.25.20.811.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.12.22.25.20.816.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.12.22.25.20.823.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.12.22.25.24.445.0 ]--
UpdateTree (AD): 1 0
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.12.22.25.24.445.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.25.51.285.0 ]--
r 71             StdOut.println(p(col + row*size));
--[ 2019.09.12.22.25.51.771.0 ]--
r 71             StdOut.println((col + row*size));
--[ 2019.09.12.22.25.52.055.0 ]--
r 71             StdOut.println('(col + row*size));
--[ 2019.09.12.22.25.52.922.0 ]--
r 71             StdOut.println((col + row*size));
--[ 2019.09.12.22.25.53.074.0 ]--
r 71             StdOut.println("(col + row*size));
--[ 2019.09.12.22.25.53.395.0 ]--
r 71             StdOut.println("p(col + row*size));
--[ 2019.09.12.22.25.53.516.0 ]--
r 71             StdOut.println("p"(col + row*size));
--[ 2019.09.12.22.25.54.016.0 ]--
r 71             StdOut.println("p" (col + row*size));
--[ 2019.09.12.22.25.54.156.0 ]--
r 71             StdOut.println("p" _(col + row*size));
--[ 2019.09.12.22.25.54.514.0 ]--
r 71             StdOut.println("p" (col + row*size));
--[ 2019.09.12.22.25.54.622.0 ]--
r 71             StdOut.println("p" +(col + row*size));
--[ 2019.09.12.22.25.54.725.0 ]--
r 71             StdOut.println("p" + (col + row*size));
--[ 2019.09.12.22.26.08.977.0 ]--
r 71             StdOut.println("p" + p(col + row*size));
--[ 2019.09.12.22.26.09.015.0 ]--
r 71             StdOut.println("p" + pa(col + row*size));
--[ 2019.09.12.22.26.09.107.0 ]--
r 71             StdOut.println("p" + par(col + row*size));
--[ 2019.09.12.22.26.09.216.0 ]--
r 71             StdOut.println("p" + pars(col + row*size));
--[ 2019.09.12.22.26.09.853.0 ]--
r 71             StdOut.println("p" + parse(col + row*size));
--[ 2019.09.12.22.26.10.188.0 ]--
r 71             StdOut.println("p" + pars(col + row*size));
--[ 2019.09.12.22.26.11.021.0 ]--
r 71             StdOut.println("p" + parse(col + row*size));
--[ 2019.09.12.22.26.11.285.0 ]--
r 71             StdOut.println("p" + parsei(col + row*size));
--[ 2019.09.12.22.26.11.909.0 ]--
r 71             StdOut.println("p" + parsein(col + row*size));
--[ 2019.09.12.22.26.12.312.0 ]--
r 71             StdOut.println("p" + parsei(col + row*size));
--[ 2019.09.12.22.26.12.472.0 ]--
r 71             StdOut.println("p" + (col + row*size));
--[ 2019.09.12.22.26.13.713.0 ]--
r 71             StdOut.println("p" + I(col + row*size));
--[ 2019.09.12.22.26.13.818.0 ]--
r 71             StdOut.println("p" + In(col + row*size));
--[ 2019.09.12.22.26.13.971.0 ]--
r 71             StdOut.println("p" + Ing(col + row*size));
--[ 2019.09.12.22.26.14.507.0 ]--
r 71             StdOut.println("p" + Inge(col + row*size));
--[ 2019.09.12.22.26.15.029.0 ]--
r 71             StdOut.println("p" + Ingeg(col + row*size));
--[ 2019.09.12.22.26.15.060.0 ]--
r 71             StdOut.println("p" + Ingege(col + row*size));
--[ 2019.09.12.22.26.15.141.0 ]--
r 71             StdOut.println("p" + Ingeger(col + row*size));
--[ 2019.09.12.22.26.15.883.0 ]--
r 71             StdOut.println("p" + (col + row*size));
--[ 2019.09.12.22.26.16.388.0 ]--
r 71             StdOut.println("p" + I(col + row*size));
--[ 2019.09.12.22.26.16.461.0 ]--
r 71             StdOut.println("p" + In(col + row*size));
--[ 2019.09.12.22.26.16.545.0 ]--
r 71             StdOut.println("p" + Int(col + row*size));
--[ 2019.09.12.22.26.16.737.0 ]--
r 71             StdOut.println("p" + Inte(col + row*size));
--[ 2019.09.12.22.26.16.922.0 ]--
r 71             StdOut.println("p" + Integ(col + row*size));
--[ 2019.09.12.22.26.17.002.0 ]--
r 71             StdOut.println("p" + Intege(col + row*size));
--[ 2019.09.12.22.26.17.097.0 ]--
r 71             StdOut.println("p" + Integer(col + row*size));
--[ 2019.09.12.22.26.17.221.0 ]--
r 71             StdOut.println("p" + Integer.(col + row*size));
--[ 2019.09.12.22.26.17.471.0 ]--
r 71             StdOut.println("p" + Integer.p(col + row*size));
--[ 2019.09.12.22.26.17.547.0 ]--
r 71             StdOut.println("p" + Integer.pa(col + row*size));
--[ 2019.09.12.22.26.17.628.0 ]--
r 71             StdOut.println("p" + Integer.par(col + row*size));
--[ 2019.09.12.22.26.17.837.0 ]--
r 71             StdOut.println("p" + Integer.part(col + row*size));
--[ 2019.09.12.22.26.18.294.0 ]--
r 71             StdOut.println("p" + Integer.par(col + row*size));
--[ 2019.09.12.22.26.19.010.0 ]--
r 71             StdOut.println("p" + Integer.pa(col + row*size));
--[ 2019.09.12.22.26.19.539.0 ]--
r 71             StdOut.println("p" + Integer.par(col + row*size));
--[ 2019.09.12.22.26.19.666.0 ]--
r 71             StdOut.println("p" + Integer.pars(col + row*size));
--[ 2019.09.12.22.26.20.270.0 ]--
r 71             StdOut.println("p" + Integer.parseInt(col + row*size));
--[ 2019.09.12.22.26.32.926.0 ]--
r 71             StdOut.println("p" + Integer.parseInt(col + row*size);
--[ 2019.09.12.22.26.37.300.0 ]--
r 71             StdOut.println("p" + Integer.parseInt(col + row*size));
--[ 2019.09.12.22.27.04.431.0 ]--
r 71             StdOut.println("p" + Integer.t(col + row*size));
--[ 2019.09.12.22.27.04.490.0 ]--
r 71             StdOut.println("p" + Integer.to(col + row*size));
--[ 2019.09.12.22.27.05.036.0 ]--
r 71             StdOut.println("p" + Integer.toS(col + row*size));
--[ 2019.09.12.22.27.05.180.0 ]--
r 71             StdOut.println("p" + Integer.toSt(col + row*size));
--[ 2019.09.12.22.27.05.716.0 ]--
r 71             StdOut.println("p" + Integer.toString(col + row*size));
--[ 2019.09.12.22.27.10.889.0 ]--
r 72             StdOut.println("col+0 + (row-1)*size);
--[ 2019.09.12.22.27.11.104.0 ]--
r 72             StdOut.println("qcol+0 + (row-1)*size);
--[ 2019.09.12.22.27.11.411.0 ]--
r 72             StdOut.println("q"col+0 + (row-1)*size);
--[ 2019.09.12.22.27.11.617.0 ]--
r 72             StdOut.println("q" col+0 + (row-1)*size);
--[ 2019.09.12.22.27.11.790.0 ]--
r 72             StdOut.println("q" +col+0 + (row-1)*size);
--[ 2019.09.12.22.27.11.839.0 ]--
r 72             StdOut.println("q" + col+0 + (row-1)*size);
--[ 2019.09.12.22.27.12.742.0 ]--
r 72             StdOut.println("q" + Icol+0 + (row-1)*size);
--[ 2019.09.12.22.27.12.838.0 ]--
r 72             StdOut.println("q" + Incol+0 + (row-1)*size);
--[ 2019.09.12.22.27.13.605.0 ]--
r 72             StdOut.println("q" + Intcol+0 + (row-1)*size);
--[ 2019.09.12.22.27.13.686.0 ]--
r 72             StdOut.println("q" + Intecol+0 + (row-1)*size);
--[ 2019.09.12.22.27.13.800.0 ]--
r 72             StdOut.println("q" + Integcol+0 + (row-1)*size);
--[ 2019.09.12.22.27.13.931.0 ]--
r 72             StdOut.println("q" + Integncol+0 + (row-1)*size);
--[ 2019.09.12.22.27.14.314.0 ]--
r 72             StdOut.println("q" + Integcol+0 + (row-1)*size);
--[ 2019.09.12.22.27.14.590.0 ]--
r 72             StdOut.println("q" + Integecol+0 + (row-1)*size);
--[ 2019.09.12.22.27.14.606.0 ]--
r 72             StdOut.println("q" + Integercol+0 + (row-1)*size);
--[ 2019.09.12.22.27.15.075.0 ]--
r 72             StdOut.println("q" + Integer.col+0 + (row-1)*size);
--[ 2019.09.12.22.27.15.368.0 ]--
r 72             StdOut.println("q" + Integer.tcol+0 + (row-1)*size);
--[ 2019.09.12.22.27.15.455.0 ]--
r 72             StdOut.println("q" + Integer.tocol+0 + (row-1)*size);
--[ 2019.09.12.22.27.15.648.0 ]--
r 72             StdOut.println("q" + Integer.toScol+0 + (row-1)*size);
--[ 2019.09.12.22.27.16.169.0 ]--
r 72             StdOut.println("q" + Integer.toStringcol+0 + (row-1)*size);
--[ 2019.09.12.22.27.16.183.0 ]--
r 72             StdOut.println("q" + Integer.toString()col+0 + (row-1)*size);
--[ 2019.09.12.22.27.20.012.0 ]--
r 72             StdOut.println("q" + Integer.toString());
--[ 2019.09.12.22.27.20.621.0 ]--
r 72             StdOut.println("q" + Integer.toString(col+0 + (row-1)*size));
--[ 2019.09.12.22.27.27.231.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.28.35.999.0 ]--
r 73             connection.union( (col + row*size), col+0 + (row-1)*size);}
--[ 2019.09.12.22.28.39.110.0 ]--
r 70                     && getPlayer(row-1, col) == player){
--[ 2019.09.12.22.28.44.987.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.31.53.667.0 ]--
+ 21         
--[ 2019.09.12.22.31.54.640.0 ]--
r 21         s
--[ 2019.09.12.22.31.55.111.0 ]--
r 21         st
--[ 2019.09.12.22.31.55.570.0 ]--
r 21         std
--[ 2019.09.12.22.31.56.306.0 ]--
r 21         
--[ 2019.09.12.22.31.56.739.0 ]--
r 21         S
--[ 2019.09.12.22.31.56.927.0 ]--
r 21         St
--[ 2019.09.12.22.31.57.098.0 ]--
r 21         Std
--[ 2019.09.12.22.31.57.307.0 ]--
r 21         StdO
--[ 2019.09.12.22.31.57.635.0 ]--
r 21         StdOut
--[ 2019.09.12.22.31.57.848.0 ]--
r 21         StdOut.
--[ 2019.09.12.22.31.58.254.0 ]--
r 21         StdOut.p
--[ 2019.09.12.22.31.58.500.0 ]--
r 21         StdOut.pr
--[ 2019.09.12.22.31.58.521.0 ]--
r 21         StdOut.prin
--[ 2019.09.12.22.31.58.828.0 ]--
r 21         StdOut.println
--[ 2019.09.12.22.31.58.834.0 ]--
r 21         StdOut.println()
--[ 2019.09.12.22.31.58.838.0 ]--
r 21         StdOut.println();
--[ 2019.09.12.22.31.59.394.0 ]--
r 21         StdOut.println(no);
--[ 2019.09.12.22.31.59.444.0 ]--
r 21         StdOut.println(nod);
--[ 2019.09.12.22.31.59.513.0 ]--
r 21         StdOut.println(node);
--[ 2019.09.12.22.31.59.684.0 ]--
r 21         StdOut.println(nodes);
--[ 2019.09.12.22.32.04.296.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.32.17.272.0 ]--
r 21         
--[ 2019.09.12.22.32.17.517.0 ]--
- 21
--[ 2019.09.12.22.33.12.801.0 ]--
+ 22         
--[ 2019.09.12.22.33.17.260.0 ]--
r 22         c
--[ 2019.09.12.22.33.17.340.0 ]--
r 22         co
--[ 2019.09.12.22.33.17.456.0 ]--
r 22         con
--[ 2019.09.12.22.33.17.572.0 ]--
r 22         conn
--[ 2019.09.12.22.33.17.652.0 ]--
r 22         conne
--[ 2019.09.12.22.33.17.712.0 ]--
r 22         connec
--[ 2019.09.12.22.33.17.914.0 ]--
r 22         connect
--[ 2019.09.12.22.33.17.985.0 ]--
r 22         connecti
--[ 2019.09.12.22.33.18.043.0 ]--
r 22         connectio
--[ 2019.09.12.22.33.18.104.0 ]--
r 22         connection
--[ 2019.09.12.22.33.18.373.0 ]--
r 22         connection.
--[ 2019.09.12.22.33.19.336.0 ]--
r 22         connection.u
--[ 2019.09.12.22.33.19.427.0 ]--
r 22         connection.un
--[ 2019.09.12.22.33.19.630.0 ]--
r 22         connection.uni
--[ 2019.09.12.22.33.20.283.0 ]--
r 22         connection.unio
--[ 2019.09.12.22.33.20.356.0 ]--
r 22         connection.union
--[ 2019.09.12.22.33.20.885.0 ]--
r 22         connection.union()
--[ 2019.09.12.22.33.21.316.0 ]--
r 22         connection.union(0)
--[ 2019.09.12.22.33.21.464.0 ]--
r 22         connection.union(0,)
--[ 2019.09.12.22.33.21.623.0 ]--
r 22         connection.union(0,1)
--[ 2019.09.12.22.33.24.067.0 ]--
r 22         connection.union(0,1 )
--[ 2019.09.12.22.33.24.096.0 ]--
r 22         connection.union(0,1)
--[ 2019.09.12.22.33.25.023.0 ]--
r 22         connection.union(0,1);
--[ 2019.09.12.22.33.30.088.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.33.39.107.0 ]--
r 22         connection.union(02,1);
--[ 2019.09.12.22.33.39.207.0 ]--
r 22         connection.union(0,1);
--[ 2019.09.12.22.33.39.368.0 ]--
r 22         connection.union(,1);
--[ 2019.09.12.22.33.39.447.0 ]--
r 22         connection.union(2,1);
--[ 2019.09.12.22.33.39.506.0 ]--
r 22         connection.union(28,1);
--[ 2019.09.12.22.33.40.589.0 ]--
r 22         connection.union(28,);
--[ 2019.09.12.22.33.40.708.0 ]--
r 22         connection.union(28,2);
--[ 2019.09.12.22.33.40.741.0 ]--
r 22         connection.union(28,29);
--[ 2019.09.12.22.33.43.223.0 ]--
r 22         connection.union(2,29);
--[ 2019.09.12.22.33.43.301.0 ]--
r 22         connection.union(27,29);
--[ 2019.09.12.22.33.44.487.0 ]--
r 22         connection.union(27,2);
--[ 2019.09.12.22.33.44.581.0 ]--
r 22         connection.union(27,28);
--[ 2019.09.12.22.33.48.413.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.34.05.142.0 ]--
r 22         
--[ 2019.09.12.22.34.06.044.0 ]--
- 22
--[ 2019.09.12.22.35.11.433.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.35.21.659.0 ]--
+ 22         
--[ 2019.09.12.22.35.22.419.0 ]--
r 22         c
--[ 2019.09.12.22.35.22.508.0 ]--
r 22         co
--[ 2019.09.12.22.35.22.608.0 ]--
r 22         con
--[ 2019.09.12.22.35.22.692.0 ]--
r 22         conn
--[ 2019.09.12.22.35.22.763.0 ]--
r 22         conne
--[ 2019.09.12.22.35.22.820.0 ]--
r 22         connec
--[ 2019.09.12.22.35.22.962.0 ]--
r 22         connect
--[ 2019.09.12.22.35.23.028.0 ]--
r 22         connecti
--[ 2019.09.12.22.35.23.085.0 ]--
r 22         connectio
--[ 2019.09.12.22.35.23.144.0 ]--
r 22         connection
--[ 2019.09.12.22.35.23.334.0 ]--
r 22         connection.
--[ 2019.09.12.22.35.23.499.0 ]--
r 22         connection.u
--[ 2019.09.12.22.35.23.578.0 ]--
r 22         connection.un
--[ 2019.09.12.22.35.23.789.0 ]--
r 22         connection.uni
--[ 2019.09.12.22.35.23.980.0 ]--
r 22         connection.unip
--[ 2019.09.12.22.35.24.067.0 ]--
r 22         connection.unipn
--[ 2019.09.12.22.35.24.402.0 ]--
r 22         connection.unip
--[ 2019.09.12.22.35.24.490.0 ]--
r 22         connection.uni
--[ 2019.09.12.22.35.24.673.0 ]--
r 22         connection.unio
--[ 2019.09.12.22.35.24.819.0 ]--
r 22         connection.union
--[ 2019.09.12.22.35.25.056.0 ]--
r 22         connection.union()
--[ 2019.09.12.22.35.25.717.0 ]--
r 22         connection.union(1)
--[ 2019.09.12.22.35.25.801.0 ]--
r 22         connection.union(13)
--[ 2019.09.12.22.35.25.916.0 ]--
r 22         connection.union(13,)
--[ 2019.09.12.22.35.26.424.0 ]--
r 22         connection.union(13,8)
--[ 2019.09.12.22.35.27.520.0 ]--
r 23 ;
--[ 2019.09.12.22.35.28.154.0 ]--
r 23 
--[ 2019.09.12.22.35.28.593.0 ]--
- 23
--[ 2019.09.12.22.35.28.706.0 ]--
r 22         connection.union(13,8);
--[ 2019.09.12.22.35.29.572.0 ]--
+ 23         
--[ 2019.09.12.22.35.33.758.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.12.22.35.47.983.0 ]--
r 22         
--[ 2019.09.12.22.35.48.383.0 ]--
- 22
--[ 2019.09.12.22.36.12.908.0 ]--
r 22 
--[ 2019.09.12.22.52.05.070.0 ]--
DisposeComponent
--[ 2019.09.13.18.53.11.317.0 ]--
NewLogger: P01_Hex
Version: 1.3
--[ 2019.09.13.18.53.11.895.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2019.09.13.18.53.11.896.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2019.09.13.18.53.11.896.1 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/
public class HexBoard {
    private int[][] board;
    private int boardSize;
    private int nodes;
    private int size;
    private int allTiles;
    UF connection;

    //Initialization
    public HexBoard(int N) {
        board = new int[N][N];
        boardSize = N * N;
        allTiles = N*N;
        nodes = (N*N) + 4;
        size = N;
        UF connections1 = new UF(nodes); //Connections for the 2 red virtual nodes
        UF connections2 = new UF(nodes); //Connections for the 2 blue virtual nodes
        UF connection = new UF(nodes);

        //Connect virtual nodes to each note in the corresponding corners
        for(int i = 0; i < N; i++){
            connections1.union(allTiles, i); //North West red tiles
            connections1.union(allTiles+2, (i)+(N-1)*N); // South East red tiles
            connections2.union(allTiles+1, i*N); // North East blue tiles
            connections2.union(allTiles+3, (N-1)+(i*N));   // South West blue tiles

        }
    }

    public int getPlayer(int row, int col) {
        //If board[row][col] == 1, then the player is player 1 or if board[row][col] == 2 then the player is player 2
        return board[row][col];
    }
    
    public boolean isSet(int row, int col) {
        //Check if the tile at board[row][col] has been set by either player
        if(board[row][col] == 1 || board[row][col] == 2){
            return true;
        }
        return false;
    }

    public boolean isOnWinningPath(int row, int col) {
        return false;
    }

    public void setTile(int row, int col, int player) {
        //Set the board[row][col] equal to player 1 or 2, and decrement the number of unset tiles
        board[row][col] = player;
        boardSize -= 1;

        //The nodes that connect around another node will be equal to:
        //(row, col)
        //(row, col-1)
        //(row+1, col-1)
        //(row+1, col)
        //(row, col+1)
        //(row-1, col+1)
        //(row-1, col)
            //Connect set tile to all tiles around it
            if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row*size));}
            if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == player){connection.union((col + (row*size)), (col-1 + (row+1)*size));}
            if(inRange(row+1, col+0) && getPlayer(row+1, col) == player){connection.union((col + (row*size)), (col+ (row+1)*size));}
            if(inRange(row+0, col+1) && getPlayer(row, col+1) == player){connection.union((col + (row*size)), (col+1 + row*size));}
            if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == player){connection.union((col + (row*size)), (col+1 + (row-1)*size));}
            if(inRange(row-1, col+0)
                    && getPlayer(row-1, col) == player){
            StdOut.println("p" + Integer.toString(col + row*size));
            StdOut.println("q" + Integer.toString(col+0 + (row-1)*size));
            connection.union( (col + row*size), col+0 + (row-1)*size);}

            if(player == 1 && row == 0){connection.union(col + (row*size), allTiles); } //Connect to red's north west edge
            if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
            if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blue's north east edge
            if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+3); } //Connect to blue's south west edge

    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {

        return boardSize;
    }
    private boolean inRange(int row, int col){
        if(row >= size|| col >= size || row < 0 || col < 0){
            return false;
        }
        return true;
    }
}

--[ 2019.09.13.18.53.11.896.2 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public static void main(String[] args) {
    }
}

--[ 2019.09.13.18.53.11.896.3 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2019.09.13.18.53.11.896.4 ]--
InitFile: /.cos265


--[ 2019.09.13.18.53.11.896.5 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.09.13.18.54.34.547.0 ]--
:/src/HexBoard.java
r 70                      && getPlayer(row-1, col) == player){
--[ 2019.09.13.18.54.34.679.0 ]--
r 70                     && getPlayer(row-1, col) == player){
--[ 2019.09.13.18.54.34.759.0 ]--
- 69
r 69             if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){
--[ 2019.09.13.18.54.52.164.0 ]--
r 72             
--[ 2019.09.13.18.54.55.149.0 ]--
r 69             if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){ 
--[ 2019.09.13.18.54.55.191.0 ]--
r 69             if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){
--[ 2019.09.13.18.54.55.417.0 ]--
r 69             if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){connection.union( (col + row*size), col+0 + (row-1)*size);}
--[ 2019.09.13.18.55.01.895.0 ]--
r 70             StdOut.println("q" + Integer.toString(col+0 + (row-1)*size));
r 71             StdOut.println("p" + Integer.toString(col + row*size));
--[ 2019.09.13.18.55.01.920.0 ]--
r 70         StdOut.println("q" + Integer.toString(col+0 + (row-1)*size));
r 71         StdOut.println("p" + Integer.toString(col + row*size));
--[ 2019.09.13.18.55.02.561.0 ]--
r 70         StdOut.println("p" + Integer.toString(col + row*size));
r 71         StdOut.println("q" + Integer.toString(col+0 + (row-1)*size));
--[ 2019.09.13.18.55.06.305.0 ]--
- 70
r 70         
--[ 2019.09.13.18.55.06.728.0 ]--
- 70
--[ 2019.09.13.18.55.57.124.0 ]--
r 70 
--[ 2019.09.13.18.56.21.314.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.13.19.00.52.202.0 ]--
r 64             if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((r + (row*size)), (col-1 + row*size));}
--[ 2019.09.13.19.00.52.363.0 ]--
r 64             if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((row + (row*size)), (col-1 + row*size));}
--[ 2019.09.13.19.00.55.297.0 ]--
r 64             if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((row + (c*size)), (col-1 + row*size));}
--[ 2019.09.13.19.00.55.332.0 ]--
r 64             if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((row + (co*size)), (col-1 + row*size));}
--[ 2019.09.13.19.00.55.520.0 ]--
r 64             if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((row + (col*size)), (col-1 + row*size));}
--[ 2019.09.13.19.00.57.576.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == player){connection.union((r + (row*size)), (col-1 + (row+1)*size));}
--[ 2019.09.13.19.00.57.608.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == player){connection.union((ro + (row*size)), (col-1 + (row+1)*size));}
--[ 2019.09.13.19.00.57.672.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == player){connection.union((row + (row*size)), (col-1 + (row+1)*size));}
--[ 2019.09.13.19.01.00.465.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == player){connection.union((row + (c*size)), (col-1 + (row+1)*size));}
--[ 2019.09.13.19.01.00.515.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == player){connection.union((row + (co*size)), (col-1 + (row+1)*size));}
--[ 2019.09.13.19.01.00.665.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == player){connection.union((row + (col*size)), (col-1 + (row+1)*size));}
--[ 2019.09.13.19.01.03.265.0 ]--
r 66             if(inRange(row+1, col+0) && getPlayer(row+1, col) == player){connection.union((col + (c*size)), (col+ (row+1)*size));}
--[ 2019.09.13.19.01.03.335.0 ]--
r 66             if(inRange(row+1, col+0) && getPlayer(row+1, col) == player){connection.union((col + (co*size)), (col+ (row+1)*size));}
--[ 2019.09.13.19.01.03.444.0 ]--
r 66             if(inRange(row+1, col+0) && getPlayer(row+1, col) == player){connection.union((col + (col*size)), (col+ (row+1)*size));}
--[ 2019.09.13.19.01.06.250.0 ]--
r 66             if(inRange(row+1, col+0) && getPlayer(row+1, col) == player){connection.union((r + (col*size)), (col+ (row+1)*size));}
--[ 2019.09.13.19.01.06.339.0 ]--
r 66             if(inRange(row+1, col+0) && getPlayer(row+1, col) == player){connection.union((ro + (col*size)), (col+ (row+1)*size));}
--[ 2019.09.13.19.01.06.383.0 ]--
r 66             if(inRange(row+1, col+0) && getPlayer(row+1, col) == player){connection.union((row + (col*size)), (col+ (row+1)*size));}
--[ 2019.09.13.19.01.08.230.0 ]--
r 67             if(inRange(row+0, col+1) && getPlayer(row, col+1) == player){connection.union((co + (row*size)), (col+1 + row*size));}
--[ 2019.09.13.19.01.08.344.0 ]--
r 67             if(inRange(row+0, col+1) && getPlayer(row, col+1) == player){connection.union((c + (row*size)), (col+1 + row*size));}
--[ 2019.09.13.19.01.08.454.0 ]--
r 67             if(inRange(row+0, col+1) && getPlayer(row, col+1) == player){connection.union(( + (row*size)), (col+1 + row*size));}
--[ 2019.09.13.19.01.08.575.0 ]--
r 67             if(inRange(row+0, col+1) && getPlayer(row, col+1) == player){connection.union((r + (row*size)), (col+1 + row*size));}
--[ 2019.09.13.19.01.08.678.0 ]--
r 67             if(inRange(row+0, col+1) && getPlayer(row, col+1) == player){connection.union((ro + (row*size)), (col+1 + row*size));}
--[ 2019.09.13.19.01.08.739.0 ]--
r 67             if(inRange(row+0, col+1) && getPlayer(row, col+1) == player){connection.union((row + (row*size)), (col+1 + row*size));}
--[ 2019.09.13.19.01.11.372.0 ]--
r 67             if(inRange(row+0, col+1) && getPlayer(row, col+1) == player){connection.union((row + (c*size)), (col+1 + row*size));}
--[ 2019.09.13.19.01.11.433.0 ]--
r 67             if(inRange(row+0, col+1) && getPlayer(row, col+1) == player){connection.union((row + (co*size)), (col+1 + row*size));}
--[ 2019.09.13.19.01.11.482.0 ]--
r 67             if(inRange(row+0, col+1) && getPlayer(row, col+1) == player){connection.union((row + (col*size)), (col+1 + row*size));}
--[ 2019.09.13.19.01.14.072.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == player){connection.union((r + (row*size)), (col+1 + (row-1)*size));}
--[ 2019.09.13.19.01.14.153.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == player){connection.union((ro + (row*size)), (col+1 + (row-1)*size));}
--[ 2019.09.13.19.01.14.204.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == player){connection.union((row + (row*size)), (col+1 + (row-1)*size));}
--[ 2019.09.13.19.01.16.735.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == player){connection.union((row + (c*size)), (col+1 + (row-1)*size));}
--[ 2019.09.13.19.01.16.783.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == player){connection.union((row + (co*size)), (col+1 + (row-1)*size));}
--[ 2019.09.13.19.01.16.875.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == player){connection.union((row + (col*size)), (col+1 + (row-1)*size));}
--[ 2019.09.13.19.01.20.096.0 ]--
r 69             if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){connection.union( (col + c*size), col+0 + (row-1)*size);}
--[ 2019.09.13.19.01.20.127.0 ]--
r 69             if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){connection.union( (col + co*size), col+0 + (row-1)*size);}
--[ 2019.09.13.19.01.20.223.0 ]--
r 69             if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){connection.union( (col + col*size), col+0 + (row-1)*size);}
--[ 2019.09.13.19.01.22.382.0 ]--
r 69             if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){connection.union( (r + col*size), col+0 + (row-1)*size);}
--[ 2019.09.13.19.01.22.477.0 ]--
r 69             if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){connection.union( (ro + col*size), col+0 + (row-1)*size);}
--[ 2019.09.13.19.01.22.505.0 ]--
r 69             if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){connection.union( (row + col*size), col+0 + (row-1)*size);}
--[ 2019.09.13.19.01.28.764.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.13.19.01.51.641.0 ]--
r 69             if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){connection.union( (col + col*size), col+0 + (row-1)*size);}
--[ 2019.09.13.19.01.52.289.0 ]--
r 69             if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){connection.union( (col + row*size), col+0 + (row-1)*size);}
--[ 2019.09.13.19.01.52.896.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == player){connection.union((row + (row*size)), (col+1 + (row-1)*size));}
--[ 2019.09.13.19.01.53.398.0 ]--
r 68             if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == player){connection.union((col + (row*size)), (col+1 + (row-1)*size));}
--[ 2019.09.13.19.01.53.883.0 ]--
r 67             if(inRange(row+0, col+1) && getPlayer(row, col+1) == player){connection.union((row + (row*size)), (col+1 + row*size));}
--[ 2019.09.13.19.01.54.440.0 ]--
r 67             if(inRange(row+0, col+1) && getPlayer(row, col+1) == player){connection.union(( + (row*size)), (col+1 + row*size));}
--[ 2019.09.13.19.01.54.682.0 ]--
r 67             if(inRange(row+0, col+1) && getPlayer(row, col+1) == player){connection.union((col + (row*size)), (col+1 + row*size));}
--[ 2019.09.13.19.01.55.115.0 ]--
r 66             if(inRange(row+1, col+0) && getPlayer(row+1, col) == player){connection.union((col + (col*size)), (col+ (row+1)*size));}
--[ 2019.09.13.19.01.55.637.0 ]--
r 66             if(inRange(row+1, col+0) && getPlayer(row+1, col) == player){connection.union((col + (row*size)), (col+ (row+1)*size));}
--[ 2019.09.13.19.01.56.200.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == player){connection.union((row + (row*size)), (col-1 + (row+1)*size));}
--[ 2019.09.13.19.01.56.841.0 ]--
r 65             if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == player){connection.union((col + (row*size)), (col-1 + (row+1)*size));}
--[ 2019.09.13.19.01.57.527.0 ]--
r 64             if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((row + (row*size)), (col-1 + row*size));}
--[ 2019.09.13.19.01.58.107.0 ]--
r 64             if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.13.19.01.58.387.0 ]--
r 70             
--[ 2019.09.13.19.02.34.105.0 ]--
r 70 
--[ 2019.09.13.19.59.55.080.0 ]--
DisposeComponent
--[ 2019.09.13.20.01.11.368.0 ]--
NewLogger: P01_Hex
Version: 1.3
--[ 2019.09.13.20.01.11.399.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2019.09.13.20.01.11.399.1 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2019.09.13.20.01.11.399.2 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/
public class HexBoard {
    private int[][] board;
    private int boardSize;
    private int nodes;
    private int size;
    private int allTiles;
    UF connection;

    //Initialization
    public HexBoard(int N) {
        board = new int[N][N];
        boardSize = N * N;
        allTiles = N*N;
        nodes = (N*N) + 4;
        size = N;
        UF connections1 = new UF(nodes); //Connections for the 2 red virtual nodes
        UF connections2 = new UF(nodes); //Connections for the 2 blue virtual nodes
        UF connection = new UF(nodes);

        //Connect virtual nodes to each note in the corresponding corners
        for(int i = 0; i < N; i++){
            connections1.union(allTiles, i); //North West red tiles
            connections1.union(allTiles+2, (i)+(N-1)*N); // South East red tiles
            connections2.union(allTiles+1, i*N); // North East blue tiles
            connections2.union(allTiles+3, (N-1)+(i*N));   // South West blue tiles

        }
    }

    public int getPlayer(int row, int col) {
        //If board[row][col] == 1, then the player is player 1 or if board[row][col] == 2 then the player is player 2
        return board[row][col];
    }
    
    public boolean isSet(int row, int col) {
        //Check if the tile at board[row][col] has been set by either player
        if(board[row][col] == 1 || board[row][col] == 2){
            return true;
        }
        return false;
    }

    public boolean isOnWinningPath(int row, int col) {
        return false;
    }

    public void setTile(int row, int col, int player) {
        //Set the board[row][col] equal to player 1 or 2, and decrement the number of unset tiles
        board[row][col] = player;
        boardSize -= 1;

        //The nodes that connect around another node will be equal to:
        //(row, col)
        //(row, col-1)
        //(row+1, col-1)
        //(row+1, col)
        //(row, col+1)
        //(row-1, col+1)
        //(row-1, col)
            //Connect set tile to all tiles around it
            if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row*size));}
            if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == player){connection.union((col + (row*size)), (col-1 + (row+1)*size));}
            if(inRange(row+1, col+0) && getPlayer(row+1, col) == player){connection.union((col + (row*size)), (col+ (row+1)*size));}
            if(inRange(row+0, col+1) && getPlayer(row, col+1) == player){connection.union((col + (row*size)), (col+1 + row*size));}
            if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == player){connection.union((col + (row*size)), (col+1 + (row-1)*size));}
            if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){connection.union( (col + row*size), col+0 + (row-1)*size);}


            if(player == 1 && row == 0){connection.union(col + (row*size), allTiles); } //Connect to red's north west edge
            if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
            if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blue's north east edge
            if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+3); } //Connect to blue's south west edge

    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {

        return boardSize;
    }
    private boolean inRange(int row, int col){
        if(row >= size|| col >= size || row < 0 || col < 0){
            return false;
        }
        return true;
    }
}

--[ 2019.09.13.20.01.11.400.0 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public static void main(String[] args) {
    }
}

--[ 2019.09.13.20.01.11.400.1 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2019.09.13.20.01.11.401.0 ]--
InitFile: /.cos265


--[ 2019.09.13.20.01.11.401.1 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.09.13.20.02.08.594.0 ]--
:/src/HexBoard.java
r 20         UF connections2 = new UF(nodes); //Connections for the 2 blue virtual nodes 
--[ 2019.09.13.20.51.03.718.0 ]--
r 20         UF connections2 = new UF(nodes); //Connections for the 2 blue virtual nodes
--[ 2019.09.13.20.51.03.911.0 ]--
DisposeComponent
--[ 2019.09.16.12.47.14.528.0 ]--
NewLogger: P01_Hex
Version: 1.3
--[ 2019.09.16.12.47.14.807.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2019.09.16.12.47.14.807.1 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2019.09.16.12.47.14.808.0 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/
public class HexBoard {
    private int[][] board;
    private int boardSize;
    private int nodes;
    private int size;
    private int allTiles;
    UF connection;

    //Initialization
    public HexBoard(int N) {
        board = new int[N][N];
        boardSize = N * N;
        allTiles = N*N;
        nodes = (N*N) + 4;
        size = N;
        UF connections1 = new UF(nodes); //Connections for the 2 red virtual nodes
        UF connections2 = new UF(nodes); //Connections for the 2 blue virtual nodes
        UF connection = new UF(nodes);

        //Connect virtual nodes to each note in the corresponding corners
        for(int i = 0; i < N; i++){
            connections1.union(allTiles, i); //North West red tiles
            connections1.union(allTiles+2, (i)+(N-1)*N); // South East red tiles
            connections2.union(allTiles+1, i*N); // North East blue tiles
            connections2.union(allTiles+3, (N-1)+(i*N));   // South West blue tiles

        }
    }

    public int getPlayer(int row, int col) {
        //If board[row][col] == 1, then the player is player 1 or if board[row][col] == 2 then the player is player 2
        return board[row][col];
    }
    
    public boolean isSet(int row, int col) {
        //Check if the tile at board[row][col] has been set by either player
        if(board[row][col] == 1 || board[row][col] == 2){
            return true;
        }
        return false;
    }

    public boolean isOnWinningPath(int row, int col) {
        return false;
    }

    public void setTile(int row, int col, int player) {
        //Set the board[row][col] equal to player 1 or 2, and decrement the number of unset tiles
        board[row][col] = player;
        boardSize -= 1;

        //The nodes that connect around another node will be equal to:
        //(row, col)
        //(row, col-1)
        //(row+1, col-1)
        //(row+1, col)
        //(row, col+1)
        //(row-1, col+1)
        //(row-1, col)
            //Connect set tile to all tiles around it
            if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row*size));}
            if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == player){connection.union((col + (row*size)), (col-1 + (row+1)*size));}
            if(inRange(row+1, col+0) && getPlayer(row+1, col) == player){connection.union((col + (row*size)), (col+ (row+1)*size));}
            if(inRange(row+0, col+1) && getPlayer(row, col+1) == player){connection.union((col + (row*size)), (col+1 + row*size));}
            if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == player){connection.union((col + (row*size)), (col+1 + (row-1)*size));}
            if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){connection.union( (col + row*size), col+0 + (row-1)*size);}


            if(player == 1 && row == 0){connection.union(col + (row*size), allTiles); } //Connect to red's north west edge
            if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
            if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blue's north east edge
            if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+3); } //Connect to blue's south west edge

    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {

        return boardSize;
    }
    private boolean inRange(int row, int col){
        if(row >= size|| col >= size || row < 0 || col < 0){
            return false;
        }
        return true;
    }
}

--[ 2019.09.16.12.47.14.808.1 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public static void main(String[] args) {
    }
}

--[ 2019.09.16.12.47.14.808.2 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2019.09.16.12.47.14.808.3 ]--
InitFile: /.cos265


--[ 2019.09.16.12.47.14.809.0 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.09.16.12.59.26.681.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.15.59.52.258.0 ]--
:/src/HexBoard.java
r 20         UF connections2 = new UF(nodes); //Connections for the 2 blue virtual   
--[ 2019.09.16.15.59.53.312.0 ]--
r 20         UF connections2 = new UF(nodes); //Connections for the 2 blue virtual  
--[ 2019.09.16.16.01.34.612.0 ]--
r 20         UF connections2 = new UF(nodes); //Connections for the 2 blue virtual 
--[ 2019.09.16.16.01.35.789.0 ]--
r 20         UF connections2 = new UF(nodes); //Connections for the 2 blue virtual
--[ 2019.09.16.16.05.57.405.0 ]--
r 92         if(row > size|| col >= size || row < 0 || col < 0){
--[ 2019.09.16.16.05.57.513.0 ]--
r 92         if(row  size|| col >= size || row < 0 || col < 0){
--[ 2019.09.16.16.05.58.011.0 ]--
r 92         if(row < size|| col >= size || row < 0 || col < 0){
--[ 2019.09.16.16.05.58.298.0 ]--
r 92         if(row <= size|| col >= size || row < 0 || col < 0){
--[ 2019.09.16.16.06.01.487.0 ]--
r 92         if(row <= size|| col <>=> size || row < 0 || col < 0){
--[ 2019.09.16.16.06.01.660.0 ]--
r 92         if(row <= size|| col <=> size || row < 0 || col < 0){
--[ 2019.09.16.16.06.01.832.0 ]--
r 92         if(row <= size|| col <= > size || row < 0 || col < 0){
--[ 2019.09.16.16.06.01.888.0 ]--
r 92         if(row <= size|| col <=> size || row < 0 || col < 0){
--[ 2019.09.16.16.06.03.466.0 ]--
r 92         if(row <= size|| col <= size || row < 0 || col < 0){
--[ 2019.09.16.16.06.04.709.0 ]--
r 92         if(row <= size|| col <= size || row  0 || col < 0){
--[ 2019.09.16.16.06.04.894.0 ]--
r 92         if(row <= size|| col <= size || row > 0 || col < 0){
--[ 2019.09.16.16.06.06.321.0 ]--
r 92         if(row <= size|| col <= size || row > 0 || col  0){
--[ 2019.09.16.16.06.06.541.0 ]--
r 92         if(row <= size|| col <= size || row > 0 || col > 0){
--[ 2019.09.16.16.06.09.179.0 ]--
r 92         if(row <= size|| col <= size || row > 0 || col >= 0){
--[ 2019.09.16.16.06.11.015.0 ]--
r 92         if(row <= size|| col <= size || row >= 0 || col >= 0){
--[ 2019.09.16.16.06.18.237.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.08.44.624.0 ]--
+ 19         
--[ 2019.09.16.16.08.45.519.0 ]--
r 19         /
--[ 2019.09.16.16.08.45.738.0 ]--
r 19         /*
--[ 2019.09.16.16.08.50.814.0 ]--
+ 32         
+ 33          */
--[ 2019.09.16.16.08.51.200.0 ]--
r 32         *
--[ 2019.09.16.16.08.51.267.0 ]--
r 32         */
--[ 2019.09.16.16.08.52.269.0 ]--
r 32         *
--[ 2019.09.16.16.08.52.347.0 ]--
r 32         
--[ 2019.09.16.16.08.52.650.0 ]--
r 32        
--[ 2019.09.16.16.08.53.034.0 ]--
r 32       
--[ 2019.09.16.16.08.53.443.0 ]--
r 32      
--[ 2019.09.16.16.08.53.805.0 ]--
r 32     
--[ 2019.09.16.16.08.54.183.0 ]--
r 32    
--[ 2019.09.16.16.08.54.587.0 ]--
r 32   
--[ 2019.09.16.16.08.54.952.0 ]--
r 32  
--[ 2019.09.16.16.08.55.256.0 ]--
r 32 
--[ 2019.09.16.16.08.55.621.0 ]--
- 32
--[ 2019.09.16.16.09.00.538.0 ]--
r 22         
--[ 2019.09.16.16.09.01.110.0 ]--
+ 19         
--[ 2019.09.16.16.09.01.683.0 ]--
r 19         UF connection = new UF(nodes);
--[ 2019.09.16.16.09.04.091.0 ]--
r 23 
--[ 2019.09.16.16.09.05.708.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.15.53.537.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.16.04.239.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.16.16.314.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.17.11.376.0 ]--
r 95         if(row <= size|| col <= size || row >= 0 || col > 0){
--[ 2019.09.16.16.17.16.642.0 ]--
r 95         if(row <= size|| col <= size || row > 0 || col > 0){
--[ 2019.09.16.16.17.20.306.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.17.25.680.0 ]--
r 95         if(row <= size|| col <= size || row >= 0 || col > 0){
--[ 2019.09.16.16.17.27.501.0 ]--
r 95         if(row <= size|| col <= size || row >= 0 || col >= 0){
--[ 2019.09.16.16.17.30.871.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.17.52.698.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.18.10.842.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.18.26.279.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.18.34.676.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.18.44.903.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.19.15.609.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.19.26.550.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.19.38.267.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.20.37.137.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.20.44.425.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.20.53.054.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.21.24.372.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.22.23.492.0 ]--
r 19         /UF connection = new UF(nodes);
--[ 2019.09.16.16.22.23.639.0 ]--
r 19         //UF connection = new UF(nodes);
--[ 2019.09.16.16.22.29.703.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.22.43.426.0 ]--
r 10     /UF connection;
--[ 2019.09.16.16.22.43.501.0 ]--
r 10     //UF connection;
--[ 2019.09.16.16.22.46.442.0 ]--
r 10     /UF connection;
--[ 2019.09.16.16.22.46.526.0 ]--
r 10     UF connection;
--[ 2019.09.16.16.23.58.468.0 ]--
r 10     QuiUF connection;
--[ 2019.09.16.16.23.58.663.0 ]--
r 10     QuickUF connection;
--[ 2019.09.16.16.23.58.902.0 ]--
r 10     QuickFUF connection;
--[ 2019.09.16.16.23.59.163.0 ]--
r 10     QuickFinUF connection;
--[ 2019.09.16.16.23.59.380.0 ]--
r 10     QuickFindUF connection;
--[ 2019.09.16.16.24.07.910.0 ]--
r 19         //QUF connection = new UF(nodes);
--[ 2019.09.16.16.24.08.029.0 ]--
r 19         //QuUF connection = new UF(nodes);
--[ 2019.09.16.16.24.08.084.0 ]--
r 19         //QuiUF connection = new UF(nodes);
--[ 2019.09.16.16.24.08.219.0 ]--
r 19         //QuicUF connection = new UF(nodes);
--[ 2019.09.16.16.24.08.292.0 ]--
r 19         //QuickUF connection = new UF(nodes);
--[ 2019.09.16.16.24.08.593.0 ]--
r 19         //QuickFUF connection = new UF(nodes);
--[ 2019.09.16.16.24.08.731.0 ]--
r 19         //QuickFiUF connection = new UF(nodes);
--[ 2019.09.16.16.24.08.778.0 ]--
r 19         //QuickFinUF connection = new UF(nodes);
--[ 2019.09.16.16.24.08.862.0 ]--
r 19         //QuickFindUF connection = new UF(nodes);
--[ 2019.09.16.16.24.10.344.0 ]--
r 19         //QuickFindUF connection = new QUF(nodes);
--[ 2019.09.16.16.24.10.463.0 ]--
r 19         //QuickFindUF connection = new QuUF(nodes);
--[ 2019.09.16.16.24.10.537.0 ]--
r 19         //QuickFindUF connection = new QuiUF(nodes);
--[ 2019.09.16.16.24.10.684.0 ]--
r 19         //QuickFindUF connection = new QuicUF(nodes);
--[ 2019.09.16.16.24.10.775.0 ]--
r 19         //QuickFindUF connection = new QuickUF(nodes);
--[ 2019.09.16.16.24.10.982.0 ]--
r 19         //QuickFindUF connection = new QuickFUF(nodes);
--[ 2019.09.16.16.24.11.319.0 ]--
r 19         //QuickFindUF connection = new QuickFiUF(nodes);
--[ 2019.09.16.16.24.11.396.0 ]--
r 19         //QuickFindUF connection = new QuickFinUF(nodes);
--[ 2019.09.16.16.24.11.469.0 ]--
r 19         //QuickFindUF connection = new QuickFindUF(nodes);
--[ 2019.09.16.16.24.13.371.0 ]--
r 19         /QuickFindUF connection = new QuickFindUF(nodes);
--[ 2019.09.16.16.24.13.500.0 ]--
r 19         QuickFindUF connection = new QuickFindUF(nodes);
--[ 2019.09.16.16.24.15.066.0 ]--
r 19          QuickFindUF connection = new QuickFindUF(nodes);
--[ 2019.09.16.16.24.15.096.0 ]--
r 19         QuickFindUF connection = new QuickFindUF(nodes);
--[ 2019.09.16.16.25.02.464.0 ]--
r 19         /QuickFindUF connection = new QuickFindUF(nodes);
--[ 2019.09.16.16.25.02.551.0 ]--
r 19         //QuickFindUF connection = new QuickFindUF(nodes);
--[ 2019.09.16.16.25.06.629.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.25.16.553.0 ]--
r 19         /QuickFindUF connection = new QuickFindUF(nodes);
--[ 2019.09.16.16.25.16.640.0 ]--
r 19         QuickFindUF connection = new QuickFindUF(nodes);
--[ 2019.09.16.16.26.46.495.0 ]--
r 19          connection = new QuickFindUF(nodes);
--[ 2019.09.16.16.26.47.659.0 ]--
r 19         connection = new QuickFindUF(nodes);
--[ 2019.09.16.16.26.53.880.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.27.29.950.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.41.52.790.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.42.10.288.0 ]--
r 82     public boolean hasPlayer1Won() { 
--[ 2019.09.16.16.42.10.308.0 ]--
r 82     public boolean hasPlayer1Won() {
--[ 2019.09.16.16.42.10.605.0 ]--
+ 83         
--[ 2019.09.16.16.42.11.159.0 ]--
r 83         i
--[ 2019.09.16.16.42.11.493.0 ]--
r 83         if
--[ 2019.09.16.16.42.11.524.0 ]--
r 83         if c
--[ 2019.09.16.16.42.11.543.0 ]--
r 83         if co
--[ 2019.09.16.16.42.11.636.0 ]--
r 83         if con
--[ 2019.09.16.16.42.11.765.0 ]--
r 83         if conn
--[ 2019.09.16.16.42.11.811.0 ]--
r 83         if conne
--[ 2019.09.16.16.42.11.864.0 ]--
r 83         if connec
--[ 2019.09.16.16.42.12.031.0 ]--
r 83         if connect
--[ 2019.09.16.16.42.12.117.0 ]--
r 83         if connecti
--[ 2019.09.16.16.42.12.166.0 ]--
r 83         if connectio
--[ 2019.09.16.16.42.12.641.0 ]--
r 83         if connectiom
--[ 2019.09.16.16.42.12.838.0 ]--
r 83         if connectiom.
--[ 2019.09.16.16.42.13.575.0 ]--
r 83         if connectiom
--[ 2019.09.16.16.42.13.651.0 ]--
r 83         if connectio
--[ 2019.09.16.16.42.13.796.0 ]--
r 83         if connection
--[ 2019.09.16.16.42.14.041.0 ]--
r 83         if connection.
--[ 2019.09.16.16.42.14.412.0 ]--
r 83         if connection.fi
--[ 2019.09.16.16.42.14.461.0 ]--
r 83         if connection.fin
--[ 2019.09.16.16.42.14.512.0 ]--
r 83         if connection.find
--[ 2019.09.16.16.43.16.771.0 ]--
r 83         if connection.find()
--[ 2019.09.16.16.43.46.201.0 ]--
r 83         if
--[ 2019.09.16.16.43.47.176.0 ]--
r 83         if 
--[ 2019.09.16.16.43.47.228.0 ]--
r 83         if
--[ 2019.09.16.16.52.20.214.0 ]--
r 83         if()
--[ 2019.09.16.16.52.20.932.0 ]--
r 83         if( )
--[ 2019.09.16.16.52.20.990.0 ]--
r 83         if()
--[ 2019.09.16.16.52.21.558.0 ]--
r 83         if( )
--[ 2019.09.16.16.52.21.616.0 ]--
r 83         if()
--[ 2019.09.16.16.52.22.075.0 ]--
r 83         if(c)
--[ 2019.09.16.16.52.22.708.0 ]--
r 83         if()
--[ 2019.09.16.16.52.29.294.0 ]--
r 83         if( )
--[ 2019.09.16.16.52.29.347.0 ]--
r 83         if()
--[ 2019.09.16.16.52.31.232.0 ]--
r 83         if(c)
--[ 2019.09.16.16.52.31.322.0 ]--
r 83         if(co)
--[ 2019.09.16.16.52.31.416.0 ]--
r 83         if(con)
--[ 2019.09.16.16.52.31.561.0 ]--
r 83         if(conn)
--[ 2019.09.16.16.52.31.639.0 ]--
r 83         if(conne)
--[ 2019.09.16.16.52.31.675.0 ]--
r 83         if(connec)
--[ 2019.09.16.16.52.31.833.0 ]--
r 83         if(connect)
--[ 2019.09.16.16.52.31.907.0 ]--
r 83         if(connecti)
--[ 2019.09.16.16.52.31.968.0 ]--
r 83         if(connectio)
--[ 2019.09.16.16.52.32.075.0 ]--
r 83         if(connection)
--[ 2019.09.16.16.52.32.409.0 ]--
r 83         if(connectionf)
--[ 2019.09.16.16.52.32.610.0 ]--
r 83         if(connection)
--[ 2019.09.16.16.52.32.787.0 ]--
r 83         if(connection.)
--[ 2019.09.16.16.52.32.919.0 ]--
r 83         if(connection.f)
--[ 2019.09.16.16.52.33.005.0 ]--
r 83         if(connection.fi)
--[ 2019.09.16.16.52.33.047.0 ]--
r 83         if(connection.fin)
--[ 2019.09.16.16.52.33.115.0 ]--
r 83         if(connection.find)
--[ 2019.09.16.16.52.33.383.0 ]--
r 83         if(connection.find())
--[ 2019.09.16.16.52.38.186.0 ]--
r 83         if(connection.find)
--[ 2019.09.16.16.52.40.462.0 ]--
r 83         if()
--[ 2019.09.16.16.52.49.498.0 ]--
r 83         if(connection.union(col + (row*size), allTiles))
--[ 2019.09.16.16.52.51.642.0 ]--
r 83         if()
--[ 2019.09.16.16.52.52.616.0 ]--
- 83
--[ 2019.09.16.16.52.54.682.0 ]--
+ 83         
--[ 2019.09.16.16.52.56.640.0 ]--
r 83          
--[ 2019.09.16.16.52.56.721.0 ]--
r 83         
--[ 2019.09.16.16.53.06.652.0 ]--
r 83         i
--[ 2019.09.16.16.53.06.737.0 ]--
r 83         if
--[ 2019.09.16.16.53.07.205.0 ]--
r 83         if()
--[ 2019.09.16.16.53.09.514.0 ]--
r 83         if( )
--[ 2019.09.16.16.53.09.541.0 ]--
r 83         if()
--[ 2019.09.16.16.53.16.472.0 ]--
r 83         if(a)
--[ 2019.09.16.16.53.16.559.0 ]--
r 83         if(al)
--[ 2019.09.16.16.53.16.658.0 ]--
r 83         if(all)
--[ 2019.09.16.16.53.16.921.0 ]--
r 83         if(allT)
--[ 2019.09.16.16.53.16.979.0 ]--
r 83         if(allTi)
--[ 2019.09.16.16.53.17.134.0 ]--
r 83         if(allTil)
--[ 2019.09.16.16.53.17.172.0 ]--
r 83         if(allTile)
--[ 2019.09.16.16.53.17.298.0 ]--
r 83         if(allTiles)
--[ 2019.09.16.16.53.19.777.0 ]--
r 83         if()
--[ 2019.09.16.16.53.21.261.0 ]--
r 83         if(c)
--[ 2019.09.16.16.53.21.318.0 ]--
r 83         if(co)
--[ 2019.09.16.16.53.21.424.0 ]--
r 83         if(con)
--[ 2019.09.16.16.53.21.564.0 ]--
r 83         if(conn)
--[ 2019.09.16.16.53.21.628.0 ]--
r 83         if(conne)
--[ 2019.09.16.16.53.21.690.0 ]--
r 83         if(connec)
--[ 2019.09.16.16.53.21.832.0 ]--
r 83         if(connect)
--[ 2019.09.16.16.53.21.879.0 ]--
r 83         if(connecti)
--[ 2019.09.16.16.53.21.957.0 ]--
r 83         if(connectio)
--[ 2019.09.16.16.53.22.044.0 ]--
r 83         if(connection)
--[ 2019.09.16.16.53.22.318.0 ]--
r 83         if(connection.)
--[ 2019.09.16.16.53.22.588.0 ]--
r 83         if(connection.f)
--[ 2019.09.16.16.53.22.746.0 ]--
r 83         if(connection.fi)
--[ 2019.09.16.16.53.22.775.0 ]--
r 83         if(connection.fin)
--[ 2019.09.16.16.53.22.859.0 ]--
r 83         if(connection.find)
--[ 2019.09.16.16.53.23.128.0 ]--
r 83         if(connection.find())
--[ 2019.09.16.16.53.28.112.0 ]--
r 83         if(connection.find(a))
--[ 2019.09.16.16.53.28.197.0 ]--
r 83         if(connection.find(al))
--[ 2019.09.16.16.53.28.288.0 ]--
r 83         if(connection.find(all))
--[ 2019.09.16.16.53.28.613.0 ]--
r 83         if(connection.find(allT))
--[ 2019.09.16.16.53.28.824.0 ]--
r 83         if(connection.find(allTi))
--[ 2019.09.16.16.53.28.866.0 ]--
r 83         if(connection.find(allTim))
--[ 2019.09.16.16.53.28.979.0 ]--
r 83         if(connection.find(allTime))
--[ 2019.09.16.16.53.29.069.0 ]--
r 83         if(connection.find(allTimes))
--[ 2019.09.16.16.53.29.570.0 ]--
r 83         if(connection.find(allTime))
--[ 2019.09.16.16.53.29.678.0 ]--
r 83         if(connection.find(allTim))
--[ 2019.09.16.16.53.29.788.0 ]--
r 83         if(connection.find(allTi))
--[ 2019.09.16.16.53.29.920.0 ]--
r 83         if(connection.find(allTil))
--[ 2019.09.16.16.53.30.014.0 ]--
r 83         if(connection.find(allTile))
--[ 2019.09.16.16.53.30.120.0 ]--
r 83         if(connection.find(allTiles))
--[ 2019.09.16.16.53.30.848.0 ]--
r 83         if(connection.find(allTiles ))
--[ 2019.09.16.16.53.30.933.0 ]--
r 83         if(connection.find(allTiles))
--[ 2019.09.16.16.53.32.459.0 ]--
r 83         if(connection.find(allTiles) )
--[ 2019.09.16.16.53.32.632.0 ]--
r 83         if(connection.find(allTiles) =)
--[ 2019.09.16.16.53.32.721.0 ]--
r 83         if(connection.find(allTiles) ==)
--[ 2019.09.16.16.53.32.799.0 ]--
r 83         if(connection.find(allTiles) == )
--[ 2019.09.16.16.53.34.235.0 ]--
r 83         if(connection.find(allTiles) == c)
--[ 2019.09.16.16.53.34.335.0 ]--
r 83         if(connection.find(allTiles) == co)
--[ 2019.09.16.16.53.34.424.0 ]--
r 83         if(connection.find(allTiles) == con)
--[ 2019.09.16.16.53.34.547.0 ]--
r 83         if(connection.find(allTiles) == conn)
--[ 2019.09.16.16.53.34.614.0 ]--
r 83         if(connection.find(allTiles) == conne)
--[ 2019.09.16.16.53.34.662.0 ]--
r 83         if(connection.find(allTiles) == connec)
--[ 2019.09.16.16.53.34.846.0 ]--
r 83         if(connection.find(allTiles) == connect)
--[ 2019.09.16.16.53.34.897.0 ]--
r 83         if(connection.find(allTiles) == connecti)
--[ 2019.09.16.16.53.34.971.0 ]--
r 83         if(connection.find(allTiles) == connectio)
--[ 2019.09.16.16.53.35.052.0 ]--
r 83         if(connection.find(allTiles) == connection)
--[ 2019.09.16.16.53.35.248.0 ]--
r 83         if(connection.find(allTiles) == connection.)
--[ 2019.09.16.16.53.35.334.0 ]--
r 83         if(connection.find(allTiles) == connection.f)
--[ 2019.09.16.16.53.35.406.0 ]--
r 83         if(connection.find(allTiles) == connection.fi)
--[ 2019.09.16.16.53.35.453.0 ]--
r 83         if(connection.find(allTiles) == connection.fin)
--[ 2019.09.16.16.53.35.573.0 ]--
r 83         if(connection.find(allTiles) == connection.find)
--[ 2019.09.16.16.53.36.738.0 ]--
r 83         if(connection.find(allTiles) == connection.find())
--[ 2019.09.16.16.53.36.959.0 ]--
r 83         if(connection.find(allTiles) == connection.find(a))
--[ 2019.09.16.16.53.37.007.0 ]--
r 83         if(connection.find(allTiles) == connection.find(al))
--[ 2019.09.16.16.53.37.097.0 ]--
r 83         if(connection.find(allTiles) == connection.find(all))
--[ 2019.09.16.16.53.37.617.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allT))
--[ 2019.09.16.16.53.37.686.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTi))
--[ 2019.09.16.16.53.37.851.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTil))
--[ 2019.09.16.16.53.37.899.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTile))
--[ 2019.09.16.16.53.37.997.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTiles))
--[ 2019.09.16.16.53.38.131.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTiles ))
--[ 2019.09.16.16.53.38.427.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTiles +))
--[ 2019.09.16.16.53.38.543.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTiles + ))
--[ 2019.09.16.16.53.39.118.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTiles + 2))
--[ 2019.09.16.16.53.40.601.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTiles + 2)){
--[ 2019.09.16.16.53.40.788.0 ]--
+ 84 
+ 85 }
--[ 2019.09.16.16.53.40.856.0 ]--
r 85         }
--[ 2019.09.16.16.53.40.905.0 ]--
r 84             
--[ 2019.09.16.16.53.41.209.0 ]--
+ 84             
--[ 2019.09.16.16.53.41.435.0 ]--
r 85             }
--[ 2019.09.16.16.53.41.491.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTiles + 2)) {
--[ 2019.09.16.16.53.41.501.0 ]--
r 84 
r 85         }
--[ 2019.09.16.16.53.42.409.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTiles + 2)){
r 84             
r 85             }
--[ 2019.09.16.16.53.42.818.0 ]--
r 85             
--[ 2019.09.16.16.53.43.886.0 ]--
- 84
--[ 2019.09.16.16.53.44.969.0 ]--
r 84             r
--[ 2019.09.16.16.53.45.006.0 ]--
r 84             re
--[ 2019.09.16.16.53.45.127.0 ]--
r 84             ret
--[ 2019.09.16.16.53.45.202.0 ]--
r 84             retu
--[ 2019.09.16.16.53.45.278.0 ]--
r 84             retur
--[ 2019.09.16.16.53.45.331.0 ]--
r 84             return
--[ 2019.09.16.16.53.45.454.0 ]--
r 84             return 
--[ 2019.09.16.16.53.45.519.0 ]--
r 84             return t
--[ 2019.09.16.16.53.45.659.0 ]--
r 84             return tr
--[ 2019.09.16.16.53.45.727.0 ]--
r 84             return tru
--[ 2019.09.16.16.53.45.812.0 ]--
r 84             return true
--[ 2019.09.16.16.53.45.948.0 ]--
r 84             return true;
--[ 2019.09.16.16.53.49.205.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.54.14.679.0 ]--
r 83         if(connection.find(allTiles ) == connection.find(allTiles + 2)){
--[ 2019.09.16.16.54.14.725.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTiles + 2)){
--[ 2019.09.16.16.54.28.302.0 ]--
r 83         if(connection.find(allTiles ) == connection.find(allTiles + 2)){
--[ 2019.09.16.16.54.28.343.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTiles + 2)){
--[ 2019.09.16.16.54.32.032.0 ]--
r 82     public boolean hasPlayer1Won() { 
--[ 2019.09.16.16.54.32.069.0 ]--
r 82     public boolean hasPlayer1Won() {
--[ 2019.09.16.16.54.32.230.0 ]--
+ 83         
--[ 2019.09.16.16.54.32.949.0 ]--
r 83         p
--[ 2019.09.16.16.54.33.040.0 ]--
r 83         pr
--[ 2019.09.16.16.54.33.088.0 ]--
r 83         pri
--[ 2019.09.16.16.54.33.140.0 ]--
r 83         prin
--[ 2019.09.16.16.54.33.193.0 ]--
r 83         print
--[ 2019.09.16.16.54.33.315.0 ]--
r 83         print 
--[ 2019.09.16.16.54.33.432.0 ]--
r 83         print
--[ 2019.09.16.16.54.34.062.0 ]--
r 83         prin
--[ 2019.09.16.16.54.34.187.0 ]--
r 83         pri
--[ 2019.09.16.16.54.34.293.0 ]--
r 83         pr
--[ 2019.09.16.16.54.34.400.0 ]--
r 83         p
--[ 2019.09.16.16.54.34.520.0 ]--
r 83         
--[ 2019.09.16.16.54.35.652.0 ]--
r 83         S
--[ 2019.09.16.16.54.35.783.0 ]--
r 83         St
--[ 2019.09.16.16.54.35.943.0 ]--
r 83         Std
--[ 2019.09.16.16.54.36.118.0 ]--
r 83         StdO
--[ 2019.09.16.16.54.36.239.0 ]--
r 83         StdOu
--[ 2019.09.16.16.54.36.478.0 ]--
r 83         StdOut
--[ 2019.09.16.16.54.36.857.0 ]--
r 83         StdOut.
--[ 2019.09.16.16.54.37.035.0 ]--
r 83         StdOut.p
--[ 2019.09.16.16.54.37.141.0 ]--
r 83         StdOut.pr
--[ 2019.09.16.16.54.37.205.0 ]--
r 83         StdOut.pri
--[ 2019.09.16.16.54.37.255.0 ]--
r 83         StdOut.prin
--[ 2019.09.16.16.54.37.327.0 ]--
r 83         StdOut.print
--[ 2019.09.16.16.54.37.532.0 ]--
r 83         StdOut.print()
--[ 2019.09.16.16.54.37.538.0 ]--
r 83         StdOut.print();
--[ 2019.09.16.16.54.38.081.0 ]--
r 83         StdOut.print()
--[ 2019.09.16.16.54.38.202.0 ]--
r 83         StdOut.print(
--[ 2019.09.16.16.54.38.320.0 ]--
r 83         StdOut.print
--[ 2019.09.16.16.54.38.857.0 ]--
r 83         StdOut.printl
--[ 2019.09.16.16.54.38.890.0 ]--
r 83         StdOut.println
--[ 2019.09.16.16.54.39.279.0 ]--
r 83         StdOut.println()
--[ 2019.09.16.16.54.40.127.0 ]--
r 83         StdOut.println( )
--[ 2019.09.16.16.54.40.171.0 ]--
r 83         StdOut.println()
--[ 2019.09.16.16.54.43.983.0 ]--
r 83         StdOut.println(connection.find(allTiles))
--[ 2019.09.16.16.54.46.474.0 ]--
r 83         StdOut.println(connection.find(allTiles));
--[ 2019.09.16.16.54.47.316.0 ]--
r 83         StdOut.println(connection.find(allTiles))
--[ 2019.09.16.16.54.48.057.0 ]--
r 83         StdOut.println(connection.find(allTiles));
--[ 2019.09.16.16.54.51.484.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.55.08.333.0 ]--
r 83         
--[ 2019.09.16.16.55.08.570.0 ]--
- 83
--[ 2019.09.16.16.55.08.717.0 ]--
r 82     public boolean hasPlayer1Won() 
--[ 2019.09.16.16.55.09.447.0 ]--
+ 82     public boolean hasPlayer1Won() {
r 83         StdOut.println(connection.find(allTiles));
--[ 2019.09.16.16.55.10.268.0 ]--
r 83          
--[ 2019.09.16.16.55.10.323.0 ]--
r 83         
--[ 2019.09.16.16.55.10.785.0 ]--
- 83
--[ 2019.09.16.16.55.43.801.0 ]--
- 83
- 83
r 83        
--[ 2019.09.16.16.55.44.098.0 ]--
- 83
--[ 2019.09.16.16.55.44.657.0 ]--
r 82     public boolean hasPlayer1Won() { 
--[ 2019.09.16.16.55.45.090.0 ]--
r 82     public boolean hasPlayer1Won() {
--[ 2019.09.16.16.55.45.577.0 ]--
r 82     public boolean hasPlayer1Won() { 
--[ 2019.09.16.16.55.45.630.0 ]--
r 82     public boolean hasPlayer1Won() {
--[ 2019.09.16.16.55.46.016.0 ]--
+ 83         
--[ 2019.09.16.16.55.59.058.0 ]--
r 83         i
--[ 2019.09.16.16.55.59.178.0 ]--
r 83         if
--[ 2019.09.16.16.55.59.555.0 ]--
r 83         if()
--[ 2019.09.16.16.56.00.456.0 ]--
r 83         if(c)
--[ 2019.09.16.16.56.00.507.0 ]--
r 83         if(co)
--[ 2019.09.16.16.56.00.627.0 ]--
r 83         if(con)
--[ 2019.09.16.16.56.00.757.0 ]--
r 83         if(conn)
--[ 2019.09.16.16.56.00.785.0 ]--
r 83         if(conne)
--[ 2019.09.16.16.56.00.839.0 ]--
r 83         if(connec)
--[ 2019.09.16.16.56.01.022.0 ]--
r 83         if(connect)
--[ 2019.09.16.16.56.01.055.0 ]--
r 83         if(connecti)
--[ 2019.09.16.16.56.01.121.0 ]--
r 83         if(connectio)
--[ 2019.09.16.16.56.01.210.0 ]--
r 83         if(connection)
--[ 2019.09.16.16.56.01.379.0 ]--
r 83         if(connection.)
--[ 2019.09.16.16.56.01.507.0 ]--
r 83         if(connection.f)
--[ 2019.09.16.16.56.01.567.0 ]--
r 83         if(connection.fi)
--[ 2019.09.16.16.56.01.606.0 ]--
r 83         if(connection.fin)
--[ 2019.09.16.16.56.01.674.0 ]--
r 83         if(connection.find)
--[ 2019.09.16.16.56.01.871.0 ]--
r 83         if(connection.find())
--[ 2019.09.16.16.56.02.219.0 ]--
r 83         if(connection.find( ))
--[ 2019.09.16.16.56.02.293.0 ]--
r 83         if(connection.find())
--[ 2019.09.16.16.56.03.791.0 ]--
r 83         if(connection.find(a))
--[ 2019.09.16.16.56.03.821.0 ]--
r 83         if(connection.find(al))
--[ 2019.09.16.16.56.03.959.0 ]--
r 83         if(connection.find(all))
--[ 2019.09.16.16.56.04.219.0 ]--
r 83         if(connection.find(allT))
--[ 2019.09.16.16.56.04.332.0 ]--
r 83         if(connection.find(allTi))
--[ 2019.09.16.16.56.04.440.0 ]--
r 83         if(connection.find(allTil))
--[ 2019.09.16.16.56.04.476.0 ]--
r 83         if(connection.find(allTile))
--[ 2019.09.16.16.56.04.634.0 ]--
r 83         if(connection.find(allTiles))
--[ 2019.09.16.16.56.04.848.0 ]--
r 83         if(connection.find(allTiles ))
--[ 2019.09.16.16.56.04.953.0 ]--
r 83         if(connection.find(allTiles))
--[ 2019.09.16.16.56.06.260.0 ]--
r 83         if(connection.find())
--[ 2019.09.16.16.56.11.998.0 ]--
r 83         if(connection.find(a))
--[ 2019.09.16.16.56.12.128.0 ]--
r 83         if(connection.find(al))
--[ 2019.09.16.16.56.12.222.0 ]--
r 83         if(connection.find(all))
--[ 2019.09.16.16.56.12.464.0 ]--
r 83         if(connection.find(allT))
--[ 2019.09.16.16.56.12.540.0 ]--
r 83         if(connection.find(allTi))
--[ 2019.09.16.16.56.12.679.0 ]--
r 83         if(connection.find(allTil))
--[ 2019.09.16.16.56.12.731.0 ]--
r 83         if(connection.find(allTile))
--[ 2019.09.16.16.56.12.886.0 ]--
r 83         if(connection.find(allTiles))
--[ 2019.09.16.16.56.13.947.0 ]--
r 83         if(connection.find(allTiles+))
--[ 2019.09.16.16.56.15.359.0 ]--
r 83         if(connection.find(allTiles))
--[ 2019.09.16.16.56.16.680.0 ]--
r 83         if(connection.find(allTiles) )
--[ 2019.09.16.16.56.16.806.0 ]--
r 83         if(connection.find(allTiles) =)
--[ 2019.09.16.16.56.16.906.0 ]--
r 83         if(connection.find(allTiles) ==)
--[ 2019.09.16.16.56.16.986.0 ]--
r 83         if(connection.find(allTiles) == )
--[ 2019.09.16.16.56.17.962.0 ]--
r 83         if(connection.find(allTiles) == c)
--[ 2019.09.16.16.56.18.018.0 ]--
r 83         if(connection.find(allTiles) == co)
--[ 2019.09.16.16.56.18.133.0 ]--
r 83         if(connection.find(allTiles) == con)
--[ 2019.09.16.16.56.18.247.0 ]--
r 83         if(connection.find(allTiles) == conn)
--[ 2019.09.16.16.56.18.328.0 ]--
r 83         if(connection.find(allTiles) == conne)
--[ 2019.09.16.16.56.18.386.0 ]--
r 83         if(connection.find(allTiles) == connec)
--[ 2019.09.16.16.56.18.553.0 ]--
r 83         if(connection.find(allTiles) == connect)
--[ 2019.09.16.16.56.18.604.0 ]--
r 83         if(connection.find(allTiles) == connecti)
--[ 2019.09.16.16.56.18.671.0 ]--
r 83         if(connection.find(allTiles) == connectio)
--[ 2019.09.16.16.56.19.390.0 ]--
r 83         if(connection.find(allTiles) == connection)
--[ 2019.09.16.16.56.19.577.0 ]--
r 83         if(connection.find(allTiles) == connection.)
--[ 2019.09.16.16.56.19.723.0 ]--
r 83         if(connection.find(allTiles) == connection.f)
--[ 2019.09.16.16.56.19.802.0 ]--
r 83         if(connection.find(allTiles) == connection.fi)
--[ 2019.09.16.16.56.19.875.0 ]--
r 83         if(connection.find(allTiles) == connection.fin)
--[ 2019.09.16.16.56.19.986.0 ]--
r 83         if(connection.find(allTiles) == connection.find)
--[ 2019.09.16.16.56.20.991.0 ]--
r 83         if(connection.find(allTiles) == connection.find())
--[ 2019.09.16.16.56.22.305.0 ]--
r 83         if(connection.find(allTiles) == connection.find(a))
--[ 2019.09.16.16.56.22.400.0 ]--
r 83         if(connection.find(allTiles) == connection.find(al))
--[ 2019.09.16.16.56.23.058.0 ]--
r 83         if(connection.find(allTiles) == connection.find(all))
--[ 2019.09.16.16.56.23.232.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allT))
--[ 2019.09.16.16.56.23.263.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTi))
--[ 2019.09.16.16.56.23.440.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTil))
--[ 2019.09.16.16.56.23.478.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTile))
--[ 2019.09.16.16.56.23.763.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTiles))
--[ 2019.09.16.16.56.24.386.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTiles ))
--[ 2019.09.16.16.56.24.486.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTiles +))
--[ 2019.09.16.16.56.24.576.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTiles + ))
--[ 2019.09.16.16.56.24.742.0 ]--
r 83         if(connection.find(allTiles) == connection.find(allTiles + 3))
--[ 2019.09.16.16.56.27.123.0 ]--
r 83         if(connection.find(allTiles ) == connection.find(allTiles + 3))
--[ 2019.09.16.16.56.27.236.0 ]--
r 83         if(connection.find(allTiles +) == connection.find(allTiles + 3))
--[ 2019.09.16.16.56.27.288.0 ]--
r 83         if(connection.find(allTiles + ) == connection.find(allTiles + 3))
--[ 2019.09.16.16.56.27.904.0 ]--
r 83         if(connection.find(allTiles + 1) == connection.find(allTiles + 3))
--[ 2019.09.16.16.56.32.797.0 ]--
UpdateTree (AD): 0 1
- /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.32.797.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@1682bcde
--[ 2019.09.16.16.56.34.771.0 ]--
r 83         if(connection.find(allTiles + 1) == connection.find(allTiles + 3)){
--[ 2019.09.16.16.56.34.773.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.34.878.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.34.887.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.34.897.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.34.906.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.34.911.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.34.915.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.34.918.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.34.921.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.34.926.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.053.0 ]--
+ 84 
+ 85 }
--[ 2019.09.16.16.56.35.054.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.056.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.058.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.059.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.061.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.063.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.065.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.067.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.070.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.072.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.083.0 ]--
r 85         }
--[ 2019.09.16.16.56.35.083.1 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.086.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.126.0 ]--
r 84             
--[ 2019.09.16.16.56.35.127.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.128.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.636.0 ]--
r 84             r
--[ 2019.09.16.16.56.35.636.1 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.644.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.651.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.653.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.684.0 ]--
r 84             re
--[ 2019.09.16.16.56.35.684.1 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.687.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.801.0 ]--
r 84             ret
--[ 2019.09.16.16.56.35.801.1 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.804.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.880.0 ]--
r 84             retu
--[ 2019.09.16.16.56.35.880.1 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.882.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.984.0 ]--
r 84             retur
--[ 2019.09.16.16.56.35.988.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.35.997.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.36.033.0 ]--
r 84             return
--[ 2019.09.16.16.56.36.033.1 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.36.035.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.36.096.0 ]--
r 84             return 
--[ 2019.09.16.16.56.36.096.1 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.36.098.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.36.151.0 ]--
r 84             return t
--[ 2019.09.16.16.56.36.151.1 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.36.156.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.36.158.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.36.291.0 ]--
r 84             return tr
--[ 2019.09.16.16.56.36.292.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.36.297.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.36.382.0 ]--
r 84             return tru
--[ 2019.09.16.16.56.36.383.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.36.386.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.36.527.0 ]--
r 84             return true
--[ 2019.09.16.16.56.36.527.1 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.36.529.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.36.589.0 ]--
r 84             return true;
--[ 2019.09.16.16.56.36.589.1 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.36.591.0 ]--
UpdateTree (AD): 1 1
- /out/production/P01_Hex/HexBoard.class
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.40.208.0 ]--
UpdateTree (AD): 1 0
+ /out/production/P01_Hex/HexBoard.class

--[ 2019.09.16.16.56.40.208.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.56.54.737.0 ]--
r 84             return true; 
--[ 2019.09.16.16.56.54.761.0 ]--
r 84             return true;
--[ 2019.09.16.16.56.57.914.0 ]--
- 83
- 83
r 83         
--[ 2019.09.16.16.56.58.017.0 ]--
- 83
--[ 2019.09.16.16.57.06.810.0 ]--
r 74     
--[ 2019.09.16.16.57.06.964.0 ]--
r 74         
--[ 2019.09.16.16.57.07.147.0 ]--
r 74             
--[ 2019.09.16.16.57.07.261.0 ]--
r 74                 
--[ 2019.09.16.16.57.07.693.0 ]--
r 74             
--[ 2019.09.16.16.57.08.428.0 ]--
r 74              
--[ 2019.09.16.16.57.08.485.0 ]--
r 74             
--[ 2019.09.16.16.57.13.193.0 ]--
+ 76             
--[ 2019.09.16.16.57.13.215.0 ]--
r 77         if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
--[ 2019.09.16.16.57.14.234.0 ]--
r 77             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
--[ 2019.09.16.16.57.15.537.0 ]--
r 76         
--[ 2019.09.16.16.57.15.901.0 ]--
- 76
--[ 2019.09.16.16.57.17.150.0 ]--
+ 74             
--[ 2019.09.16.16.57.18.000.0 ]--
r 75             S
--[ 2019.09.16.16.57.18.175.0 ]--
r 75             St
--[ 2019.09.16.16.57.18.334.0 ]--
r 75             Std
--[ 2019.09.16.16.57.18.791.0 ]--
r 75             StdO
--[ 2019.09.16.16.57.18.997.0 ]--
r 75             StdOut
--[ 2019.09.16.16.57.19.283.0 ]--
r 75             StdOut.
--[ 2019.09.16.16.57.19.540.0 ]--
r 75             StdOut.p
--[ 2019.09.16.16.57.19.633.0 ]--
r 75             StdOut.pr
--[ 2019.09.16.16.57.19.709.0 ]--
r 75             StdOut.pri
--[ 2019.09.16.16.57.19.755.0 ]--
r 75             StdOut.prin
--[ 2019.09.16.16.57.19.818.0 ]--
r 75             StdOut.print
--[ 2019.09.16.16.57.20.740.0 ]--
r 75             StdOut.prin
--[ 2019.09.16.16.57.21.382.0 ]--
r 75             StdOut.println
--[ 2019.09.16.16.57.21.391.0 ]--
r 75             StdOut.println()
--[ 2019.09.16.16.57.21.396.0 ]--
r 75             StdOut.println();
--[ 2019.09.16.16.57.28.492.0 ]--
r 75             StdOut.println(r);
--[ 2019.09.16.16.57.28.586.0 ]--
r 75             StdOut.println(ro);
--[ 2019.09.16.16.57.28.667.0 ]--
r 75             StdOut.println(row);
--[ 2019.09.16.16.57.29.035.0 ]--
r 75             StdOut.println(row );
--[ 2019.09.16.16.57.29.117.0 ]--
r 75             StdOut.println(row);
--[ 2019.09.16.16.57.31.495.0 ]--
+ 76             
--[ 2019.09.16.16.57.32.206.0 ]--
r 76             S
--[ 2019.09.16.16.57.32.307.0 ]--
r 76             St
--[ 2019.09.16.16.57.32.453.0 ]--
r 76             Std
--[ 2019.09.16.16.57.32.692.0 ]--
r 76             Stdo
--[ 2019.09.16.16.57.33.124.0 ]--
r 76             StdOut
--[ 2019.09.16.16.57.33.316.0 ]--
r 76             StdOut.
--[ 2019.09.16.16.57.33.563.0 ]--
r 76             StdOut.p
--[ 2019.09.16.16.57.33.696.0 ]--
r 76             StdOut.pr
--[ 2019.09.16.16.57.33.775.0 ]--
r 76             StdOut.pri
--[ 2019.09.16.16.57.33.837.0 ]--
r 76             StdOut.prin
--[ 2019.09.16.16.57.33.933.0 ]--
r 76             StdOut.print
--[ 2019.09.16.16.57.34.821.0 ]--
r 76             StdOut.prin
--[ 2019.09.16.16.57.35.183.0 ]--
r 76             StdOut.println
--[ 2019.09.16.16.57.35.192.0 ]--
r 76             StdOut.println()
--[ 2019.09.16.16.57.35.197.0 ]--
r 76             StdOut.println();
--[ 2019.09.16.16.57.35.881.0 ]--
r 76             StdOut.println(p);
--[ 2019.09.16.16.57.35.985.0 ]--
r 76             StdOut.println(pl);
--[ 2019.09.16.16.57.36.010.0 ]--
r 76             StdOut.println(pla);
--[ 2019.09.16.16.57.36.049.0 ]--
r 76             StdOut.println(play);
--[ 2019.09.16.16.57.36.099.0 ]--
r 76             StdOut.println(playe);
--[ 2019.09.16.16.57.36.227.0 ]--
r 76             StdOut.println(player);
--[ 2019.09.16.16.57.38.038.0 ]--
r 74 
--[ 2019.09.16.16.57.39.778.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.16.58.16.312.0 ]--
- 75
- 75
--[ 2019.09.16.16.58.16.798.0 ]--
- 73
r 73             
--[ 2019.09.16.16.58.17.244.0 ]--
r 73                 
--[ 2019.09.16.16.58.18.050.0 ]--
+ 74             
--[ 2019.09.16.16.58.18.945.0 ]--
r 73 
--[ 2019.09.16.17.00.04.678.0 ]--
+ 74             
--[ 2019.09.16.17.00.07.514.0 ]--
r 75              
--[ 2019.09.16.17.00.07.615.0 ]--
r 75             
--[ 2019.09.16.17.00.08.269.0 ]--
r 75             s
--[ 2019.09.16.17.00.08.387.0 ]--
r 75             st
--[ 2019.09.16.17.00.08.534.0 ]--
r 75             std
--[ 2019.09.16.17.00.08.799.0 ]--
r 75             std.
--[ 2019.09.16.17.00.09.465.0 ]--
r 75             std
--[ 2019.09.16.17.00.09.675.0 ]--
r 75             st
--[ 2019.09.16.17.00.10.271.0 ]--
r 75             s
--[ 2019.09.16.17.00.10.381.0 ]--
r 75             
--[ 2019.09.16.17.00.10.507.0 ]--
r 75             S
--[ 2019.09.16.17.00.10.686.0 ]--
r 75             ST
--[ 2019.09.16.17.00.11.202.0 ]--
r 75             STD
--[ 2019.09.16.17.00.11.685.0 ]--
r 75             ST
--[ 2019.09.16.17.00.11.792.0 ]--
r 75             S
--[ 2019.09.16.17.00.12.118.0 ]--
r 75             
--[ 2019.09.16.17.00.12.355.0 ]--
r 75             S
--[ 2019.09.16.17.00.12.477.0 ]--
r 75             St
--[ 2019.09.16.17.00.12.645.0 ]--
r 75             Std
--[ 2019.09.16.17.00.13.403.0 ]--
r 75             StdOut
--[ 2019.09.16.17.00.13.956.0 ]--
r 75             StdOutp
--[ 2019.09.16.17.00.14.231.0 ]--
r 75             StdOut
--[ 2019.09.16.17.00.14.365.0 ]--
r 75             StdOut.
--[ 2019.09.16.17.00.14.519.0 ]--
r 75             StdOut.p
--[ 2019.09.16.17.00.15.213.0 ]--
r 75             StdOut.println
--[ 2019.09.16.17.00.15.218.0 ]--
r 75             StdOut.println()
--[ 2019.09.16.17.00.15.222.0 ]--
r 75             StdOut.println();
--[ 2019.09.16.17.00.31.566.0 ]--
r 75             StdOut;
--[ 2019.09.16.17.00.32.959.0 ]--
r 75             
--[ 2019.09.16.17.00.33.777.0 ]--
r 75              
--[ 2019.09.16.17.00.33.868.0 ]--
r 75             
--[ 2019.09.16.17.00.34.205.0 ]--
- 74
--[ 2019.09.16.17.00.34.804.0 ]--
- 73
--[ 2019.09.16.17.00.35.974.0 ]--
+ 73             
--[ 2019.09.16.17.00.49.120.0 ]--
r 83         return c;
--[ 2019.09.16.17.00.49.177.0 ]--
r 83         return co;
--[ 2019.09.16.17.00.49.273.0 ]--
r 83         return con;
--[ 2019.09.16.17.00.49.383.0 ]--
r 83         return conn;
--[ 2019.09.16.17.00.49.479.0 ]--
r 83         return conne;
--[ 2019.09.16.17.00.49.523.0 ]--
r 83         return connec;
--[ 2019.09.16.17.00.49.702.0 ]--
r 83         return connect;
--[ 2019.09.16.17.00.49.728.0 ]--
r 83         return connecti;
--[ 2019.09.16.17.00.49.815.0 ]--
r 83         return connectio;
--[ 2019.09.16.17.00.49.911.0 ]--
r 83         return connection;
--[ 2019.09.16.17.00.50.112.0 ]--
r 83         return connection.;
--[ 2019.09.16.17.00.51.374.0 ]--
r 83         return connection.c;
--[ 2019.09.16.17.00.51.407.0 ]--
r 83         return connection.co;
--[ 2019.09.16.17.00.51.666.0 ]--
r 83         return connection.con;
--[ 2019.09.16.17.00.51.791.0 ]--
r 83         return connection.conn;
--[ 2019.09.16.17.00.51.916.0 ]--
r 83         return connection.conne;
--[ 2019.09.16.17.00.52.055.0 ]--
r 83         return connection.connec;
--[ 2019.09.16.17.00.52.254.0 ]--
r 83         return connection.connect;
--[ 2019.09.16.17.00.52.324.0 ]--
r 83         return connection.connecte;
--[ 2019.09.16.17.00.52.462.0 ]--
r 83         return connection.connected;
--[ 2019.09.16.17.00.55.372.0 ]--
r 83         return connection.connected();
--[ 2019.09.16.17.01.33.409.0 ]--
r 83         return connection.connected(a);
--[ 2019.09.16.17.01.33.493.0 ]--
r 83         return connection.connected(al);
--[ 2019.09.16.17.01.33.590.0 ]--
r 83         return connection.connected(all);
--[ 2019.09.16.17.01.33.760.0 ]--
r 83         return connection.connected(allT);
--[ 2019.09.16.17.01.33.831.0 ]--
r 83         return connection.connected(allTi);
--[ 2019.09.16.17.01.33.981.0 ]--
r 83         return connection.connected(allTil);
--[ 2019.09.16.17.01.34.004.0 ]--
r 83         return connection.connected(allTile);
--[ 2019.09.16.17.01.34.153.0 ]--
r 83         return connection.connected(allTiles);
--[ 2019.09.16.17.01.34.496.0 ]--
r 83         return connection.connected(allTiles,);
--[ 2019.09.16.17.01.34.544.0 ]--
r 83         return connection.connected(allTiles, );
--[ 2019.09.16.17.01.34.883.0 ]--
r 83         return connection.connected(allTiles, a);
--[ 2019.09.16.17.01.34.920.0 ]--
r 83         return connection.connected(allTiles, al);
--[ 2019.09.16.17.01.35.031.0 ]--
r 83         return connection.connected(allTiles, all);
--[ 2019.09.16.17.01.35.221.0 ]--
r 83         return connection.connected(allTiles, allT);
--[ 2019.09.16.17.01.35.296.0 ]--
r 83         return connection.connected(allTiles, allTi);
--[ 2019.09.16.17.01.35.428.0 ]--
r 83         return connection.connected(allTiles, allTil);
--[ 2019.09.16.17.01.35.488.0 ]--
r 83         return connection.connected(allTiles, allTile);
--[ 2019.09.16.17.01.35.552.0 ]--
r 83         return connection.connected(allTiles, allTiles);
--[ 2019.09.16.17.01.35.961.0 ]--
r 83         return connection.connected(allTiles, allTiles+);
--[ 2019.09.16.17.01.36.392.0 ]--
r 83         return connection.connected(allTiles, allTiles+2);
--[ 2019.09.16.17.01.39.334.0 ]--
r 73 
r 74 
--[ 2019.09.16.17.01.40.934.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.01.56.055.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.02.47.020.0 ]--
r 83         return connection.connected(allTiles, allTiles+20);
--[ 2019.09.16.17.02.47.914.0 ]--
r 83         return connection.connected(allTiles, allTiles+2);
--[ 2019.09.16.17.02.53.572.0 ]--
r 83         return f;
--[ 2019.09.16.17.02.53.618.0 ]--
r 83         return fa;
--[ 2019.09.16.17.02.53.701.0 ]--
r 83         return fal;
--[ 2019.09.16.17.02.53.753.0 ]--
r 83         return fals;
--[ 2019.09.16.17.02.53.919.0 ]--
r 83         return false;
--[ 2019.09.16.17.02.54.411.0 ]--
r 83         return false ;
--[ 2019.09.16.17.02.54.490.0 ]--
r 83         return false;
--[ 2019.09.16.17.07.28.806.0 ]--
+ 67             
--[ 2019.09.16.17.07.28.817.0 ]--
r 67         
--[ 2019.09.16.17.07.30.104.0 ]--
+ 67         
--[ 2019.09.16.17.07.30.463.0 ]--
r 68          
--[ 2019.09.16.17.07.30.519.0 ]--
r 68         
--[ 2019.09.16.17.07.35.507.0 ]--
r 68         p
--[ 2019.09.16.17.07.36.391.0 ]--
r 68         
--[ 2019.09.16.17.07.36.508.0 ]--
r 68         S
--[ 2019.09.16.17.07.36.677.0 ]--
r 68         St
--[ 2019.09.16.17.07.36.844.0 ]--
r 68         Std
--[ 2019.09.16.17.07.37.034.0 ]--
r 68         StdO
--[ 2019.09.16.17.07.37.147.0 ]--
r 68         StdOut
--[ 2019.09.16.17.07.37.259.0 ]--
+ 69         
--[ 2019.09.16.17.07.37.266.0 ]--
r 69                 
--[ 2019.09.16.17.07.37.764.0 ]--
- 69
--[ 2019.09.16.17.07.37.860.0 ]--
r 68         StdOu
--[ 2019.09.16.17.07.38.515.0 ]--
r 68         StdOut
--[ 2019.09.16.17.07.38.589.0 ]--
r 68         StdOut.
--[ 2019.09.16.17.07.38.764.0 ]--
r 68         StdOut.p
--[ 2019.09.16.17.07.38.867.0 ]--
r 68         StdOut.pr
--[ 2019.09.16.17.07.38.920.0 ]--
r 68         StdOut.pri
--[ 2019.09.16.17.07.38.985.0 ]--
r 68         StdOut.prin
--[ 2019.09.16.17.07.39.068.0 ]--
r 68         StdOut.print
--[ 2019.09.16.17.07.39.588.0 ]--
r 68         StdOut.prin
--[ 2019.09.16.17.07.39.824.0 ]--
r 68         StdOut.println
--[ 2019.09.16.17.07.39.836.0 ]--
r 68         StdOut.println()
--[ 2019.09.16.17.07.39.843.0 ]--
r 68         StdOut.println();
--[ 2019.09.16.17.07.43.717.0 ]--
r 68         StdOut.println(c);
--[ 2019.09.16.17.07.43.749.0 ]--
r 68         StdOut.println(co);
--[ 2019.09.16.17.07.43.876.0 ]--
r 68         StdOut.println(col);
--[ 2019.09.16.17.07.44.177.0 ]--
r 68         StdOut.println(col+);
--[ 2019.09.16.17.07.45.385.0 ]--
r 68         StdOut.println(col+r);
--[ 2019.09.16.17.07.45.472.0 ]--
r 68         StdOut.println(col+ro);
--[ 2019.09.16.17.07.45.569.0 ]--
r 68         StdOut.println(col+row);
--[ 2019.09.16.17.07.47.001.0 ]--
r 68         StdOut.println(col+ro);
--[ 2019.09.16.17.07.47.094.0 ]--
r 68         StdOut.println(col+r);
--[ 2019.09.16.17.07.47.211.0 ]--
r 68         StdOut.println(col+);
--[ 2019.09.16.17.07.48.495.0 ]--
r 68         StdOut.println(col+());
--[ 2019.09.16.17.07.48.613.0 ]--
r 68         StdOut.println(col+(r));
--[ 2019.09.16.17.07.48.704.0 ]--
r 68         StdOut.println(col+(ro));
--[ 2019.09.16.17.07.48.789.0 ]--
r 68         StdOut.println(col+(row));
--[ 2019.09.16.17.07.49.297.0 ]--
r 68         StdOut.println(col+(row*));
--[ 2019.09.16.17.07.49.421.0 ]--
r 68         StdOut.println(col+(row*s));
--[ 2019.09.16.17.07.49.505.0 ]--
r 68         StdOut.println(col+(row*si));
--[ 2019.09.16.17.07.49.577.0 ]--
r 68         StdOut.println(col+(row*siz));
--[ 2019.09.16.17.07.49.749.0 ]--
r 68         StdOut.println(col+(row*size));
--[ 2019.09.16.17.07.50.351.0 ]--
r 68         StdOut.println(col+(row*size) );
--[ 2019.09.16.17.07.50.382.0 ]--
r 68         StdOut.println(col+(row*size));
--[ 2019.09.16.17.07.52.859.0 ]--
r 67 
--[ 2019.09.16.17.07.54.533.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.08.01.915.0 ]--
r 68         StdOut.println(Tcol+(row*size));
--[ 2019.09.16.17.08.01.982.0 ]--
r 68         StdOut.println(Ticol+(row*size));
--[ 2019.09.16.17.08.02.138.0 ]--
r 68         StdOut.println(Tilcol+(row*size));
--[ 2019.09.16.17.08.02.224.0 ]--
r 68         StdOut.println(Tilecol+(row*size));
--[ 2019.09.16.17.08.02.687.0 ]--
r 68         StdOut.println(Tilcol+(row*size));
--[ 2019.09.16.17.08.02.798.0 ]--
r 68         StdOut.println(Ticol+(row*size));
--[ 2019.09.16.17.08.02.914.0 ]--
r 68         StdOut.println(Tcol+(row*size));
--[ 2019.09.16.17.08.03.017.0 ]--
r 68         StdOut.println(col+(row*size));
--[ 2019.09.16.17.08.03.249.0 ]--
r 68         StdOut.println("col+(row*size));
--[ 2019.09.16.17.08.03.456.0 ]--
r 68         StdOut.println("Tcol+(row*size));
--[ 2019.09.16.17.08.03.574.0 ]--
r 68         StdOut.println("Ticol+(row*size));
--[ 2019.09.16.17.08.03.744.0 ]--
r 68         StdOut.println("Tilcol+(row*size));
--[ 2019.09.16.17.08.03.841.0 ]--
r 68         StdOut.println("Tilecol+(row*size));
--[ 2019.09.16.17.08.03.932.0 ]--
r 68         StdOut.println("Tile col+(row*size));
--[ 2019.09.16.17.08.05.210.0 ]--
r 68         StdOut.println("Tile #col+(row*size));
--[ 2019.09.16.17.08.05.336.0 ]--
r 68         StdOut.println("Tile #"col+(row*size));
--[ 2019.09.16.17.08.05.943.0 ]--
r 68         StdOut.println("Tile #" col+(row*size));
--[ 2019.09.16.17.08.06.082.0 ]--
r 68         StdOut.println("Tile #" +col+(row*size));
--[ 2019.09.16.17.08.06.172.0 ]--
r 68         StdOut.println("Tile #" + col+(row*size));
--[ 2019.09.16.17.08.23.808.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.08.48.667.0 ]--
r 68         StdOut.println("Tile # " + col+(row*size));
--[ 2019.09.16.17.08.48.712.0 ]--
r 68         StdOut.println("Tile #" + col+(row*size));
--[ 2019.09.16.17.08.48.910.0 ]--
r 68         StdOut.println("Tile " + col+(row*size));
--[ 2019.09.16.17.08.52.419.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.09.00.578.0 ]--
r 68         StdOut.println("col+(row*size));
--[ 2019.09.16.17.09.00.659.0 ]--
r 68         StdOut.println(col+(row*size));
--[ 2019.09.16.17.09.03.881.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.09.38.972.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.10.10.952.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.10.41.853.0 ]--
+ 69         
--[ 2019.09.16.17.10.42.451.0 ]--
r 69         S
--[ 2019.09.16.17.10.42.583.0 ]--
r 69         Sr
--[ 2019.09.16.17.10.42.748.0 ]--
r 69         Srd
--[ 2019.09.16.17.10.43.287.0 ]--
r 69         Sr
--[ 2019.09.16.17.10.43.375.0 ]--
r 69         S
--[ 2019.09.16.17.10.43.475.0 ]--
r 69         St
--[ 2019.09.16.17.10.44.288.0 ]--
r 69         StD
--[ 2019.09.16.17.10.44.524.0 ]--
r 69         St
--[ 2019.09.16.17.10.44.596.0 ]--
r 69         Std
--[ 2019.09.16.17.10.44.936.0 ]--
r 69         StdO
--[ 2019.09.16.17.10.45.050.0 ]--
r 69         StdOut
--[ 2019.09.16.17.10.45.880.0 ]--
r 69         StdOut,
--[ 2019.09.16.17.10.46.387.0 ]--
r 69         StdOut,o
--[ 2019.09.16.17.10.46.801.0 ]--
r 69         StdOut,
--[ 2019.09.16.17.10.46.884.0 ]--
r 69         StdOut
--[ 2019.09.16.17.10.47.069.0 ]--
r 69         StdOut.
--[ 2019.09.16.17.10.47.192.0 ]--
r 69         StdOut.p
--[ 2019.09.16.17.10.47.793.0 ]--
r 69         StdOut.println
--[ 2019.09.16.17.10.47.799.0 ]--
r 69         StdOut.println()
--[ 2019.09.16.17.10.47.802.0 ]--
r 69         StdOut.println();
--[ 2019.09.16.17.10.48.468.0 ]--
r 69         StdOut.println(());
--[ 2019.09.16.17.10.48.603.0 ]--
r 69         StdOut.println((c));
--[ 2019.09.16.17.10.48.882.0 ]--
r 69         StdOut.println((cl));
--[ 2019.09.16.17.10.49.303.0 ]--
r 69         StdOut.println((c));
--[ 2019.09.16.17.10.49.771.0 ]--
r 69         StdOut.println((co));
--[ 2019.09.16.17.10.50.235.0 ]--
r 69         StdOut.println((col));
--[ 2019.09.16.17.10.52.000.0 ]--
+ 70         
--[ 2019.09.16.17.10.52.324.0 ]--
r 70         P
--[ 2019.09.16.17.10.52.575.0 ]--
r 70         
--[ 2019.09.16.17.10.52.701.0 ]--
r 70         S
--[ 2019.09.16.17.10.52.894.0 ]--
r 70         St
--[ 2019.09.16.17.10.53.576.0 ]--
r 70         Std
--[ 2019.09.16.17.10.53.737.0 ]--
r 70         StdO
--[ 2019.09.16.17.10.54.360.0 ]--
r 70         StdOut
--[ 2019.09.16.17.10.54.758.0 ]--
r 70         StdOut.
--[ 2019.09.16.17.10.55.251.0 ]--
r 70         StdOut.r
--[ 2019.09.16.17.10.55.632.0 ]--
r 70         StdOut.
--[ 2019.09.16.17.10.55.846.0 ]--
r 70         StdOut.p
--[ 2019.09.16.17.10.55.904.0 ]--
r 70         StdOut.pr
--[ 2019.09.16.17.10.55.996.0 ]--
r 70         StdOut.pri
--[ 2019.09.16.17.10.56.046.0 ]--
r 70         StdOut.prin
--[ 2019.09.16.17.10.56.570.0 ]--
r 70         StdOut.println
--[ 2019.09.16.17.10.56.579.0 ]--
r 70         StdOut.println()
--[ 2019.09.16.17.10.56.584.0 ]--
r 70         StdOut.println();
--[ 2019.09.16.17.10.57.226.0 ]--
r 70         StdOut.println(());
--[ 2019.09.16.17.10.57.352.0 ]--
r 70         StdOut.println((r));
--[ 2019.09.16.17.10.57.443.0 ]--
r 70         StdOut.println((ro));
--[ 2019.09.16.17.10.57.524.0 ]--
r 70         StdOut.println((row));
--[ 2019.09.16.17.11.01.162.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.11.21.226.0 ]--
- 68
- 68
r 68         
--[ 2019.09.16.17.11.21.429.0 ]--
- 67
--[ 2019.09.16.17.11.22.134.0 ]--
r 67          
--[ 2019.09.16.17.11.22.193.0 ]--
r 67         
--[ 2019.09.16.17.11.29.553.0 ]--
+ 67         
--[ 2019.09.16.17.11.30.239.0 ]--
r 68             
--[ 2019.09.16.17.11.30.528.0 ]--
r 68         
--[ 2019.09.16.17.11.30.869.0 ]--
r 68         s
--[ 2019.09.16.17.11.31.006.0 ]--
r 68         st
--[ 2019.09.16.17.11.31.759.0 ]--
r 68         s
--[ 2019.09.16.17.11.31.839.0 ]--
r 68         
--[ 2019.09.16.17.11.31.940.0 ]--
r 68         S
--[ 2019.09.16.17.11.32.097.0 ]--
r 68         St
--[ 2019.09.16.17.11.32.629.0 ]--
r 68         Std
--[ 2019.09.16.17.11.32.990.0 ]--
r 68         StdO
--[ 2019.09.16.17.11.33.215.0 ]--
r 68         StdOut
--[ 2019.09.16.17.11.34.114.0 ]--
r 68         StdOut.
--[ 2019.09.16.17.11.34.570.0 ]--
r 68         StdOut.''
--[ 2019.09.16.17.11.35.038.0 ]--
r 68         StdOut.
--[ 2019.09.16.17.11.35.217.0 ]--
r 68         StdOut.p
--[ 2019.09.16.17.11.35.737.0 ]--
r 68         StdOut.println
--[ 2019.09.16.17.11.35.761.0 ]--
r 68         StdOut.println()
--[ 2019.09.16.17.11.35.778.0 ]--
r 68         StdOut.println();
--[ 2019.09.16.17.11.37.194.0 ]--
r 68         StdOut.println(c);
--[ 2019.09.16.17.11.37.283.0 ]--
r 68         StdOut.println(co);
--[ 2019.09.16.17.11.37.377.0 ]--
r 68         StdOut.println(col);
--[ 2019.09.16.17.11.37.933.0 ]--
r 68         StdOut.println(col );
--[ 2019.09.16.17.11.38.029.0 ]--
r 68         StdOut.println(col -);
--[ 2019.09.16.17.11.38.090.0 ]--
r 68         StdOut.println(col - );
--[ 2019.09.16.17.11.38.600.0 ]--
r 68         StdOut.println(col - 1);
--[ 2019.09.16.17.11.38.976.0 ]--
r 68         StdOut.println(col - 1 );
--[ 2019.09.16.17.11.38.996.0 ]--
r 68         StdOut.println(col - 1 +);
--[ 2019.09.16.17.11.39.055.0 ]--
r 68         StdOut.println(col - 1 + );
--[ 2019.09.16.17.11.39.176.0 ]--
r 68         StdOut.println(col - 1 + r);
--[ 2019.09.16.17.11.39.288.0 ]--
r 68         StdOut.println(col - 1 + ro);
--[ 2019.09.16.17.11.39.338.0 ]--
r 68         StdOut.println(col - 1 + row);
--[ 2019.09.16.17.11.39.831.0 ]--
r 68         StdOut.println(col - 1 + row*);
--[ 2019.09.16.17.11.40.324.0 ]--
r 68         StdOut.println(col - 1 + row*i);
--[ 2019.09.16.17.11.40.727.0 ]--
r 68         StdOut.println(col - 1 + row*);
--[ 2019.09.16.17.11.40.755.0 ]--
r 68         StdOut.println(col - 1 + row*i);
--[ 2019.09.16.17.11.40.809.0 ]--
r 68         StdOut.println(col - 1 + row*iz);
--[ 2019.09.16.17.11.40.989.0 ]--
r 68         StdOut.println(col - 1 + row*i);
--[ 2019.09.16.17.11.41.084.0 ]--
r 68         StdOut.println(col - 1 + row*);
--[ 2019.09.16.17.11.41.455.0 ]--
r 68         StdOut.println(col - 1 + row*si);
--[ 2019.09.16.17.11.41.479.0 ]--
r 68         StdOut.println(col - 1 + row*siz);
--[ 2019.09.16.17.11.41.649.0 ]--
r 68         StdOut.println(col - 1 + row*size);
--[ 2019.09.16.17.11.44.306.0 ]--
r 68         StdOut.println(col - 1 + row*size) ;
--[ 2019.09.16.17.11.44.347.0 ]--
r 68         StdOut.println(col - 1 + row*size);
--[ 2019.09.16.17.11.46.082.0 ]--
r 67 
--[ 2019.09.16.17.11.47.816.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.12.13.582.0 ]--
r 68         ;
--[ 2019.09.16.17.12.14.430.0 ]--
r 68         
--[ 2019.09.16.17.12.14.681.0 ]--
- 67
--[ 2019.09.16.17.12.14.851.0 ]--
- 67
--[ 2019.09.16.17.12.15.231.0 ]--
r 66             //Connect set tile to all tiles around it 
--[ 2019.09.16.17.12.15.295.0 ]--
r 66             //Connect set tile to all tiles around it
--[ 2019.09.16.17.12.38.447.0 ]--
+ 83         
--[ 2019.09.16.17.12.42.428.0 ]--
r 83          
--[ 2019.09.16.17.12.42.503.0 ]--
r 83         
--[ 2019.09.16.17.12.43.283.0 ]--
r 83         i
--[ 2019.09.16.17.12.43.363.0 ]--
r 83         if
--[ 2019.09.16.17.12.43.378.0 ]--
r 83         ife
--[ 2019.09.16.17.12.43.974.0 ]--
r 83         if
--[ 2019.09.16.17.12.44.105.0 ]--
r 83         if)
--[ 2019.09.16.17.12.44.552.0 ]--
r 83         if
--[ 2019.09.16.17.12.44.713.0 ]--
r 83         if()
--[ 2019.09.16.17.12.45.985.0 ]--
r 83         if(c)
--[ 2019.09.16.17.12.46.040.0 ]--
r 83         if(co)
--[ 2019.09.16.17.12.46.167.0 ]--
r 83         if(con)
--[ 2019.09.16.17.12.46.286.0 ]--
r 83         if(conn)
--[ 2019.09.16.17.12.46.352.0 ]--
r 83         if(conne)
--[ 2019.09.16.17.12.46.409.0 ]--
r 83         if(connec)
--[ 2019.09.16.17.12.46.588.0 ]--
r 83         if(connect)
--[ 2019.09.16.17.12.46.631.0 ]--
r 83         if(connecti)
--[ 2019.09.16.17.12.46.689.0 ]--
r 83         if(connectio)
--[ 2019.09.16.17.12.46.800.0 ]--
r 83         if(connection)
--[ 2019.09.16.17.12.46.997.0 ]--
r 83         if(connection.)
--[ 2019.09.16.17.12.47.435.0 ]--
r 83         if(connection.f)
--[ 2019.09.16.17.12.47.564.0 ]--
r 83         if(connection.fin)
--[ 2019.09.16.17.12.47.836.0 ]--
r 83         if(connection.find)
--[ 2019.09.16.17.12.48.461.0 ]--
r 83         if(connection.fin)
--[ 2019.09.16.17.12.48.580.0 ]--
r 83         if(connection.fi)
--[ 2019.09.16.17.12.48.688.0 ]--
r 83         if(connection.f)
--[ 2019.09.16.17.12.48.973.0 ]--
r 83         if(connection.)
--[ 2019.09.16.17.12.49.193.0 ]--
r 83         if(connection.c)
--[ 2019.09.16.17.12.49.245.0 ]--
r 83         if(connection.co)
--[ 2019.09.16.17.12.50.556.0 ]--
r 83         if(connection.con)
--[ 2019.09.16.17.12.50.657.0 ]--
r 83         if(connection.conn)
--[ 2019.09.16.17.12.50.945.0 ]--
r 83         if(connection.conne)
--[ 2019.09.16.17.12.51.027.0 ]--
r 83         if(connection.connec)
--[ 2019.09.16.17.12.51.236.0 ]--
r 83         if(connection.connect)
--[ 2019.09.16.17.12.51.279.0 ]--
r 83         if(connection.connecte)
--[ 2019.09.16.17.12.51.425.0 ]--
r 83         if(connection.connected)
--[ 2019.09.16.17.12.51.992.0 ]--
r 83         if(connection.connected )
--[ 2019.09.16.17.12.52.062.0 ]--
r 83         if(connection.connected)
--[ 2019.09.16.17.12.53.815.0 ]--
r 83         if
--[ 2019.09.16.17.12.53.991.0 ]--
r 83         i
--[ 2019.09.16.17.12.54.307.0 ]--
r 83         
--[ 2019.09.16.17.12.54.410.0 ]--
- 83
--[ 2019.09.16.17.12.56.368.0 ]--
r 83         return t;
--[ 2019.09.16.17.12.57.071.0 ]--
r 83         return ;
--[ 2019.09.16.17.12.57.409.0 ]--
r 83         return c;
--[ 2019.09.16.17.12.57.522.0 ]--
r 83         return co;
--[ 2019.09.16.17.12.57.843.0 ]--
r 83         return con;
--[ 2019.09.16.17.12.57.886.0 ]--
r 83         return conn;
--[ 2019.09.16.17.12.57.940.0 ]--
r 83         return conne;
--[ 2019.09.16.17.12.58.007.0 ]--
r 83         return connec;
--[ 2019.09.16.17.12.58.190.0 ]--
r 83         return connect;
--[ 2019.09.16.17.12.58.248.0 ]--
r 83         return connecti;
--[ 2019.09.16.17.12.58.284.0 ]--
r 83         return connectio;
--[ 2019.09.16.17.12.58.371.0 ]--
r 83         return connection;
--[ 2019.09.16.17.12.58.661.0 ]--
r 83         return connection.;
--[ 2019.09.16.17.12.59.639.0 ]--
r 83         return connection.connected;
--[ 2019.09.16.17.12.59.647.0 ]--
r 83         return connection.connected();
--[ 2019.09.16.17.13.05.658.0 ]--
r 83         return connection.connected(A);
--[ 2019.09.16.17.13.06.057.0 ]--
r 83         return connection.connected();
--[ 2019.09.16.17.13.06.184.0 ]--
r 83         return connection.connected(a);
--[ 2019.09.16.17.13.06.366.0 ]--
r 83         return connection.connected(al);
--[ 2019.09.16.17.13.06.943.0 ]--
r 83         return connection.connected(all);
--[ 2019.09.16.17.13.07.235.0 ]--
r 83         return connection.connected(allT);
--[ 2019.09.16.17.13.07.250.0 ]--
r 83         return connection.connected(allTi);
--[ 2019.09.16.17.13.07.400.0 ]--
r 83         return connection.connected(allTil);
--[ 2019.09.16.17.13.07.426.0 ]--
r 83         return connection.connected(allTile);
--[ 2019.09.16.17.13.07.588.0 ]--
r 83         return connection.connected(allTiles);
--[ 2019.09.16.17.13.12.995.0 ]--
r 83         return connection.connected(allTiles,);
--[ 2019.09.16.17.13.13.162.0 ]--
r 83         return connection.connected(allTiles, );
--[ 2019.09.16.17.13.25.639.0 ]--
r 83         return connection.connected(allTiles, a);
--[ 2019.09.16.17.13.25.722.0 ]--
r 83         return connection.connected(allTiles, al);
--[ 2019.09.16.17.13.25.821.0 ]--
r 83         return connection.connected(allTiles, all);
--[ 2019.09.16.17.13.26.022.0 ]--
r 83         return connection.connected(allTiles, allT);
--[ 2019.09.16.17.13.26.053.0 ]--
r 83         return connection.connected(allTiles, allTI);
--[ 2019.09.16.17.13.26.197.0 ]--
r 83         return connection.connected(allTiles, allTIl);
--[ 2019.09.16.17.13.26.245.0 ]--
r 83         return connection.connected(allTiles, allTIle);
--[ 2019.09.16.17.13.26.390.0 ]--
r 83         return connection.connected(allTiles, allTIles);
--[ 2019.09.16.17.13.26.725.0 ]--
r 83         return connection.connected(allTiles, allTIle);
--[ 2019.09.16.17.13.26.847.0 ]--
r 83         return connection.connected(allTiles, allTIl);
--[ 2019.09.16.17.13.26.958.0 ]--
r 83         return connection.connected(allTiles, allTI);
--[ 2019.09.16.17.13.27.149.0 ]--
r 83         return connection.connected(allTiles, allT);
--[ 2019.09.16.17.13.27.838.0 ]--
r 83         return connection.connected(allTiles, allTi);
--[ 2019.09.16.17.13.27.979.0 ]--
r 83         return connection.connected(allTiles, allTil);
--[ 2019.09.16.17.13.28.005.0 ]--
r 83         return connection.connected(allTiles, allTile);
--[ 2019.09.16.17.13.28.179.0 ]--
r 83         return connection.connected(allTiles, allTiles);
--[ 2019.09.16.17.13.28.197.0 ]--
r 83         return connection.connected(allTiles, allTiles );
--[ 2019.09.16.17.13.28.314.0 ]--
r 83         return connection.connected(allTiles, allTiles +);
--[ 2019.09.16.17.13.28.381.0 ]--
r 83         return connection.connected(allTiles, allTiles + );
--[ 2019.09.16.17.13.29.652.0 ]--
r 83         return connection.connected(allTiles, allTiles + 2);
--[ 2019.09.16.17.13.31.739.0 ]--
r 83         return connection.connected(allTiles, allTiles + 2 );
--[ 2019.09.16.17.13.31.819.0 ]--
r 83         return connection.connected(allTiles, allTiles + 2);
--[ 2019.09.16.17.14.05.857.0 ]--
r 83         return connection.connected(allTiles, allTiles + );
--[ 2019.09.16.17.14.05.917.0 ]--
r 83         return connection.connected(allTiles, allTiles + 1);
--[ 2019.09.16.17.14.09.569.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.14.31.330.0 ]--
r 83         return connection.connected(allTiles, allTiles + );
--[ 2019.09.16.17.14.31.408.0 ]--
r 83         return connection.connected(allTiles, allTiles + 2);
--[ 2019.09.16.17.14.31.704.0 ]--
r 83         return connection.connected(allTiles, allTiles + 2 );
--[ 2019.09.16.17.14.31.814.0 ]--
r 83         return connection.connected(allTiles, allTiles + 2);
--[ 2019.09.16.17.14.39.855.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.15.34.090.0 ]--
r 74     
--[ 2019.09.16.17.15.34.249.0 ]--
r 74         
--[ 2019.09.16.17.15.34.396.0 ]--
r 74             
--[ 2019.09.16.17.15.34.856.0 ]--
r 74              
--[ 2019.09.16.17.15.34.912.0 ]--
r 74             
--[ 2019.09.16.17.15.35.477.0 ]--
+ 74             
--[ 2019.09.16.17.15.46.316.0 ]--
- 74
--[ 2019.09.16.17.15.47.087.0 ]--
- 73
--[ 2019.09.16.17.15.47.496.0 ]--
+ 73             
--[ 2019.09.16.17.15.47.952.0 ]--
- 73
--[ 2019.09.16.17.15.48.429.0 ]--
+ 73             
--[ 2019.09.16.17.15.50.515.0 ]--
r 74         s    
--[ 2019.09.16.17.15.50.562.0 ]--
r 74         st    
--[ 2019.09.16.17.15.51.130.0 ]--
r 74         s    
--[ 2019.09.16.17.15.51.207.0 ]--
r 74             
--[ 2019.09.16.17.15.51.335.0 ]--
r 74         S    
--[ 2019.09.16.17.15.51.429.0 ]--
r 74         St    
--[ 2019.09.16.17.15.51.615.0 ]--
r 74         Std    
--[ 2019.09.16.17.15.51.787.0 ]--
r 74         StdO    
--[ 2019.09.16.17.15.52.336.0 ]--
r 74         StdOut    
--[ 2019.09.16.17.15.53.218.0 ]--
r 74         StdOut.    
--[ 2019.09.16.17.15.53.358.0 ]--
r 74         StdOut.p    
--[ 2019.09.16.17.15.53.851.0 ]--
r 74         StdOut.println    
--[ 2019.09.16.17.15.53.861.0 ]--
r 74         StdOut.println()    
--[ 2019.09.16.17.15.53.865.0 ]--
r 74         StdOut.println();    
--[ 2019.09.16.17.15.55.388.0 ]--
r 74         StdOut.println(r);    
--[ 2019.09.16.17.15.55.470.0 ]--
r 74         StdOut.println(ro);    
--[ 2019.09.16.17.15.55.535.0 ]--
r 74         StdOut.println(row);    
--[ 2019.09.16.17.15.56.785.0 ]--
r 74         StdOut.println(Rrow);    
--[ 2019.09.16.17.15.56.871.0 ]--
r 74         StdOut.println(Rorow);    
--[ 2019.09.16.17.15.56.937.0 ]--
r 74         StdOut.println(Rowrow);    
--[ 2019.09.16.17.15.57.466.0 ]--
r 74         StdOut.println(Rorow);    
--[ 2019.09.16.17.15.57.534.0 ]--
r 74         StdOut.println(Rrow);    
--[ 2019.09.16.17.15.57.639.0 ]--
r 74         StdOut.println(row);    
--[ 2019.09.16.17.15.57.820.0 ]--
r 74         StdOut.println("row);    
--[ 2019.09.16.17.15.58.113.0 ]--
r 74         StdOut.println("Rrow);    
--[ 2019.09.16.17.15.58.232.0 ]--
r 74         StdOut.println("Rorow);    
--[ 2019.09.16.17.15.58.313.0 ]--
r 74         StdOut.println("Rowrow);    
--[ 2019.09.16.17.15.58.726.0 ]--
r 74         StdOut.println("Row"row);    
--[ 2019.09.16.17.15.59.098.0 ]--
r 74         StdOut.println("Row" row);    
--[ 2019.09.16.17.15.59.148.0 ]--
r 74         StdOut.println("Row" +row);    
--[ 2019.09.16.17.15.59.225.0 ]--
r 74         StdOut.println("Row" + row);    
--[ 2019.09.16.17.16.01.490.0 ]--
r 73 
r 74         StdOut.println("Row" + row);
--[ 2019.09.16.17.16.03.095.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.16.11.669.0 ]--
r 74         StdOut.println("Row:" + row);
--[ 2019.09.16.17.16.12.902.0 ]--
r 74         StdOut.println("Row: " + row);
--[ 2019.09.16.17.16.17.127.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.18.52.583.0 ]--
- 20
- 20
- 20
- 20
- 20
- 20
- 20
- 20
- 20
- 20
- 20
- 20
- 20
r 20         
--[ 2019.09.16.17.18.53.374.0 ]--
- 20
--[ 2019.09.16.17.19.28.257.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.20.05.399.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.23.58.912.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.24.35.287.0 ]--
r 61             if(player == 1 && row == 0){connection.union(col + (row*size), allTiles+); } //Connect to red's north west edge
--[ 2019.09.16.17.24.35.755.0 ]--
r 61             if(player == 1 && row == 0){connection.union(col + (row*size), allTiles+1); } //Connect to red's north west edge
--[ 2019.09.16.17.24.38.370.0 ]--
r 62             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+); } //Connect to red's south east edge
--[ 2019.09.16.17.24.38.440.0 ]--
r 62             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+3); } //Connect to red's south east edge
--[ 2019.09.16.17.24.40.248.0 ]--
r 63             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+); } //Connect to blue's north east edge
--[ 2019.09.16.17.24.40.532.0 ]--
r 63             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles); } //Connect to blue's north east edge
--[ 2019.09.16.17.24.44.615.0 ]--
r 64             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+); } //Connect to blue's south west edge
--[ 2019.09.16.17.24.44.689.0 ]--
r 64             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to blue's south west edge
--[ 2019.09.16.17.24.50.583.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.25.01.459.0 ]--
r 64             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+); } //Connect to blue's south west edge
--[ 2019.09.16.17.25.01.809.0 ]--
r 64             if(player == 2 && col == size+1){connection.union((col + (row*size)), allTiles+3); } //Connect to blue's south west edge
--[ 2019.09.16.17.25.02.566.0 ]--
r 63             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blue's north east edge
--[ 2019.09.16.17.25.03.336.0 ]--
r 62             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+); } //Connect to red's south east edge
--[ 2019.09.16.17.25.03.722.0 ]--
r 62             if(player == 1 && row == size+1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
--[ 2019.09.16.17.25.04.370.0 ]--
r 61             if(player == 1 && row == 0){connection.union(col + (row*size), allTiles); } //Connect to red's north west edge
--[ 2019.09.16.17.25.19.333.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.17.27.02.306.0 ]--
+ 61             
--[ 2019.09.16.17.27.03.003.0 ]--
- 61
--[ 2019.09.16.17.27.03.725.0 ]--
+ 61             
--[ 2019.09.16.17.27.05.243.0 ]--
r 61         S    
--[ 2019.09.16.17.27.05.447.0 ]--
r 61         St    
--[ 2019.09.16.17.27.06.089.0 ]--
r 61         Std    
--[ 2019.09.16.17.27.06.656.0 ]--
r 61         StdOut    
--[ 2019.09.16.17.27.07.462.0 ]--
r 61         StdOut.    
--[ 2019.09.16.17.27.07.726.0 ]--
r 61         StdOut.p    
--[ 2019.09.16.17.27.08.201.0 ]--
r 61         StdOut.println    
--[ 2019.09.16.17.27.08.211.0 ]--
r 61         StdOut.println()    
--[ 2019.09.16.17.27.08.218.0 ]--
r 61         StdOut.println();    
--[ 2019.09.16.17.27.09.138.0 ]--
r 61         StdOut.println(C);    
--[ 2019.09.16.17.27.09.758.0 ]--
r 61         StdOut.println();    
--[ 2019.09.16.17.27.09.925.0 ]--
r 61         StdOut.println("");    
--[ 2019.09.16.17.27.10.091.0 ]--
r 61         StdOut.println("C");    
--[ 2019.09.16.17.27.10.221.0 ]--
r 61         StdOut.println("Co");    
--[ 2019.09.16.17.27.10.358.0 ]--
r 61         StdOut.println("Col");    
--[ 2019.09.16.17.27.10.781.0 ]--
r 61         StdOut.println("Col:");    
--[ 2019.09.16.17.27.11.925.0 ]--
r 61         StdOut.println("Col: ");    
--[ 2019.09.16.17.27.12.771.0 ]--
r 61         StdOut.println("Col: " );    
--[ 2019.09.16.17.27.12.944.0 ]--
r 61         StdOut.println("Col: " +);    
--[ 2019.09.16.17.27.13.126.0 ]--
r 61         StdOut.println("Col: " + );    
--[ 2019.09.16.17.27.13.194.0 ]--
r 61         StdOut.println("Col: " + c);    
--[ 2019.09.16.17.27.13.248.0 ]--
r 61         StdOut.println("Col: " + co);    
--[ 2019.09.16.17.27.13.429.0 ]--
r 61         StdOut.println("Col: " + col);    
--[ 2019.09.16.17.27.21.656.0 ]--
r 61         StdOut.println("Col: " + col);
--[ 2019.09.16.18.05.31.173.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.05.52.529.0 ]--
r 62             if(player == 1 && c == 0){connection.union(col + (row*size), allTiles); } //Connect to red's north west edge
--[ 2019.09.16.18.05.52.648.0 ]--
r 62             if(player == 1 && co == 0){connection.union(col + (row*size), allTiles); } //Connect to red's north west edge
--[ 2019.09.16.18.05.52.856.0 ]--
r 62             if(player == 1 && col == 0){connection.union(col + (row*size), allTiles); } //Connect to red's north west edge
--[ 2019.09.16.18.06.14.172.0 ]--
r 63             if(player == 1 && row == s){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
--[ 2019.09.16.18.06.14.261.0 ]--
r 63             if(player == 1 && row == si){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
--[ 2019.09.16.18.06.14.330.0 ]--
r 63             if(player == 1 && row == siz){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
--[ 2019.09.16.18.06.14.482.0 ]--
r 63             if(player == 1 && row == size){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
--[ 2019.09.16.18.06.15.496.0 ]--
r 63             if(player == 1 && row == size-){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
--[ 2019.09.16.18.06.15.570.0 ]--
r 63             if(player == 1 && row == size-1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
--[ 2019.09.16.18.06.16.540.0 ]--
r 63             if(player == 1 && row == size-1 ){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
--[ 2019.09.16.18.06.16.602.0 ]--
r 63             if(player == 1 && row == size-1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
--[ 2019.09.16.18.07.59.497.0 ]--
r 64             if(player == 2 && col == 0 ){connection.union((col + (row*size)), allTiles+1); } //Connect to blue's north east edge
--[ 2019.09.16.18.07.59.526.0 ]--
r 64             if(player == 2 && col == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blue's north east edge
--[ 2019.09.16.18.08.06.131.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.08.41.474.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.09.05.199.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.10.43.316.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.11.06.556.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.11.12.878.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.11.37.919.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.11.58.361.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.12.06.398.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.12.47.074.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.13.18.219.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.13.37.643.0 ]--
r 63             if(player == 1 && c == size-1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
--[ 2019.09.16.18.13.37.733.0 ]--
r 63             if(player == 1 && co == size-1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
--[ 2019.09.16.18.13.37.857.0 ]--
r 63             if(player == 1 && col == size-1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
--[ 2019.09.16.18.13.38.031.0 ]--
r 63             if(player == 1 && col  == size-1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
--[ 2019.09.16.18.13.38.080.0 ]--
r 63             if(player == 1 && col == size-1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
--[ 2019.09.16.18.13.49.374.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.13.57.844.0 ]--
r 64             if(player == 2 && r == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blue's north east edge
--[ 2019.09.16.18.13.57.938.0 ]--
r 64             if(player == 2 && ro == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blue's north east edge
--[ 2019.09.16.18.13.57.967.0 ]--
r 64             if(player == 2 && row == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blue's north east edge
--[ 2019.09.16.18.14.02.283.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.14.13.004.0 ]--
r 65             if(player == 2 && r == size+1){connection.union((col + (row*size)), allTiles+3); } //Connect to blue's south west edge
--[ 2019.09.16.18.14.13.097.0 ]--
r 65             if(player == 2 && ro == size+1){connection.union((col + (row*size)), allTiles+3); } //Connect to blue's south west edge
--[ 2019.09.16.18.14.13.167.0 ]--
r 65             if(player == 2 && row == size+1){connection.union((col + (row*size)), allTiles+3); } //Connect to blue's south west edge
--[ 2019.09.16.18.14.15.184.0 ]--
r 65             if(player == 2 && row == size+){connection.union((col + (row*size)), allTiles+3); } //Connect to blue's south west edge
--[ 2019.09.16.18.14.15.253.0 ]--
r 65             if(player == 2 && row == size){connection.union((col + (row*size)), allTiles+3); } //Connect to blue's south west edge
--[ 2019.09.16.18.14.15.375.0 ]--
r 65             if(player == 2 && row == size-){connection.union((col + (row*size)), allTiles+3); } //Connect to blue's south west edge
--[ 2019.09.16.18.14.15.449.0 ]--
r 65             if(player == 2 && row == size-1){connection.union((col + (row*size)), allTiles+3); } //Connect to blue's south west edge
--[ 2019.09.16.18.14.20.925.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.14.28.333.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.14.57.436.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.15.28.326.0 ]--
r 74         return connection.connected(allTiles, allTiles + 2);
--[ 2019.09.16.18.15.30.024.0 ]--
r 74         return connection.connected(allTiles, allTiles + );
--[ 2019.09.16.18.15.30.049.0 ]--
r 74         return connection.connected(allTiles, allTiles + 3);
--[ 2019.09.16.18.15.35.340.0 ]--
r 74         return connection.connected(allTiles+, allTiles + 3);
--[ 2019.09.16.18.15.35.469.0 ]--
r 74         return connection.connected(allTiles+1, allTiles + 3);
--[ 2019.09.16.18.15.37.289.0 ]--
r 74         return connection.connected(allTiles+, allTiles + 3);
--[ 2019.09.16.18.15.37.420.0 ]--
r 74         return connection.connected(allTiles, allTiles + 3);
--[ 2019.09.16.18.15.37.563.0 ]--
r 74         return connection.connected(allTiles , allTiles + 3);
--[ 2019.09.16.18.15.37.756.0 ]--
r 74         return connection.connected(allTiles  , allTiles + 3);
--[ 2019.09.16.18.15.37.909.0 ]--
r 74         return connection.connected(allTiles  1, allTiles + 3);
--[ 2019.09.16.18.15.38.625.0 ]--
r 74         return connection.connected(allTiles  , allTiles + 3);
--[ 2019.09.16.18.15.38.698.0 ]--
r 74         return connection.connected(allTiles , allTiles + 3);
--[ 2019.09.16.18.15.38.829.0 ]--
r 74         return connection.connected(allTiles, allTiles + 3);
--[ 2019.09.16.18.15.39.024.0 ]--
r 74         return connection.connected(allTiles , allTiles + 3);
--[ 2019.09.16.18.15.39.155.0 ]--
r 74         return connection.connected(allTiles +, allTiles + 3);
--[ 2019.09.16.18.15.39.265.0 ]--
r 74         return connection.connected(allTiles + , allTiles + 3);
--[ 2019.09.16.18.15.39.698.0 ]--
r 74         return connection.connected(allTiles + 1, allTiles + 3);
--[ 2019.09.16.18.15.44.622.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.16.49.918.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.17.17.251.0 ]--
r 61         StdOut.println("Col: " + col);  
--[ 2019.09.16.18.17.22.698.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.17.42.113.0 ]--
r 62             if(player == 1 && col == 0){connection.union(col + (row*size), allTiles ); } //Connect to red's north west edge
--[ 2019.09.16.18.17.42.187.0 ]--
r 62             if(player == 1 && col == 0){connection.union(col + (row*size), allTiles +); } //Connect to red's north west edge
--[ 2019.09.16.18.17.42.325.0 ]--
r 62             if(player == 1 && col == 0){connection.union(col + (row*size), allTiles + ); } //Connect to red's north west edge
--[ 2019.09.16.18.17.42.386.0 ]--
r 62             if(player == 1 && col == 0){connection.union(col + (row*size), allTiles + 2); } //Connect to red's north west edge
--[ 2019.09.16.18.17.44.166.0 ]--
r 63             if(player == 1 && col == size-1){connection.union((col + (row*size)), allTiles+); } //Connect to red's south east edge
--[ 2019.09.16.18.17.44.286.0 ]--
r 63             if(player == 1 && col == size-1){connection.union((col + (row*size)), allTiles); } //Connect to red's south east edge
--[ 2019.09.16.18.17.47.825.0 ]--
r 61         StdOut.println("Col: " + col);
--[ 2019.09.16.18.17.49.367.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.18.00.801.0 ]--
r 61         StdOut.println("Col: " + col);  
r 63             if(player == 1 && col == size-1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
--[ 2019.09.16.18.18.01.679.0 ]--
r 62             if(player == 1 && col == 0){connection.union(col + (row*size), allTiles); } //Connect to red's north west edge
--[ 2019.09.16.18.18.14.350.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.18.47.004.0 ]--
r 70         return f;
--[ 2019.09.16.18.18.47.122.0 ]--
r 70         return fa;
--[ 2019.09.16.18.18.47.195.0 ]--
r 70         return fal;
--[ 2019.09.16.18.18.47.269.0 ]--
r 70         return fals;
--[ 2019.09.16.18.18.47.450.0 ]--
r 70         return false;
--[ 2019.09.16.18.18.51.603.0 ]--
r 74         return f;
--[ 2019.09.16.18.18.51.710.0 ]--
r 74         return fa;
--[ 2019.09.16.18.18.51.816.0 ]--
r 74         return fal;
--[ 2019.09.16.18.18.51.883.0 ]--
r 74         return fals;
--[ 2019.09.16.18.18.52.093.0 ]--
r 74         return false;
--[ 2019.09.16.18.18.52.706.0 ]--
r 74         return false ;
--[ 2019.09.16.18.18.52.735.0 ]--
r 74         return false;
--[ 2019.09.16.18.18.55.251.0 ]--
+ 70         
--[ 2019.09.16.18.18.56.059.0 ]--
r 70         p
--[ 2019.09.16.18.18.56.152.0 ]--
r 70         pr
--[ 2019.09.16.18.18.56.218.0 ]--
r 70         pri
--[ 2019.09.16.18.18.56.274.0 ]--
r 70         prin
--[ 2019.09.16.18.18.56.362.0 ]--
r 70         print
--[ 2019.09.16.18.18.57.033.0 ]--
r 70         print 
--[ 2019.09.16.18.18.57.070.0 ]--
r 70         print
--[ 2019.09.16.18.18.57.459.0 ]--
r 70         print()
--[ 2019.09.16.18.18.57.880.0 ]--
r 70         print
--[ 2019.09.16.18.18.58.053.0 ]--
r 70         
--[ 2019.09.16.18.18.59.268.0 ]--
r 70         S
--[ 2019.09.16.18.18.59.435.0 ]--
r 70         St
--[ 2019.09.16.18.18.59.593.0 ]--
r 70         Std
--[ 2019.09.16.18.18.59.798.0 ]--
r 70         StdO
--[ 2019.09.16.18.19.00.039.0 ]--
r 70         StdOut
--[ 2019.09.16.18.19.00.506.0 ]--
r 70         StdOut.
--[ 2019.09.16.18.19.00.743.0 ]--
r 70         StdOut.p
--[ 2019.09.16.18.19.01.083.0 ]--
r 70         StdOut.println
--[ 2019.09.16.18.19.01.097.0 ]--
r 70         StdOut.println()
--[ 2019.09.16.18.19.01.109.0 ]--
r 70         StdOut.println();
--[ 2019.09.16.18.19.01.534.0 ]--
r 70         StdOut.println(());
--[ 2019.09.16.18.19.01.927.0 ]--
r 70         StdOut.println();
--[ 2019.09.16.18.19.02.510.0 ]--
r 70         StdOut.println(c);
--[ 2019.09.16.18.19.02.691.0 ]--
r 70         StdOut.println(co);
--[ 2019.09.16.18.19.02.818.0 ]--
r 70         StdOut.println(con);
--[ 2019.09.16.18.19.02.923.0 ]--
r 70         StdOut.println(conn);
--[ 2019.09.16.18.19.02.980.0 ]--
r 70         StdOut.println(conne);
--[ 2019.09.16.18.19.03.053.0 ]--
r 70         StdOut.println(connec);
--[ 2019.09.16.18.19.03.184.0 ]--
r 70         StdOut.println(connect);
--[ 2019.09.16.18.19.03.247.0 ]--
r 70         StdOut.println(connecti);
--[ 2019.09.16.18.19.03.327.0 ]--
r 70         StdOut.println(connectio);
--[ 2019.09.16.18.19.03.384.0 ]--
r 70         StdOut.println(connection);
--[ 2019.09.16.18.19.03.590.0 ]--
r 70         StdOut.println(connection.);
--[ 2019.09.16.18.19.03.766.0 ]--
r 70         StdOut.println(connection.p);
--[ 2019.09.16.18.19.03.916.0 ]--
r 70         StdOut.println(connection.pr);
--[ 2019.09.16.18.19.04.314.0 ]--
r 70         StdOut.println(connection.p);
--[ 2019.09.16.18.19.04.390.0 ]--
r 70         StdOut.println(connection.);
--[ 2019.09.16.18.19.05.134.0 ]--
r 70         StdOut.println(connection.f);
--[ 2019.09.16.18.19.05.234.0 ]--
r 70         StdOut.println(connection.fi);
--[ 2019.09.16.18.19.05.285.0 ]--
r 70         StdOut.println(connection.fin);
--[ 2019.09.16.18.19.05.418.0 ]--
r 70         StdOut.println(connection.find);
--[ 2019.09.16.18.19.05.950.0 ]--
r 70         StdOut.println(connection.find());
--[ 2019.09.16.18.19.17.187.0 ]--
r 70         StdOut.println(connection.find(n));
--[ 2019.09.16.18.19.17.592.0 ]--
r 70         StdOut.println(connection.find(n+));
--[ 2019.09.16.18.19.18.858.0 ]--
r 70         StdOut.println(connection.find(n+ ));
--[ 2019.09.16.18.19.18.911.0 ]--
r 70         StdOut.println(connection.find(n+));
--[ 2019.09.16.18.19.19.110.0 ]--
r 70         StdOut.println(connection.find(n));
--[ 2019.09.16.18.19.19.254.0 ]--
r 70         StdOut.println(connection.find());
--[ 2019.09.16.18.19.24.849.0 ]--
r 70         StdOut.println(connection.find(S));
--[ 2019.09.16.18.19.25.024.0 ]--
r 70         StdOut.println(connection.find(Si));
--[ 2019.09.16.18.19.25.056.0 ]--
r 70         StdOut.println(connection.find(Siz));
--[ 2019.09.16.18.19.25.239.0 ]--
r 70         StdOut.println(connection.find(Size));
--[ 2019.09.16.18.19.25.751.0 ]--
r 70         StdOut.println(connection.find(Siz));
--[ 2019.09.16.18.19.25.870.0 ]--
r 70         StdOut.println(connection.find(Si));
--[ 2019.09.16.18.19.26.022.0 ]--
r 70         StdOut.println(connection.find(S));
--[ 2019.09.16.18.19.26.105.0 ]--
r 70         StdOut.println(connection.find());
--[ 2019.09.16.18.19.26.284.0 ]--
r 70         StdOut.println(connection.find(s));
--[ 2019.09.16.18.19.26.404.0 ]--
r 70         StdOut.println(connection.find(si));
--[ 2019.09.16.18.19.26.439.0 ]--
r 70         StdOut.println(connection.find(siz));
--[ 2019.09.16.18.19.26.654.0 ]--
r 70         StdOut.println(connection.find(size));
--[ 2019.09.16.18.19.27.952.0 ]--
r 70         StdOut.println(connection.find(size+));
--[ 2019.09.16.18.19.29.285.0 ]--
r 70         StdOut.println(connection.find(size));
--[ 2019.09.16.18.19.30.000.0 ]--
r 70         StdOut.println(connection.find(siz));
--[ 2019.09.16.18.19.30.700.0 ]--
r 70         StdOut.println(connection.find(si\));
--[ 2019.09.16.18.19.30.760.0 ]--
r 70         StdOut.println(connection.find(si));
--[ 2019.09.16.18.19.31.242.0 ]--
r 70         StdOut.println(connection.find(s));
--[ 2019.09.16.18.19.31.392.0 ]--
r 70         StdOut.println(connection.find());
--[ 2019.09.16.18.19.34.801.0 ]--
r 70         StdOut.println(connection.find(a));
--[ 2019.09.16.18.19.35.014.0 ]--
r 70         StdOut.println(connection.find(al));
--[ 2019.09.16.18.19.35.099.0 ]--
r 70         StdOut.println(connection.find(all));
--[ 2019.09.16.18.19.36.252.0 ]--
r 70         StdOut.println(connection.find(all ));
--[ 2019.09.16.18.19.36.263.0 ]--
r 70         StdOut.println(connection.find(all));
--[ 2019.09.16.18.19.36.447.0 ]--
r 70         StdOut.println(connection.find(allT));
--[ 2019.09.16.18.19.36.511.0 ]--
r 70         StdOut.println(connection.find(allTi));
--[ 2019.09.16.18.19.36.695.0 ]--
r 70         StdOut.println(connection.find(allTil));
--[ 2019.09.16.18.19.36.716.0 ]--
r 70         StdOut.println(connection.find(allTile));
--[ 2019.09.16.18.19.36.864.0 ]--
r 70         StdOut.println(connection.find(allTiles));
--[ 2019.09.16.18.19.40.355.0 ]--
+ 71         
--[ 2019.09.16.18.19.40.494.0 ]--
r 71         StdOut.println(connection.find(allTiles));
--[ 2019.09.16.18.19.42.400.0 ]--
r 71         StdOut.println(connection.find(allTiles+));
--[ 2019.09.16.18.19.42.555.0 ]--
r 71         StdOut.println(connection.find(allTiles+2));
--[ 2019.09.16.18.19.45.818.0 ]--
r 61         StdOut.println("Col: " + col);
--[ 2019.09.16.18.19.47.391.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.20.12.371.0 ]--
+ 71         
--[ 2019.09.16.18.20.12.445.0 ]--
r 71         A
--[ 2019.09.16.18.20.12.654.0 ]--
r 71         Al
--[ 2019.09.16.18.20.12.783.0 ]--
r 71         All
--[ 2019.09.16.18.20.13.190.0 ]--
r 71         Al
--[ 2019.09.16.18.20.13.303.0 ]--
r 71         A
--[ 2019.09.16.18.20.13.413.0 ]--
r 71         
--[ 2019.09.16.18.20.13.763.0 ]--
- 71
--[ 2019.09.16.18.20.15.610.0 ]--
r 70         StdOut.println(connection.find("allTiles));
--[ 2019.09.16.18.20.16.915.0 ]--
r 70         StdOut.println(connection.find("NallTiles));
--[ 2019.09.16.18.20.17.170.0 ]--
r 70         StdOut.println(connection.find("N"allTiles));
--[ 2019.09.16.18.20.17.294.0 ]--
r 70         StdOut.println(connection.find("N":allTiles));
--[ 2019.09.16.18.20.17.379.0 ]--
r 70         StdOut.println(connection.find("N": allTiles));
--[ 2019.09.16.18.20.18.356.0 ]--
r 70         StdOut.println(connection.find("N": +allTiles));
--[ 2019.09.16.18.20.18.611.0 ]--
r 70         StdOut.println(connection.find("N": + allTiles));
--[ 2019.09.16.18.20.21.397.0 ]--
r 71         StdOut.println(connection.find("allTiles+2));
--[ 2019.09.16.18.20.21.553.0 ]--
r 71         StdOut.println(connection.find("NallTiles+2));
--[ 2019.09.16.18.20.21.872.0 ]--
r 71         StdOut.println(connection.find("N"allTiles+2));
--[ 2019.09.16.18.20.22.753.0 ]--
r 71         StdOut.println(connection.find("NallTiles+2));
--[ 2019.09.16.18.20.22.901.0 ]--
r 71         StdOut.println(connection.find("N allTiles+2));
--[ 2019.09.16.18.20.23.013.0 ]--
r 71         StdOut.println(connection.find("N +allTiles+2));
--[ 2019.09.16.18.20.23.295.0 ]--
r 71         StdOut.println(connection.find("N + allTiles+2));
--[ 2019.09.16.18.20.23.465.0 ]--
r 71         StdOut.println(connection.find("N + @allTiles+2));
--[ 2019.09.16.18.20.23.706.0 ]--
r 71         StdOut.println(connection.find("N + @:allTiles+2));
--[ 2019.09.16.18.20.23.765.0 ]--
r 71         StdOut.println(connection.find("N + @: allTiles+2));
--[ 2019.09.16.18.20.24.057.0 ]--
r 71         StdOut.println(connection.find("N + @:allTiles+2));
--[ 2019.09.16.18.20.24.117.0 ]--
r 71         StdOut.println(connection.find("N + @allTiles+2));
--[ 2019.09.16.18.20.24.248.0 ]--
r 71         StdOut.println(connection.find("N + allTiles+2));
--[ 2019.09.16.18.20.24.337.0 ]--
r 71         StdOut.println(connection.find("N + 2allTiles+2));
--[ 2019.09.16.18.20.24.566.0 ]--
r 71         StdOut.println(connection.find("N + 2:allTiles+2));
--[ 2019.09.16.18.20.24.643.0 ]--
r 71         StdOut.println(connection.find("N + 2: allTiles+2));
--[ 2019.09.16.18.20.24.718.0 ]--
r 71         StdOut.println(connection.find("N + 2: "allTiles+2));
--[ 2019.09.16.18.20.25.149.0 ]--
r 71         StdOut.println(connection.find("N + 2: allTiles+2));
--[ 2019.09.16.18.20.25.225.0 ]--
r 71         StdOut.println(connection.find("N + 2:allTiles+2));
--[ 2019.09.16.18.20.25.419.0 ]--
r 71         StdOut.println(connection.find("N + 2:"allTiles+2));
--[ 2019.09.16.18.20.25.543.0 ]--
r 71         StdOut.println(connection.find("N + 2:" allTiles+2));
--[ 2019.09.16.18.20.25.915.0 ]--
r 71         StdOut.println(connection.find("N + 2:"allTiles+2));
--[ 2019.09.16.18.20.25.943.0 ]--
r 71         StdOut.println(connection.find("N + 2:allTiles+2));
--[ 2019.09.16.18.20.26.030.0 ]--
r 71         StdOut.println(connection.find("N + 2: allTiles+2));
--[ 2019.09.16.18.20.26.182.0 ]--
r 71         StdOut.println(connection.find("N + 2: "allTiles+2));
--[ 2019.09.16.18.20.26.651.0 ]--
r 71         StdOut.println(connection.find("N + 2: " allTiles+2));
--[ 2019.09.16.18.20.27.163.0 ]--
r 71         StdOut.println(connection.find("N + 2: " +allTiles+2));
--[ 2019.09.16.18.20.27.254.0 ]--
r 71         StdOut.println(connection.find("N + 2: " + allTiles+2));
--[ 2019.09.16.18.20.29.601.0 ]--
r 71         StdOut.println(connection.find("N + 2: " + (allTiles+2));
--[ 2019.09.16.18.20.31.071.0 ]--
r 71         StdOut.println(connection.find("N + 2: " + (allTiles+2)));
--[ 2019.09.16.18.20.37.401.0 ]--
r 70         StdOut.println(connection.find("N" + allTiles));
--[ 2019.09.16.18.20.38.121.0 ]--
r 70         StdOut.println(connection.find("N:" + allTiles));
--[ 2019.09.16.18.20.39.945.0 ]--
r 70         StdOut.println(connection.find("N: " + allTiles));
--[ 2019.09.16.18.20.42.957.0 ]--
r 70         StdOut.println(connection.find("allTiles));
--[ 2019.09.16.18.20.43.291.0 ]--
r 70         StdOut.println(connection.find(allTiles));
--[ 2019.09.16.18.20.49.245.0 ]--
r 71         StdOut.println(connection.find((allTiles+2)));
--[ 2019.09.16.18.20.50.414.0 ]--
r 71         StdOut.println(connection.find(allTiles+2)));
--[ 2019.09.16.18.20.52.292.0 ]--
r 71         StdOut.println(connection.find(allTiles+2));
--[ 2019.09.16.18.20.52.573.0 ]--
r 71         StdOut.println(connection.find(allTiles+2);
--[ 2019.09.16.18.20.53.939.0 ]--
r 71         StdOut.println(connection.find(allTiles+2 );
--[ 2019.09.16.18.20.53.990.0 ]--
r 71         StdOut.println(connection.find(allTiles+2);
--[ 2019.09.16.18.21.04.257.0 ]--
- 70
r 70         
--[ 2019.09.16.18.21.06.722.0 ]--
r 70         p
--[ 2019.09.16.18.21.07.255.0 ]--
r 70         
--[ 2019.09.16.18.21.07.606.0 ]--
- 70
--[ 2019.09.16.18.21.20.613.0 ]--
+ 62         
--[ 2019.09.16.18.21.22.353.0 ]--
r 62         p
--[ 2019.09.16.18.21.22.510.0 ]--
r 62         pr
--[ 2019.09.16.18.21.22.536.0 ]--
r 62         pri
--[ 2019.09.16.18.21.22.581.0 ]--
r 62         prin
--[ 2019.09.16.18.21.22.672.0 ]--
r 62         print
--[ 2019.09.16.18.21.23.531.0 ]--
r 62         
--[ 2019.09.16.18.21.23.925.0 ]--
r 62         S
--[ 2019.09.16.18.21.24.107.0 ]--
r 62         St
--[ 2019.09.16.18.21.24.218.0 ]--
r 62         Std
--[ 2019.09.16.18.21.24.862.0 ]--
r 62         StdOut
--[ 2019.09.16.18.21.25.277.0 ]--
r 62         StdOut.
--[ 2019.09.16.18.21.25.847.0 ]--
r 62         StdOut.p
--[ 2019.09.16.18.21.26.119.0 ]--
r 62         StdOut.println
--[ 2019.09.16.18.21.26.124.0 ]--
r 62         StdOut.println()
--[ 2019.09.16.18.21.26.129.0 ]--
r 62         StdOut.println();
--[ 2019.09.16.18.21.27.751.0 ]--
r 62         StdOut.println(c);
--[ 2019.09.16.18.21.27.799.0 ]--
r 62         StdOut.println(co);
--[ 2019.09.16.18.21.27.894.0 ]--
r 62         StdOut.println(con);
--[ 2019.09.16.18.21.28.009.0 ]--
r 62         StdOut.println(conn);
--[ 2019.09.16.18.21.28.164.0 ]--
r 62         StdOut.println(conne);
--[ 2019.09.16.18.21.28.228.0 ]--
r 62         StdOut.println(connec);
--[ 2019.09.16.18.21.28.527.0 ]--
r 62         StdOut.println(connecti);
--[ 2019.09.16.18.21.28.558.0 ]--
r 62         StdOut.println(connectio);
--[ 2019.09.16.18.21.28.617.0 ]--
r 62         StdOut.println(connection);
--[ 2019.09.16.18.21.28.886.0 ]--
r 62         StdOut.println(connection.);
--[ 2019.09.16.18.21.28.912.0 ]--
r 62         StdOut.println(connection.f);
--[ 2019.09.16.18.21.29.015.0 ]--
r 62         StdOut.println(connection.fi);
--[ 2019.09.16.18.21.29.058.0 ]--
r 62         StdOut.println(connection.fin);
--[ 2019.09.16.18.21.29.100.0 ]--
r 62         StdOut.println(connection.find);
--[ 2019.09.16.18.21.29.273.0 ]--
r 62         StdOut.println(connection.find());
--[ 2019.09.16.18.21.29.477.0 ]--
r 62         StdOut.println(connection.find( ));
--[ 2019.09.16.18.21.29.579.0 ]--
r 62         StdOut.println(connection.find());
--[ 2019.09.16.18.21.34.367.0 ]--
r 62         StdOut.println(connection.find(z));
--[ 2019.09.16.18.21.34.942.0 ]--
r 62         StdOut.println(connection.find());
--[ 2019.09.16.18.21.38.984.0 ]--
r 62         StdOut.println(connection.find( ));
--[ 2019.09.16.18.21.39.036.0 ]--
r 62         StdOut.println(connection.find());
--[ 2019.09.16.18.21.40.236.0 ]--
r 62         StdOut.println(connection.find(a));
--[ 2019.09.16.18.21.40.325.0 ]--
r 62         StdOut.println(connection.find(al));
--[ 2019.09.16.18.21.40.426.0 ]--
r 62         StdOut.println(connection.find(all));
--[ 2019.09.16.18.21.40.760.0 ]--
r 62         StdOut.println(connection.find(allT));
--[ 2019.09.16.18.21.40.878.0 ]--
r 62         StdOut.println(connection.find(allTi));
--[ 2019.09.16.18.21.41.044.0 ]--
r 62         StdOut.println(connection.find(allTil));
--[ 2019.09.16.18.21.41.073.0 ]--
r 62         StdOut.println(connection.find(allTile));
--[ 2019.09.16.18.21.41.201.0 ]--
r 62         StdOut.println(connection.find(allTiles));
--[ 2019.09.16.18.21.43.484.0 ]--
+ 63         
--[ 2019.09.16.18.21.44.452.0 ]--
r 63         S
--[ 2019.09.16.18.21.44.636.0 ]--
r 63         St
--[ 2019.09.16.18.21.45.276.0 ]--
r 63         Std
--[ 2019.09.16.18.21.45.928.0 ]--
r 63         StdOut
--[ 2019.09.16.18.21.46.381.0 ]--
r 63         StdOut.
--[ 2019.09.16.18.21.46.868.0 ]--
r 63         StdOut.p
--[ 2019.09.16.18.21.47.686.0 ]--
r 63         StdOut.println
--[ 2019.09.16.18.21.47.697.0 ]--
r 63         StdOut.println()
--[ 2019.09.16.18.21.47.701.0 ]--
r 63         StdOut.println();
--[ 2019.09.16.18.21.49.589.0 ]--
r 63         StdOut.println(c);
--[ 2019.09.16.18.21.49.670.0 ]--
r 63         StdOut.println(co);
--[ 2019.09.16.18.22.30.441.0 ]--
r 63         StdOut.println(c);
--[ 2019.09.16.18.22.30.799.0 ]--
r 63         StdOut.println();
--[ 2019.09.16.18.22.32.049.0 ]--
r 63         StdOut.println(c);
--[ 2019.09.16.18.22.32.098.0 ]--
r 63         StdOut.println(co);
--[ 2019.09.16.18.22.32.260.0 ]--
r 63         StdOut.println(con);
--[ 2019.09.16.18.22.32.353.0 ]--
r 63         StdOut.println(conn);
--[ 2019.09.16.18.22.32.425.0 ]--
r 63         StdOut.println(conne);
--[ 2019.09.16.18.22.32.488.0 ]--
r 63         StdOut.println(connec);
--[ 2019.09.16.18.22.32.758.0 ]--
r 63         StdOut.println(conneci);
--[ 2019.09.16.18.22.32.787.0 ]--
r 63         StdOut.println(connecio);
--[ 2019.09.16.18.22.33.050.0 ]--
r 63         StdOut.println(conneci);
--[ 2019.09.16.18.22.33.118.0 ]--
r 63         StdOut.println(connec);
--[ 2019.09.16.18.22.33.188.0 ]--
r 63         StdOut.println(connect);
--[ 2019.09.16.18.22.33.255.0 ]--
r 63         StdOut.println(connecti);
--[ 2019.09.16.18.22.33.330.0 ]--
r 63         StdOut.println(connectio);
--[ 2019.09.16.18.22.33.425.0 ]--
r 63         StdOut.println(connection);
--[ 2019.09.16.18.22.33.529.0 ]--
r 63         StdOut.println(connection );
--[ 2019.09.16.18.22.33.608.0 ]--
r 63         StdOut.println(connection);
--[ 2019.09.16.18.22.33.913.0 ]--
r 63         StdOut.println(connection.);
--[ 2019.09.16.18.22.33.934.0 ]--
r 63         StdOut.println(connection.f);
--[ 2019.09.16.18.22.34.014.0 ]--
r 63         StdOut.println(connection.fi);
--[ 2019.09.16.18.22.34.052.0 ]--
r 63         StdOut.println(connection.fin);
--[ 2019.09.16.18.22.34.176.0 ]--
r 63         StdOut.println(connection.find);
--[ 2019.09.16.18.22.34.987.0 ]--
r 63         StdOut.println(connection.find());
--[ 2019.09.16.18.22.35.601.0 ]--
r 63         StdOut.println(connection.find(a));
--[ 2019.09.16.18.22.35.681.0 ]--
r 63         StdOut.println(connection.find(al));
--[ 2019.09.16.18.22.35.788.0 ]--
r 63         StdOut.println(connection.find(all));
--[ 2019.09.16.18.22.35.976.0 ]--
r 63         StdOut.println(connection.find(allT));
--[ 2019.09.16.18.22.36.056.0 ]--
r 63         StdOut.println(connection.find(allTi));
--[ 2019.09.16.18.22.36.241.0 ]--
r 63         StdOut.println(connection.find(allTik));
--[ 2019.09.16.18.22.36.262.0 ]--
r 63         StdOut.println(connection.find(allTike));
--[ 2019.09.16.18.22.36.663.0 ]--
r 63         StdOut.println(connection.find(allTik));
--[ 2019.09.16.18.22.36.766.0 ]--
r 63         StdOut.println(connection.find(allTi));
--[ 2019.09.16.18.22.36.959.0 ]--
r 63         StdOut.println(connection.find(allTil));
--[ 2019.09.16.18.22.37.008.0 ]--
r 63         StdOut.println(connection.find(allTile));
--[ 2019.09.16.18.22.37.169.0 ]--
r 63         StdOut.println(connection.find(allTiles));
--[ 2019.09.16.18.22.37.593.0 ]--
r 63         StdOut.println(connection.find(allTiles ));
--[ 2019.09.16.18.22.37.658.0 ]--
r 63         StdOut.println(connection.find(allTiles +));
--[ 2019.09.16.18.22.37.749.0 ]--
r 63         StdOut.println(connection.find(allTiles + ));
--[ 2019.09.16.18.22.37.838.0 ]--
r 63         StdOut.println(connection.find(allTiles + 2));
--[ 2019.09.16.18.22.42.178.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.23.09.238.0 ]--
- 62
r 62         StdOut.println(connection.c
--[ 2019.09.16.18.23.09.258.0 ]--
r 62         StdOut.println(connection.co
--[ 2019.09.16.18.23.09.372.0 ]--
r 62         StdOut.println(connection.con
--[ 2019.09.16.18.23.09.518.0 ]--
r 62         StdOut.println(connection.conn
--[ 2019.09.16.18.23.09.533.0 ]--
r 62         StdOut.println(connection.conne
--[ 2019.09.16.18.23.09.639.0 ]--
r 62         StdOut.println(connection.connec
--[ 2019.09.16.18.23.09.817.0 ]--
r 62         StdOut.println(connection.connect
--[ 2019.09.16.18.23.10.245.0 ]--
r 62         StdOut.println(connection.connectd
--[ 2019.09.16.18.23.10.957.0 ]--
r 62         StdOut.println(connection.connect
--[ 2019.09.16.18.23.11.006.0 ]--
r 62         StdOut.println(connection.connecte
--[ 2019.09.16.18.23.11.101.0 ]--
r 62         StdOut.println(connection.connected
--[ 2019.09.16.18.23.11.260.0 ]--
r 62         StdOut.println(connection.connected()
--[ 2019.09.16.18.23.11.486.0 ]--
r 62         StdOut.println(connection.connected( )
--[ 2019.09.16.18.23.11.608.0 ]--
r 62         StdOut.println(connection.connected()
--[ 2019.09.16.18.23.23.801.0 ]--
r 62         StdOut.println(connection.connected(n)
--[ 2019.09.16.18.23.24.257.0 ]--
r 62         StdOut.println(connection.connected()
--[ 2019.09.16.18.23.24.930.0 ]--
r 62         StdOut.println(connection.connected( )
--[ 2019.09.16.18.23.25.019.0 ]--
r 62         StdOut.println(connection.connected()
--[ 2019.09.16.18.23.25.394.0 ]--
r 62         StdOut.println(connection.connected(n)
--[ 2019.09.16.18.23.25.692.0 ]--
r 62         StdOut.println(connection.connected()
--[ 2019.09.16.18.23.26.321.0 ]--
r 62         StdOut.println(connection.connected(s)
--[ 2019.09.16.18.23.26.412.0 ]--
r 62         StdOut.println(connection.connected(si)
--[ 2019.09.16.18.23.26.496.0 ]--
r 62         StdOut.println(connection.connected(siz)
--[ 2019.09.16.18.23.26.652.0 ]--
r 62         StdOut.println(connection.connected(size)
--[ 2019.09.16.18.23.27.124.0 ]--
r 62         StdOut.println(connection.connected(size,)
--[ 2019.09.16.18.23.27.229.0 ]--
r 62         StdOut.println(connection.connected(size, )
--[ 2019.09.16.18.23.28.511.0 ]--
r 62         StdOut.println(connection.connected(size,)
--[ 2019.09.16.18.23.28.603.0 ]--
r 62         StdOut.println(connection.connected(size)
--[ 2019.09.16.18.23.28.699.0 ]--
r 62         StdOut.println(connection.connected(siz)
--[ 2019.09.16.18.23.28.870.0 ]--
r 62         StdOut.println(connection.connected(si)
--[ 2019.09.16.18.23.28.934.0 ]--
r 62         StdOut.println(connection.connected(s)
--[ 2019.09.16.18.23.29.117.0 ]--
r 62         StdOut.println(connection.connected()
--[ 2019.09.16.18.23.29.244.0 ]--
r 62         StdOut.println(connection.connected(a)
--[ 2019.09.16.18.23.29.347.0 ]--
r 62         StdOut.println(connection.connected(al)
--[ 2019.09.16.18.23.29.434.0 ]--
r 62         StdOut.println(connection.connected(all)
--[ 2019.09.16.18.23.29.766.0 ]--
r 62         StdOut.println(connection.connected(allTi)
--[ 2019.09.16.18.23.29.909.0 ]--
r 62         StdOut.println(connection.connected(allTil)
--[ 2019.09.16.18.23.29.935.0 ]--
r 62         StdOut.println(connection.connected(allTile)
--[ 2019.09.16.18.23.30.078.0 ]--
r 62         StdOut.println(connection.connected(allTiles)
--[ 2019.09.16.18.23.30.112.0 ]--
r 62         StdOut.println(connection.connected(allTiles,)
--[ 2019.09.16.18.23.30.226.0 ]--
r 62         StdOut.println(connection.connected(allTiles, )
--[ 2019.09.16.18.23.30.381.0 ]--
r 62         StdOut.println(connection.connected(allTiles, a)
--[ 2019.09.16.18.23.30.467.0 ]--
r 62         StdOut.println(connection.connected(allTiles, al)
--[ 2019.09.16.18.23.30.542.0 ]--
r 62         StdOut.println(connection.connected(allTiles, all)
--[ 2019.09.16.18.23.30.738.0 ]--
r 62         StdOut.println(connection.connected(allTiles, allT)
--[ 2019.09.16.18.23.30.846.0 ]--
r 62         StdOut.println(connection.connected(allTiles, allTi)
--[ 2019.09.16.18.23.30.913.0 ]--
r 62         StdOut.println(connection.connected(allTiles, allTil)
--[ 2019.09.16.18.23.30.944.0 ]--
r 62         StdOut.println(connection.connected(allTiles, allTile)
--[ 2019.09.16.18.23.31.134.0 ]--
r 62         StdOut.println(connection.connected(allTiles, allTiles)
--[ 2019.09.16.18.23.31.207.0 ]--
r 62         StdOut.println(connection.connected(allTiles, allTiles )
--[ 2019.09.16.18.23.31.245.0 ]--
r 62         StdOut.println(connection.connected(allTiles, allTiles +)
--[ 2019.09.16.18.23.31.360.0 ]--
r 62         StdOut.println(connection.connected(allTiles, allTiles + )
--[ 2019.09.16.18.23.31.516.0 ]--
r 62         StdOut.println(connection.connected(allTiles, allTiles + 2)
--[ 2019.09.16.18.23.33.001.0 ]--
r 62         StdOut.println(connection.connected(allTiles, allTiles + 2))
--[ 2019.09.16.18.23.34.142.0 ]--
r 62         StdOut.println(connection.connected(allTiles, allTiles + 2));
--[ 2019.09.16.18.23.39.329.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.24.50.295.0 ]--
r 62         
--[ 2019.09.16.18.24.50.730.0 ]--
- 62
--[ 2019.09.16.18.25.45.080.0 ]--
+ 53             
--[ 2019.09.16.18.25.45.088.0 ]--
r 53         
--[ 2019.09.16.18.25.46.373.0 ]--
r 53         S
--[ 2019.09.16.18.25.46.499.0 ]--
r 53         St
--[ 2019.09.16.18.25.46.658.0 ]--
r 53         Std
--[ 2019.09.16.18.25.47.211.0 ]--
r 53         StdOut
--[ 2019.09.16.18.25.47.693.0 ]--
r 53         StdOutp
--[ 2019.09.16.18.25.48.188.0 ]--
r 53         StdOut
--[ 2019.09.16.18.25.48.547.0 ]--
r 53         StdOut.
--[ 2019.09.16.18.25.48.792.0 ]--
r 53         StdOut.p
--[ 2019.09.16.18.25.49.193.0 ]--
r 53         StdOut.println
--[ 2019.09.16.18.25.49.203.0 ]--
r 53         StdOut.println()
--[ 2019.09.16.18.25.49.209.0 ]--
r 53         StdOut.println();
--[ 2019.09.16.18.25.56.059.0 ]--
r 53         StdOut.println("");
--[ 2019.09.16.18.25.56.442.0 ]--
r 53         StdOut.println("I");
--[ 2019.09.16.18.25.56.549.0 ]--
r 53         StdOut.println("In");
--[ 2019.09.16.18.25.56.611.0 ]--
r 53         StdOut.println("Ind");
--[ 2019.09.16.18.25.56.680.0 ]--
r 53         StdOut.println("Inde");
--[ 2019.09.16.18.25.56.863.0 ]--
r 53         StdOut.println("Index");
--[ 2019.09.16.18.25.58.014.0 ]--
r 53         StdOut.println("Index:");
--[ 2019.09.16.18.25.59.753.0 ]--
r 53         StdOut.println("Index:" );
--[ 2019.09.16.18.25.59.844.0 ]--
r 53         StdOut.println("Index:" +);
--[ 2019.09.16.18.25.59.907.0 ]--
r 53         StdOut.println("Index:" + );
--[ 2019.09.16.18.26.00.277.0 ]--
r 53         StdOut.println("Index:" + col + row*size);
--[ 2019.09.16.18.26.01.551.0 ]--
r 53         StdOut.println("Index:" + col + row*size );
--[ 2019.09.16.18.26.01.636.0 ]--
r 53         StdOut.println("Index:" + col + row*size);
--[ 2019.09.16.18.26.08.307.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.27.34.260.0 ]--
r 53         StdOut.println("Index:" + Icol + row*size);
--[ 2019.09.16.18.27.34.384.0 ]--
r 53         StdOut.println("Index:" + Incol + row*size);
--[ 2019.09.16.18.27.34.699.0 ]--
r 53         StdOut.println("Index:" + Intcol + row*size);
--[ 2019.09.16.18.27.34.878.0 ]--
r 53         StdOut.println("Index:" + Intecol + row*size);
--[ 2019.09.16.18.27.34.963.0 ]--
r 53         StdOut.println("Index:" + Integcol + row*size);
--[ 2019.09.16.18.27.35.027.0 ]--
r 53         StdOut.println("Index:" + Integecol + row*size);
--[ 2019.09.16.18.27.35.134.0 ]--
r 53         StdOut.println("Index:" + Integercol + row*size);
--[ 2019.09.16.18.27.35.233.0 ]--
r 53         StdOut.println("Index:" + Integer.col + row*size);
--[ 2019.09.16.18.27.35.609.0 ]--
r 53         StdOut.println("Index:" + Integer.tcol + row*size);
--[ 2019.09.16.18.27.35.725.0 ]--
r 53         StdOut.println("Index:" + Integer.tocol + row*size);
--[ 2019.09.16.18.27.36.680.0 ]--
r 53         StdOut.println("Index:" + Integer.toStringcol + row*size);
--[ 2019.09.16.18.27.36.690.0 ]--
r 53         StdOut.println("Index:" + Integer.toString()col + row*size);
--[ 2019.09.16.18.27.39.047.0 ]--
r 53         StdOut.println("Index:" + Integer.toString());
--[ 2019.09.16.18.27.39.693.0 ]--
r 53         StdOut.println("Index:" + Integer.toString(col + row*size));
--[ 2019.09.16.18.27.45.788.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.27.55.943.0 ]--
+ 54         
--[ 2019.09.16.18.27.57.567.0 ]--
r 54         S
--[ 2019.09.16.18.27.57.736.0 ]--
r 54         St
--[ 2019.09.16.18.27.57.873.0 ]--
r 54         Std
--[ 2019.09.16.18.27.58.594.0 ]--
r 54         StdOut
--[ 2019.09.16.18.27.59.074.0 ]--
r 54         StdOut.
--[ 2019.09.16.18.27.59.425.0 ]--
r 54         StdOut.p
--[ 2019.09.16.18.27.59.739.0 ]--
r 54         StdOut.pr
--[ 2019.09.16.18.27.59.761.0 ]--
r 54         StdOut.pri
--[ 2019.09.16.18.27.59.789.0 ]--
r 54         StdOut.prin
--[ 2019.09.16.18.27.59.938.0 ]--
r 54         StdOut.print
--[ 2019.09.16.18.28.01.046.0 ]--
r 54         StdOut.prin
--[ 2019.09.16.18.28.01.268.0 ]--
r 54         StdOut.println
--[ 2019.09.16.18.28.01.274.0 ]--
r 54         StdOut.println()
--[ 2019.09.16.18.28.01.281.0 ]--
r 54         StdOut.println();
--[ 2019.09.16.18.28.10.194.0 ]--
r 54         StdOut.println( );
--[ 2019.09.16.18.28.10.212.0 ]--
r 54         StdOut.println();
--[ 2019.09.16.18.29.56.713.0 ]--
r 54         StdOut.println("");
--[ 2019.09.16.18.29.57.263.0 ]--
r 54         StdOut.println(" ");
--[ 2019.09.16.18.29.57.355.0 ]--
r 54         StdOut.println("");
--[ 2019.09.16.18.29.58.225.0 ]--
r 54         StdOut.println("S");
--[ 2019.09.16.18.29.58.359.0 ]--
r 54         StdOut.println("St");
--[ 2019.09.16.18.29.58.445.0 ]--
r 54         StdOut.println("Stu");
--[ 2019.09.16.18.29.58.497.0 ]--
r 54         StdOut.println("Stuf");
--[ 2019.09.16.18.29.58.663.0 ]--
r 54         StdOut.println("Stuff");
--[ 2019.09.16.18.29.58.808.0 ]--
r 54         StdOut.println("Stuff:");
--[ 2019.09.16.18.29.58.949.0 ]--
r 54         StdOut.println("Stuff: ");
--[ 2019.09.16.18.30.00.460.0 ]--
r 54         StdOut.println("Stuff: " );
--[ 2019.09.16.18.30.00.565.0 ]--
r 54         StdOut.println("Stuff: " +);
--[ 2019.09.16.18.30.00.648.0 ]--
r 54         StdOut.println("Stuff: " + );
--[ 2019.09.16.18.30.03.921.0 ]--
r 54         StdOut.println("Stuff: " + I);
--[ 2019.09.16.18.30.04.026.0 ]--
r 54         StdOut.println("Stuff: " + In);
--[ 2019.09.16.18.30.04.121.0 ]--
r 54         StdOut.println("Stuff: " + Ing);
--[ 2019.09.16.18.30.04.287.0 ]--
r 54         StdOut.println("Stuff: " + Inge);
--[ 2019.09.16.18.30.04.577.0 ]--
r 54         StdOut.println("Stuff: " + Ingeg);
--[ 2019.09.16.18.30.04.612.0 ]--
r 54         StdOut.println("Stuff: " + Ingege);
--[ 2019.09.16.18.30.04.960.0 ]--
r 54         StdOut.println("Stuff: " + Ingeger);
--[ 2019.09.16.18.30.05.774.0 ]--
r 54         StdOut.println("Stuff: " + );
--[ 2019.09.16.18.30.06.213.0 ]--
r 54         StdOut.println("Stuff: " + In);
--[ 2019.09.16.18.30.06.238.0 ]--
r 54         StdOut.println("Stuff: " + Int);
--[ 2019.09.16.18.30.06.338.0 ]--
r 54         StdOut.println("Stuff: " + Inte);
--[ 2019.09.16.18.30.06.606.0 ]--
r 54         StdOut.println("Stuff: " + Integ);
--[ 2019.09.16.18.30.06.795.0 ]--
r 54         StdOut.println("Stuff: " + Intege);
--[ 2019.09.16.18.30.06.886.0 ]--
r 54         StdOut.println("Stuff: " + Integer);
--[ 2019.09.16.18.30.07.151.0 ]--
r 54         StdOut.println("Stuff: " + Integer.);
--[ 2019.09.16.18.30.07.599.0 ]--
r 54         StdOut.println("Stuff: " + Integer.t);
--[ 2019.09.16.18.30.07.683.0 ]--
r 54         StdOut.println("Stuff: " + Integer.to);
--[ 2019.09.16.18.30.08.152.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString);
--[ 2019.09.16.18.30.08.174.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString());
--[ 2019.09.16.18.30.14.362.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString(c));
--[ 2019.09.16.18.30.14.489.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString(co));
--[ 2019.09.16.18.30.14.701.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString(col));
--[ 2019.09.16.18.30.16.082.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString(col-));
--[ 2019.09.16.18.30.16.148.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString(col-1));
--[ 2019.09.16.18.30.16.456.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString(col-1 ));
--[ 2019.09.16.18.30.16.522.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString(col-1 +));
--[ 2019.09.16.18.30.16.676.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString(col-1 + ));
--[ 2019.09.16.18.30.16.787.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString(col-1 + r));
--[ 2019.09.16.18.30.16.885.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString(col-1 + ro));
--[ 2019.09.16.18.30.16.971.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString(col-1 + row));
--[ 2019.09.16.18.30.17.457.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString(col-1 + row*));
--[ 2019.09.16.18.30.17.601.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString(col-1 + row*s));
--[ 2019.09.16.18.30.17.702.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString(col-1 + row*si));
--[ 2019.09.16.18.30.17.756.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString(col-1 + row*siz));
--[ 2019.09.16.18.30.17.918.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString(col-1 + row*size));
--[ 2019.09.16.18.30.18.212.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString(col-1 + row*size ));
--[ 2019.09.16.18.30.18.275.0 ]--
r 54         StdOut.println("Stuff: " + Integer.toString(col-1 + row*size));
--[ 2019.09.16.18.30.23.628.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.31.31.554.0 ]--
r 54         StdOut.println(": " + Integer.toString(col-1 + row*size));
--[ 2019.09.16.18.31.31.990.0 ]--
r 54         StdOut.println(" : " + Integer.toString(col-1 + row*size));
--[ 2019.09.16.18.31.32.042.0 ]--
r 54         StdOut.println(": " + Integer.toString(col-1 + row*size));
--[ 2019.09.16.18.31.35.938.0 ]--
r 54         StdOut.println( Integer.toString(col-1 + row*size));
--[ 2019.09.16.18.31.38.491.0 ]--
r 54         StdOut.println( col-1 + row*size));
--[ 2019.09.16.18.31.41.082.0 ]--
r 54         StdOut.println( col-1 + row*size);
--[ 2019.09.16.18.31.46.089.0 ]--
+ 55         
--[ 2019.09.16.18.31.46.276.0 ]--
r 55         StdOut.println( col-1 + row*size);
--[ 2019.09.16.18.31.52.483.0 ]--
r 55         StdOut.println( col-1 + ro*size);
--[ 2019.09.16.18.31.52.683.0 ]--
r 55         StdOut.println( col-1 + ro1*size);
--[ 2019.09.16.18.31.53.939.0 ]--
r 55         StdOut.println( col-1 + ro1w*size);
--[ 2019.09.16.18.31.54.348.0 ]--
r 55         StdOut.println( col-1 + ro1w+*size);
--[ 2019.09.16.18.31.54.587.0 ]--
r 55         StdOut.println( col-1 + ro1w+1*size);
--[ 2019.09.16.18.31.55.032.0 ]--
r 55         StdOut.println( col-1 + ro1w+*size);
--[ 2019.09.16.18.31.55.135.0 ]--
r 55         StdOut.println( col-1 + ro1w*size);
--[ 2019.09.16.18.31.55.491.0 ]--
r 55         StdOut.println( col-1 + ro1*size);
--[ 2019.09.16.18.31.55.875.0 ]--
r 55         StdOut.println( col-1 + ro*size);
--[ 2019.09.16.18.31.55.986.0 ]--
r 55         StdOut.println( col-1 + row*size);
--[ 2019.09.16.18.31.56.351.0 ]--
r 55         StdOut.println( col-1 + row+*size);
--[ 2019.09.16.18.31.56.526.0 ]--
r 55         StdOut.println( col-1 + row+1*size);
--[ 2019.09.16.18.31.56.810.0 ]--
r 55         StdOut.println( col-1 + row+1)*size);
--[ 2019.09.16.18.31.58.295.0 ]--
r 55         StdOut.println( col-1 + (row+1)*size);
--[ 2019.09.16.18.31.59.079.0 ]--
r 55         StdOut.println( col-1 + ( row+1)*size);
--[ 2019.09.16.18.31.59.132.0 ]--
r 55         StdOut.println( col-1 + (row+1)*size);
--[ 2019.09.16.18.32.01.193.0 ]--
+ 56         
--[ 2019.09.16.18.32.01.490.0 ]--
r 56         StdOut.println( col-1 + row*size);
--[ 2019.09.16.18.32.16.279.0 ]--
r 56         
--[ 2019.09.16.18.32.16.595.0 ]--
- 56
--[ 2019.09.16.18.32.26.311.0 ]--
+ 56         
--[ 2019.09.16.18.32.27.849.0 ]--
r 56         StdOut.println( col-1 + row*size);
--[ 2019.09.16.18.32.32.055.0 ]--
r 56         StdOut.println( col- + row*size);
--[ 2019.09.16.18.32.32.812.0 ]--
r 56         StdOut.println( col + row*size);
--[ 2019.09.16.18.32.34.643.0 ]--
r 56         StdOut.println( col + (row*size);
--[ 2019.09.16.18.32.35.800.0 ]--
r 56         StdOut.println( col + (row+*size);
--[ 2019.09.16.18.32.35.965.0 ]--
r 56         StdOut.println( col + (row+1*size);
--[ 2019.09.16.18.32.36.261.0 ]--
r 56         StdOut.println( col + (row+1)*size);
--[ 2019.09.16.18.32.38.691.0 ]--
r 56         StdOut.println( col + (row+1) *size);
--[ 2019.09.16.18.32.38.757.0 ]--
r 56         StdOut.println( col + (row+1)*size);
--[ 2019.09.16.18.32.40.430.0 ]--
+ 57         
--[ 2019.09.16.18.32.40.688.0 ]--
r 57         StdOut.println( col-1 + row*size);
--[ 2019.09.16.18.32.53.104.0 ]--
r 57         StdOut.println( col1 + row*size);
--[ 2019.09.16.18.32.53.351.0 ]--
r 57         StdOut.println( col+1 + row*size);
--[ 2019.09.16.18.32.55.223.0 ]--
+ 58         
--[ 2019.09.16.18.32.55.568.0 ]--
r 58         StdOut.println( col-1 + row*size);
--[ 2019.09.16.18.32.59.198.0 ]--
r 58         StdOut.println( col1 + row*size);
--[ 2019.09.16.18.32.59.487.0 ]--
r 58         StdOut.println( col+1 + row*size);
--[ 2019.09.16.18.32.59.654.0 ]--
r 58         StdOut.println( col+11 + row*size);
--[ 2019.09.16.18.33.00.692.0 ]--
r 58         StdOut.println( col+1 + row*size);
--[ 2019.09.16.18.33.02.083.0 ]--
r 58         StdOut.println( col+1 + (row*size);
--[ 2019.09.16.18.33.03.243.0 ]--
r 58         StdOut.println( col+1 + (row+*size);
--[ 2019.09.16.18.33.03.749.0 ]--
r 58         StdOut.println( col+1 + (row+1*size);
--[ 2019.09.16.18.33.04.037.0 ]--
r 58         StdOut.println( col+1 + (row+1)*size);
--[ 2019.09.16.18.33.07.883.0 ]--
+ 59         
--[ 2019.09.16.18.33.08.239.0 ]--
r 59         StdOut.println( col-1 + row*size);
--[ 2019.09.16.18.33.10.606.0 ]--
r 59         StdOut.println( col- + row*size);
--[ 2019.09.16.18.33.10.736.0 ]--
r 59         StdOut.println( col + row*size);
--[ 2019.09.16.18.33.11.994.0 ]--
r 59         StdOut.println( col + (row*size);
--[ 2019.09.16.18.33.13.059.0 ]--
r 59         StdOut.println( col + (row-*size);
--[ 2019.09.16.18.33.13.141.0 ]--
r 59         StdOut.println( col + (row-1*size);
--[ 2019.09.16.18.33.13.401.0 ]--
r 59         StdOut.println( col + (row-1)*size);
--[ 2019.09.16.18.33.14.492.0 ]--
r 59         StdOut.println( col + (row-1) *size);
--[ 2019.09.16.18.33.14.530.0 ]--
r 59         StdOut.println( col + (row-1)*size);
--[ 2019.09.16.18.33.17.991.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.35.29.536.0 ]--
r 59         StdOut.println( col + (row-1) *size);
--[ 2019.09.16.18.35.30.400.0 ]--
r 59         StdOut.println( col + (row-1)*size);
--[ 2019.09.16.18.37.35.662.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.38.28.437.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.09.16.18.39.41.432.0 ]--
r 58         StdOut.println( col+1 + (row1)*size);
--[ 2019.09.16.18.39.41.515.0 ]--
r 58         StdOut.println( col+1 + (row-1)*size);
--[ 2019.09.16.18.40.10.545.0 ]--
r 65             if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){connection.union( (col + row*size), col+ + (row-1)*size);}
--[ 2019.09.16.18.40.11.308.0 ]--
r 65             if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){connection.union( (col + row*size), col + (row-1)*size);}
--[ 2019.09.16.18.41.02.666.0 ]--
r 58         StdOut.println( col + (row-1)*size);
r 59         StdOut.println( col+1 + (row-1)*size);
--[ 2019.09.16.18.41.02.773.0 ]--
r 57         StdOut.println( col + (row-1)*size);
r 58         StdOut.println( col+1 + row*size);
--[ 2019.09.16.18.41.02.908.0 ]--
r 56         StdOut.println( col + (row-1)*size);
r 57         StdOut.println( col + (row+1)*size);
--[ 2019.09.16.18.41.03.306.0 ]--
r 56         StdOut.println( col + (row+1)*size);
r 57         StdOut.println( col + (row-1)*size);
--[ 2019.09.16.18.41.03.447.0 ]--
r 57         StdOut.println( col+1 + row*size);
r 58         StdOut.println( col + (row-1)*size);
--[ 2019.09.16.18.41.03.525.0 ]--
r 58         StdOut.println( col+1 + (row-1)*size);
r 59         StdOut.println( col + (row-1)*size);
--[ 2019.09.16.18.41.03.535.0 ]--
r 60         if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.16.18.41.08.005.0 ]--
- 53
- 53
- 53
- 53
- 53
- 53
r 53 
--[ 2019.09.16.18.41.08.411.0 ]--
- 53
--[ 2019.09.16.18.41.08.786.0 ]--
r 52             //Connect set tile to all tiles around it 
--[ 2019.09.16.18.41.08.821.0 ]--
r 52             //Connect set tile to all tiles around it
--[ 2019.09.16.18.41.13.884.0 ]--
r 53             if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.16.18.41.14.984.0 ]--
r 53              if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.16.18.41.15.042.0 ]--
r 53         if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.16.18.41.16.121.0 ]--
r 53             if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row*size));}
--[ 2019.09.16.18.41.19.279.0 ]--
+ 52             
--[ 2019.09.16.18.41.19.303.0 ]--
r 53         //Connect set tile to all tiles around it
--[ 2019.09.16.18.41.20.743.0 ]--
r 53             //Connect set tile to all tiles around it
--[ 2019.09.16.18.43.44.436.0 ]--
r 53             //Connect set tile to all tiles around itk
--[ 2019.09.16.18.43.44.520.0 ]--
r 53             //Connect set tile to all tiles around itkj
--[ 2019.09.16.18.43.44.590.0 ]--
r 53             //Connect set tile to all tiles around itkjh
--[ 2019.09.16.18.43.44.622.0 ]--
r 53             //Connect set tile to all tiles around itkjhg
--[ 2019.09.16.18.43.44.653.0 ]--
r 53             //Connect set tile to all tiles around itkjhgf
--[ 2019.09.16.18.43.44.685.0 ]--
r 53             //Connect set tile to all tiles around itkjhgfd
--[ 2019.09.16.18.43.44.772.0 ]--
r 53             //Connect set tile to all tiles around itkjhgfds
--[ 2019.09.16.18.43.44.800.0 ]--
r 53             //Connect set tile to all tiles around itkjhgfdsa
--[ 2019.09.16.18.43.46.197.0 ]--
r 53             //Connect set tile to all tiles around 
--[ 2019.09.16.18.43.47.989.0 ]--
r 53             //Connect set tile to all tiles around
--[ 2019.09.16.18.43.50.311.0 ]--
r 52 
--[ 2019.09.16.18.57.44.434.0 ]--
DisposeComponent
--[ 2019.09.17.10.32.54.775.0 ]--
NewLogger: P01_Hex
Version: 1.3
--[ 2019.09.17.10.32.55.085.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2019.09.17.10.32.55.086.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2019.09.17.10.32.55.086.1 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/
public class HexBoard {
    private int[][] board;
    private int boardSize;
    private int nodes;
    private int size;
    private int allTiles;
    QuickFindUF connection;

    //Initialization
    public HexBoard(int N) {
        board = new int[N][N];
        boardSize = N * N;
        allTiles = N*N;
        nodes = (N*N) + 4;
        size = N;
        connection = new QuickFindUF(nodes);
    }

    public int getPlayer(int row, int col) {
        //If board[row][col] == 1, then the player is player 1 or if board[row][col] == 2 then the player is player 2
        return board[row][col];
    }
    
    public boolean isSet(int row, int col) {
        //Check if the tile at board[row][col] has been set by either player
        if(board[row][col] == 1 || board[row][col] == 2){
            return true;
        }
        return false;
    }

    public boolean isOnWinningPath(int row, int col) {
        return false;
    }

    public void setTile(int row, int col, int player) {
        //Set the board[row][col] equal to player 1 or 2, and decrement the number of unset tiles
        board[row][col] = player;
        boardSize -= 1;

        //The nodes that connect around another node will be equal to:
        //(row, col)
        //(row, col-1)
        //(row+1, col-1)
        //(row+1, col)
        //(row, col+1)
        //(row-1, col+1)
        //(row-1, col)

            //Connect set tile to all tiles around
            if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row*size));}
            if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == player){connection.union((col + (row*size)), (col-1 + (row+1)*size));}
            if(inRange(row+1, col+0) && getPlayer(row+1, col) == player){connection.union((col + (row*size)), (col+ (row+1)*size));}
            if(inRange(row+0, col+1) && getPlayer(row, col+1) == player){connection.union((col + (row*size)), (col+1 + row*size));}
            if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == player){connection.union((col + (row*size)), (col+1 + (row-1)*size));}
            if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){connection.union( (col + row*size), col + (row-1)*size);}

        StdOut.println("Row: " + row);
        StdOut.println("Col: " + col);
            if(player == 1 && col == 0){connection.union(col + (row*size), allTiles); } //Connect to red's north west edge
            if(player == 1 && col == size-1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
            if(player == 2 && row == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blue's north east edge
            if(player == 2 && row == size-1){connection.union((col + (row*size)), allTiles+3); } //Connect to blue's south west edge

    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {

        return boardSize;
    }
    private boolean inRange(int row, int col){
        if(row <= size|| col <= size || row >= 0 || col >= 0){
            return false;
        }
        return true;
    }
}

--[ 2019.09.17.10.32.55.086.2 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public static void main(String[] args) {
    }
}

--[ 2019.09.17.10.32.55.087.0 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2019.09.17.10.32.55.087.1 ]--
InitFile: /.cos265


--[ 2019.09.17.10.32.55.087.2 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.09.17.10.33.14.097.0 ]--
DisposeComponent
--[ 2020.07.10.21.31.02.197.0 ]--
NewLogger: P01_Hex
Version: 1.3
--[ 2020.07.10.21.31.02.203.0 ]--
InitTree:
/out/production/P01_Hex/.donotlog
/out/production/P01_Hex/algs4.jar
/out/production/P01_Hex/stdlib.jar
/out/production/P01_Hex/HexBoard.class
/out/production/P01_Hex/input-1-p1.txt
/out/production/P01_Hex/input-1-p2.txt
/out/production/P01_Hex/input-3-p1.txt
/out/production/P01_Hex/input-3-p2.txt
/out/production/P01_Hex/input-7-p2.txt
/out/production/P01_Hex/input-11-p2.txt
/out/production/P01_Hex/input-17-p1.txt
/out/production/P01_Hex/input-random-5.txt
/out/production/P01_Hex/HexBoardStats.class
/out/production/P01_Hex/input-random-13.txt
/out/production/P01_Hex/input-random-49.txt
/out/production/P01_Hex/input-random-99.txt
/out/production/P01_Hex/input-random-199.txt
/out/production/P01_Hex/input-1-nowinners.txt
/out/production/P01_Hex/input-zigzag-5-p1.txt
/out/production/P01_Hex/input-zigzag-5-p2.txt
/out/production/P01_Hex/input-zigzag-13-p1.txt
/out/production/P01_Hex/input-zigzag-17-p2.txt
/out/production/P01_Hex/input-zigzag-31-p2.txt
/out/production/P01_Hex/HexBoardVisualizer.class
/out/production/P01_Hex/InteractiveHexBoardVisualizer.class
/src/algs4.jar
/src/stdlib.jar
/src/HexBoard.java
/src/HexBoardStats.java
/src/HexBoardVisualizer.java
/src/InteractiveHexBoardVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/src.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input-1-p1.txt
/tests/input-1-p2.txt
/tests/input-3-p1.txt
/tests/input-3-p2.txt
/tests/input-7-p2.txt
/tests/input-11-p2.txt
/tests/input-17-p1.txt
/tests/input-random-5.txt
/tests/input-random-13.txt
/tests/input-random-49.txt
/tests/input-random-99.txt
/tests/input-random-199.txt
/tests/input-1-nowinners.txt
/tests/input-zigzag-5-p1.txt
/tests/input-zigzag-5-p2.txt
/tests/input-zigzag-13-p1.txt
/tests/input-zigzag-17-p2.txt
/tests/input-zigzag-31-p2.txt
/.cos265
/P01_Hex.iml
/readme.html

--[ 2020.07.10.21.31.02.223.0 ]--
InitFile: /src/InteractiveHexBoardVisualizer.java
/****************************************************************************
 *  Command: InteractiveHexBoardVisualizer N
 *
 *  This program takes the board size N as a command-line argument.
 *  Then, the user repeatedly clicks tiles to set with the mouse.
 *  After each tile is set, it redraws the game board (see comments in
 *  HexBoardVisualizer.java file for details).
 *
 ****************************************************************************/

public class InteractiveHexBoardVisualizer {
    private final static int DELAY = 20;

    public static void main(String[] args) {
        // N-by-N hex board game (read from command-line, default = 5)
        int N = 5;
        if (args.length == 1) N = Integer.parseInt(args[0]);

        int player = 1;

        // turn on animation mode
        StdDraw.show(0);

        StdOut.println(N);

        HexBoard board = new HexBoard(N);

        HexBoardVisualizer.drawBoardAndStatus(player, board, N);
        StdDraw.show(DELAY);

        while (true) {

            // detected mouse click
            if(StdDraw.mousePressed() && !board.hasPlayer1Won() && !board.hasPlayer2Won()) {

                // screen coordinates
                double x = StdDraw.mouseX();
                double y = StdDraw.mouseY();

                // find row,col of click
                double r = (x + 1.73 * y) / 3.00;
                double c = x / 1.5 - r;
                int i = (int)Math.round(r);
                int j = (int)Math.round(c);

                // make sure player clicks close enough to center of tile
                if(Math.abs(r - i) < 0.4 && Math.abs(c - j) < 0.4) {
                    // is tile a valid position on board?
                    if (i >= 0 && i < N && j >= 0 && j < N) {
                        // is board tile already set?
                        if (!board.isSet(i, j)) {
                            StdOut.println(i + " " + j + " " + player);
                            // set board tile
                            board.setTile(i, j, player);

                            // switch player
                            player = (player==1) ? 2 : 1;

                            // redraw board
                            HexBoardVisualizer.drawBoardAndStatus(player, board, N);
                        }
                    }
                }
            }

            StdDraw.show(DELAY);
        }
    }
}

--[ 2020.07.10.21.31.02.232.0 ]--
InitFile: /src/HexBoard.java
/****************************************************************************
 *  This class manages an N-by-N hex game board .
 ****************************************************************************/
public class HexBoard {
    private int[][] board;
    private int boardSize;
    private int nodes;
    private int size;
    private int allTiles;
    QuickFindUF connection;

    //Initialization
    public HexBoard(int N) {
        board = new int[N][N];
        boardSize = N * N;
        allTiles = N*N;
        nodes = (N*N) + 4;
        size = N;
        connection = new QuickFindUF(nodes);
    }

    public int getPlayer(int row, int col) {
        //If board[row][col] == 1, then the player is player 1 or if board[row][col] == 2 then the player is player 2
        return board[row][col];
    }
    
    public boolean isSet(int row, int col) {
        //Check if the tile at board[row][col] has been set by either player
        if(board[row][col] == 1 || board[row][col] == 2){
            return true;
        }
        return false;
    }

    public boolean isOnWinningPath(int row, int col) {
        return false;
    }

    public void setTile(int row, int col, int player) {
        //Set the board[row][col] equal to player 1 or 2, and decrement the number of unset tiles
        board[row][col] = player;
        boardSize -= 1;

        //The nodes that connect around another node will be equal to:
        //(row, col)
        //(row, col-1)
        //(row+1, col-1)
        //(row+1, col)
        //(row, col+1)
        //(row-1, col+1)
        //(row-1, col)

            //Connect set tile to all tiles around
            if(inRange(row+0, col-1) && getPlayer(row, col-1) == player){connection.union((col + (row*size)), (col-1 + row*size));}
            if(inRange(row+1, col-1) && getPlayer(row+1, col-1) == player){connection.union((col + (row*size)), (col-1 + (row+1)*size));}
            if(inRange(row+1, col+0) && getPlayer(row+1, col) == player){connection.union((col + (row*size)), (col+ (row+1)*size));}
            if(inRange(row+0, col+1) && getPlayer(row, col+1) == player){connection.union((col + (row*size)), (col+1 + row*size));}
            if(inRange(row-1, col+1) && getPlayer(row-1, col+1) == player){connection.union((col + (row*size)), (col+1 + (row-1)*size));}
            if(inRange(row-1, col+0) && getPlayer(row-1, col) == player){connection.union( (col + row*size), col + (row-1)*size);}

        StdOut.println("Row: " + row);
        StdOut.println("Col: " + col);
            if(player == 1 && col == 0){connection.union(col + (row*size), allTiles); } //Connect to red's north west edge
            if(player == 1 && col == size-1){connection.union((col + (row*size)), allTiles+2); } //Connect to red's south east edge
            if(player == 2 && row == 0){connection.union((col + (row*size)), allTiles+1); } //Connect to blue's north east edge
            if(player == 2 && row == size-1){connection.union((col + (row*size)), allTiles+3); } //Connect to blue's south west edge

    }

    public boolean hasPlayer1Won() {
        return false;
    }

    public boolean hasPlayer2Won() {
        return false;
    }

    public int numberOfUnsetTiles() {

        return boardSize;
    }
    private boolean inRange(int row, int col){
        if(row <= size|| col <= size || row >= 0 || col >= 0){
            return false;
        }
        return true;
    }
}

--[ 2020.07.10.21.31.02.253.0 ]--
InitFile: /src/HexBoardStats.java
/****************************************************************************
 *  Command: HexBoardStats N0 N1 T
 *
 *  This program takes the board sizes N0,N1 and game count T as a command-line
 *  arguments. Then, the program runs T games for each board size N where
 *  N0 <= N <= N1 and where each play randomly chooses an unset tile to set in
 *  order to estimate the probability that player 1 will win.
 ****************************************************************************/

public class HexBoardStats {
    public static void main(String[] args) {
    }
}

--[ 2020.07.10.21.31.02.265.0 ]--
InitFile: /src/HexBoardVisualizer.java
/****************************************************************************
 *  Command: HexBoardVisualizer input.txt
 *
 *  This program takes the name of a file as a command-line argument.
 *  From that file, it
 *
 *    - Reads the board size N of the Hex game board.
 *    - Creates an N-by-N grid of tiles (initially all unset)
 *    - Reads in a sequence of triplets (r, c, p) to set tile row r, col c by player p.
 *
 *  After each tile is set, it redraws the game board.
 *  Unset tiles are drawn in gray, tiles set by player 1 in red,
 *  tiles set by player 2 in blue, and tiles along game-winning path
 *  are drawn in lighter version of the player color.
 *  Tile (0, 0) is the leftmost corner tile.
 *
 ****************************************************************************/

import java.awt.*;

public class HexBoardVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // colors of board when unset or set by player 1 or player 2
    private final static Color cUnset      = new Color(192, 192, 192);
    private final static Color cPlayer1    = new Color(240,  32,  32);
    private final static Color cWinPath1   = new Color(255, 144, 128);
    private final static Color cEdge1      = new Color(160,  80,  80);
    private final static Color cPlayer2    = new Color( 32,  32, 240);
    private final static Color cWinPath2   = new Color(128, 144, 255);
    private final static Color cEdge2      = new Color( 80,  80, 160);
    private final static Color cBackground = new Color( 96,  96,  96);
    private final static Color cStatusBG   = new Color(255, 255, 255, 128);

    private static void drawHexXY(double cx, double cy, Color color, double r) {
        double px[] = { cx + 1.00*r, cx + 0.50*r, cx - 0.50*r, cx - 1.00*r, cx - 0.50*r, cx + 0.50*r };
        double py[] = { cy + 0.00*r, cy - 0.87*r, cy - 0.87*r, cy + 0.00*r, cy + 0.87*r, cy + 0.87*r };
        StdDraw.setPenColor(color);
        StdDraw.filledPolygon(px, py);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.polygon(px, py);
    }

    private static void drawHexRowCol(int row, int col, Color color) {
        double cx = row * 1.50 + col * 1.50;
        double cy = row * 0.87 - col * 0.87;
        drawHexXY(cx, cy, color, 1.0);
    }

    private static void setScale(int N) {
        StdDraw.setXscale(-1.0, (N-1)*3.0+1);
        StdDraw.setYscale(-N * 1.5, N * 1.5);
    }

    public static void drawStatus(int player, HexBoard board, int N) {
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setXscale(0, 200);
        StdDraw.setYscale(0, 200);

        // draw background of status
        StdDraw.setPenColor(cStatusBG);
        StdDraw.filledRectangle(0,0,64,36);

        // report number of unset tiles
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.textLeft(5, 12, board.numberOfUnsetTiles() + " unset tiles");

        if(board.hasPlayer1Won()) {
            StdDraw.textLeft(5, 24, "Player 1 has won!");
        } else if(board.hasPlayer2Won()) {
            StdDraw.textLeft(5, 24, "Player 2 has won!");
        } else if(player == 1 || player == 2){
            double hx = 29.0; //2.25*N;
            double hy = 24.0;

            HexBoardVisualizer.drawHexXY(hx, hy, player == 1 ? cPlayer1 : cPlayer2, 6.0);
            StdDraw.setPenColor(StdDraw.WHITE); //(player == 1 ? StdDraw.WHITE : StdDraw.BLACK);
            StdDraw.text(hx, hy, "" + player);
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.textLeft(5, hy, "Player");
        } else {
            // a special player status for playback
            StdDraw.textLeft(5, 24, "No winner detected...");
        }

        setScale(N);
    }

    // draw N-by-N hex board
    public static void drawBoard(HexBoard board, int N) {
        StdDraw.clear();
        StdDraw.clear(cBackground);
        setScale(N);

        int won = board.hasPlayer1Won() ? 1 : (board.hasPlayer2Won() ? 2 : 0);

        for(int row = 0; row < N; row++) {
            for(int col = 0; col < N; col++) {
                Color color;
                if(!board.isSet(row, col)) {
                    color = cUnset;
                } else if(won != 0 && board.isOnWinningPath(row, col)) {
                    if(won == 1) {
                        color = cWinPath1;
                    } else {
                        color = cWinPath2;
                    }
                } else if(board.getPlayer(row, col) == 1) {
                    color = cPlayer1;
                } else {
                    color = cPlayer2;
                }
                drawHexRowCol(row, col, color);
            }
        }

        // draw player 1 sides of board
        for(int row = 0; row < N-1; row++) {
            drawHexRowCol(row + 1, -1, cEdge1);
            drawHexRowCol(row, N, cEdge1);
        }

        // draw player 2 sides of board
        for(int col = 0; col < N-1; col++) {
            drawHexRowCol(-1, col + 1, cEdge2);
            drawHexRowCol(N, col, cEdge2);
        }
    }

    public static void drawBoardAndStatus(int player, HexBoard board, int N) {
        drawBoard(board, N);
        drawStatus(player, board, N);
    }

    private static void simulateFromFile(String filename) {
        In in = new In(filename);
        int N = in.readInt();
        HexBoard board = new HexBoard(N);

        // turn on animation mode
        StdDraw.show(0); 

        // repeatedly read in tiles to open and drawBoard resulting system
        drawBoardAndStatus(0, board, N);
        StdDraw.show(DELAY);
        while (!in.isEmpty()) {
            int i = in.readInt();
            int j = in.readInt();
            int p = in.readInt();
            board.setTile(i, j, p);
            drawBoardAndStatus(0, board, N);
            StdDraw.show(DELAY);
            if(board.hasPlayer1Won() || board.hasPlayer2Won()) break;
        }
    }

    public static void main(String[] args) {
        String filename = args[0];
        simulateFromFile(filename);
    }
}

--[ 2020.07.10.21.31.02.274.0 ]--
InitFile: /.cos265


--[ 2020.07.10.21.31.02.284.0 ]--
InitFile: /P01_Hex.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2020.07.10.21.31.08.023.0 ]--
UpdateTree (AD): 1 0
+ /.idea/vcs.xml

--[ 2020.07.10.21.31.12.115.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2020.07.10.21.32.26.377.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2020.07.10.21.33.07.153.0 ]--
DisposeComponent
