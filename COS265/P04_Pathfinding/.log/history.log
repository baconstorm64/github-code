--[ 2019.11.06.15.55.11.599.0 ]--
NewLogger: P04_Pathfinding
Version: 1.3
--[ 2019.11.06.15.55.11.619.0 ]--
InitTree:
/src/algs4.jar
/src/Coord.java
/src/stdlib.jar
/src/Walker.java
/src/Terrain.java
/src/Pathfinder.java
/src/TerrainEditor.java
/src/PathfinderVisualizer.java
/src/InteractivePathfinderVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/heightmaps/.donotlog
/heightmaps/png2emap.py
/heightmaps/ramp.png.emap
/heightmaps/ramp2.png.emap
/heightmaps/ramp3.png.emap
/heightmaps/mazeAB.png.emap
/heightmaps/usa128.png.emap
/heightmaps/usa256.png.emap
/heightmaps/usa1024.png.emap
/heightmaps/maze32_0.png.emap
/heightmaps/maze32_1.png.emap
/heightmaps/maze232_0.png.emap
/heightmaps/maze320_0.png.emap
/heightmaps/mazeBrain.png.emap
/.cos265
/readme.html
/P04_Pathfinding.iml

--[ 2019.11.06.15.55.11.623.0 ]--
InitFile: /src/Coord.java
/**
 * Coordinates is an immutable type that store the tuple (i, j)
 */
public final class Coord {
    private final int i;
    private final int j;

    public Coord(int i, int j) {
        this.i = i;
        this.j = j;
    }

    public int getI() { return i; }
    public int getJ() { return j; }

    public boolean isInBounds(int minI, int minJ, int maxI, int maxJ) {
        return i >= minI && j >= minJ && i <= maxI && j <= maxJ;
    }
    public boolean isInBounds(Coord min, Coord max) {
        return i >= min.i && i <= max.i && j >= min.j && j <= max.j;
    }

    public Coord add(int addI, int addJ) {
        return new Coord(i + addI, j + addJ);
    }
    public Coord add(Coord that) { return new Coord(i + that.i, j + that.j); }

    public String toString() { return "(" + i + "," + j + ")"; }

    public boolean equals(Object o) {
        if(this == o) return true;
        if(o == null) return false;
        if(o.getClass() != this.getClass()) return false;
        Coord that = (Coord) o;
        if(this.i != that.i) return false;
        if(this.j != that.j) return false;
        return true;
    }
}

--[ 2019.11.06.15.55.11.627.0 ]--
InitFile: /P04_Pathfinding.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/heightmaps" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.11.06.15.55.11.629.0 ]--
InitFile: /src/InteractivePathfinderVisualizer.java
import java.awt.event.KeyEvent;

/**
 * InteractivePathfinderVisualizer visualizes the terrain and the computed
 * path and allows the user to change parameters of the Pathfinder.  Below
 * is a list of commands and what they do.  Note: some of the commands
 * modify the properties of the path finder and some modify the terrain.
 *
 * Command        Action                                      Terrain
 * C              clear path
 * space          recompute path
 * S/E            set start/end location to mouse
 * left/right     halve/double path search heuristic value
 * 0/1            set path search heuristic to 0 or 1
 * W              start a walker to show the path
 * R              randomly generate a new terrain                *
 * M              smooths terrain under mouse                    *
 * shift+M        smooths all terrain                            *
 * up/down        increase/decrease terrain under mouse          *
 */

public class InteractivePathfinderVisualizer {
    private final static int DELAY = 10;

    // sets how many redraws it should take for the walker to reach its destination
    private final static float STEPS_TO_WALK = 100.0f;

    // for convenience, here are the emap files that are located under heightmaps/ folder
    // the python script in that folder converts png files to emap. \
    // you can use it to create your own maps to test your code
    private final static String[] emaps = {
            "maze32_0.png.emap",    // 0   (32x32 maze)
            "maze32_1.png.emap",    // 1   (another 32x32 maze)
            "maze232_0.png.emap",   // 2   (232x232 maze)
            "maze320_0.png.emap",   // 3   (same as maze32_0, only scaled up by 10x)
            "mazeAB.png.emap",      // 4   (a maze from a site no longer online :( )
            "mazeBrain.png.emap",   // 5   (...)
            "ramp.png.emap",        // 6   (some tests)
            "ramp2.png.emap",       // 7   (...)
            "ramp3.png.emap",       // 8   (...)
            "usa128.png.emap",      // 9   (elevation map of USA from https://bananas.openttd.org/en/heightmap/)
            "usa256.png.emap",      // 10  (same as usa128, only higher resolution)
            "usa1024.png.emap",     // 11  (same as usa128, only higher resolution
    };

    private final static String emapFilename = emaps[2];        // change index to load a different elevation map



    public static void main(String[] args) {
        Terrain terrain = new Terrain(emapFilename);
        Pathfinder pf = new Pathfinder(terrain);
        int N = terrain.getN();

        StdDraw.show(0);

        // set default starting and ending locations
        pf.setPathStart(new Coord(1, 1));
        pf.setPathEnd(new Coord(N-3, N-3));

        // find a path
        pf.computePath();

        PathfinderVisualizer.draw(terrain, pf, null, N);
        StdDraw.show(DELAY);

        // prevent repeated applications
        boolean keyboardR = false;
        boolean keyboardM = false;

        Walker walker = null;

        while(true) {
            boolean recompute = false;
            boolean redraw = false;

            // mouse location on map
            int mouseI = (int) ((StdDraw.mouseX()-24) / 464 * N);
            int mouseJ = (int) ((464 - (StdDraw.mouseY()-36)) / 464 * N);
            boolean isMouseOnMap = (mouseI >=0 && mouseI < N && mouseJ >= 0 && mouseJ < N);

            if(StdDraw.isKeyPressed(KeyEvent.VK_LEFT) || StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
                boolean keyboardLeft = StdDraw.isKeyPressed(KeyEvent.VK_LEFT);
                float m = keyboardLeft ? 0.5f : 2.0f;
                float h = pf.getHeuristic() * m;
                h = Math.max(1.0f/1024.0f, Math.min(1048576.0f, h));
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_0) || StdDraw.isKeyPressed(KeyEvent.VK_1)) {
                boolean keyboard0 = StdDraw.isKeyPressed(KeyEvent.VK_0);
                float h = keyboard0 ? 0 : 1;
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_C)) {
                pf.resetPath();
                walker = null;
                redraw = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_R) && !keyboardR) {
                TerrainEditor.setFractalHeights(terrain);
                TerrainEditor.clampHeights(terrain);
                recompute = true;
            }
            keyboardR = StdDraw.isKeyPressed(KeyEvent.VK_R);

            if(StdDraw.isKeyPressed(KeyEvent.VK_M)) {
                if(StdDraw.isKeyPressed(KeyEvent.VK_SHIFT)) {
                    if(!keyboardM) {
                        TerrainEditor.smoothHeights(terrain);
                        recompute = true;
                    }
                } else {
                    TerrainEditor.smoothHeights(mouseI, mouseJ, N / 20, true, terrain);
                    recompute = true;
                }
            }
            keyboardM = StdDraw.isKeyPressed(KeyEvent.VK_M);

            if(StdDraw.isKeyPressed(KeyEvent.VK_SPACE)) {
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_UP) || StdDraw.isKeyPressed(KeyEvent.VK_DOWN)) {
                boolean keyboardUp = StdDraw.isKeyPressed(KeyEvent.VK_UP);
                float add = keyboardUp ? 8.0f : -8.0f;
                TerrainEditor.addHeight(mouseI, mouseJ, N / 20, add, terrain);
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_S)) {
                pf.setPathStart(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_E)) {
                pf.setPathEnd(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_W)) {
                Iterable<Coord> path = pf.getPathSolution();
                if(path != null) {
                    walker = new Walker(terrain, pf.getPathSolution());
                }
            }

            if(walker != null) {
                if(walker.doneWalking()) {
                    walker = null;
                } else {
                    walker.advance(pf.getPathCost() / STEPS_TO_WALK);
                }
                redraw = true;
            }

            if(recompute) {
                walker = null;
                pf.resetPath();
                if(pf.getPathStart() != null && pf.getPathEnd() != null) {
                    pf.computePath();
                }
                redraw = true;
            }

            if(redraw) {
                PathfinderVisualizer.draw(terrain, pf, walker, N);
                StdDraw.show(DELAY);
            } else {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    /* do nothing */
                }
            }
        }
    }
}

--[ 2019.11.06.15.55.11.632.0 ]--
InitFile: /src/TerrainEditor.java
/**
 * The following class provides some simple terrain editing functions.
 */
public class TerrainEditor {
    private static float rndRadius(float d) {
        return (float)StdRandom.uniform(-d,d);
    }

    private static float getFractalHeight(int i, int j, float dh, Terrain terrain, boolean[] isset) {
        int N = terrain.getN();
        dh = Math.max(-64, Math.min(255+64, dh));   // allow the height to go just a bit out of range
        if(!isset[i + j * N]) {
            isset[i + j * N] = true;
            terrain.setHeight(i, j, dh);
        }
        return terrain.getHeight(i,j);
    }

    private static void setFractalHeights(int i0, int j0, int i1, int j1, Terrain terrain, boolean[] isset) {
        int id = i1-i0;
        int jd = j1-j0;
        int i01 = (i0+i1)/2;
        int j01 = (j0+j1)/2;

        if(id <= 1 && jd <= 1) return;

        float h00 = getFractalHeight(i0,j0,32,terrain,isset);
        float h01 = getFractalHeight(i0,j1,32,terrain,isset);
        float h10 = getFractalHeight(i1,j0,32,terrain,isset);
        float h11 = getFractalHeight(i1,j1,32,terrain,isset);

        float d = (float)(Math.sqrt((i1-i0)*(i1-i0) + (j1-j0)*(j1-j0)) * 0.5);

        float d0001 = (h00 + h01) / 2 + rndRadius(d);
        float d0010 = (h00 + h10) / 2 + rndRadius(d);
        float d1101 = (h11 + h01) / 2 + rndRadius(d);
        float d1110 = (h11 + h10) / 2 + rndRadius(d);

        float h0001 = getFractalHeight(i0, j01, d0001, terrain,isset);
        float h0010 = getFractalHeight(i01, j0, d0010, terrain,isset);
        float h1101 = getFractalHeight(i01, j1, d1101, terrain,isset);
        float h1110 = getFractalHeight(i1, j01, d1110, terrain,isset);

        float dm = (float)((h0001 + h0010 + h1101 + h1110) / 4.0);
        float hm = getFractalHeight(i01, j01, dm, terrain,isset);

        if(id > 1 && jd > 1) {
            setFractalHeights(i0, j0, i01, j01, terrain, isset);
            setFractalHeights(i01, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i01, j1, terrain, isset);
            setFractalHeights(i01, j01, i1, j1, terrain, isset);
        } else if(jd > 1) {
            setFractalHeights(i0, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i1, j1, terrain, isset);
        } else {
            setFractalHeights(i0, j0, i01, j1, terrain, isset);
            setFractalHeights(i01, j0, i1, j1, terrain, isset);
        }
    }

    public static void setFractalHeights(Terrain terrain) {
        int N = terrain.getN();
        boolean[] isset = new boolean[N*N];
        setFractalHeights(0, 0, N - 1, N - 1, terrain, isset);
    }

    public static void smoothHeights(Terrain terrain) {
        int N = terrain.getN();
        int radius = (int)Math.ceil(Math.sqrt(N*N/2.0f));
        smoothHeights(N/2, N/2, radius, false, terrain);
    }

    public static void smoothHeights(int ic, int jc, int radius, boolean fallOff, Terrain terrain) {
        final int N = terrain.getN();
        final int w = 2*radius+1;
        float[] s = new float[w*w];
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;

                float m = computeEffect(i, j, ic, jc, radius, fallOff, N);
                if(m <= 0.0000001) {
                    s[sidx] = terrain.getHeight(i,j);
                    continue;
                }
                float h = 0;
                int c = 0;
                if(i > 0 && j > 0) {
                    h += terrain.getHeight(i-1,j-1);
                    c += 1;
                }
                if(i < N-1 && j > 0) {
                    h += terrain.getHeight(i+1,j-1);
                    c += 1;
                }
                if(i > 0 && j < N-1) {
                    h += terrain.getHeight(i-1,j+1);
                    c += 1;
                }
                if(i < N-1 && j < N-1) {
                    h += terrain.getHeight(i+1,j+1);
                    c += 1;
                }
                if(i > 0) {
                    h += terrain.getHeight(i-1,j);
                    c += 1;
                }
                if(j > 0) {
                    h += terrain.getHeight(i,j-1);
                    c += 1;
                }
                if(i < N-1) {
                    h += terrain.getHeight(i+1,j);
                    c += 1;
                }
                if(j < N-1) {
                    h += terrain.getHeight(i,j+1);
                    c += 1;
                }
                s[sidx] = (1-m) * terrain.getHeight(i,j) + m * h / c;
            }
        }
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;
                terrain.setHeight(i, j, s[sidx]);
            }
        }
    }

    public static void clampHeights(Terrain terrain) {
        int N = terrain.getN();
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                terrain.setHeight(i, j, Math.max(0, Math.min(255, terrain.getHeight(i, j))));
            }
        }
    }

    private static float computeEffect(int i, int j, int ic, int jc, int radius, boolean fallOff, int N) {
        if(i < 0 || j < 0 || i >= N || j >= N) return 0;
        if(!fallOff) return 1;
        int d2 = (ic-i)*(ic-i)+(jc-j)*(jc-j);
        if(d2 > radius*radius) return 0;
        return ((float)radius - (float)Math.sqrt(d2)) / (float)radius;
    }

    public static void addHeight(int i, int j, int radius, float add, Terrain terrain) {
        final int N = terrain.getN();
        for(int ja = -radius; ja <= radius; ja++) {
            int r = j + ja;
            if(r < 0 || r >= N) continue;
            for(int ia = -radius; ia <= radius; ia++) {
                int c = i + ia;
                if(c < 0 || c >= N) continue;
                float v = add * computeEffect(c, r, i, j, radius, true, N);
                float h = terrain.getHeight(c, r) + v;
                h = Math.max(0, Math.min(255, h));
                terrain.setHeight(c, r, h);
            }
        }
    }
}

--[ 2019.11.06.15.55.11.635.0 ]--
InitFile: /src/Terrain.java
import java.lang.IndexOutOfBoundsException;

/**
 * Terrain stores elevations for map and computes distance and
 * cost in traversing the terrain.
 */

public class Terrain {
    private int N;
    private int[][] heights;

    public Terrain(int N) {
        this.N = N;
        this.heights = new int[N][N];
    }

    public Terrain(int[][] heights) {
        this.N = heights.length;
        this.heights = heights;
    }

    public Terrain(String emapfile) {
        In in = new In(emapfile);
        this.N = in.readInt();
        this.heights = new int[N][N];
        for (int j = 0; j < N; j++) {
            for (int i = 0; i < N; i++) {
                this.heights[i][j] = in.readInt();
            }
        }
    }

    public int getN() {
        return N;
    }

    public void setHeight(int i, int j, int h) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        heights[i][j] = h;
    }
    public void setHeight(int i, int j, float h) {
        setHeight(i, j, (int) h);
    }
    public void setHeight(Coord loc, int h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }
    public void setHeight(Coord loc, float h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }

    public int getHeight(int i, int j) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        return heights[i][j];
    }
    public int getHeight(Coord loc) {
        return getHeight(loc.getI(), loc.getJ());
    }

    // computes distance between (i0,j0) and (i1,j1) as the crow flies
    public float computeDistance(int i0, int j0, int i1, int j1) {
        return (float)Math.sqrt((i0 - i1) * (i0 - i1) + (j0 - j1) * (j0 - j1));
    }
    public float computeDistance(Coord c0, Coord c1) {
        return computeDistance(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }

    public float computeTravelCost(int i0, int j0, int i1, int j1) {
        float h0 = getHeight(i0, j0), h1 = getHeight(i1, j1);
        float climb = (float)Math.pow(Math.abs(h0 - h1) * 1000.0, 1.5);
        float dist = computeDistance(i0,j0, i1,j1);
        return (1.0f + climb) * dist;
    }
    public float computeTravelCost(Coord c0, Coord c1) {
        return computeTravelCost(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }
    public float computeTravelCost(Iterable<Coord> cs) {
        Coord c0 = null;
        float cost = 0.0f;
        for(Coord c1 : cs) {
            if(c0 != null) cost += computeTravelCost(c0, c1);
            c0 = c1;
        }
        return cost;
    }
}

--[ 2019.11.06.15.55.11.638.0 ]--
InitFile: /src/Pathfinder.java
import java.lang.IndexOutOfBoundsException;
import java.lang.IllegalArgumentException;

/**
 * Pathfinder uses A* search to find a near optimal path
 * between to locations with given terrain.
 */

public class Pathfinder {

    /**
     * PFNode will be the key for MinPQ (used in computePath())
     */
    private class PFNode implements Comparable<PFNode> {
        // loc: the location of the PFNode
        // fromNode: how did we get here? (linked list back to start)
        public PFNode(Coord loc, PFNode fromNode) { }

        // compares this with that, used to find minimum cost PFNode
        public int compareTo(PFNode that) {
            return 0;
        }

        // returns the cost to travel from starting point to this
        // via the fromNode chain
        public float getCost(float heuristic) {
            return 0;
        }

        // returns if this PFNode is not marked invalid
        public boolean isValid() {
            return false;
        }

        // marks the PFNode as invalid
        public void invalidate() {
        }

        // returns if the PFNode is marked as used
        public boolean isUsed() {
            return true;
        }

        // marks the PFNode as used
        public void use() { }

        // returns an Iterable of PFNodes that surround this
        public Iterable<PFNode> neighbors() {
            Stack<PFNode> s = new Stack<>();
            s.push(new PFNode(null, null));
            return s;
        }
    }

    public Pathfinder(Terrain terrain) {
    }

    public void setPathStart(Coord loc) {
    }

    public Coord getPathStart() {
        return null;
    }

    public void setPathEnd(Coord loc) {
    }

    public Coord getPathEnd() {
        return null;
    }

    public void setHeuristic(float v) {
    }

    public float getHeuristic() {
        return 0;
    }

    public void resetPath() {
    }

    public void computePath() {
    }

    public boolean foundPath() {
        return false;
    }

    public float getPathCost() {
        return 0;
    }

    public int getSearchSize() {
        return 0;
    }

    public Iterable<Coord> getPathSolution() {
        return null;
    }

    public boolean wasSearched(Coord loc) {
        return false;
    }
}

--[ 2019.11.06.15.55.11.641.0 ]--
InitFile: /src/Walker.java
import java.util.Iterator;

/**
 * Walker takes an Iterable of Coords and simulates an individual
 * walking along the path over the given Terrain
 */
public class Walker {

    // terrain: the Terrain the Walker traverses
    // path: the sequence of Coords the Walker follows
    public Walker(Terrain terrain, Iterable<Coord> path) {
    }

    // returns the Walker's current location
    public Coord getLocation() {
        return null;
    }

    // returns true if Walker has reached the end Coord (last in path)
    public boolean doneWalking() {
        return true;
    }

    // advances the Walker along path
    // byTime: how long the Walker should traverse (may be any non-negative value)
    public void advance(float byTime) {
    }

}

--[ 2019.11.06.15.55.11.643.0 ]--
InitFile: /src/PathfinderVisualizer.java
/**
 * PathfinderVisualizer visualizes the terrain and found path.
 */

import java.awt.Color;
import java.awt.Font;

public class PathfinderVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // color for different elevations.  must be in ascending order!
    private final static int[][] elevationColors = {
            // h    r   g   b   where h=height, r=red, g=green, b=blue
            {  0,   0,  0,  0},
            {  2,   0,  0,160},
            {  4,   0,224,224},
            { 16, 192,192,  0},
            { 64,  16,255, 16},
            {128,  32,224, 32},
            {192, 128,128,  8},
            {224, 164,164,164},
            {255, 255,255,255}
    };

    private final static Color cStart    = new Color(128, 128, 255);
    private final static Color cEnd      = new Color(255, 128, 128);
    private final static Color cSolution = new Color(255, 128, 255);
    private final static Color cSearched = new Color(128,   0, 128);

    // linearly interpolating between the corresponding rgb values
    private static Color colorLERP(float v1, int r0, int g0, int b0, int r1, int g1, int b1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * r0 + v1 * r1);
        int g = (int)(v0 * g0 + v1 * g1);
        int b = (int)(v0 * b0 + v1 * b1);
        return new Color(r, g, b);
    }
    private static Color colorLERP(float v1, Color c0, Color c1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * c0.getRed()   + v1 * c1.getRed());
        int g = (int)(v0 * c0.getGreen() + v1 * c1.getGreen());
        int b = (int)(v0 * c0.getBlue()  + v1 * c1.getBlue());
        int a = (int)(v0 * c0.getAlpha() + v1 * c1.getAlpha());
        return new Color(r, g, b, a);
    }

    // returns color for given height
    private static Color height2Color(int h) {
        h = Math.max(0, Math.min(255, h));

        int[] ec0 = elevationColors[0];  // default lower bound
        int[] ec1 = elevationColors[1];  // default upper bound

        // find upper bound while updating lower bound
        for(int i = 1; i < elevationColors.length; i++) {
            ec1 = elevationColors[i];
            if(h >= ec0[0] && h <= ec1[0]) break;
            ec0 = ec1;
        }

        int h0=ec0[0], r0=ec0[1], g0=ec0[2], b0=ec0[3];
        int h1=ec1[0], r1=ec1[1], g1=ec1[2], b1=ec1[3];
        float v1 = ((float)(h - h0)) / ((float)(h1 - h0));

        return colorLERP(v1, r0, g0, b0, r1, g1, b1);
    }

    private static void drawCircle(int i, int j, int N, double rad) {
        int c = (int)((i+0.5f) * 464.0f / N);
        int r = (int)((j+0.5f) * 464.0f / N);
        StdDraw.circle(c + 24, 464 - r + 36, rad);
    }
    public static void drawCircle(Coord loc, int N, double rad) {
        drawCircle(loc.getI(), loc.getJ(), N, rad);
    }

    private static void drawPath(Iterable<Coord> path, int N) {
        boolean first = true;
        int c0 = 0, r0 = 0;
        for (Coord loc : path) {
            int c1 = (int)((loc.getI()+0.5f) * 464.0f / N);
            int r1 = (int)((loc.getJ()+0.5f) * 464.0f / N);
            if(!first) {
                StdDraw.line(c0 + 24, 464 - r0 + 36, c1 + 24, 464 - r1 + 36);
            }
            first = false;
            c0 = c1; r0 = r1;
        }
    }

    // draw N-by-N pathfinding map
    public static void draw(Terrain terrain, Pathfinder pf, Walker walker, int N) {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.filledSquare(256, 256 + 12, 464 / 2);

        // draw terrain
        for(int row = 0; row < 464; row++) {
            int j = (int)((float)row/464.0f * N);
            for(int col = 0; col < 464; col++) {
                int i = (int)((float)col/464.0f * N);
                Coord loc = new Coord(i,j);
                Color c = height2Color(terrain.getHeight(loc));
                if(pf.wasSearched(loc)) {
                    c = colorLERP(0.50f, c, cSearched);
                }
                StdDraw.setPenColor(c);
                StdDraw.filledSquare(col + 24, 464 - row + 36, 1);
            }
        }

        // draw path start
        if(pf.getPathStart() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathStart(), N, 4.0);

            StdDraw.setPenColor(cStart);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathStart(), N, 4.0);
        }

        // draw path end
        if(pf.getPathEnd() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathEnd(), N, 4.0);

            StdDraw.setPenColor(cEnd);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathEnd(), N, 4.0);
        }

        // draw found path
        if(pf.foundPath()) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawPath(pf.getPathSolution(), N);

            StdDraw.setPenColor(cSolution);
            StdDraw.setPenRadius(0.002);
            drawPath(pf.getPathSolution(), N);
        }

        // draw walker
        if(walker != null) {
            Coord loc = walker.getLocation();
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);

            StdDraw.setPenColor(StdDraw.WHITE);
            StdDraw.setPenRadius(0.002);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);
        }

        // write status text
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.text(96, 12, "heuristic: " + pf.getHeuristic());
        if(pf.foundPath()) StdDraw.text(256, 12, "path: " + pf.getPathCost());
        else               StdDraw.text(256, 12, "no path found");
        StdDraw.text(512-96, 12, "searched: " + pf.getSearchSize() + " (" + (int)(100.0f * pf.getSearchSize() / (N*N)) + "%)");
    }
}

--[ 2019.11.06.15.55.11.647.0 ]--
InitFile: /.cos265


--[ 2019.11.06.15.55.40.360.0 ]--
UpdateTree (AD): 24 0
+ /out/production/P04_Pathfinding/.donotlog
+ /out/production/P04_Pathfinding/algs4.jar
+ /out/production/P04_Pathfinding/stdlib.jar
+ /out/production/P04_Pathfinding/Coord.class
+ /out/production/P04_Pathfinding/png2emap.py
+ /out/production/P04_Pathfinding/Walker.class
+ /out/production/P04_Pathfinding/Terrain.class
+ /out/production/P04_Pathfinding/ramp.png.emap
+ /out/production/P04_Pathfinding/ramp2.png.emap
+ /out/production/P04_Pathfinding/ramp3.png.emap
+ /out/production/P04_Pathfinding/mazeAB.png.emap
+ /out/production/P04_Pathfinding/usa128.png.emap
+ /out/production/P04_Pathfinding/usa256.png.emap
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/usa1024.png.emap
+ /out/production/P04_Pathfinding/maze32_0.png.emap
+ /out/production/P04_Pathfinding/maze32_1.png.emap
+ /out/production/P04_Pathfinding/maze232_0.png.emap
+ /out/production/P04_Pathfinding/maze320_0.png.emap
+ /out/production/P04_Pathfinding/mazeBrain.png.emap
+ /out/production/P04_Pathfinding/TerrainEditor.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class
+ /out/production/P04_Pathfinding/PathfinderVisualizer.class
+ /out/production/P04_Pathfinding/InteractivePathfinderVisualizer.class

--[ 2019.11.06.15.55.40.395.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.16.43.49.523.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.17.23.30.893.0 ]--
:/src/Pathfinder.java
+ 11     
--[ 2019.11.06.17.23.32.689.0 ]--
r 11     p
--[ 2019.11.06.17.23.33.262.0 ]--
r 11     pr
--[ 2019.11.06.17.23.33.362.0 ]--
r 11     pri
--[ 2019.11.06.17.23.33.700.0 ]--
r 11     priv
--[ 2019.11.06.17.23.33.896.0 ]--
r 11     priva
--[ 2019.11.06.17.23.34.000.0 ]--
r 11     privat
--[ 2019.11.06.17.23.34.083.0 ]--
r 11     private
--[ 2019.11.06.17.23.35.397.0 ]--
r 11     private 
--[ 2019.11.06.17.23.35.534.0 ]--
r 11     private i
--[ 2019.11.06.17.23.35.604.0 ]--
r 11     private in
--[ 2019.11.06.17.23.35.690.0 ]--
r 11     private int
--[ 2019.11.06.17.23.35.901.0 ]--
r 11     private int 
--[ 2019.11.06.17.23.49.485.0 ]--
r 11     private int
--[ 2019.11.06.17.23.49.598.0 ]--
r 11     private in
--[ 2019.11.06.17.23.49.720.0 ]--
r 11     private i
--[ 2019.11.06.17.23.49.828.0 ]--
r 11     private 
--[ 2019.11.06.17.23.50.708.0 ]--
r 11     private C
--[ 2019.11.06.17.23.50.806.0 ]--
r 11     private Co
--[ 2019.11.06.17.23.50.929.0 ]--
r 11     private Coo
--[ 2019.11.06.17.23.50.944.0 ]--
r 11     private Coor
--[ 2019.11.06.17.23.51.109.0 ]--
r 11     private Coord
--[ 2019.11.06.17.23.52.958.0 ]--
r 11     private Coord 
--[ 2019.11.06.17.23.54.782.0 ]--
r 11     private Coord i
--[ 2019.11.06.17.23.58.531.0 ]--
r 11     private Coord 
--[ 2019.11.06.17.23.58.842.0 ]--
r 11     private Coord  
--[ 2019.11.06.17.23.58.893.0 ]--
r 11     private Coord 
--[ 2019.11.06.17.24.00.774.0 ]--
r 11     private Coord c
--[ 2019.11.06.17.24.00.847.0 ]--
r 11     private Coord co
--[ 2019.11.06.17.24.00.943.0 ]--
r 11     private Coord cor
--[ 2019.11.06.17.24.01.630.0 ]--
r 11     private Coord co
--[ 2019.11.06.17.24.01.742.0 ]--
r 11     private Coord coo
--[ 2019.11.06.17.24.01.815.0 ]--
r 11     private Coord coor
--[ 2019.11.06.17.24.01.929.0 ]--
r 11     private Coord coord
--[ 2019.11.06.17.24.03.889.0 ]--
r 11     private Coord coord;
--[ 2019.11.06.17.24.05.443.0 ]--
+ 12     
--[ 2019.11.06.17.24.08.042.0 ]--
r 11     private Coord ;
--[ 2019.11.06.17.24.12.072.0 ]--
r 11     private Coord s;
--[ 2019.11.06.17.24.12.205.0 ]--
r 11     private Coord st;
--[ 2019.11.06.17.24.12.276.0 ]--
r 11     private Coord sta;
--[ 2019.11.06.17.24.12.403.0 ]--
r 11     private Coord star;
--[ 2019.11.06.17.24.12.562.0 ]--
r 11     private Coord start;
--[ 2019.11.06.17.24.13.922.0 ]--
+ 12     
--[ 2019.11.06.17.24.14.574.0 ]--
r 12     p
--[ 2019.11.06.17.24.14.698.0 ]--
r 12     pr
--[ 2019.11.06.17.24.15.090.0 ]--
r 12     pri
--[ 2019.11.06.17.24.15.167.0 ]--
r 12     priv
--[ 2019.11.06.17.24.15.280.0 ]--
r 12     priva
--[ 2019.11.06.17.24.15.343.0 ]--
r 12     privat
--[ 2019.11.06.17.24.15.432.0 ]--
r 12     private
--[ 2019.11.06.17.24.15.517.0 ]--
r 12     private 
--[ 2019.11.06.17.24.15.670.0 ]--
r 12     private C
--[ 2019.11.06.17.24.15.833.0 ]--
r 12     private Co
--[ 2019.11.06.17.24.15.925.0 ]--
r 12     private Coo
--[ 2019.11.06.17.24.16.000.0 ]--
r 12     private Coor
--[ 2019.11.06.17.24.16.155.0 ]--
r 12     private Coord
--[ 2019.11.06.17.24.16.233.0 ]--
r 12     private Coord 
--[ 2019.11.06.17.24.16.341.0 ]--
r 12     private Coord e
--[ 2019.11.06.17.24.16.409.0 ]--
r 12     private Coord en
--[ 2019.11.06.17.24.16.686.0 ]--
r 12     private Coord end;
--[ 2019.11.06.17.24.21.376.0 ]--
+ 13     
--[ 2019.11.06.17.24.21.608.0 ]--
r 13     p
--[ 2019.11.06.17.24.21.693.0 ]--
r 13     pr
--[ 2019.11.06.17.24.21.867.0 ]--
r 13     pri
--[ 2019.11.06.17.24.22.002.0 ]--
r 13     priv
--[ 2019.11.06.17.24.22.111.0 ]--
r 13     priva
--[ 2019.11.06.17.24.22.206.0 ]--
r 13     privat
--[ 2019.11.06.17.24.22.281.0 ]--
r 13     private
--[ 2019.11.06.17.24.22.366.0 ]--
r 13     private 
--[ 2019.11.06.17.24.22.565.0 ]--
r 13     private C
--[ 2019.11.06.17.24.22.715.0 ]--
r 13     private Co
--[ 2019.11.06.17.24.22.815.0 ]--
r 13     private Coo
--[ 2019.11.06.17.24.22.865.0 ]--
r 13     private Coor
--[ 2019.11.06.17.24.23.018.0 ]--
r 13     private Coord
--[ 2019.11.06.17.24.23.674.0 ]--
r 13     private 
--[ 2019.11.06.17.24.24.087.0 ]--
r 13     private f
--[ 2019.11.06.17.24.24.230.0 ]--
r 13     private fl
--[ 2019.11.06.17.24.24.348.0 ]--
r 13     private flo
--[ 2019.11.06.17.24.24.406.0 ]--
r 13     private floa
--[ 2019.11.06.17.24.24.503.0 ]--
r 13     private float
--[ 2019.11.06.17.24.25.854.0 ]--
r 13     private float 
--[ 2019.11.06.17.24.26.464.0 ]--
r 13     private float h
--[ 2019.11.06.17.24.26.525.0 ]--
r 13     private float he
--[ 2019.11.06.17.24.26.620.0 ]--
r 13     private float heu
--[ 2019.11.06.17.24.26.768.0 ]--
r 13     private float heur
--[ 2019.11.06.17.24.26.996.0 ]--
r 13     private float heuri
--[ 2019.11.06.17.24.27.144.0 ]--
r 13     private float heuris
--[ 2019.11.06.17.24.27.268.0 ]--
r 13     private float heurist
--[ 2019.11.06.17.24.27.353.0 ]--
r 13     private float heuristi
--[ 2019.11.06.17.24.27.421.0 ]--
r 13     private float heuristic
--[ 2019.11.06.17.24.27.596.0 ]--
r 13     private float heuristic;
--[ 2019.11.06.17.24.33.471.0 ]--
+ 63         
--[ 2019.11.06.17.24.37.894.0 ]--
r 63         s
--[ 2019.11.06.17.24.38.029.0 ]--
r 63         st
--[ 2019.11.06.17.24.38.078.0 ]--
r 63         sta
--[ 2019.11.06.17.24.38.187.0 ]--
r 63         star
--[ 2019.11.06.17.24.38.342.0 ]--
r 63         start
--[ 2019.11.06.17.24.38.389.0 ]--
r 63         start 
--[ 2019.11.06.17.24.38.461.0 ]--
r 63         start =
--[ 2019.11.06.17.24.38.636.0 ]--
r 63         start = 
--[ 2019.11.06.17.24.39.766.0 ]--
r 63         start = l
--[ 2019.11.06.17.24.39.899.0 ]--
r 63         start = lo
--[ 2019.11.06.17.24.39.963.0 ]--
r 63         start = loc
--[ 2019.11.06.17.24.40.445.0 ]--
r 63         start = loc;
--[ 2019.11.06.17.24.46.745.0 ]--
r 67         return s;
--[ 2019.11.06.17.24.47.008.0 ]--
r 67         return st;
--[ 2019.11.06.17.24.47.055.0 ]--
r 67         return sta;
--[ 2019.11.06.17.24.47.159.0 ]--
r 67         return star;
--[ 2019.11.06.17.24.47.332.0 ]--
r 67         return start;
--[ 2019.11.06.17.24.51.319.0 ]--
+ 71         
--[ 2019.11.06.17.24.52.108.0 ]--
r 71         e
--[ 2019.11.06.17.24.52.383.0 ]--
r 71         emn
--[ 2019.11.06.17.24.52.422.0 ]--
r 71         emnd
--[ 2019.11.06.17.24.52.685.0 ]--
r 71         emn
--[ 2019.11.06.17.24.52.804.0 ]--
r 71         em
--[ 2019.11.06.17.24.53.302.0 ]--
r 71         emn
--[ 2019.11.06.17.24.53.357.0 ]--
r 71         emnd
--[ 2019.11.06.17.24.53.448.0 ]--
r 71         emnd 
--[ 2019.11.06.17.24.53.509.0 ]--
r 71         emnd =
--[ 2019.11.06.17.24.53.630.0 ]--
r 71         emnd = 
--[ 2019.11.06.17.24.53.710.0 ]--
r 71         emnd = l
--[ 2019.11.06.17.24.53.960.0 ]--
r 71         emnd = 
--[ 2019.11.06.17.24.54.054.0 ]--
r 71         emnd =
--[ 2019.11.06.17.24.54.145.0 ]--
r 71         emnd 
--[ 2019.11.06.17.24.54.236.0 ]--
r 71         emnd
--[ 2019.11.06.17.24.54.348.0 ]--
r 71         emn
--[ 2019.11.06.17.24.54.468.0 ]--
r 71         em
--[ 2019.11.06.17.24.54.691.0 ]--
r 71         e
--[ 2019.11.06.17.24.54.878.0 ]--
r 71         en
--[ 2019.11.06.17.24.55.078.0 ]--
r 71         end
--[ 2019.11.06.17.24.55.130.0 ]--
r 71         end 
--[ 2019.11.06.17.24.55.189.0 ]--
r 71         end =
--[ 2019.11.06.17.24.55.309.0 ]--
r 71         end = 
--[ 2019.11.06.17.24.55.401.0 ]--
r 71         end = l
--[ 2019.11.06.17.24.55.579.0 ]--
r 71         end = lo
--[ 2019.11.06.17.24.55.718.0 ]--
r 71         end = loc
--[ 2019.11.06.17.24.55.969.0 ]--
r 71         end = loc;
--[ 2019.11.06.17.24.58.604.0 ]--
r 75         return e;
--[ 2019.11.06.17.24.58.725.0 ]--
r 75         return en;
--[ 2019.11.06.17.24.58.799.0 ]--
r 75         return end;
--[ 2019.11.06.17.25.02.133.0 ]--
+ 78     public void setHeuristic(float v) 
r 79     {
--[ 2019.11.06.17.25.04.228.0 ]--
- 78
r 78     public void setHeuristic(float v) {
--[ 2019.11.06.17.25.05.283.0 ]--
+ 78     public void setHeuristic(float v) 
r 79     {
--[ 2019.11.06.17.25.06.122.0 ]--
+ 79     
--[ 2019.11.06.17.25.06.947.0 ]--
- 79
--[ 2019.11.06.17.25.07.444.0 ]--
- 78
r 78     public void setHeuristic(float v) {
--[ 2019.11.06.17.25.08.332.0 ]--
+ 80     
--[ 2019.11.06.17.25.09.643.0 ]--
- 80
--[ 2019.11.06.17.25.10.819.0 ]--
r 78     public void setHeuristic(float v) a{
--[ 2019.11.06.17.25.12.707.0 ]--
r 78     public void setHeuristic(float v) {
--[ 2019.11.06.17.25.19.575.0 ]--
+ 78     public void setHeuristic(float v) 
r 79     {
--[ 2019.11.06.17.25.20.774.0 ]--
- 78
r 78     public void setHeuristic(float v) {
--[ 2019.11.06.17.25.21.556.0 ]--
+ 78     public void setHeuristic(float v) 
r 79     {
--[ 2019.11.06.17.25.22.769.0 ]--
+ 80         
--[ 2019.11.06.17.25.28.269.0 ]--
r 80         h
--[ 2019.11.06.17.25.28.366.0 ]--
r 80         he
--[ 2019.11.06.17.25.28.775.0 ]--
r 80         h
--[ 2019.11.06.17.25.29.419.0 ]--
r 80         heuristic
--[ 2019.11.06.17.25.29.632.0 ]--
r 80         heuristic 
--[ 2019.11.06.17.25.29.672.0 ]--
r 80         heuristic =
--[ 2019.11.06.17.25.29.789.0 ]--
r 80         heuristic = 
--[ 2019.11.06.17.25.30.221.0 ]--
r 80         heuristic = v
--[ 2019.11.06.17.25.31.320.0 ]--
r 80         heuristic = v;
--[ 2019.11.06.17.25.36.186.0 ]--
r 84         return h;
--[ 2019.11.06.17.25.36.278.0 ]--
r 84         return he;
--[ 2019.11.06.17.25.36.351.0 ]--
r 84         return hei;
--[ 2019.11.06.17.25.36.419.0 ]--
r 84         return heir;
--[ 2019.11.06.17.25.36.935.0 ]--
r 84         return hei;
--[ 2019.11.06.17.25.37.047.0 ]--
r 84         return he;
--[ 2019.11.06.17.25.37.226.0 ]--
r 84         return heu;
--[ 2019.11.06.17.25.37.385.0 ]--
r 84         return heur;
--[ 2019.11.06.17.25.37.490.0 ]--
r 84         return heuri;
--[ 2019.11.06.17.25.37.569.0 ]--
r 84         return heuris;
--[ 2019.11.06.17.25.37.813.0 ]--
r 84         return heuristic;
--[ 2019.11.06.17.25.41.352.0 ]--
r 14 
r 78     public void setHeuristic(float v)
--[ 2019.11.06.17.25.42.630.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.17.25.52.520.0 ]--
:/src/InteractivePathfinderVisualizer.java
r 46     private final static String emapFilename = emaps[];        // change index to load a different elevation map
--[ 2019.11.06.17.25.52.591.0 ]--
r 46     private final static String emapFilename = emaps[0];        // change index to load a different elevation map
--[ 2019.11.06.17.25.55.822.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.18.05.06.055.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.18.07.34.206.0 ]--
:/src/Pathfinder.java
r 94         return t;
--[ 2019.11.06.18.07.34.392.0 ]--
r 94         return tr;
--[ 2019.11.06.18.07.34.478.0 ]--
r 94         return tru;
--[ 2019.11.06.18.07.34.532.0 ]--
r 94         return true;
--[ 2019.11.06.18.07.37.633.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.18.07.43.053.0 ]--
r 94         return false;
--[ 2019.11.06.18.07.44.819.0 ]--
- 83
- 83
- 83
--[ 2019.11.06.18.07.46.139.0 ]--
+ 83     public float getHeuristic() {
+ 84         return heuristic;
+ 85     }
--[ 2019.11.06.18.07.50.111.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.18.13.37.753.0 ]--
r 106         return nul;
--[ 2019.11.06.18.13.38.264.0 ]--
r 106         return nu;
--[ 2019.11.06.18.13.38.385.0 ]--
r 106         return n;
--[ 2019.11.06.18.13.38.508.0 ]--
r 106         return ;
--[ 2019.11.06.18.13.39.604.0 ]--
r 106         return S;
--[ 2019.11.06.18.13.39.803.0 ]--
r 106         return St;
--[ 2019.11.06.18.13.39.892.0 ]--
r 106         return Sta;
--[ 2019.11.06.18.13.40.067.0 ]--
r 106         return Stac;
--[ 2019.11.06.18.13.40.156.0 ]--
r 106         return Stack;
--[ 2019.11.06.18.13.41.083.0 ]--
r 106         return Stack ;
--[ 2019.11.06.18.13.41.134.0 ]--
r 106         return Stack;
--[ 2019.11.06.18.13.41.336.0 ]--
r 106         return Stack<;
--[ 2019.11.06.18.13.41.642.0 ]--
r 106         return Stack<S;
--[ 2019.11.06.18.13.42.226.0 ]--
r 106         return Stack<St;
--[ 2019.11.06.18.13.42.746.0 ]--
r 106         return Stack<Str;
--[ 2019.11.06.18.13.43.277.0 ]--
r 106         return Stack<St;
--[ 2019.11.06.18.13.43.371.0 ]--
r 106         return Stack<S;
--[ 2019.11.06.18.13.43.476.0 ]--
r 106         return Stack<;
--[ 2019.11.06.18.13.44.280.0 ]--
r 106         return Stack<P;
--[ 2019.11.06.18.13.44.473.0 ]--
r 106         return Stack<PF;
--[ 2019.11.06.18.13.44.647.0 ]--
r 106         return Stack<PFN;
--[ 2019.11.06.18.13.44.830.0 ]--
r 106         return Stack<PFNo;
--[ 2019.11.06.18.13.44.919.0 ]--
r 106         return Stack<PFNod;
--[ 2019.11.06.18.13.44.973.0 ]--
r 106         return Stack<PFNode;
--[ 2019.11.06.18.13.45.473.0 ]--
r 106         return Stack<PFNode>;
--[ 2019.11.06.18.13.46.194.0 ]--
r 106         return Stack<PFNode> ;
--[ 2019.11.06.18.13.46.465.0 ]--
r 106         return Stack<PFNode> s;
--[ 2019.11.06.18.13.46.609.0 ]--
r 106         return Stack<PFNode> s ;
--[ 2019.11.06.18.13.46.873.0 ]--
r 106         return Stack<PFNode> s =;
--[ 2019.11.06.18.13.46.962.0 ]--
r 106         return Stack<PFNode> s = ;
--[ 2019.11.06.18.13.47.090.0 ]--
r 106         return Stack<PFNode> s = n;
--[ 2019.11.06.18.13.47.156.0 ]--
r 106         return Stack<PFNode> s = ne;
--[ 2019.11.06.18.13.47.312.0 ]--
r 106         return Stack<PFNode> s = new;
--[ 2019.11.06.18.13.47.381.0 ]--
r 106         return Stack<PFNode> s = new ;
--[ 2019.11.06.18.13.47.444.0 ]--
r 106         return Stack<PFNode> s = new S;
--[ 2019.11.06.18.13.47.623.0 ]--
r 106         return Stack<PFNode> s = new St;
--[ 2019.11.06.18.13.47.665.0 ]--
r 106         return Stack<PFNode> s = new Sta;
--[ 2019.11.06.18.13.47.798.0 ]--
r 106         return Stack<PFNode> s = new Stac;
--[ 2019.11.06.18.13.47.906.0 ]--
r 106         return Stack<PFNode> s = new Stack;
--[ 2019.11.06.18.13.48.735.0 ]--
r 106         return Stack<PFNode> s = new Stack<;
--[ 2019.11.06.18.13.48.793.0 ]--
r 106         return Stack<PFNode> s = new Stack<>;
--[ 2019.11.06.18.13.49.259.0 ]--
r 106         return Stack<PFNode> s = new Stack<> ;
--[ 2019.11.06.18.13.49.332.0 ]--
r 106         return Stack<PFNode> s = new Stack<>;
--[ 2019.11.06.18.13.56.778.0 ]--
+ 106         return 
r 107         Stack<PFNode> s = new Stack<>;
--[ 2019.11.06.18.13.56.794.0 ]--
r 107                 Stack<PFNode> s = new Stack<>;
--[ 2019.11.06.18.13.57.509.0 ]--
- 106
r 106         return Stack<PFNode> s = new Stack<>;
--[ 2019.11.06.18.14.02.362.0 ]--
r 106         return ;
--[ 2019.11.06.18.14.04.849.0 ]--
+ 106         
--[ 2019.11.06.18.14.05.288.0 ]--
r 106         Stack<PFNode> s = new Stack<>
--[ 2019.11.06.18.14.08.069.0 ]--
r 106         Stack<PFNode> s = new Stack<>;
--[ 2019.11.06.18.14.09.092.0 ]--
r 107         return s;
--[ 2019.11.06.18.14.10.195.0 ]--
r 107         return s ;
--[ 2019.11.06.18.14.10.246.0 ]--
r 107         return s;
--[ 2019.11.06.18.14.14.167.0 ]--
r 107         return s ;
--[ 2019.11.06.18.14.14.322.0 ]--
r 107         return ;
--[ 2019.11.06.18.14.14.607.0 ]--
r 106         Stack<PFNode> s = new Stack<>
--[ 2019.11.06.18.14.14.732.0 ]--
r 106         
--[ 2019.11.06.18.14.14.878.0 ]--
- 106
--[ 2019.11.06.18.14.15.160.0 ]--
r 106         return Stack<PFNode> s = new Stack<>;
--[ 2019.11.06.18.14.15.747.0 ]--
r 106         return Stack<PFNode> s = new Stack<> ;
--[ 2019.11.06.18.14.15.954.0 ]--
r 106         return Stack<;
--[ 2019.11.06.18.14.16.083.0 ]--
r 106         return Stack<Str;
--[ 2019.11.06.18.14.16.236.0 ]--
r 106         return Stack;
--[ 2019.11.06.18.14.16.409.0 ]--
r 106         return Stack ;
--[ 2019.11.06.18.14.16.567.0 ]--
r 106         return ;
--[ 2019.11.06.18.14.16.728.0 ]--
r 106         return null;
--[ 2019.11.06.18.14.17.054.0 ]--
r 14     
r 78     public void setHeuristic(float v) 
r 84         return heuris;
--[ 2019.11.06.18.14.18.171.0 ]--
- 84
--[ 2019.11.06.18.14.18.787.0 ]--
+ 84         return heuris;
--[ 2019.11.06.18.14.20.077.0 ]--
r 84         return heurist;
--[ 2019.11.06.18.14.20.149.0 ]--
r 84         return heuristi;
--[ 2019.11.06.18.14.20.285.0 ]--
r 84         return heuristic;
--[ 2019.11.06.18.14.25.194.0 ]--
r 14 
r 78     public void setHeuristic(float v)
--[ 2019.11.06.18.14.26.407.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.18.18.25.033.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.18.18.46.447.0 ]--
:/src/InteractivePathfinderVisualizer.java
r 46     private final static String emapFilename = emaps[];        // change index to load a different elevation map
--[ 2019.11.06.18.18.46.535.0 ]--
r 46     private final static String emapFilename = emaps[4];        // change index to load a different elevation map
--[ 2019.11.06.18.18.49.532.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.18.19.22.562.0 ]--
r 46     private final static String emapFilename = emaps[];        // change index to load a different elevation map
--[ 2019.11.06.18.19.23.048.0 ]--
r 46     private final static String emapFilename = emaps[9];        // change index to load a different elevation map
--[ 2019.11.06.18.19.25.586.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.18.19.35.262.0 ]--
r 46     private final static String emapFilename = emaps[];        // change index to load a different elevation map
--[ 2019.11.06.18.19.35.805.0 ]--
r 46     private final static String emapFilename = emaps[0];        // change index to load a different elevation map
--[ 2019.11.06.18.19.38.396.0 ]--
r 46     private final static String emapFilename = emaps[];        // change index to load a different elevation map
--[ 2019.11.06.18.19.38.777.0 ]--
r 46     private final static String emapFilename = emaps[1];        // change index to load a different elevation map
--[ 2019.11.06.18.19.41.499.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.18.20.10.852.0 ]--
r 46     private final static String emapFilename = emaps[];        // change index to load a different elevation map
--[ 2019.11.06.18.20.11.265.0 ]--
r 46     private final static String emapFilename = emaps[0];        // change index to load a different elevation map
--[ 2019.11.06.18.23.35.926.0 ]--
:/src/Pathfinder.java
+ 106         
--[ 2019.11.06.18.23.41.717.0 ]--
r 106         I
--[ 2019.11.06.18.23.41.791.0 ]--
r 106         It
--[ 2019.11.06.18.23.41.965.0 ]--
r 106         Ite
--[ 2019.11.06.18.23.42.124.0 ]--
r 106         Iter
--[ 2019.11.06.18.23.42.183.0 ]--
r 106         Itera
--[ 2019.11.06.18.23.42.879.0 ]--
r 106         Iterator
--[ 2019.11.06.18.23.42.903.0 ]--
r 106         java.util.Iterator
--[ 2019.11.06.18.23.42.918.0 ]--
r 2 import java.lang.IllegalArgumentException;import java.util.Iterator;
--[ 2019.11.06.18.23.42.928.0 ]--
r 106         Iterator
--[ 2019.11.06.18.23.42.946.0 ]--
+ 2 import java.lang.IllegalArgumentException;
r 3 import java.util.Iterator;
--[ 2019.11.06.18.23.43.134.0 ]--
r 107         Iterator<>
--[ 2019.11.06.18.23.43.611.0 ]--
r 107         Iterator
--[ 2019.11.06.18.23.43.725.0 ]--
r 107         Iterato
--[ 2019.11.06.18.23.44.030.0 ]--
r 107         Iterat
--[ 2019.11.06.18.23.44.196.0 ]--
r 107         Itera
--[ 2019.11.06.18.23.44.462.0 ]--
r 107         Itera 
--[ 2019.11.06.18.23.44.572.0 ]--
r 107         Itera
--[ 2019.11.06.18.23.45.296.0 ]--
r 107         Iterab
--[ 2019.11.06.18.23.45.392.0 ]--
r 107         Iterabl
--[ 2019.11.06.18.23.45.641.0 ]--
r 107         Iterable
--[ 2019.11.06.18.23.46.087.0 ]--
r 107         Iterable<>
--[ 2019.11.06.18.23.46.281.0 ]--
r 107         Iterable<C>
--[ 2019.11.06.18.23.46.517.0 ]--
r 107         Iterable<Co>
--[ 2019.11.06.18.23.46.615.0 ]--
r 107         Iterable<Coo>
--[ 2019.11.06.18.23.46.687.0 ]--
r 107         Iterable<Coor>
--[ 2019.11.06.18.23.46.861.0 ]--
r 107         Iterable<Coord>
--[ 2019.11.06.18.23.47.844.0 ]--
r 107         Iterable<Coord> 
--[ 2019.11.06.18.23.48.301.0 ]--
r 107         Iterable<Coord> s
--[ 2019.11.06.18.23.48.649.0 ]--
r 107         Iterable<Coord> 
--[ 2019.11.06.18.23.49.164.0 ]--
r 107         Iterable<Coord> c
--[ 2019.11.06.18.23.49.304.0 ]--
r 107         Iterable<Coord> c 
--[ 2019.11.06.18.23.49.453.0 ]--
r 107         Iterable<Coord> c =
--[ 2019.11.06.18.23.49.549.0 ]--
r 107         Iterable<Coord> c = 
--[ 2019.11.06.18.23.49.917.0 ]--
r 107         Iterable<Coord> c = n
--[ 2019.11.06.18.23.49.998.0 ]--
r 107         Iterable<Coord> c = ne
--[ 2019.11.06.18.23.50.143.0 ]--
r 107         Iterable<Coord> c = new
--[ 2019.11.06.18.23.50.449.0 ]--
r 107         Iterable<Coord> c = new 
--[ 2019.11.06.18.23.51.079.0 ]--
r 107         Iterable<Coord> c = new i
--[ 2019.11.06.18.23.51.197.0 ]--
r 107         Iterable<Coord> c = new it
--[ 2019.11.06.18.23.51.253.0 ]--
r 107         Iterable<Coord> c = new ite
--[ 2019.11.06.18.23.51.365.0 ]--
r 107         Iterable<Coord> c = new iter
--[ 2019.11.06.18.23.51.654.0 ]--
r 107         Iterable<Coord> c = new ite
--[ 2019.11.06.18.23.51.747.0 ]--
r 107         Iterable<Coord> c = new it
--[ 2019.11.06.18.23.51.835.0 ]--
r 107         Iterable<Coord> c = new i
--[ 2019.11.06.18.23.51.949.0 ]--
r 107         Iterable<Coord> c = new 
--[ 2019.11.06.18.23.52.151.0 ]--
r 107         Iterable<Coord> c = new I
--[ 2019.11.06.18.23.52.269.0 ]--
r 107         Iterable<Coord> c = new It
--[ 2019.11.06.18.23.52.341.0 ]--
r 107         Iterable<Coord> c = new Ite
--[ 2019.11.06.18.23.52.424.0 ]--
r 107         Iterable<Coord> c = new Iter
--[ 2019.11.06.18.23.52.514.0 ]--
r 107         Iterable<Coord> c = new Itera
--[ 2019.11.06.18.23.52.636.0 ]--
r 107         Iterable<Coord> c = new Iteral
--[ 2019.11.06.18.23.53.718.0 ]--
r 107         Iterable<Coord> c = new Itera
--[ 2019.11.06.18.23.54.973.0 ]--
r 107         Iterable<Coord> c = new Iterable
--[ 2019.11.06.18.23.54.985.0 ]--
r 107         Iterable<Coord> c = new Iterable<Coord>
--[ 2019.11.06.18.23.54.996.0 ]--
r 107         Iterable<Coord> c = new Iterable<Coord>() {}
--[ 2019.11.06.18.23.55.012.0 ]--
+ 107         Iterable<Coord> c = new Iterable<Coord>() {
r 108         }
--[ 2019.11.06.18.23.55.105.0 ]--
+ 108         @Override
+ 109             public Iterator<Coord> iterator() {
+ 110                 return null;
r 111             }}
--[ 2019.11.06.18.23.55.125.0 ]--
r 108             @Override
+ 111             }
r 112         }
--[ 2019.11.06.18.23.55.511.0 ]--
r 110                 
--[ 2019.11.06.18.23.56.030.0 ]--
r 110                 return null;
--[ 2019.11.06.18.23.56.406.0 ]--
- 108
- 108
- 108
- 108
--[ 2019.11.06.18.23.56.694.0 ]--
- 107
r 107         Iterable<Coord> c = new Itera
--[ 2019.11.06.18.23.57.796.0 ]--
r 107         Iterable<Coord> c = new Iterab
--[ 2019.11.06.18.23.57.894.0 ]--
r 107         Iterable<Coord> c = new Iterabl
--[ 2019.11.06.18.23.57.991.0 ]--
r 107         Iterable<Coord> c = new Iterable
--[ 2019.11.06.18.23.58.494.0 ]--
r 107         Iterable<Coord> c = new Iterable<>
--[ 2019.11.06.18.23.59.310.0 ]--
r 107         Iterable<Coord> c = new Iterable<>;
--[ 2019.11.06.18.24.00.530.0 ]--
r 107         Iterable<Coord> c = new Iterable<>; 
--[ 2019.11.06.18.24.00.582.0 ]--
r 107         Iterable<Coord> c = new Iterable<>;
--[ 2019.11.06.18.24.00.823.0 ]--
+ 108         
--[ 2019.11.06.18.24.08.749.0 ]--
r 107 
--[ 2019.11.06.18.24.08.905.0 ]--
- 107
--[ 2019.11.06.18.24.24.510.0 ]--
+ 107         public Iterable<PFNode> neighbors() {
+ 108             Stack<PFNode> s = new Stack<>();
+ 109             s.push(new PFNode(null, null));
+ 110             return s;
r 111         }
--[ 2019.11.06.18.24.36.992.0 ]--
r 107         public Iterable<PFNode> neighbors( {
--[ 2019.11.06.18.24.37.122.0 ]--
r 107         public Iterable<PFNode> neighbors {
--[ 2019.11.06.18.24.38.349.0 ]--
r 107         public Iterable<PFNode> neighbors  {
--[ 2019.11.06.18.24.38.422.0 ]--
r 107         public Iterable<PFNode> neighbors {
--[ 2019.11.06.18.24.39.180.0 ]--
r 107         public Iterable<PFNode> neighbors  {
--[ 2019.11.06.18.24.39.260.0 ]--
r 107         public Iterable<PFNode> neighbors {
--[ 2019.11.06.18.24.39.397.0 ]--
r 107         public Iterable<PFNode>  {
--[ 2019.11.06.18.24.39.652.0 ]--
r 107         public Iterable<PFNode> t {
--[ 2019.11.06.18.24.39.742.0 ]--
r 107         public Iterable<PFNode> te {
--[ 2019.11.06.18.24.39.864.0 ]--
r 107         public Iterable<PFNode> tes {
--[ 2019.11.06.18.24.39.939.0 ]--
r 107         public Iterable<PFNode> test {
--[ 2019.11.06.18.24.40.058.0 ]--
r 107         public Iterable<PFNode> test() {
--[ 2019.11.06.18.24.47.692.0 ]--
r 107         public Iterable<PFNode> test(); {
--[ 2019.11.06.18.24.49.623.0 ]--
r 107         public Iterable<PFNode> test() {
--[ 2019.11.06.18.24.50.610.0 ]--
r 107         public Iterable<PFNode> test;() {
--[ 2019.11.06.18.24.52.098.0 ]--
r 107         public Iterable<PFNode> test;() 
--[ 2019.11.06.18.24.52.182.0 ]--
r 107         public Iterable<PFNode> test;()
--[ 2019.11.06.18.24.52.276.0 ]--
r 107         public Iterable<PFNode> test;(
--[ 2019.11.06.18.24.52.396.0 ]--
r 107         public Iterable<PFNode> test;
--[ 2019.11.06.18.24.57.119.0 ]--
r 107         Iterable<PFNode> test;
--[ 2019.11.06.18.24.59.805.0 ]--
r 107         Iterable<PFNode> test ;
--[ 2019.11.06.18.25.00.088.0 ]--
r 107         Iterable<PFNode> test =;
--[ 2019.11.06.18.25.00.245.0 ]--
r 107         Iterable<PFNode> test = ;
--[ 2019.11.06.18.25.00.408.0 ]--
r 107         Iterable<PFNode> test = n;
--[ 2019.11.06.18.25.00.496.0 ]--
r 107         Iterable<PFNode> test = ne;
--[ 2019.11.06.18.25.00.627.0 ]--
r 107         Iterable<PFNode> test = new;
--[ 2019.11.06.18.25.01.474.0 ]--
r 107         Iterable<PFNode> test = new ;
--[ 2019.11.06.18.25.02.306.0 ]--
r 107         Iterable<PFNode> test = new I;
--[ 2019.11.06.18.25.02.497.0 ]--
r 107         Iterable<PFNode> test = new It;
--[ 2019.11.06.18.25.02.574.0 ]--
r 107         Iterable<PFNode> test = new Ite;
--[ 2019.11.06.18.25.03.012.0 ]--
r 107         Iterable<PFNode> test = new Iter;
--[ 2019.11.06.18.25.03.137.0 ]--
r 107         Iterable<PFNode> test = new Itera;
--[ 2019.11.06.18.25.03.279.0 ]--
r 107         Iterable<PFNode> test = new Iterab;
--[ 2019.11.06.18.25.03.351.0 ]--
r 107         Iterable<PFNode> test = new Iterabl;
--[ 2019.11.06.18.25.03.455.0 ]--
r 107         Iterable<PFNode> test = new Iterable;
--[ 2019.11.06.18.25.03.669.0 ]--
r 107         Iterable<PFNode> test = new Iterable<Pathfinder.PFNode>;
--[ 2019.11.06.18.25.03.679.0 ]--
r 107         Iterable<PFNode> test = new Iterable<PFNode>;
--[ 2019.11.06.18.25.03.692.0 ]--
r 107         Iterable<PFNode> test = new Iterable<PFNode>() {};
--[ 2019.11.06.18.25.03.714.0 ]--
+ 107         Iterable<PFNode> test = new Iterable<PFNode>() {
r 108         };
--[ 2019.11.06.18.25.03.746.0 ]--
+ 108         @Override
+ 109             public Iterator<PFNode> iterator() {
+ 110                 return null;
r 111             }};
--[ 2019.11.06.18.25.03.765.0 ]--
r 108             @Override
+ 111             }
r 112         };
--[ 2019.11.06.18.25.04.472.0 ]--
- 108
- 108
- 108
- 108
--[ 2019.11.06.18.25.05.302.0 ]--
- 107
r 107         Iterable<PFNode> test = new Iterable;
--[ 2019.11.06.18.25.05.764.0 ]--
r 107         Iterable<PFNode> test;
--[ 2019.11.06.18.25.11.253.0 ]--
- 107
- 107
- 107
- 107
r 107         
--[ 2019.11.06.18.25.11.466.0 ]--
- 107
--[ 2019.11.06.18.25.12.036.0 ]--
r 106     public Iterable<Coord> getPathSolution() { 
--[ 2019.11.06.18.25.12.101.0 ]--
r 106     public Iterable<Coord> getPathSolution() {
--[ 2019.11.06.18.27.51.674.0 ]--
+ 107         
--[ 2019.11.06.18.27.52.331.0 ]--
r 107         S
--[ 2019.11.06.18.27.52.668.0 ]--
r 107         St
--[ 2019.11.06.18.27.52.739.0 ]--
r 107         Sta
--[ 2019.11.06.18.27.52.858.0 ]--
r 107         Stac
--[ 2019.11.06.18.27.52.961.0 ]--
r 107         Stack
--[ 2019.11.06.18.27.53.190.0 ]--
r 107         Stack<>
--[ 2019.11.06.18.27.54.100.0 ]--
r 107         Stack<p>
--[ 2019.11.06.18.27.54.244.0 ]--
r 107         Stack<pf>
--[ 2019.11.06.18.27.54.566.0 ]--
r 107         Stack<p>
--[ 2019.11.06.18.27.54.801.0 ]--
r 107         Stack<>
--[ 2019.11.06.18.27.54.965.0 ]--
r 107         Stack<P>
--[ 2019.11.06.18.27.55.097.0 ]--
r 107         Stack<PF>
--[ 2019.11.06.18.27.56.168.0 ]--
r 107         Stack<PFn>
--[ 2019.11.06.18.27.56.246.0 ]--
r 107         Stack<PFno>
--[ 2019.11.06.18.27.56.320.0 ]--
r 107         Stack<PFnod>
--[ 2019.11.06.18.27.56.374.0 ]--
r 107         Stack<PFnode>
--[ 2019.11.06.18.27.56.685.0 ]--
r 107         Stack<PFnode> 
--[ 2019.11.06.18.27.56.733.0 ]--
r 107         Stack<PFnode> s
--[ 2019.11.06.18.27.56.910.0 ]--
r 107         Stack<PFnode> s 
--[ 2019.11.06.18.27.57.021.0 ]--
r 107         Stack<PFnode> s =
--[ 2019.11.06.18.27.57.149.0 ]--
r 107         Stack<PFnode> s = 
--[ 2019.11.06.18.27.57.263.0 ]--
r 107         Stack<PFnode> s = n
--[ 2019.11.06.18.27.57.373.0 ]--
r 107         Stack<PFnode> s = ne
--[ 2019.11.06.18.27.57.528.0 ]--
r 107         Stack<PFnode> s = new
--[ 2019.11.06.18.27.57.774.0 ]--
r 107         Stack<PFnode> s = new 
--[ 2019.11.06.18.27.58.098.0 ]--
r 107         Stack<PFnode> s = new S
--[ 2019.11.06.18.27.58.307.0 ]--
r 107         Stack<PFnode> s = new Sa
--[ 2019.11.06.18.27.58.560.0 ]--
r 107         Stack<PFnode> s = new S
--[ 2019.11.06.18.27.58.661.0 ]--
r 107         Stack<PFnode> s = new St
--[ 2019.11.06.18.27.58.725.0 ]--
r 107         Stack<PFnode> s = new Sta
--[ 2019.11.06.18.27.58.823.0 ]--
r 107         Stack<PFnode> s = new Stac
--[ 2019.11.06.18.27.58.919.0 ]--
r 107         Stack<PFnode> s = new Stack
--[ 2019.11.06.18.27.59.112.0 ]--
r 107         Stack<PFnode> s = new Stack<>
--[ 2019.11.06.18.27.59.888.0 ]--
r 107         Stack<PFnode> s = new Stack<>;
--[ 2019.11.06.18.28.00.067.0 ]--
r 107         Stack<PFnode> s = new Stack<>; 
--[ 2019.11.06.18.28.00.125.0 ]--
r 107         Stack<PFnode> s = new Stack<>;
--[ 2019.11.06.18.28.03.960.0 ]--
r 107         Stack<PFode> s = new Stack<>;
--[ 2019.11.06.18.28.04.089.0 ]--
r 107         Stack<PFNode> s = new Stack<>;
--[ 2019.11.06.18.28.08.188.0 ]--
r 107         Stack<PFNode> s = new Stack<>();
--[ 2019.11.06.18.28.09.900.0 ]--
r 107         Stack<PFNode> s = new Stack<>(); 
--[ 2019.11.06.18.28.09.926.0 ]--
r 107         Stack<PFNode> s = new Stack<>();
--[ 2019.11.06.18.28.10.112.0 ]--
+ 108         
--[ 2019.11.06.18.28.10.498.0 ]--
r 108         s
--[ 2019.11.06.18.28.10.576.0 ]--
r 108         s.
--[ 2019.11.06.18.28.10.864.0 ]--
r 108         s.p
--[ 2019.11.06.18.28.10.952.0 ]--
r 108         s.pu
--[ 2019.11.06.18.28.11.047.0 ]--
r 108         s.pus
--[ 2019.11.06.18.28.11.249.0 ]--
r 108         s.push
--[ 2019.11.06.18.28.12.229.0 ]--
r 108         s.push()
--[ 2019.11.06.18.28.13.981.0 ]--
r 108         s.push( )
--[ 2019.11.06.18.28.14.272.0 ]--
r 108         s.push()
--[ 2019.11.06.18.28.23.565.0 ]--
r 108         s.push(P)
--[ 2019.11.06.18.28.23.748.0 ]--
r 108         s.push(PF)
--[ 2019.11.06.18.28.24.704.0 ]--
r 108         s.push(PFNode)
--[ 2019.11.06.18.28.25.451.0 ]--
r 108         s.push(PFNode())
--[ 2019.11.06.18.28.27.342.0 ]--
r 108         s.push(PFNode(a))
--[ 2019.11.06.18.28.27.944.0 ]--
r 108         s.push(PFNode())
--[ 2019.11.06.18.28.33.548.0 ]--
r 108         s
--[ 2019.11.06.18.28.33.809.0 ]--
r 108         
--[ 2019.11.06.18.28.34.087.0 ]--
- 108
--[ 2019.11.06.18.28.34.389.0 ]--
r 107         Stack<PFNode> s = new Stack<>()
--[ 2019.11.06.18.28.35.100.0 ]--
r 107         Stack<PFNode> s = new Stack<>();
--[ 2019.11.06.18.28.35.370.0 ]--
+ 108         
--[ 2019.11.06.18.28.50.516.0 ]--
r 108         s
--[ 2019.11.06.18.28.50.576.0 ]--
r 108         s.
--[ 2019.11.06.18.28.50.802.0 ]--
r 108         s.p
--[ 2019.11.06.18.28.50.896.0 ]--
r 108         s.pui
--[ 2019.11.06.18.28.50.965.0 ]--
r 108         s.puis
--[ 2019.11.06.18.28.51.304.0 ]--
r 108         s.pui
--[ 2019.11.06.18.28.51.412.0 ]--
r 108         s.pu
--[ 2019.11.06.18.28.51.659.0 ]--
r 108         s.pus
--[ 2019.11.06.18.28.51.735.0 ]--
r 108         s.push
--[ 2019.11.06.18.28.52.027.0 ]--
r 108         s.push 
--[ 2019.11.06.18.28.52.281.0 ]--
r 108         s.push
--[ 2019.11.06.18.28.52.453.0 ]--
r 108         s.push()
--[ 2019.11.06.18.28.52.816.0 ]--
r 108         s.push(C)
--[ 2019.11.06.18.28.52.986.0 ]--
r 108         s.push(Co)
--[ 2019.11.06.18.28.53.106.0 ]--
r 108         s.push(Coo)
--[ 2019.11.06.18.28.53.606.0 ]--
r 108         s.push(Coor)
--[ 2019.11.06.18.28.53.784.0 ]--
r 108         s.push(Coord)
--[ 2019.11.06.18.28.54.009.0 ]--
r 108         s.push(Coord())
--[ 2019.11.06.18.28.54.677.0 ]--
r 108         s.push(Coord()
--[ 2019.11.06.18.28.55.109.0 ]--
r 108         s.push(Coord)
--[ 2019.11.06.18.28.58.733.0 ]--
r 108         s.push(
--[ 2019.11.06.18.28.59.266.0 ]--
r 108         s.push(1
--[ 2019.11.06.18.28.59.834.0 ]--
r 108         s.push(1)
--[ 2019.11.06.18.29.01.223.0 ]--
r 108         s.push(1);
--[ 2019.11.06.18.29.02.255.0 ]--
r 108         s.push(1); 
--[ 2019.11.06.18.29.02.312.0 ]--
r 108         s.push(1);
--[ 2019.11.06.18.29.08.620.0 ]--
r 108         
--[ 2019.11.06.18.29.09.150.0 ]--
- 108
--[ 2019.11.06.18.29.09.841.0 ]--
+ 108         
--[ 2019.11.06.18.29.10.822.0 ]--
r 108         S
--[ 2019.11.06.18.29.10.966.0 ]--
r 108         St
--[ 2019.11.06.18.29.11.021.0 ]--
r 108         Sta
--[ 2019.11.06.18.29.11.146.0 ]--
r 108         Stac
--[ 2019.11.06.18.29.11.249.0 ]--
r 108         Stack
--[ 2019.11.06.18.29.11.503.0 ]--
r 108         Stack 
--[ 2019.11.06.18.29.11.535.0 ]--
r 108         Stack
--[ 2019.11.06.18.29.11.813.0 ]--
r 108         
--[ 2019.11.06.18.29.12.957.0 ]--
r 108         P
--[ 2019.11.06.18.29.13.309.0 ]--
r 108         PF
--[ 2019.11.06.18.29.13.651.0 ]--
r 108         PFN
--[ 2019.11.06.18.29.14.069.0 ]--
r 108         PFNode
--[ 2019.11.06.18.29.15.221.0 ]--
r 108         PFNode()
--[ 2019.11.06.18.29.16.546.0 ]--
r 108         PFNode
--[ 2019.11.06.18.29.16.959.0 ]--
r 108         
--[ 2019.11.06.18.29.18.172.0 ]--
- 108
--[ 2019.11.06.18.29.31.534.0 ]--
+ 108         
--[ 2019.11.06.18.29.33.486.0 ]--
r 108         P
--[ 2019.11.06.18.29.33.690.0 ]--
r 108         Pf
--[ 2019.11.06.18.29.34.141.0 ]--
r 108         Pf 
--[ 2019.11.06.18.29.34.191.0 ]--
r 108         Pf
--[ 2019.11.06.18.29.34.373.0 ]--
+ 109         
--[ 2019.11.06.18.29.34.391.0 ]--
r 109                 
--[ 2019.11.06.18.29.35.058.0 ]--
- 109
--[ 2019.11.06.18.29.35.175.0 ]--
r 108         P
--[ 2019.11.06.18.29.35.705.0 ]--
r 108         PF
--[ 2019.11.06.18.29.36.257.0 ]--
r 108         PFNode
--[ 2019.11.06.18.29.37.026.0 ]--
r 108         PFNodet
--[ 2019.11.06.18.29.37.066.0 ]--
r 108         PFNodete
--[ 2019.11.06.18.29.37.207.0 ]--
r 108         PFNodetes
--[ 2019.11.06.18.29.37.310.0 ]--
r 108         PFNodetest
--[ 2019.11.06.18.29.37.394.0 ]--
r 108         PFNodetest 
--[ 2019.11.06.18.29.37.621.0 ]--
r 108         PFNodetest
--[ 2019.11.06.18.29.37.734.0 ]--
r 108         PFNodetes
--[ 2019.11.06.18.29.37.837.0 ]--
r 108         PFNodete
--[ 2019.11.06.18.29.37.948.0 ]--
r 108         PFNodet
--[ 2019.11.06.18.29.38.084.0 ]--
r 108         PFNode
--[ 2019.11.06.18.29.38.241.0 ]--
r 108         PFNode 
--[ 2019.11.06.18.29.38.301.0 ]--
r 108         PFNode t
--[ 2019.11.06.18.29.38.334.0 ]--
r 108         PFNode te
--[ 2019.11.06.18.29.38.485.0 ]--
r 108         PFNode tes
--[ 2019.11.06.18.29.38.574.0 ]--
r 108         PFNode test
--[ 2019.11.06.18.29.38.646.0 ]--
r 108         PFNode test 
--[ 2019.11.06.18.29.38.758.0 ]--
r 108         PFNode test =
--[ 2019.11.06.18.29.38.895.0 ]--
r 108         PFNode test = 
--[ 2019.11.06.18.29.39.193.0 ]--
r 108         PFNode test = n
--[ 2019.11.06.18.29.39.299.0 ]--
r 108         PFNode test = ne
--[ 2019.11.06.18.29.39.446.0 ]--
r 108         PFNode test = new
--[ 2019.11.06.18.29.39.605.0 ]--
r 108         PFNode test = new 
--[ 2019.11.06.18.29.40.179.0 ]--
r 108         PFNode test = new P
--[ 2019.11.06.18.29.40.990.0 ]--
r 108         PFNode test = new PFNode
--[ 2019.11.06.18.29.41.010.0 ]--
r 108         PFNode test = new PFNode()
--[ 2019.11.06.18.29.41.921.0 ]--
r 108         PFNode test = new PFNode();
--[ 2019.11.06.18.29.50.554.0 ]--
r 108         PFNode test = new PFNode(a);
--[ 2019.11.06.18.29.55.188.0 ]--
r 108         
--[ 2019.11.06.18.29.55.429.0 ]--
- 108
--[ 2019.11.06.18.29.57.917.0 ]--
r 107         
--[ 2019.11.06.18.29.58.030.0 ]--
- 107
--[ 2019.11.06.18.29.58.241.0 ]--
r 106     public Iterable<Coord> getPathSolution() 
--[ 2019.11.06.18.29.58.737.0 ]--
+ 106     public Iterable<Coord> getPathSolution() {
r 107         Stack<PFNode> s = new Stack<>();
--[ 2019.11.06.18.29.59.358.0 ]--
r 107         
--[ 2019.11.06.18.29.59.777.0 ]--
- 107
--[ 2019.11.06.18.30.42.527.0 ]--
+ 107         
--[ 2019.11.06.18.30.44.439.0 ]--
r 107         S
--[ 2019.11.06.18.30.44.583.0 ]--
r 107         St
--[ 2019.11.06.18.30.44.632.0 ]--
r 107         Sta
--[ 2019.11.06.18.30.44.753.0 ]--
r 107         Stac
--[ 2019.11.06.18.30.44.847.0 ]--
r 107         Stack
--[ 2019.11.06.18.30.45.017.0 ]--
r 107         Stack<>
--[ 2019.11.06.18.30.45.256.0 ]--
r 107         Stack<P>
--[ 2019.11.06.18.30.45.286.0 ]--
r 107         Stack<PF>
--[ 2019.11.06.18.30.45.939.0 ]--
r 107         Stack<PFN>
--[ 2019.11.06.18.30.46.080.0 ]--
r 107         Stack<PFNo>
--[ 2019.11.06.18.30.46.221.0 ]--
r 107         Stack<PFNod>
--[ 2019.11.06.18.30.46.288.0 ]--
r 107         Stack<PFNode>
--[ 2019.11.06.18.30.47.218.0 ]--
r 107         Stack<PFNode> 
--[ 2019.11.06.18.30.47.686.0 ]--
r 107         Stack<PFNode> s
--[ 2019.11.06.18.30.47.795.0 ]--
r 107         Stack<PFNode> s 
--[ 2019.11.06.18.30.47.954.0 ]--
r 107         Stack<PFNode> s =
--[ 2019.11.06.18.30.48.055.0 ]--
r 107         Stack<PFNode> s = 
--[ 2019.11.06.18.30.48.184.0 ]--
r 107         Stack<PFNode> s = n
--[ 2019.11.06.18.30.48.249.0 ]--
r 107         Stack<PFNode> s = ne
--[ 2019.11.06.18.30.48.400.0 ]--
r 107         Stack<PFNode> s = new
--[ 2019.11.06.18.30.48.437.0 ]--
r 107         Stack<PFNode> s = new 
--[ 2019.11.06.18.30.48.578.0 ]--
r 107         Stack<PFNode> s = new S
--[ 2019.11.06.18.30.48.694.0 ]--
r 107         Stack<PFNode> s = new St
--[ 2019.11.06.18.30.48.837.0 ]--
r 107         Stack<PFNode> s = new Sta
--[ 2019.11.06.18.30.48.925.0 ]--
r 107         Stack<PFNode> s = new Stac
--[ 2019.11.06.18.30.49.052.0 ]--
r 107         Stack<PFNode> s = new Stack
--[ 2019.11.06.18.30.49.341.0 ]--
r 107         Stack<PFNode> s = new Stack()
--[ 2019.11.06.18.30.49.743.0 ]--
r 107         Stack<PFNode> s = new Stack(
--[ 2019.11.06.18.30.49.841.0 ]--
r 107         Stack<PFNode> s = new Stack
--[ 2019.11.06.18.30.50.020.0 ]--
r 107         Stack<PFNode> s = new Stack<>
--[ 2019.11.06.18.30.50.805.0 ]--
r 107         Stack<PFNode> s = new Stack<>()
--[ 2019.11.06.18.30.51.207.0 ]--
r 107         Stack<PFNode> s = new Stack<>();
--[ 2019.11.06.18.30.52.418.0 ]--
+ 108         
--[ 2019.11.06.18.30.52.611.0 ]--
r 108         s
--[ 2019.11.06.18.30.52.670.0 ]--
r 108         s.
--[ 2019.11.06.18.30.52.951.0 ]--
r 108         s.p
--[ 2019.11.06.18.30.53.021.0 ]--
r 108         s.pu
--[ 2019.11.06.18.30.53.111.0 ]--
r 108         s.pus
--[ 2019.11.06.18.30.53.233.0 ]--
r 108         s.push
--[ 2019.11.06.18.30.53.887.0 ]--
r 108         s.push()
--[ 2019.11.06.18.30.54.226.0 ]--
r 108         s.push(n)
--[ 2019.11.06.18.30.54.437.0 ]--
r 108         s.push(nw)
--[ 2019.11.06.18.30.54.624.0 ]--
r 108         s.push(n)
--[ 2019.11.06.18.30.54.702.0 ]--
r 108         s.push(ne)
--[ 2019.11.06.18.30.54.834.0 ]--
r 108         s.push(new)
--[ 2019.11.06.18.30.54.917.0 ]--
r 108         s.push(new )
--[ 2019.11.06.18.30.55.088.0 ]--
r 108         s.push(new P)
--[ 2019.11.06.18.30.55.155.0 ]--
r 108         s.push(new PF)
--[ 2019.11.06.18.30.55.759.0 ]--
r 108         s.push(new PFN)
--[ 2019.11.06.18.30.55.887.0 ]--
r 108         s.push(new PFNo)
--[ 2019.11.06.18.30.55.951.0 ]--
r 108         s.push(new PFNod)
--[ 2019.11.06.18.30.56.010.0 ]--
r 108         s.push(new PFNode)
--[ 2019.11.06.18.30.56.268.0 ]--
r 108         s.push(new PFNode())
--[ 2019.11.06.18.30.57.982.0 ]--
r 108         s.push(new PFNode(n))
--[ 2019.11.06.18.30.58.051.0 ]--
r 108         s.push(new PFNode(nu))
--[ 2019.11.06.18.30.58.291.0 ]--
r 108         s.push(new PFNode(nul))
--[ 2019.11.06.18.30.58.383.0 ]--
r 108         s.push(new PFNode(null))
--[ 2019.11.06.18.30.58.437.0 ]--
r 108         s.push(new PFNode(null,))
--[ 2019.11.06.18.30.58.591.0 ]--
r 108         s.push(new PFNode(null, ))
--[ 2019.11.06.18.30.58.663.0 ]--
r 108         s.push(new PFNode(null, n))
--[ 2019.11.06.18.30.58.722.0 ]--
r 108         s.push(new PFNode(null, nu))
--[ 2019.11.06.18.30.58.963.0 ]--
r 108         s.push(new PFNode(null, nul))
--[ 2019.11.06.18.30.59.227.0 ]--
r 108         s.push(new PFNode(null, null))
--[ 2019.11.06.18.31.01.441.0 ]--
r 108         s.push(new PFNode(null, null));
--[ 2019.11.06.18.31.08.844.0 ]--
r 108         s.push(new PFNode(null, null)); 
--[ 2019.11.06.18.31.08.898.0 ]--
r 108         s.push(new PFNode(null, null));
--[ 2019.11.06.18.31.12.525.0 ]--
r 109         return nul;
--[ 2019.11.06.18.31.12.623.0 ]--
r 109         return nu;
--[ 2019.11.06.18.31.12.725.0 ]--
r 109         return n;
--[ 2019.11.06.18.31.12.976.0 ]--
r 109         return ;
--[ 2019.11.06.18.31.13.078.0 ]--
r 109         return s;
--[ 2019.11.06.18.31.23.594.0 ]--
r 109         return ;
--[ 2019.11.06.18.31.23.931.0 ]--
r 109         return n;
--[ 2019.11.06.18.31.23.997.0 ]--
r 109         return nu;
--[ 2019.11.06.18.31.24.191.0 ]--
r 109         return nul;
--[ 2019.11.06.18.31.24.319.0 ]--
r 109         return null;
--[ 2019.11.06.18.31.25.605.0 ]--
- 107
r 107         Stack<PFNodPFNode(null, null));
--[ 2019.11.06.18.31.26.555.0 ]--
r 107         Stack<PFNode(null, null));
--[ 2019.11.06.18.31.27.202.0 ]--
r 107         StackPFNode(null, null));
--[ 2019.11.06.18.31.28.572.0 ]--
r 107         Stack;
--[ 2019.11.06.18.31.29.876.0 ]--
r 107         
--[ 2019.11.06.18.31.30.127.0 ]--
- 107
--[ 2019.11.06.18.38.28.464.0 ]--
+ 107         
--[ 2019.11.06.18.38.29.742.0 ]--
r 107         p
--[ 2019.11.06.18.38.30.285.0 ]--
r 107         pu
--[ 2019.11.06.18.38.30.331.0 ]--
r 107         pub
--[ 2019.11.06.18.38.30.472.0 ]--
r 107         publ
--[ 2019.11.06.18.38.30.639.0 ]--
r 107         publi
--[ 2019.11.06.18.38.30.711.0 ]--
r 107         public
--[ 2019.11.06.18.38.32.262.0 ]--
r 107         public 
--[ 2019.11.06.18.38.32.443.0 ]--
r 107         public I
--[ 2019.11.06.18.38.32.535.0 ]--
r 107         public It
--[ 2019.11.06.18.38.32.627.0 ]--
r 107         public Ite
--[ 2019.11.06.18.38.32.752.0 ]--
r 107         public Iter
--[ 2019.11.06.18.38.32.801.0 ]--
r 107         public Itera
--[ 2019.11.06.18.38.32.958.0 ]--
r 107         public Iterab
--[ 2019.11.06.18.38.33.024.0 ]--
r 107         public Iterabl
--[ 2019.11.06.18.38.33.113.0 ]--
r 107         public Iterable
--[ 2019.11.06.18.38.33.300.0 ]--
r 107         public Iterable<>
--[ 2019.11.06.18.38.33.632.0 ]--
r 107         public Iterable<T>
--[ 2019.11.06.18.38.34.346.0 ]--
r 107         public Iterable<>
--[ 2019.11.06.18.38.34.549.0 ]--
r 107         public Iterable<P>
--[ 2019.11.06.18.38.34.804.0 ]--
r 107         public Iterable<Pf>
--[ 2019.11.06.18.38.35.757.0 ]--
r 107         public Iterable<PfN>
--[ 2019.11.06.18.38.35.858.0 ]--
r 107         public Iterable<PfNo>
--[ 2019.11.06.18.38.35.924.0 ]--
r 107         public Iterable<PfNod>
--[ 2019.11.06.18.38.35.980.0 ]--
r 107         public Iterable<PfNode>
--[ 2019.11.06.18.38.36.642.0 ]--
r 107         public Iterable<PfNode >
--[ 2019.11.06.18.38.37.324.0 ]--
r 107         public Iterable<PfNode>
--[ 2019.11.06.18.38.38.441.0 ]--
r 107         public Iterable<PfNod>
--[ 2019.11.06.18.38.38.565.0 ]--
r 107         public Iterable<PfNo>
--[ 2019.11.06.18.38.39.205.0 ]--
r 107         public Iterable<PfN>
--[ 2019.11.06.18.38.39.316.0 ]--
r 107         public Iterable<Pf>
--[ 2019.11.06.18.38.39.433.0 ]--
r 107         public Iterable<P>
--[ 2019.11.06.18.38.39.596.0 ]--
r 107         public Iterable<PF>
--[ 2019.11.06.18.38.39.723.0 ]--
r 107         public Iterable<PFN>
--[ 2019.11.06.18.38.39.970.0 ]--
r 107         public Iterable<PFNo>
--[ 2019.11.06.18.38.40.328.0 ]--
r 107         public Iterable<PFNod>
--[ 2019.11.06.18.38.40.376.0 ]--
r 107         public Iterable<PFNode>
--[ 2019.11.06.18.38.42.140.0 ]--
r 107         public Iterable<PFNode> 
--[ 2019.11.06.18.38.42.498.0 ]--
r 107         public Iterable<PFNode> e
--[ 2019.11.06.18.38.42.706.0 ]--
r 107         public Iterable<PFNode> 
--[ 2019.11.06.18.38.42.821.0 ]--
r 107         public Iterable<PFNode>
--[ 2019.11.06.18.38.43.101.0 ]--
r 107         public Iterable<PFNode> 
--[ 2019.11.06.18.38.43.207.0 ]--
r 107         public Iterable<PFNode> t
--[ 2019.11.06.18.38.43.281.0 ]--
r 107         public Iterable<PFNode> te
--[ 2019.11.06.18.38.43.416.0 ]--
r 107         public Iterable<PFNode> tes
--[ 2019.11.06.18.38.43.547.0 ]--
r 107         public Iterable<PFNode> test
--[ 2019.11.06.18.38.44.334.0 ]--
r 107         public Iterable<PFNode> test()
--[ 2019.11.06.18.38.46.180.0 ]--
r 107         public Iterable<PFNode> test(){
--[ 2019.11.06.18.38.46.428.0 ]--
+ 108 
+ 109 }
--[ 2019.11.06.18.38.46.441.0 ]--
r 109         }
--[ 2019.11.06.18.38.46.450.0 ]--
r 108             
--[ 2019.11.06.18.38.58.810.0 ]--
r 107         public Iterable<PFNode> test()
--[ 2019.11.06.18.38.59.610.0 ]--
r 107         public Iterable<PFNode> test();
--[ 2019.11.06.18.39.01.053.0 ]--
r 107         public Iterable<PFNode> test()
--[ 2019.11.06.18.39.01.520.0 ]--
r 107         public Iterable<PFNode> test(){
--[ 2019.11.06.18.39.07.669.0 ]--
r 107         p Iterable<PFNode> test(){
--[ 2019.11.06.18.39.07.782.0 ]--
r 107         pr Iterable<PFNode> test(){
--[ 2019.11.06.18.39.07.875.0 ]--
r 107         pri Iterable<PFNode> test(){
--[ 2019.11.06.18.39.08.075.0 ]--
r 107         priv Iterable<PFNode> test(){
--[ 2019.11.06.18.39.08.166.0 ]--
r 107         priva Iterable<PFNode> test(){
--[ 2019.11.06.18.39.08.279.0 ]--
r 107         privat Iterable<PFNode> test(){
--[ 2019.11.06.18.39.08.343.0 ]--
r 107         private Iterable<PFNode> test(){
--[ 2019.11.06.18.39.11.766.0 ]--
- 107
- 107
r 107         
--[ 2019.11.06.18.39.12.392.0 ]--
- 107
--[ 2019.11.06.18.39.15.809.0 ]--
r 107         return I;
--[ 2019.11.06.18.39.16.275.0 ]--
r 107         return Iter;
--[ 2019.11.06.18.39.16.334.0 ]--
r 107         return Itera;
--[ 2019.11.06.18.39.16.475.0 ]--
r 107         return Iterab;
--[ 2019.11.06.18.39.16.578.0 ]--
r 107         return Iterabl;
--[ 2019.11.06.18.39.16.695.0 ]--
r 107         return Iterable;
--[ 2019.11.06.18.39.16.966.0 ]--
r 107         return Iterable<;
--[ 2019.11.06.18.39.17.178.0 ]--
r 107         return Iterable<D;
--[ 2019.11.06.18.39.17.336.0 ]--
r 107         return Iterable<Do;
--[ 2019.11.06.18.39.17.458.0 ]--
r 107         return Iterable<Doo;
--[ 2019.11.06.18.39.17.839.0 ]--
r 107         return Iterable<Do;
--[ 2019.11.06.18.39.17.943.0 ]--
r 107         return Iterable<D;
--[ 2019.11.06.18.39.18.040.0 ]--
r 107         return Iterable<;
--[ 2019.11.06.18.39.18.190.0 ]--
r 107         return Iterable<C;
--[ 2019.11.06.18.39.18.278.0 ]--
r 107         return Iterable<Co;
--[ 2019.11.06.18.39.18.383.0 ]--
r 107         return Iterable<Coo;
--[ 2019.11.06.18.39.18.471.0 ]--
r 107         return Iterable<Coor;
--[ 2019.11.06.18.39.18.660.0 ]--
r 107         return Iterable<Coord;
--[ 2019.11.06.18.39.18.885.0 ]--
r 107         return Iterable<Coord>;
--[ 2019.11.06.18.39.23.875.0 ]--
r 107         return nIterable<Coord>;
--[ 2019.11.06.18.39.23.925.0 ]--
r 107         return neIterable<Coord>;
--[ 2019.11.06.18.39.24.066.0 ]--
r 107         return newIterable<Coord>;
--[ 2019.11.06.18.39.24.165.0 ]--
r 107         return new Iterable<Coord>;
--[ 2019.11.06.18.39.30.034.0 ]--
r 107         return new Iterable<Coord>();
--[ 2019.11.06.18.39.32.065.0 ]--
r 107         return new Iterable<Coord>(); 
--[ 2019.11.06.18.39.32.115.0 ]--
r 107         return new Iterable<Coord>();
--[ 2019.11.06.18.39.35.999.0 ]--
r 107         return new Iterable<Coord>(); 
--[ 2019.11.06.18.39.36.391.0 ]--
r 107         return new Iterable<Coord>;
--[ 2019.11.06.18.39.36.855.0 ]--
r 107         return Iterable<Coord>;
--[ 2019.11.06.18.39.37.839.0 ]--
r 107         return Iterable<;
--[ 2019.11.06.18.39.38.169.0 ]--
r 107         return Iterable<Doo;
--[ 2019.11.06.18.39.38.470.0 ]--
r 107         return null;
--[ 2019.11.06.18.59.56.683.0 ]--
+ 107         
--[ 2019.11.06.18.59.59.560.0 ]--
r 107          
--[ 2019.11.06.18.59.59.598.0 ]--
r 107         
--[ 2019.11.06.18.59.59.911.0 ]--
r 107         n
--[ 2019.11.06.19.00.00.006.0 ]--
r 107         ne
--[ 2019.11.06.19.00.00.149.0 ]--
r 107         new
--[ 2019.11.06.19.00.00.629.0 ]--
r 107         new 
--[ 2019.11.06.19.00.00.773.0 ]--
r 107         new C
--[ 2019.11.06.19.00.00.936.0 ]--
r 107         new Co
--[ 2019.11.06.19.00.01.061.0 ]--
r 107         new Coo
--[ 2019.11.06.19.00.01.560.0 ]--
r 107         new Coor
--[ 2019.11.06.19.00.01.763.0 ]--
r 107         new Coord
--[ 2019.11.06.19.00.02.030.0 ]--
r 107         new Coord()
--[ 2019.11.06.19.00.03.082.0 ]--
r 107         new Coord(1)
--[ 2019.11.06.19.00.03.187.0 ]--
r 107         new Coord(1,)
--[ 2019.11.06.19.00.03.269.0 ]--
r 107         new Coord(1,2)
--[ 2019.11.06.19.00.04.969.0 ]--
r 107         new Coord(1,2);
--[ 2019.11.06.19.00.06.059.0 ]--
r 107         new Coord(1,2); 
--[ 2019.11.06.19.00.06.105.0 ]--
r 107         new Coord(1,2);
--[ 2019.11.06.19.00.08.326.0 ]--
r 107         
--[ 2019.11.06.19.00.16.072.0 ]--
r 107          
--[ 2019.11.06.19.00.16.112.0 ]--
r 107         
--[ 2019.11.06.19.00.16.276.0 ]--
r 107         n
--[ 2019.11.06.19.00.16.360.0 ]--
r 107         ne
--[ 2019.11.06.19.00.16.503.0 ]--
r 107         new
--[ 2019.11.06.19.00.17.125.0 ]--
r 107         new 
--[ 2019.11.06.19.00.17.245.0 ]--
r 107         new
--[ 2019.11.06.19.00.17.380.0 ]--
r 107         ne
--[ 2019.11.06.19.00.17.497.0 ]--
r 107         n
--[ 2019.11.06.19.00.18.143.0 ]--
r 107         
--[ 2019.11.06.19.00.18.910.0 ]--
r 107         n
--[ 2019.11.06.19.00.19.014.0 ]--
r 107         ne
--[ 2019.11.06.19.00.19.393.0 ]--
r 107         n
--[ 2019.11.06.19.00.19.500.0 ]--
r 107         
--[ 2019.11.06.19.00.20.758.0 ]--
r 107          
--[ 2019.11.06.19.00.20.793.0 ]--
r 107         
--[ 2019.11.06.19.00.20.968.0 ]--
- 107
--[ 2019.11.06.19.00.21.199.0 ]--
r 106     public Iterable<Coord> getPathSolution() 
--[ 2019.11.06.19.00.21.642.0 ]--
+ 106     public Iterable<Coord> getPathSolution() {
r 107          
--[ 2019.11.06.19.00.24.345.0 ]--
r 107         
--[ 2019.11.06.19.00.29.518.0 ]--
r 107         S
--[ 2019.11.06.19.00.29.707.0 ]--
r 107         St
--[ 2019.11.06.19.00.29.778.0 ]--
r 107         Sta
--[ 2019.11.06.19.00.29.910.0 ]--
r 107         Stac
--[ 2019.11.06.19.00.30.720.0 ]--
r 107         Stack
--[ 2019.11.06.19.00.30.896.0 ]--
r 107         Stack<>
--[ 2019.11.06.19.00.31.378.0 ]--
r 107         Stack<P>
--[ 2019.11.06.19.00.31.522.0 ]--
r 107         Stack<PF>
--[ 2019.11.06.19.00.31.901.0 ]--
r 107         Stack<PFN>
--[ 2019.11.06.19.00.32.041.0 ]--
r 107         Stack<PFNo>
--[ 2019.11.06.19.00.32.100.0 ]--
r 107         Stack<PFNod>
--[ 2019.11.06.19.00.32.167.0 ]--
r 107         Stack<PFNode>
--[ 2019.11.06.19.00.32.435.0 ]--
r 107         Stack<PFNode> 
--[ 2019.11.06.19.00.32.543.0 ]--
r 107         Stack<PFNode> s
--[ 2019.11.06.19.00.32.715.0 ]--
r 107         Stack<PFNode> s 
--[ 2019.11.06.19.00.33.091.0 ]--
r 107         Stack<PFNode> s =
--[ 2019.11.06.19.00.33.513.0 ]--
r 107         Stack<PFNode> s = 
--[ 2019.11.06.19.00.33.621.0 ]--
r 107         Stack<PFNode> s = n
--[ 2019.11.06.19.00.33.692.0 ]--
r 107         Stack<PFNode> s = ne
--[ 2019.11.06.19.00.33.806.0 ]--
r 107         Stack<PFNode> s = new
--[ 2019.11.06.19.00.33.890.0 ]--
r 107         Stack<PFNode> s = new 
--[ 2019.11.06.19.00.33.986.0 ]--
r 107         Stack<PFNode> s = new S
--[ 2019.11.06.19.00.34.098.0 ]--
r 107         Stack<PFNode> s = new St
--[ 2019.11.06.19.00.34.162.0 ]--
r 107         Stack<PFNode> s = new Sta
--[ 2019.11.06.19.00.34.301.0 ]--
r 107         Stack<PFNode> s = new Stac
--[ 2019.11.06.19.00.34.572.0 ]--
r 107         Stack<PFNode> s = new Stac<>
--[ 2019.11.06.19.00.35.188.0 ]--
r 107         Stack<PFNode> s = new Stac<>()
--[ 2019.11.06.19.00.35.527.0 ]--
r 107         Stack<PFNode> s = new Stac<>(
--[ 2019.11.06.19.00.35.579.0 ]--
r 107         Stack<PFNode> s = new Stac<>
--[ 2019.11.06.19.00.35.696.0 ]--
r 107         Stack<PFNode> s = new Stac<
--[ 2019.11.06.19.00.35.824.0 ]--
r 107         Stack<PFNode> s = new Stac
--[ 2019.11.06.19.00.36.586.0 ]--
r 107         Stack<PFNode> s = new Stack
--[ 2019.11.06.19.00.36.786.0 ]--
r 107         Stack<PFNode> s = new Stack<>
--[ 2019.11.06.19.00.37.577.0 ]--
r 107         Stack<PFNode> s = new Stack<>*
--[ 2019.11.06.19.00.37.634.0 ]--
r 107         Stack<PFNode> s = new Stack<>*()
--[ 2019.11.06.19.00.37.878.0 ]--
r 107         Stack<PFNode> s = new Stack<>*
--[ 2019.11.06.19.00.37.972.0 ]--
r 107         Stack<PFNode> s = new Stack<>
--[ 2019.11.06.19.00.38.143.0 ]--
r 107         Stack<PFNode> s = new Stack<>()
--[ 2019.11.06.19.00.38.625.0 ]--
r 107         Stack<PFNode> s = new Stack<>();
--[ 2019.11.06.19.00.39.520.0 ]--
r 107         Stack<PFNode> s = new Stack<>(); 
--[ 2019.11.06.19.00.39.564.0 ]--
r 107         Stack<PFNode> s = new Stack<>();
--[ 2019.11.06.19.00.39.779.0 ]--
+ 108         
--[ 2019.11.06.19.00.41.321.0 ]--
r 108         s
--[ 2019.11.06.19.00.41.372.0 ]--
r 108         s.
--[ 2019.11.06.19.00.41.630.0 ]--
r 108         s.p
--[ 2019.11.06.19.00.41.705.0 ]--
r 108         s.pui
--[ 2019.11.06.19.00.42.423.0 ]--
r 108         s.pu
--[ 2019.11.06.19.00.42.613.0 ]--
r 108         s.pus
--[ 2019.11.06.19.00.42.665.0 ]--
r 108         s.push
--[ 2019.11.06.19.00.42.884.0 ]--
r 108         s.push 
--[ 2019.11.06.19.00.42.938.0 ]--
r 108         s.push n
--[ 2019.11.06.19.00.43.052.0 ]--
r 108         s.push ne
--[ 2019.11.06.19.00.43.179.0 ]--
r 108         s.push new
--[ 2019.11.06.19.00.43.389.0 ]--
r 108         s.push new 
--[ 2019.11.06.19.00.43.700.0 ]--
r 108         s.push new
--[ 2019.11.06.19.00.44.056.0 ]--
r 108         s.push ne
--[ 2019.11.06.19.00.44.120.0 ]--
r 108         s.push n
--[ 2019.11.06.19.00.44.243.0 ]--
r 108         s.push 
--[ 2019.11.06.19.00.44.373.0 ]--
r 108         s.push
--[ 2019.11.06.19.00.44.535.0 ]--
r 108         s.push()
--[ 2019.11.06.19.00.45.059.0 ]--
r 108         s.push
--[ 2019.11.06.19.00.46.422.0 ]--
r 108         s.push()
--[ 2019.11.06.19.00.46.621.0 ]--
r 108         s.push(n)
--[ 2019.11.06.19.00.46.696.0 ]--
r 108         s.push(ne)
--[ 2019.11.06.19.00.46.860.0 ]--
r 108         s.push(new)
--[ 2019.11.06.19.00.47.203.0 ]--
r 108         s.push(new )
--[ 2019.11.06.19.00.47.548.0 ]--
r 108         s.push(new C)
--[ 2019.11.06.19.00.47.641.0 ]--
r 108         s.push(new Co)
--[ 2019.11.06.19.00.47.778.0 ]--
r 108         s.push(new Coo)
--[ 2019.11.06.19.00.48.109.0 ]--
r 108         s.push(new Coor)
--[ 2019.11.06.19.00.48.302.0 ]--
r 108         s.push(new Coord)
--[ 2019.11.06.19.00.48.510.0 ]--
r 108         s.push(new Coord())
--[ 2019.11.06.19.00.49.380.0 ]--
r 108         s.push(new Coord(1))
--[ 2019.11.06.19.00.50.744.0 ]--
r 108         s.push(new Coord())
--[ 2019.11.06.19.00.50.941.0 ]--
r 108         s.push(new Coord(0))
--[ 2019.11.06.19.00.51.279.0 ]--
r 108         s.push(new Coord(0,))
--[ 2019.11.06.19.00.51.534.0 ]--
r 108         s.push(new Coord(0,0))
--[ 2019.11.06.19.00.54.049.0 ]--
r 108         s.push(new Coord(0,0));
--[ 2019.11.06.19.01.07.423.0 ]--
r 108         s
--[ 2019.11.06.19.01.07.536.0 ]--
r 108         
--[ 2019.11.06.19.01.07.793.0 ]--
- 108
--[ 2019.11.06.19.01.09.978.0 ]--
+ 107         
--[ 2019.11.06.19.01.11.721.0 ]--
r 107         c
--[ 2019.11.06.19.01.11.783.0 ]--
r 107         co
--[ 2019.11.06.19.01.11.950.0 ]--
r 107         coo
--[ 2019.11.06.19.01.12.221.0 ]--
r 107         co
--[ 2019.11.06.19.01.12.329.0 ]--
r 107         c
--[ 2019.11.06.19.01.12.443.0 ]--
r 107         
--[ 2019.11.06.19.01.12.569.0 ]--
r 107         C
--[ 2019.11.06.19.01.12.650.0 ]--
r 107         Co
--[ 2019.11.06.19.01.12.753.0 ]--
r 107         Coo
--[ 2019.11.06.19.01.12.851.0 ]--
r 107         Coor
--[ 2019.11.06.19.01.13.016.0 ]--
r 107         Coord
--[ 2019.11.06.19.01.13.207.0 ]--
r 107         Coord 
--[ 2019.11.06.19.01.13.611.0 ]--
r 107         Coord t
--[ 2019.11.06.19.01.13.690.0 ]--
r 107         Coord te
--[ 2019.11.06.19.01.13.809.0 ]--
r 107         Coord tes
--[ 2019.11.06.19.01.13.912.0 ]--
r 107         Coord test
--[ 2019.11.06.19.01.14.000.0 ]--
r 107         Coord test 
--[ 2019.11.06.19.01.14.110.0 ]--
r 107         Coord test =
--[ 2019.11.06.19.01.14.229.0 ]--
r 107         Coord test = 
--[ 2019.11.06.19.01.14.329.0 ]--
r 107         Coord test = n
--[ 2019.11.06.19.01.14.662.0 ]--
r 107         Coord test = ne
--[ 2019.11.06.19.01.14.808.0 ]--
r 107         Coord test = new
--[ 2019.11.06.19.01.15.046.0 ]--
r 107         Coord test = new 
--[ 2019.11.06.19.01.15.237.0 ]--
r 107         Coord test = new C
--[ 2019.11.06.19.01.15.338.0 ]--
r 107         Coord test = new Co
--[ 2019.11.06.19.01.15.450.0 ]--
r 107         Coord test = new Coo
--[ 2019.11.06.19.01.15.557.0 ]--
r 107         Coord test = new Coor
--[ 2019.11.06.19.01.15.769.0 ]--
r 107         Coord test = new Coord
--[ 2019.11.06.19.01.16.225.0 ]--
r 107         Coord test = new Coord()
--[ 2019.11.06.19.01.17.136.0 ]--
r 107         Coord test = new Coord(1)
--[ 2019.11.06.19.01.17.629.0 ]--
r 107         Coord test = new Coord()
--[ 2019.11.06.19.01.18.169.0 ]--
r 107         Coord test = new Coord(0)
--[ 2019.11.06.19.01.18.414.0 ]--
r 107         Coord test = new Coord(0,)
--[ 2019.11.06.19.01.18.505.0 ]--
r 107         Coord test = new Coord(0,0)
--[ 2019.11.06.19.01.20.132.0 ]--
r 107         Coord test = new Coord(0,0);
--[ 2019.11.06.19.01.23.673.0 ]--
r 107         Coord test = new Coord(0,0); 
--[ 2019.11.06.19.01.23.723.0 ]--
r 107         Coord test = new Coord(0,0);
--[ 2019.11.06.19.01.23.924.0 ]--
+ 108         
--[ 2019.11.06.19.01.25.329.0 ]--
r 108         C
--[ 2019.11.06.19.01.25.473.0 ]--
r 108         Co
--[ 2019.11.06.19.01.25.589.0 ]--
r 108         Coo
--[ 2019.11.06.19.01.25.700.0 ]--
r 108         Coor
--[ 2019.11.06.19.01.25.893.0 ]--
r 108         Coord
--[ 2019.11.06.19.01.26.028.0 ]--
r 108         Coord 
--[ 2019.11.06.19.01.26.159.0 ]--
r 108         Coord t
--[ 2019.11.06.19.01.26.206.0 ]--
r 108         Coord te
--[ 2019.11.06.19.01.26.351.0 ]--
r 108         Coord tes
--[ 2019.11.06.19.01.26.466.0 ]--
r 108         Coord test
--[ 2019.11.06.19.01.26.639.0 ]--
r 108         Coord test2
--[ 2019.11.06.19.01.26.845.0 ]--
r 108         Coord test2 
--[ 2019.11.06.19.01.27.023.0 ]--
r 108         Coord test2 =
--[ 2019.11.06.19.01.27.285.0 ]--
r 108         Coord test2 = 
--[ 2019.11.06.19.01.27.438.0 ]--
r 108         Coord test2 = n
--[ 2019.11.06.19.01.27.526.0 ]--
r 108         Coord test2 = ne
--[ 2019.11.06.19.01.27.691.0 ]--
r 108         Coord test2 = new
--[ 2019.11.06.19.01.27.725.0 ]--
r 108         Coord test2 = new 
--[ 2019.11.06.19.01.27.825.0 ]--
r 108         Coord test2 = new C
--[ 2019.11.06.19.01.28.159.0 ]--
r 108         Coord test2 = new Coo
--[ 2019.11.06.19.01.28.771.0 ]--
r 108         Coord test2 = new Coor
--[ 2019.11.06.19.01.28.936.0 ]--
r 108         Coord test2 = new Coord
--[ 2019.11.06.19.01.29.576.0 ]--
r 108         Coord test2 = new Coord()
--[ 2019.11.06.19.01.32.241.0 ]--
r 108         Coord test2 = new Coord(5)
--[ 2019.11.06.19.01.32.350.0 ]--
r 108         Coord test2 = new Coord(5,)
--[ 2019.11.06.19.01.34.425.0 ]--
r 108         Coord test2 = new Coord(5)
--[ 2019.11.06.19.01.35.061.0 ]--
r 108         Coord test2 = new Coord()
--[ 2019.11.06.19.01.40.879.0 ]--
r 108         Coord test2 = new Coord
--[ 2019.11.06.19.01.41.696.0 ]--
r 108         Coord test2 = new Coord)
--[ 2019.11.06.19.01.43.616.0 ]--
r 108         Coord test2 = new 
--[ 2019.11.06.19.01.46.481.0 ]--
r 107         Coord test = new 
--[ 2019.11.06.19.01.52.832.0 ]--
r 107 
--[ 2019.11.06.19.01.53.532.0 ]--
- 107
--[ 2019.11.06.19.01.55.492.0 ]--
r 107 
--[ 2019.11.06.19.01.56.124.0 ]--
- 107
--[ 2019.11.06.19.01.56.985.0 ]--
+ 108         
--[ 2019.11.06.19.02.02.602.0 ]--
r 108         s
--[ 2019.11.06.19.02.02.733.0 ]--
r 108         st
--[ 2019.11.06.19.02.02.799.0 ]--
r 108         sta
--[ 2019.11.06.19.02.02.966.0 ]--
r 108         stac
--[ 2019.11.06.19.02.03.026.0 ]--
r 108         stacl
--[ 2019.11.06.19.02.03.298.0 ]--
r 108         stacl.
--[ 2019.11.06.19.02.03.622.0 ]--
r 108         stacl. 
--[ 2019.11.06.19.02.03.664.0 ]--
r 108         stacl.
--[ 2019.11.06.19.02.03.895.0 ]--
r 108         stacl
--[ 2019.11.06.19.02.04.570.0 ]--
r 108         stac
--[ 2019.11.06.19.02.07.107.0 ]--
r 108         sta
--[ 2019.11.06.19.02.07.266.0 ]--
r 108         st
--[ 2019.11.06.19.02.07.376.0 ]--
r 108         s
--[ 2019.11.06.19.02.07.732.0 ]--
r 108         
--[ 2019.11.06.19.02.07.993.0 ]--
r 108         s
--[ 2019.11.06.19.02.08.050.0 ]--
r 108         s.
--[ 2019.11.06.19.02.08.301.0 ]--
r 108         s.p
--[ 2019.11.06.19.02.08.373.0 ]--
r 108         s.pu
--[ 2019.11.06.19.02.08.505.0 ]--
r 108         s.pus
--[ 2019.11.06.19.02.08.604.0 ]--
r 108         s.push
--[ 2019.11.06.19.02.09.084.0 ]--
r 108         s.push()
--[ 2019.11.06.19.02.09.885.0 ]--
r 108         s.push(s)
--[ 2019.11.06.19.02.10.528.0 ]--
r 108         s.push(st)
--[ 2019.11.06.19.02.10.606.0 ]--
r 108         s.push(sta)
--[ 2019.11.06.19.02.10.676.0 ]--
r 108         s.push(star)
--[ 2019.11.06.19.02.10.844.0 ]--
r 108         s.push(start)
--[ 2019.11.06.19.02.11.249.0 ]--
r 108         s.push(start);
--[ 2019.11.06.19.02.13.545.0 ]--
r 108         s.push(start); 
--[ 2019.11.06.19.02.13.612.0 ]--
r 108         s.push(start);
--[ 2019.11.06.19.02.15.967.0 ]--
r 108         
--[ 2019.11.06.19.02.16.409.0 ]--
- 108
--[ 2019.11.06.19.03.21.353.0 ]--
r 107         Stack<PFNode> s = new Stack<>(); 
--[ 2019.11.06.19.03.21.423.0 ]--
r 107         Stack<PFNode> s = new Stack<>();
--[ 2019.11.06.19.03.21.643.0 ]--
+ 108         
--[ 2019.11.06.19.03.22.544.0 ]--
r 108          
--[ 2019.11.06.19.03.22.603.0 ]--
r 108         
--[ 2019.11.06.19.03.41.842.0 ]--
r 108          
--[ 2019.11.06.19.03.41.885.0 ]--
r 108         
--[ 2019.11.06.19.03.52.520.0 ]--
- 107
r 107 
--[ 2019.11.06.19.03.53.004.0 ]--
- 107
--[ 2019.11.06.19.03.53.834.0 ]--
+ 107         
--[ 2019.11.06.19.08.23.634.0 ]--
- 107
--[ 2019.11.06.19.08.24.970.0 ]--
+ 107         
--[ 2019.11.06.19.08.25.201.0 ]--
- 107
--[ 2019.11.06.19.09.09.090.0 ]--
+ 107         
--[ 2019.11.06.19.09.11.999.0 ]--
r 107          
--[ 2019.11.06.19.09.12.075.0 ]--
r 107         
--[ 2019.11.06.19.09.13.281.0 ]--
r 107         S
--[ 2019.11.06.19.09.13.452.0 ]--
r 107         St
--[ 2019.11.06.19.09.13.558.0 ]--
r 107         Sta
--[ 2019.11.06.19.09.14.022.0 ]--
r 107         Sta 
--[ 2019.11.06.19.09.14.045.0 ]--
r 107         Sta
--[ 2019.11.06.19.09.14.174.0 ]--
r 107         St
--[ 2019.11.06.19.09.14.282.0 ]--
r 107         S
--[ 2019.11.06.19.09.14.404.0 ]--
r 107         
--[ 2019.11.06.19.09.18.791.0 ]--
r 107         S
--[ 2019.11.06.19.09.18.947.0 ]--
r 107         St
--[ 2019.11.06.19.09.19.019.0 ]--
r 107         Sta
--[ 2019.11.06.19.09.19.152.0 ]--
r 107         Stac
--[ 2019.11.06.19.09.19.333.0 ]--
r 107         Stack
--[ 2019.11.06.19.09.19.540.0 ]--
r 107         Stack<>
--[ 2019.11.06.19.09.19.749.0 ]--
r 107         Stack<C>
--[ 2019.11.06.19.09.19.932.0 ]--
r 107         Stack<Co>
--[ 2019.11.06.19.09.20.049.0 ]--
r 107         Stack<Coo>
--[ 2019.11.06.19.09.20.121.0 ]--
r 107         Stack<Coor>
--[ 2019.11.06.19.09.20.305.0 ]--
r 107         Stack<Coord>
--[ 2019.11.06.19.09.21.685.0 ]--
r 107         Stack<Coord>;
--[ 2019.11.06.19.09.22.123.0 ]--
r 107         Stack<Coord>; 
--[ 2019.11.06.19.09.22.188.0 ]--
r 107         Stack<Coord>;
--[ 2019.11.06.19.09.22.333.0 ]--
r 107         Stack<Coord>
--[ 2019.11.06.19.09.22.658.0 ]--
r 107         Stack<Coord> 
--[ 2019.11.06.19.09.23.722.0 ]--
r 107         Stack<Coord> t
--[ 2019.11.06.19.09.23.784.0 ]--
r 107         Stack<Coord> te
--[ 2019.11.06.19.09.25.120.0 ]--
r 107         Stack<Coord> tes
--[ 2019.11.06.19.09.25.155.0 ]--
r 107         Stack<Coord> test
--[ 2019.11.06.19.09.25.462.0 ]--
r 107         Stack<Coord> test 
--[ 2019.11.06.19.09.25.547.0 ]--
r 107         Stack<Coord> test =
--[ 2019.11.06.19.09.25.710.0 ]--
r 107         Stack<Coord> test = 
--[ 2019.11.06.19.09.26.498.0 ]--
r 107         Stack<Coord> test = n
--[ 2019.11.06.19.09.26.524.0 ]--
r 107         Stack<Coord> test = ne
--[ 2019.11.06.19.09.26.678.0 ]--
r 107         Stack<Coord> test = new
--[ 2019.11.06.19.09.26.819.0 ]--
r 107         Stack<Coord> test = new 
--[ 2019.11.06.19.09.26.968.0 ]--
r 107         Stack<Coord> test = new S
--[ 2019.11.06.19.09.27.126.0 ]--
r 107         Stack<Coord> test = new St
--[ 2019.11.06.19.09.27.180.0 ]--
r 107         Stack<Coord> test = new Sta
--[ 2019.11.06.19.09.27.315.0 ]--
r 107         Stack<Coord> test = new Stac
--[ 2019.11.06.19.09.28.393.0 ]--
r 107         Stack<Coord> test = new Stack
--[ 2019.11.06.19.09.28.714.0 ]--
r 107         Stack<Coord> test = new Stack<>
--[ 2019.11.06.19.09.29.266.0 ]--
r 107         Stack<Coord> test = new Stack<>()
--[ 2019.11.06.19.09.29.523.0 ]--
r 107         Stack<Coord> test = new Stack<>();
--[ 2019.11.06.19.09.29.837.0 ]--
+ 108         
--[ 2019.11.06.19.09.30.307.0 ]--
r 108         s
--[ 2019.11.06.19.09.30.399.0 ]--
r 108         s.
--[ 2019.11.06.19.09.30.610.0 ]--
r 108         s.p
--[ 2019.11.06.19.09.30.725.0 ]--
r 108         s.pu
--[ 2019.11.06.19.09.30.799.0 ]--
r 108         s.pus
--[ 2019.11.06.19.09.30.915.0 ]--
r 108         s.push
--[ 2019.11.06.19.09.31.661.0 ]--
r 108         s.pus
--[ 2019.11.06.19.09.31.781.0 ]--
r 108         s.pu
--[ 2019.11.06.19.09.31.875.0 ]--
r 108         s.p
--[ 2019.11.06.19.09.32.009.0 ]--
r 108         s.
--[ 2019.11.06.19.09.32.185.0 ]--
r 108         s
--[ 2019.11.06.19.09.32.312.0 ]--
r 108         
--[ 2019.11.06.19.09.34.207.0 ]--
r 107         Stack<Coord> s = new Stack<>();
--[ 2019.11.06.19.09.36.674.0 ]--
+ 108         
--[ 2019.11.06.19.09.37.327.0 ]--
r 108         s
--[ 2019.11.06.19.09.37.404.0 ]--
r 108         s.
--[ 2019.11.06.19.09.37.607.0 ]--
r 108         s.p
--[ 2019.11.06.19.09.37.677.0 ]--
r 108         s.pu
--[ 2019.11.06.19.09.37.788.0 ]--
r 108         s.pus
--[ 2019.11.06.19.09.37.900.0 ]--
r 108         s.push
--[ 2019.11.06.19.09.38.304.0 ]--
r 108         s.push()
--[ 2019.11.06.19.09.38.454.0 ]--
r 108         s.push(n)
--[ 2019.11.06.19.09.38.507.0 ]--
r 108         s.push(ne)
--[ 2019.11.06.19.09.38.645.0 ]--
r 108         s.push(new)
--[ 2019.11.06.19.09.38.860.0 ]--
r 108         s.push(new )
--[ 2019.11.06.19.09.38.995.0 ]--
r 108         s.push(new C)
--[ 2019.11.06.19.09.39.107.0 ]--
r 108         s.push(new Co)
--[ 2019.11.06.19.09.39.211.0 ]--
r 108         s.push(new Coo)
--[ 2019.11.06.19.09.39.302.0 ]--
r 108         s.push(new Coor)
--[ 2019.11.06.19.09.39.480.0 ]--
r 108         s.push(new Coord)
--[ 2019.11.06.19.09.39.753.0 ]--
r 108         s.push(new Coord())
--[ 2019.11.06.19.09.40.618.0 ]--
r 108         s.push(new Coord(1))
--[ 2019.11.06.19.09.42.462.0 ]--
r 108         s.push(new Coord())
--[ 2019.11.06.19.09.44.154.0 ]--
r 108         s.push(new Coord(s))
--[ 2019.11.06.19.09.44.264.0 ]--
r 108         s.push(new Coord(st))
--[ 2019.11.06.19.09.44.333.0 ]--
r 108         s.push(new Coord(sta))
--[ 2019.11.06.19.09.44.429.0 ]--
r 108         s.push(new Coord(star))
--[ 2019.11.06.19.09.44.580.0 ]--
r 108         s.push(new Coord(start))
--[ 2019.11.06.19.09.46.466.0 ]--
r 108         s.push(new Coord(start));
--[ 2019.11.06.19.09.48.993.0 ]--
r 108         s.push(s);
--[ 2019.11.06.19.09.49.139.0 ]--
r 108         s.push(stg);
--[ 2019.11.06.19.09.49.195.0 ]--
r 108         s.push(stga);
--[ 2019.11.06.19.09.49.659.0 ]--
r 108         s.push(stg);
--[ 2019.11.06.19.09.49.915.0 ]--
r 108         s.push(stga);
--[ 2019.11.06.19.09.50.155.0 ]--
r 108         s.push(stg);
--[ 2019.11.06.19.09.50.227.0 ]--
r 108         s.push(st);
--[ 2019.11.06.19.09.50.294.0 ]--
r 108         s.push(sta);
--[ 2019.11.06.19.09.50.342.0 ]--
r 108         s.push(star);
--[ 2019.11.06.19.09.50.490.0 ]--
r 108         s.push(start);
--[ 2019.11.06.19.09.51.515.0 ]--
+ 109         
--[ 2019.11.06.19.09.51.924.0 ]--
r 109         s
--[ 2019.11.06.19.09.52.024.0 ]--
r 109         s.
--[ 2019.11.06.19.09.52.255.0 ]--
r 109         s.p
--[ 2019.11.06.19.09.52.344.0 ]--
r 109         s.pu
--[ 2019.11.06.19.09.52.415.0 ]--
r 109         s.pus
--[ 2019.11.06.19.09.52.556.0 ]--
r 109         s.push
--[ 2019.11.06.19.09.53.267.0 ]--
r 109         s.push()
--[ 2019.11.06.19.09.53.421.0 ]--
r 109         s.push(e)
--[ 2019.11.06.19.09.53.496.0 ]--
r 109         s.push(en)
--[ 2019.11.06.19.09.53.591.0 ]--
r 109         s.push(end)
--[ 2019.11.06.19.09.53.972.0 ]--
r 109         s.push(end);
--[ 2019.11.06.19.09.56.587.0 ]--
r 109         s.push(end); 
--[ 2019.11.06.19.09.56.639.0 ]--
r 109         s.push(end);
--[ 2019.11.06.19.09.58.633.0 ]--
r 111         return s;
--[ 2019.11.06.19.10.00.355.0 ]--
- 110
--[ 2019.11.06.19.10.04.482.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.10.10.274.0 ]--
r 95         return t;
--[ 2019.11.06.19.10.10.430.0 ]--
r 95         return tr;
--[ 2019.11.06.19.10.10.492.0 ]--
r 95         return tru;
--[ 2019.11.06.19.10.10.574.0 ]--
r 95         return true;
--[ 2019.11.06.19.10.14.841.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.12.24.395.0 ]--
r 108         s.push(start); 
--[ 2019.11.06.19.12.24.431.0 ]--
r 108         s.push(start);
--[ 2019.11.06.19.12.24.620.0 ]--
+ 109         
--[ 2019.11.06.19.12.24.921.0 ]--
r 109         s
--[ 2019.11.06.19.12.24.994.0 ]--
r 109         s.
--[ 2019.11.06.19.12.25.245.0 ]--
r 109         s.p
--[ 2019.11.06.19.12.25.939.0 ]--
r 109         s.
--[ 2019.11.06.19.12.26.030.0 ]--
r 109         s
--[ 2019.11.06.19.12.26.142.0 ]--
r 109         
--[ 2019.11.06.19.12.27.194.0 ]--
r 109         f
--[ 2019.11.06.19.12.27.286.0 ]--
r 109         fo
--[ 2019.11.06.19.12.27.370.0 ]--
r 109         for
--[ 2019.11.06.19.12.27.760.0 ]--
r 109         for 
--[ 2019.11.06.19.12.27.819.0 ]--
r 109         for
--[ 2019.11.06.19.12.28.345.0 ]--
r 109         for()
--[ 2019.11.06.19.12.29.450.0 ]--
r 109         for(i)
--[ 2019.11.06.19.12.29.494.0 ]--
r 109         for(in)
--[ 2019.11.06.19.12.29.582.0 ]--
r 109         for(int)
--[ 2019.11.06.19.12.29.651.0 ]--
r 109         for(int )
--[ 2019.11.06.19.12.29.995.0 ]--
r 109         for(int ui)
--[ 2019.11.06.19.12.30.047.0 ]--
r 109         for(int ui )
--[ 2019.11.06.19.12.30.174.0 ]--
r 109         for(int ui =)
--[ 2019.11.06.19.12.30.347.0 ]--
r 109         for(int ui )
--[ 2019.11.06.19.12.30.466.0 ]--
r 109         for(int ui)
--[ 2019.11.06.19.12.30.563.0 ]--
r 109         for(int u)
--[ 2019.11.06.19.12.30.668.0 ]--
r 109         for(int )
--[ 2019.11.06.19.12.30.860.0 ]--
r 109         for(int i)
--[ 2019.11.06.19.12.31.178.0 ]--
r 109         for(int i )
--[ 2019.11.06.19.12.31.306.0 ]--
r 109         for(int i =)
--[ 2019.11.06.19.12.31.387.0 ]--
r 109         for(int i = )
--[ 2019.11.06.19.12.34.275.0 ]--
r 109         for(int i = s)
--[ 2019.11.06.19.12.34.410.0 ]--
r 109         for(int i = st)
--[ 2019.11.06.19.12.34.475.0 ]--
r 109         for(int i = sta)
--[ 2019.11.06.19.12.34.565.0 ]--
r 109         for(int i = star)
--[ 2019.11.06.19.12.34.702.0 ]--
r 109         for(int i = start)
--[ 2019.11.06.19.12.34.818.0 ]--
r 109         for(int i = start.)
--[ 2019.11.06.19.12.35.418.0 ]--
r 109         for(int i = start.i)
--[ 2019.11.06.19.12.35.806.0 ]--
r 109         for(int i = start.)
--[ 2019.11.06.19.12.36.661.0 ]--
r 109         for(int i = start.getI)
--[ 2019.11.06.19.12.36.669.0 ]--
r 109         for(int i = start.getI())
--[ 2019.11.06.19.12.38.970.0 ]--
r 109         for(int i = start.getI() )
--[ 2019.11.06.19.12.40.876.0 ]--
r 109         for(int i = start.getI())
--[ 2019.11.06.19.12.41.013.0 ]--
r 109         for(int i = start.getI();)
--[ 2019.11.06.19.12.41.161.0 ]--
r 109         for(int i = start.getI(); )
--[ 2019.11.06.19.12.42.167.0 ]--
r 109         for(int i = start.getI(); i)
--[ 2019.11.06.19.12.42.246.0 ]--
r 109         for(int i = start.getI(); i )
--[ 2019.11.06.19.12.42.414.0 ]--
r 109         for(int i = start.getI(); i <)
--[ 2019.11.06.19.12.42.545.0 ]--
r 109         for(int i = start.getI(); i < )
--[ 2019.11.06.19.12.45.210.0 ]--
r 109         for(int i = start.getI(); i < e)
--[ 2019.11.06.19.12.45.285.0 ]--
r 109         for(int i = start.getI(); i < en)
--[ 2019.11.06.19.12.45.357.0 ]--
r 109         for(int i = start.getI(); i < end)
--[ 2019.11.06.19.12.45.535.0 ]--
r 109         for(int i = start.getI(); i < end.)
--[ 2019.11.06.19.12.45.672.0 ]--
r 109         for(int i = start.getI(); i < end.g)
--[ 2019.11.06.19.12.45.745.0 ]--
r 109         for(int i = start.getI(); i < end.ge)
--[ 2019.11.06.19.12.45.919.0 ]--
r 109         for(int i = start.getI(); i < end.get)
--[ 2019.11.06.19.12.47.315.0 ]--
r 109         for(int i = start.getI(); i < end.getI)
--[ 2019.11.06.19.12.47.325.0 ]--
r 109         for(int i = start.getI(); i < end.getI())
--[ 2019.11.06.19.12.48.648.0 ]--
r 109         for(int i = start.getI(); i < end.getI();)
--[ 2019.11.06.19.12.48.829.0 ]--
r 109         for(int i = start.getI(); i < end.getI(); )
--[ 2019.11.06.19.13.30.577.0 ]--
r 109         for(int i = start.getI(); i < end.getI();)
--[ 2019.11.06.19.13.31.255.0 ]--
r 109         for(int i = start.getI(); i < end.getI(); )
--[ 2019.11.06.19.13.31.319.0 ]--
r 109         for(int i = start.getI(); i < end.getI();)
--[ 2019.11.06.19.13.32.355.0 ]--
r 109         for(int i = start.getI(); i < end.getI(); )
--[ 2019.11.06.19.13.32.518.0 ]--
r 109         for(int i = start.getI(); i < end.getI(); i)
--[ 2019.11.06.19.13.32.695.0 ]--
r 109         for(int i = start.getI(); i < end.getI(); i_)
--[ 2019.11.06.19.13.32.831.0 ]--
r 109         for(int i = start.getI(); i < end.getI(); i__)
--[ 2019.11.06.19.13.33.330.0 ]--
r 109         for(int i = start.getI(); i < end.getI(); i_)
--[ 2019.11.06.19.13.33.421.0 ]--
r 109         for(int i = start.getI(); i < end.getI(); i)
--[ 2019.11.06.19.13.33.558.0 ]--
r 109         for(int i = start.getI(); i < end.getI(); i+)
--[ 2019.11.06.19.13.33.675.0 ]--
r 109         for(int i = start.getI(); i < end.getI(); i++)
--[ 2019.11.06.19.13.35.282.0 ]--
r 109         for(int i = start.getI(); i < end.getI(); i++){
--[ 2019.11.06.19.13.35.463.0 ]--
+ 110 
+ 111 }
--[ 2019.11.06.19.13.35.500.0 ]--
r 111         }
--[ 2019.11.06.19.13.35.534.0 ]--
r 110             
--[ 2019.11.06.19.13.35.986.0 ]--
r 110             f
--[ 2019.11.06.19.13.36.096.0 ]--
r 110             fo
--[ 2019.11.06.19.13.36.272.0 ]--
r 110             for
--[ 2019.11.06.19.13.36.652.0 ]--
r 110             for 
--[ 2019.11.06.19.13.36.751.0 ]--
r 110             for i
--[ 2019.11.06.19.13.36.791.0 ]--
r 110             for in
--[ 2019.11.06.19.13.36.863.0 ]--
r 110             for int
--[ 2019.11.06.19.13.36.944.0 ]--
r 110             for int 
--[ 2019.11.06.19.13.37.810.0 ]--
r 110             for int
--[ 2019.11.06.19.13.37.958.0 ]--
r 110             for in
--[ 2019.11.06.19.13.38.069.0 ]--
r 110             for i
--[ 2019.11.06.19.13.38.172.0 ]--
r 110             for 
--[ 2019.11.06.19.13.38.279.0 ]--
r 110             for
--[ 2019.11.06.19.13.38.527.0 ]--
r 110             for()
--[ 2019.11.06.19.13.38.929.0 ]--
r 110             for(i)
--[ 2019.11.06.19.13.38.988.0 ]--
r 110             for(in)
--[ 2019.11.06.19.13.39.391.0 ]--
r 110             for(int)
--[ 2019.11.06.19.13.39.811.0 ]--
r 110             for(int j )
--[ 2019.11.06.19.13.39.828.0 ]--
r 110             for(int j =)
--[ 2019.11.06.19.13.40.014.0 ]--
r 110             for(int j = )
--[ 2019.11.06.19.13.40.495.0 ]--
r 110             for(int j = s)
--[ 2019.11.06.19.13.40.602.0 ]--
r 110             for(int j = st)
--[ 2019.11.06.19.13.40.664.0 ]--
r 110             for(int j = sta)
--[ 2019.11.06.19.13.40.780.0 ]--
r 110             for(int j = star)
--[ 2019.11.06.19.13.40.910.0 ]--
r 110             for(int j = start)
--[ 2019.11.06.19.13.41.009.0 ]--
r 110             for(int j = start.)
--[ 2019.11.06.19.13.41.515.0 ]--
r 110             for(int j = start.g)
--[ 2019.11.06.19.13.41.564.0 ]--
r 110             for(int j = start.ge)
--[ 2019.11.06.19.13.41.712.0 ]--
r 110             for(int j = start.get)
--[ 2019.11.06.19.13.41.903.0 ]--
r 110             for(int j = start.getJ)
--[ 2019.11.06.19.13.42.581.0 ]--
r 110             for(int j = start.getJ())
--[ 2019.11.06.19.13.43.069.0 ]--
r 110             for(int j = start.getJ();)
--[ 2019.11.06.19.13.43.246.0 ]--
r 110             for(int j = start.getJ(); )
--[ 2019.11.06.19.13.43.419.0 ]--
r 110             for(int j = start.getJ(); i)
--[ 2019.11.06.19.13.43.493.0 ]--
r 110             for(int j = start.getJ(); i )
--[ 2019.11.06.19.13.43.581.0 ]--
r 110             for(int j = start.getJ(); i <)
--[ 2019.11.06.19.13.43.682.0 ]--
r 110             for(int j = start.getJ(); i < )
--[ 2019.11.06.19.13.43.819.0 ]--
r 110             for(int j = start.getJ(); i < e)
--[ 2019.11.06.19.13.43.916.0 ]--
r 110             for(int j = start.getJ(); i < en)
--[ 2019.11.06.19.13.43.996.0 ]--
r 110             for(int j = start.getJ(); i < end)
--[ 2019.11.06.19.13.44.126.0 ]--
r 110             for(int j = start.getJ(); i < end.)
--[ 2019.11.06.19.13.44.257.0 ]--
r 110             for(int j = start.getJ(); i < end.g)
--[ 2019.11.06.19.13.44.313.0 ]--
r 110             for(int j = start.getJ(); i < end.ge)
--[ 2019.11.06.19.13.44.472.0 ]--
r 110             for(int j = start.getJ(); i < end.get)
--[ 2019.11.06.19.13.45.202.0 ]--
r 110             for(int j = start.getJ(); i < end.getJ)
--[ 2019.11.06.19.13.45.208.0 ]--
r 110             for(int j = start.getJ(); i < end.getJ())
--[ 2019.11.06.19.13.46.362.0 ]--
r 110             for(int j = start.getJ(); i < end.getJ() )
--[ 2019.11.06.19.13.46.771.0 ]--
r 110             for(int j = start.getJ(); i < end.getJ() j)
--[ 2019.11.06.19.13.47.369.0 ]--
r 110             for(int j = start.getJ(); i < end.getJ() j+)
--[ 2019.11.06.19.13.47.486.0 ]--
r 110             for(int j = start.getJ(); i < end.getJ() j++)
--[ 2019.11.06.19.13.50.543.0 ]--
r 110             for(int j = start.getJ(); i < end.getJ(); j++)
--[ 2019.11.06.19.13.52.563.0 ]--
r 110             for(int j = start.getJ(); i < end.getJ(); j++){
--[ 2019.11.06.19.13.52.768.0 ]--
+ 111 
+ 112 }
--[ 2019.11.06.19.13.52.777.0 ]--
r 112             }
--[ 2019.11.06.19.13.52.798.0 ]--
r 111                 
--[ 2019.11.06.19.13.54.052.0 ]--
r 111                 s
--[ 2019.11.06.19.13.54.508.0 ]--
r 111                 s.
--[ 2019.11.06.19.13.54.748.0 ]--
r 111                 s.p
--[ 2019.11.06.19.13.54.903.0 ]--
r 111                 s.pi
--[ 2019.11.06.19.13.55.355.0 ]--
r 111                 s.p
--[ 2019.11.06.19.13.55.573.0 ]--
r 111                 s.pu
--[ 2019.11.06.19.13.55.659.0 ]--
r 111                 s.pus
--[ 2019.11.06.19.13.55.755.0 ]--
r 111                 s.push
--[ 2019.11.06.19.13.56.068.0 ]--
r 111                 s.push()
--[ 2019.11.06.19.13.57.050.0 ]--
r 111                 s.push(C)
--[ 2019.11.06.19.13.57.129.0 ]--
r 111                 s.push(Co)
--[ 2019.11.06.19.13.57.236.0 ]--
r 111                 s.push(Coo)
--[ 2019.11.06.19.13.57.336.0 ]--
r 111                 s.push(Coor)
--[ 2019.11.06.19.13.57.904.0 ]--
r 111                 s.push(Coord)
--[ 2019.11.06.19.13.58.067.0 ]--
r 111                 s.push(Coord())
--[ 2019.11.06.19.13.59.243.0 ]--
r 111                 s.push(Coord(i))
--[ 2019.11.06.19.13.59.623.0 ]--
r 111                 s.push(Coord(i,))
--[ 2019.11.06.19.14.00.530.0 ]--
r 111                 s.push(Coord(i,j))
--[ 2019.11.06.19.14.01.509.0 ]--
r 111                 s.push(Coord(i,j ))
--[ 2019.11.06.19.14.01.587.0 ]--
r 111                 s.push(Coord(i,j))
--[ 2019.11.06.19.14.04.507.0 ]--
r 111                 s.push(n)
--[ 2019.11.06.19.14.04.693.0 ]--
r 111                 s.push(nw)
--[ 2019.11.06.19.14.04.773.0 ]--
r 111                 s.push(nw )
--[ 2019.11.06.19.14.04.885.0 ]--
r 111                 s.push(nw C)
--[ 2019.11.06.19.14.05.001.0 ]--
r 111                 s.push(nw Co)
--[ 2019.11.06.19.14.05.111.0 ]--
r 111                 s.push(nw Coo)
--[ 2019.11.06.19.14.05.285.0 ]--
r 111                 s.push(nw Co)
--[ 2019.11.06.19.14.05.355.0 ]--
r 111                 s.push(nw C)
--[ 2019.11.06.19.14.05.467.0 ]--
r 111                 s.push(nw )
--[ 2019.11.06.19.14.05.578.0 ]--
r 111                 s.push(nw)
--[ 2019.11.06.19.14.05.686.0 ]--
r 111                 s.push(n)
--[ 2019.11.06.19.14.05.830.0 ]--
r 111                 s.push(ne)
--[ 2019.11.06.19.14.05.958.0 ]--
r 111                 s.push(new)
--[ 2019.11.06.19.14.06.061.0 ]--
r 111                 s.push(new )
--[ 2019.11.06.19.14.06.213.0 ]--
r 111                 s.push(new C)
--[ 2019.11.06.19.14.06.329.0 ]--
r 111                 s.push(new Co)
--[ 2019.11.06.19.14.06.445.0 ]--
r 111                 s.push(new Coo)
--[ 2019.11.06.19.14.06.502.0 ]--
r 111                 s.push(new Coor)
--[ 2019.11.06.19.14.06.656.0 ]--
r 111                 s.push(new Coord)
--[ 2019.11.06.19.14.07.311.0 ]--
r 111                 s.push(new Coord())
--[ 2019.11.06.19.14.07.677.0 ]--
r 111                 s.push(new Coord(i))
--[ 2019.11.06.19.14.07.905.0 ]--
r 111                 s.push(new Coord(i,))
--[ 2019.11.06.19.14.08.114.0 ]--
r 111                 s.push(new Coord(i, ))
--[ 2019.11.06.19.14.08.226.0 ]--
r 111                 s.push(new Coord(i, j))
--[ 2019.11.06.19.14.09.728.0 ]--
r 112 ;            }
--[ 2019.11.06.19.14.10.240.0 ]--
r 112             }
--[ 2019.11.06.19.14.11.479.0 ]--
r 111                 s.push(new Coord(i, j));
--[ 2019.11.06.19.14.15.141.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.14.38.235.0 ]--
- 109
- 109
- 109
r 109         
--[ 2019.11.06.19.14.38.547.0 ]--
- 109
--[ 2019.11.06.19.14.39.765.0 ]--
r 109         
--[ 2019.11.06.19.14.40.145.0 ]--
- 109
--[ 2019.11.06.19.14.41.938.0 ]--
+ 109         }
--[ 2019.11.06.19.14.42.266.0 ]--
+ 109         for(int i = start.getI(); i < end.getI(); i++){
+ 110             for(int j = start.getJ(); i < end.getJ(); j++){
+ 111                 s.push(new Coord(i, j));
+ 112             }
--[ 2019.11.06.19.14.48.769.0 ]--
r 111                 s.push((new Coord(i, j));)
--[ 2019.11.06.19.14.48.963.0 ]--
r 111                 s.push(n)
--[ 2019.11.06.19.14.49.025.0 ]--
r 111                 s.push(ne)
--[ 2019.11.06.19.14.49.718.0 ]--
r 111                 s.push(new)
--[ 2019.11.06.19.14.49.980.0 ]--
r 111                 s.push(new )
--[ 2019.11.06.19.14.50.098.0 ]--
r 111                 s.push(new C)
--[ 2019.11.06.19.14.50.265.0 ]--
r 111                 s.push(new Co)
--[ 2019.11.06.19.14.50.387.0 ]--
r 111                 s.push(new Coo)
--[ 2019.11.06.19.14.50.478.0 ]--
r 111                 s.push(new Coor)
--[ 2019.11.06.19.14.50.635.0 ]--
r 111                 s.push(new Coord)
--[ 2019.11.06.19.14.50.819.0 ]--
r 111                 s.push(new Coord())
--[ 2019.11.06.19.14.52.056.0 ]--
r 111                 s.push(new Coord(i))
--[ 2019.11.06.19.14.53.467.0 ]--
r 111                 s.push(new Coord(i,))
--[ 2019.11.06.19.14.54.624.0 ]--
r 111                 s.push(new Coord(i, ))
--[ 2019.11.06.19.14.55.650.0 ]--
r 111                 s.push(new Coord(i,))
--[ 2019.11.06.19.14.55.941.0 ]--
r 111                 s.push(new Coord(i,j))
--[ 2019.11.06.19.14.57.082.0 ]--
r 111                 s.push(new Coord(i,j));
--[ 2019.11.06.19.15.00.783.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.15.07.115.0 ]--
- 109
- 109
- 109
- 109
r 109         for
--[ 2019.11.06.19.15.07.259.0 ]--
r 109         fo
--[ 2019.11.06.19.15.07.379.0 ]--
r 109         f
--[ 2019.11.06.19.15.07.486.0 ]--
r 109         
--[ 2019.11.06.19.15.07.597.0 ]--
- 109
--[ 2019.11.06.19.15.07.871.0 ]--
r 108         s.push(start)
--[ 2019.11.06.19.15.08.380.0 ]--
+ 108         s.push(start);
+ 109         for(int i = start.getI(); i < end.getI(); i++){
+ 110             for(int j = start.getJ(); i < end.getJ(); j++){
+ 111                 s.push(new Coord(i,j));
+ 112             }
r 113         }
--[ 2019.11.06.19.15.09.138.0 ]--
- 109
- 109
- 109
- 109
r 109         for
--[ 2019.11.06.19.15.09.264.0 ]--
r 109         fo
--[ 2019.11.06.19.15.09.494.0 ]--
r 109         f
--[ 2019.11.06.19.15.09.627.0 ]--
r 109         
--[ 2019.11.06.19.15.09.796.0 ]--
- 109
--[ 2019.11.06.19.15.12.187.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.15.37.750.0 ]--
+ 15     
--[ 2019.11.06.19.19.17.244.0 ]--
r 96         return f;
--[ 2019.11.06.19.19.17.406.0 ]--
r 96         return fa;
--[ 2019.11.06.19.19.17.531.0 ]--
r 96         return fal;
--[ 2019.11.06.19.19.17.564.0 ]--
r 96         return falk;
--[ 2019.11.06.19.19.17.596.0 ]--
r 96         return falks;
--[ 2019.11.06.19.19.17.743.0 ]--
r 96         return falkse;
--[ 2019.11.06.19.19.18.078.0 ]--
r 96         return falks;
--[ 2019.11.06.19.19.18.190.0 ]--
r 96         return falk;
--[ 2019.11.06.19.19.18.301.0 ]--
r 96         return fal;
--[ 2019.11.06.19.19.18.408.0 ]--
r 96         return fals;
--[ 2019.11.06.19.19.18.566.0 ]--
r 96         return false;
--[ 2019.11.06.19.19.24.307.0 ]--
r 96         return false ;
--[ 2019.11.06.19.19.24.345.0 ]--
r 96         return false;
--[ 2019.11.06.19.19.40.984.0 ]--
r 96         return f;
--[ 2019.11.06.19.19.41.830.0 ]--
r 96         return fo;
--[ 2019.11.06.19.19.41.877.0 ]--
r 96         return fou;
--[ 2019.11.06.19.19.42.035.0 ]--
r 96         return foun;
--[ 2019.11.06.19.19.42.113.0 ]--
r 96         return found;
--[ 2019.11.06.19.19.42.591.0 ]--
r 96         return foundP;
--[ 2019.11.06.19.19.42.772.0 ]--
r 96         return foundPa;
--[ 2019.11.06.19.19.42.884.0 ]--
r 96         return foundPat;
--[ 2019.11.06.19.19.42.941.0 ]--
r 96         return foundPath;
--[ 2019.11.06.19.19.43.276.0 ]--
r 96         return foundPath ;
--[ 2019.11.06.19.19.43.372.0 ]--
r 96         return foundPath;
--[ 2019.11.06.19.19.44.202.0 ]--
r 96         return ;
--[ 2019.11.06.19.19.44.758.0 ]--
r 96         return p;
--[ 2019.11.06.19.19.44.818.0 ]--
r 96         return pa;
--[ 2019.11.06.19.19.44.954.0 ]--
r 96         return pat;
--[ 2019.11.06.19.19.45.023.0 ]--
r 96         return path;
--[ 2019.11.06.19.19.45.545.0 ]--
r 96         return pathF;
--[ 2019.11.06.19.19.45.669.0 ]--
r 96         return pathFo;
--[ 2019.11.06.19.19.45.713.0 ]--
r 96         return pathFou;
--[ 2019.11.06.19.19.45.852.0 ]--
r 96         return pathFoun;
--[ 2019.11.06.19.19.45.915.0 ]--
r 96         return pathFound;
--[ 2019.11.06.19.19.49.035.0 ]--
+ 15     
--[ 2019.11.06.19.19.49.413.0 ]--
r 15     p
--[ 2019.11.06.19.19.49.504.0 ]--
r 15     pr
--[ 2019.11.06.19.19.49.607.0 ]--
r 15     pri
--[ 2019.11.06.19.19.49.693.0 ]--
r 15     priv
--[ 2019.11.06.19.19.49.821.0 ]--
r 15     priva
--[ 2019.11.06.19.19.49.919.0 ]--
r 15     privat
--[ 2019.11.06.19.19.49.978.0 ]--
r 15     private
--[ 2019.11.06.19.19.50.119.0 ]--
r 15     private 
--[ 2019.11.06.19.19.50.449.0 ]--
r 15     private p
--[ 2019.11.06.19.19.50.511.0 ]--
r 15     private pa
--[ 2019.11.06.19.19.50.622.0 ]--
r 15     private pat
--[ 2019.11.06.19.19.50.684.0 ]--
r 15     private path
--[ 2019.11.06.19.19.50.845.0 ]--
r 15     private pathF
--[ 2019.11.06.19.19.50.973.0 ]--
r 15     private pathFo
--[ 2019.11.06.19.19.50.994.0 ]--
r 15     private pathFou
--[ 2019.11.06.19.19.51.124.0 ]--
r 15     private pathFoun
--[ 2019.11.06.19.19.51.173.0 ]--
r 15     private pathFound
--[ 2019.11.06.19.19.51.291.0 ]--
r 15     private pathFound 
--[ 2019.11.06.19.19.54.451.0 ]--
r 15     private bpathFound 
--[ 2019.11.06.19.19.54.521.0 ]--
r 15     private bopathFound 
--[ 2019.11.06.19.19.54.645.0 ]--
r 15     private boopathFound 
--[ 2019.11.06.19.19.54.802.0 ]--
r 15     private boolpathFound 
--[ 2019.11.06.19.19.54.895.0 ]--
r 15     private boolepathFound 
--[ 2019.11.06.19.19.55.017.0 ]--
r 15     private booleapathFound 
--[ 2019.11.06.19.19.55.109.0 ]--
r 15     private booleanpathFound 
--[ 2019.11.06.19.19.55.236.0 ]--
r 15     private boolean pathFound 
--[ 2019.11.06.19.19.56.552.0 ]--
r 15     private boolean pathFound; 
--[ 2019.11.06.19.19.57.288.0 ]--
r 15     private boolean pathFound;  
--[ 2019.11.06.19.19.57.321.0 ]--
r 15     private boolean pathFound; 
--[ 2019.11.06.19.20.01.336.0 ]--
r 15     private boolean pathFound;
r 16 
--[ 2019.11.06.19.20.02.751.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.20.08.078.0 ]--
+ 94         
--[ 2019.11.06.19.20.08.884.0 ]--
r 94         i
--[ 2019.11.06.19.20.08.974.0 ]--
r 94         if
--[ 2019.11.06.19.20.09.418.0 ]--
r 94         if()
--[ 2019.11.06.19.20.09.623.0 ]--
r 94         if(0)
--[ 2019.11.06.19.20.09.932.0 ]--
r 94         if(0 )
--[ 2019.11.06.19.20.10.038.0 ]--
r 94         if(0 =)
--[ 2019.11.06.19.20.10.158.0 ]--
r 94         if(0 ==)
--[ 2019.11.06.19.20.10.271.0 ]--
r 94         if(0 == )
--[ 2019.11.06.19.20.10.336.0 ]--
r 94         if(0 == 0)
--[ 2019.11.06.19.20.11.164.0 ]--
r 94         if(0 == 0){
--[ 2019.11.06.19.20.11.431.0 ]--
+ 95 
+ 96 }
--[ 2019.11.06.19.20.11.456.0 ]--
r 96         }
--[ 2019.11.06.19.20.11.486.0 ]--
r 95             
--[ 2019.11.06.19.20.13.131.0 ]--
- 95
--[ 2019.11.06.19.20.13.246.0 ]--
r 94         if(0 == 0)
--[ 2019.11.06.19.20.13.470.0 ]--
r 94         if(0 == 0
--[ 2019.11.06.19.20.13.646.0 ]--
r 94         if(0 == 
--[ 2019.11.06.19.20.13.750.0 ]--
r 94         if(0 ==
--[ 2019.11.06.19.20.13.851.0 ]--
r 94         if(0 =
--[ 2019.11.06.19.20.13.974.0 ]--
r 94         if(0 
--[ 2019.11.06.19.20.14.081.0 ]--
r 94         if(0
--[ 2019.11.06.19.20.14.213.0 ]--
r 94         if(
--[ 2019.11.06.19.20.14.684.0 ]--
r 94         if(t
--[ 2019.11.06.19.20.14.838.0 ]--
r 94         if(tr
--[ 2019.11.06.19.20.14.966.0 ]--
r 94         if(tru
--[ 2019.11.06.19.20.15.022.0 ]--
r 94         if(true
--[ 2019.11.06.19.20.15.200.0 ]--
r 94         if(true)
--[ 2019.11.06.19.20.15.739.0 ]--
r 94         if(true){
--[ 2019.11.06.19.20.15.964.0 ]--
+ 95             
--[ 2019.11.06.19.20.18.118.0 ]--
r 95             s
--[ 2019.11.06.19.20.18.295.0 ]--
r 95             se
--[ 2019.11.06.19.20.18.361.0 ]--
r 95             set
--[ 2019.11.06.19.20.19.288.0 ]--
r 95             set 
--[ 2019.11.06.19.20.19.369.0 ]--
r 95             set
--[ 2019.11.06.19.20.19.550.0 ]--
r 95             se
--[ 2019.11.06.19.20.19.665.0 ]--
r 95             s
--[ 2019.11.06.19.20.19.772.0 ]--
r 95             
--[ 2019.11.06.19.20.20.391.0 ]--
r 95             f
--[ 2019.11.06.19.20.20.464.0 ]--
r 95             fo
--[ 2019.11.06.19.20.20.510.0 ]--
r 95             fou
--[ 2019.11.06.19.20.20.669.0 ]--
r 95             foun
--[ 2019.11.06.19.20.20.728.0 ]--
r 95             found
--[ 2019.11.06.19.20.21.256.0 ]--
r 95             foun
--[ 2019.11.06.19.20.21.355.0 ]--
r 95             fou
--[ 2019.11.06.19.20.21.466.0 ]--
r 95             fo
--[ 2019.11.06.19.20.21.586.0 ]--
r 95             f
--[ 2019.11.06.19.20.22.066.0 ]--
r 95             
--[ 2019.11.06.19.20.22.217.0 ]--
r 95             p
--[ 2019.11.06.19.20.22.277.0 ]--
r 95             pa
--[ 2019.11.06.19.20.22.399.0 ]--
r 95             pat
--[ 2019.11.06.19.20.22.929.0 ]--
r 95             path
--[ 2019.11.06.19.20.23.096.0 ]--
r 95             pathF
--[ 2019.11.06.19.20.23.174.0 ]--
r 95             pathFo
--[ 2019.11.06.19.20.23.205.0 ]--
r 95             pathFou
--[ 2019.11.06.19.20.23.342.0 ]--
r 95             pathFoun
--[ 2019.11.06.19.20.23.425.0 ]--
r 95             pathFound
--[ 2019.11.06.19.20.23.511.0 ]--
r 95             pathFound 
--[ 2019.11.06.19.20.23.639.0 ]--
r 95             pathFound =
--[ 2019.11.06.19.20.23.940.0 ]--
r 95             pathFound =t
--[ 2019.11.06.19.20.24.319.0 ]--
r 95             pathFound =
--[ 2019.11.06.19.20.24.366.0 ]--
r 95             pathFound = 
--[ 2019.11.06.19.20.24.421.0 ]--
r 95             pathFound = t
--[ 2019.11.06.19.20.24.616.0 ]--
r 95             pathFound = tu
--[ 2019.11.06.19.20.24.704.0 ]--
r 95             pathFound = tue
--[ 2019.11.06.19.20.24.890.0 ]--
r 95             pathFound = tu
--[ 2019.11.06.19.20.24.987.0 ]--
r 95             pathFound = t
--[ 2019.11.06.19.20.25.103.0 ]--
r 95             pathFound = tr
--[ 2019.11.06.19.20.25.176.0 ]--
r 95             pathFound = tru
--[ 2019.11.06.19.20.25.254.0 ]--
r 95             pathFound = true
--[ 2019.11.06.19.20.25.418.0 ]--
r 95             pathFound = true;
--[ 2019.11.06.19.20.30.874.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.20.36.154.0 ]--
- 94
- 94
r 94         
--[ 2019.11.06.19.20.36.402.0 ]--
+ 94         
--[ 2019.11.06.19.20.36.475.0 ]--
+ 94         
--[ 2019.11.06.19.20.36.940.0 ]--
r 96         p
--[ 2019.11.06.19.20.37.052.0 ]--
r 96         pa
--[ 2019.11.06.19.20.37.121.0 ]--
r 96         pat
--[ 2019.11.06.19.20.37.200.0 ]--
r 96         path
--[ 2019.11.06.19.20.37.736.0 ]--
r 96         pathF
--[ 2019.11.06.19.20.37.822.0 ]--
r 96         pathFo
--[ 2019.11.06.19.20.37.863.0 ]--
r 96         pathFou
--[ 2019.11.06.19.20.37.997.0 ]--
r 96         pathFoun
--[ 2019.11.06.19.20.38.069.0 ]--
r 96         pathFound
--[ 2019.11.06.19.20.38.108.0 ]--
r 96         pathFound 
--[ 2019.11.06.19.20.38.216.0 ]--
r 96         pathFound =
--[ 2019.11.06.19.20.38.276.0 ]--
r 96         pathFound = 
--[ 2019.11.06.19.20.38.397.0 ]--
r 96         pathFound = t
--[ 2019.11.06.19.20.38.518.0 ]--
r 96         pathFound = tr
--[ 2019.11.06.19.20.38.571.0 ]--
r 96         pathFound = tru
--[ 2019.11.06.19.20.38.686.0 ]--
r 96         pathFound = true
--[ 2019.11.06.19.20.38.778.0 ]--
r 96         pathFound = true;
--[ 2019.11.06.19.22.29.508.0 ]--
+ 114         
--[ 2019.11.06.19.22.29.994.0 ]--
r 114         s
--[ 2019.11.06.19.22.30.080.0 ]--
r 114         s.
--[ 2019.11.06.19.22.30.336.0 ]--
r 114         s.p
--[ 2019.11.06.19.22.30.540.0 ]--
r 114         s.ps
--[ 2019.11.06.19.22.30.692.0 ]--
r 114         s.p
--[ 2019.11.06.19.22.30.912.0 ]--
r 114         s.pu
--[ 2019.11.06.19.22.31.013.0 ]--
r 114         s.pus
--[ 2019.11.06.19.22.31.108.0 ]--
r 114         s.push
--[ 2019.11.06.19.22.31.306.0 ]--
r 114         s.push()
--[ 2019.11.06.19.22.31.468.0 ]--
r 114         s.push(n)
--[ 2019.11.06.19.22.31.568.0 ]--
r 114         s.push(ne)
--[ 2019.11.06.19.22.31.952.0 ]--
r 114         s.push(new)
--[ 2019.11.06.19.22.32.095.0 ]--
r 114         s.push(new )
--[ 2019.11.06.19.22.32.232.0 ]--
r 114         s.push(new C)
--[ 2019.11.06.19.22.32.332.0 ]--
r 114         s.push(new Co)
--[ 2019.11.06.19.22.32.439.0 ]--
r 114         s.push(new Coo)
--[ 2019.11.06.19.22.32.579.0 ]--
r 114         s.push(new Coor)
--[ 2019.11.06.19.22.32.752.0 ]--
r 114         s.push(new Coord)
--[ 2019.11.06.19.22.33.060.0 ]--
r 114         s.push(new Coord())
--[ 2019.11.06.19.22.35.604.0 ]--
r 114         s.push(new Coord(5))
--[ 2019.11.06.19.22.35.744.0 ]--
r 114         s.push(new Coord(5,))
--[ 2019.11.06.19.22.35.992.0 ]--
r 114         s.push(new Coord(5, ))
--[ 2019.11.06.19.22.36.085.0 ]--
r 114         s.push(new Coord(5, 6))
--[ 2019.11.06.19.22.38.624.0 ]--
r 94 
r 95 
--[ 2019.11.06.19.22.39.580.0 ]--
UpdateTree (AD): 0 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class

--[ 2019.11.06.19.22.39.583.0 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@66e4487b
--[ 2019.11.06.19.22.40.670.0 ]--
r 114         s.push(new Coord(5, 6));
--[ 2019.11.06.19.22.40.676.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.22.40.698.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.22.42.947.0 ]--
UpdateTree (AD): 2 0
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.22.42.954.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.22.55.256.0 ]--
r 114         s.push(new Coord(5, ));
--[ 2019.11.06.19.22.55.411.0 ]--
r 114         s.push(new Coord(5, 1));
--[ 2019.11.06.19.22.55.775.0 ]--
r 114         s.push(new Coord(5, 1 ));
--[ 2019.11.06.19.22.55.834.0 ]--
r 114         s.push(new Coord(5, 1));
--[ 2019.11.06.19.22.57.476.0 ]--
r 114         s.push(new Coord(, 1));
--[ 2019.11.06.19.22.57.578.0 ]--
r 114         s.push(new Coord(1, 1));
--[ 2019.11.06.19.23.00.657.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.23.07.662.0 ]--
r 114         s
--[ 2019.11.06.19.23.07.848.0 ]--
r 114         
--[ 2019.11.06.19.23.08.043.0 ]--
- 114
--[ 2019.11.06.19.23.10.373.0 ]--
+ 113         
--[ 2019.11.06.19.23.10.552.0 ]--
r 113         c
--[ 2019.11.06.19.23.10.619.0 ]--
r 113         co
--[ 2019.11.06.19.23.10.688.0 ]--
r 113         con
--[ 2019.11.06.19.23.10.757.0 ]--
r 113         cons
--[ 2019.11.06.19.23.10.825.0 ]--
r 113         conso
--[ 2019.11.06.19.23.10.959.0 ]--
r 113         consol
--[ 2019.11.06.19.23.11.039.0 ]--
r 113         console
--[ 2019.11.06.19.23.11.132.0 ]--
r 113         console.
--[ 2019.11.06.19.23.11.285.0 ]--
r 113         console.l
--[ 2019.11.06.19.23.11.422.0 ]--
r 113         console.lo
--[ 2019.11.06.19.23.11.575.0 ]--
r 113         console.log
--[ 2019.11.06.19.23.12.065.0 ]--
r 113         console.lo
--[ 2019.11.06.19.23.12.175.0 ]--
r 113         console.l
--[ 2019.11.06.19.23.12.287.0 ]--
r 113         console.
--[ 2019.11.06.19.23.12.404.0 ]--
r 113         console
--[ 2019.11.06.19.23.12.492.0 ]--
r 113         consol
--[ 2019.11.06.19.23.12.607.0 ]--
r 113         conso
--[ 2019.11.06.19.23.12.732.0 ]--
r 113         cons
--[ 2019.11.06.19.23.12.822.0 ]--
r 113         con
--[ 2019.11.06.19.23.12.943.0 ]--
r 113         co
--[ 2019.11.06.19.23.13.063.0 ]--
r 113         c
--[ 2019.11.06.19.23.13.325.0 ]--
r 113         
--[ 2019.11.06.19.23.13.585.0 ]--
r 113         S
--[ 2019.11.06.19.23.13.753.0 ]--
r 113         St
--[ 2019.11.06.19.23.14.231.0 ]--
r 113         Std
--[ 2019.11.06.19.23.14.562.0 ]--
r 113         StdO
--[ 2019.11.06.19.23.14.730.0 ]--
r 113         StdOut
--[ 2019.11.06.19.23.14.901.0 ]--
r 113         StdOut.
--[ 2019.11.06.19.23.15.226.0 ]--
r 113         StdOut.p
--[ 2019.11.06.19.23.15.350.0 ]--
r 113         StdOut.pr
--[ 2019.11.06.19.23.15.418.0 ]--
r 113         StdOut.pri
--[ 2019.11.06.19.23.15.469.0 ]--
r 113         StdOut.prin
--[ 2019.11.06.19.23.15.609.0 ]--
r 113         StdOut.pring
--[ 2019.11.06.19.23.16.255.0 ]--
r 113         StdOut.prin
--[ 2019.11.06.19.23.16.424.0 ]--
r 113         StdOut.print
--[ 2019.11.06.19.23.17.499.0 ]--
r 113         StdOut.printl
--[ 2019.11.06.19.23.17.593.0 ]--
r 113         StdOut.println
--[ 2019.11.06.19.23.17.771.0 ]--
r 113         StdOut.println()
--[ 2019.11.06.19.23.18.536.0 ]--
r 113         StdOut.println(s)
--[ 2019.11.06.19.23.18.635.0 ]--
r 113         StdOut.println(st)
--[ 2019.11.06.19.23.18.775.0 ]--
r 113         StdOut.println(sta)
--[ 2019.11.06.19.23.18.902.0 ]--
r 113         StdOut.println(star)
--[ 2019.11.06.19.23.19.301.0 ]--
r 113         StdOut.println(star);
--[ 2019.11.06.19.23.19.532.0 ]--
r 113         StdOut.println(star)
--[ 2019.11.06.19.23.19.645.0 ]--
r 113         StdOut.println(star
--[ 2019.11.06.19.23.19.916.0 ]--
r 113         StdOut.println(start
--[ 2019.11.06.19.23.20.078.0 ]--
r 113         StdOut.println(start)
--[ 2019.11.06.19.23.20.228.0 ]--
r 113         StdOut.println(start);
--[ 2019.11.06.19.23.23.118.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.23.39.023.0 ]--
+ 115         
--[ 2019.11.06.19.23.39.443.0 ]--
r 115         s
--[ 2019.11.06.19.23.39.588.0 ]--
r 115         s.
--[ 2019.11.06.19.23.40.425.0 ]--
r 115         s.p
--[ 2019.11.06.19.23.40.506.0 ]--
r 115         s.pu
--[ 2019.11.06.19.23.40.622.0 ]--
r 115         s.pus
--[ 2019.11.06.19.23.40.729.0 ]--
r 115         s.push
--[ 2019.11.06.19.23.41.189.0 ]--
r 115         s.push()
--[ 2019.11.06.19.23.41.525.0 ]--
r 115         s.push( )
--[ 2019.11.06.19.23.41.589.0 ]--
r 115         s.push()
--[ 2019.11.06.19.23.43.795.0 ]--
r 115         s.push( )
--[ 2019.11.06.19.23.43.882.0 ]--
r 115         s.push()
--[ 2019.11.06.19.23.44.615.0 ]--
r 115         s.push(1)
--[ 2019.11.06.19.23.44.719.0 ]--
r 115         s.push(1,)
--[ 2019.11.06.19.23.45.797.0 ]--
r 115         s.push(1,2)
--[ 2019.11.06.19.23.47.163.0 ]--
r 115         s.push(1,)
--[ 2019.11.06.19.23.47.340.0 ]--
r 115         s.push(1)
--[ 2019.11.06.19.23.47.622.0 ]--
r 115         s.push()
--[ 2019.11.06.19.23.48.924.0 ]--
r 115         s.push(n)
--[ 2019.11.06.19.23.49.002.0 ]--
r 115         s.push(ne)
--[ 2019.11.06.19.23.49.163.0 ]--
r 115         s.push(new)
--[ 2019.11.06.19.23.49.252.0 ]--
r 115         s.push(new )
--[ 2019.11.06.19.23.49.352.0 ]--
r 115         s.push(new C)
--[ 2019.11.06.19.23.49.461.0 ]--
r 115         s.push(new Co)
--[ 2019.11.06.19.23.49.576.0 ]--
r 115         s.push(new Coo)
--[ 2019.11.06.19.23.49.656.0 ]--
r 115         s.push(new Coor)
--[ 2019.11.06.19.23.49.835.0 ]--
r 115         s.push(new Coord)
--[ 2019.11.06.19.23.49.984.0 ]--
r 115         s.push(new Coord())
--[ 2019.11.06.19.23.50.252.0 ]--
r 115         s.push(new Coord(1))
--[ 2019.11.06.19.23.50.398.0 ]--
r 115         s.push(new Coord(1,))
--[ 2019.11.06.19.23.50.727.0 ]--
r 115         s.push(new Coord(1,2))
--[ 2019.11.06.19.23.54.201.0 ]--
r 115         s.push(new Coord(1,2));
--[ 2019.11.06.19.23.55.765.0 ]--
r 115         s.push(new Coord(1,2)); 
--[ 2019.11.06.19.23.55.821.0 ]--
r 115         s.push(new Coord(1,2));
--[ 2019.11.06.19.24.06.051.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.24.12.180.0 ]--
+ 116         
--[ 2019.11.06.19.24.13.173.0 ]--
- 116
--[ 2019.11.06.19.24.13.629.0 ]--
r 115         s.push(new Coord(1,2)); 
--[ 2019.11.06.19.24.13.669.0 ]--
r 115         s.push(new Coord(1,2));
--[ 2019.11.06.19.24.15.379.0 ]--
r 115         s.push(new Coord(,2));
--[ 2019.11.06.19.24.15.461.0 ]--
r 115         s.push(new Coord(2,2));
--[ 2019.11.06.19.24.17.087.0 ]--
r 115         s.push(new Coord(2,));
--[ 2019.11.06.19.24.17.149.0 ]--
r 115         s.push(new Coord(2,1));
--[ 2019.11.06.19.24.21.319.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.24.32.494.0 ]--
+ 115         
--[ 2019.11.06.19.24.33.443.0 ]--
r 115         f
--[ 2019.11.06.19.24.33.545.0 ]--
r 115         fo
--[ 2019.11.06.19.24.33.607.0 ]--
r 115         for
--[ 2019.11.06.19.24.33.842.0 ]--
r 115         for()
--[ 2019.11.06.19.24.34.956.0 ]--
r 115         for( )
--[ 2019.11.06.19.24.35.031.0 ]--
r 115         for()
--[ 2019.11.06.19.24.35.812.0 ]--
r 115         for(i)
--[ 2019.11.06.19.24.35.847.0 ]--
r 115         for(in)
--[ 2019.11.06.19.24.35.967.0 ]--
r 115         for(int)
--[ 2019.11.06.19.24.36.023.0 ]--
r 115         for(int )
--[ 2019.11.06.19.24.36.159.0 ]--
r 115         for(int i)
--[ 2019.11.06.19.24.36.303.0 ]--
r 115         for(int i )
--[ 2019.11.06.19.24.36.378.0 ]--
r 115         for(int i ,)
--[ 2019.11.06.19.24.36.744.0 ]--
r 115         for(int i )
--[ 2019.11.06.19.24.36.871.0 ]--
r 115         for(int i)
--[ 2019.11.06.19.24.37.148.0 ]--
r 115         for(int i )
--[ 2019.11.06.19.24.37.219.0 ]--
r 115         for(int i)
--[ 2019.11.06.19.24.41.915.0 ]--
- 114
r 114         s
--[ 2019.11.06.19.24.42.232.0 ]--
r 114         
--[ 2019.11.06.19.24.42.590.0 ]--
- 114
--[ 2019.11.06.19.24.49.620.0 ]--
r 114         s
--[ 2019.11.06.19.24.49.754.0 ]--
r 114         
--[ 2019.11.06.19.24.50.684.0 ]--
- 114
--[ 2019.11.06.19.24.54.061.0 ]--
+ 114         
--[ 2019.11.06.19.24.55.998.0 ]--
r 114         s
--[ 2019.11.06.19.24.56.118.0 ]--
r 114         st
--[ 2019.11.06.19.24.56.180.0 ]--
r 114         sta
--[ 2019.11.06.19.24.56.284.0 ]--
r 114         star
--[ 2019.11.06.19.24.56.431.0 ]--
r 114         start
--[ 2019.11.06.19.24.56.489.0 ]--
r 114         start.
--[ 2019.11.06.19.24.56.594.0 ]--
r 114         start.g
--[ 2019.11.06.19.24.56.649.0 ]--
r 114         start.ge
--[ 2019.11.06.19.24.56.775.0 ]--
r 114         start.get
--[ 2019.11.06.19.24.57.762.0 ]--
r 114         start.getI
--[ 2019.11.06.19.24.58.171.0 ]--
r 114         start.getI()
--[ 2019.11.06.19.24.58.406.0 ]--
r 114         start.getI();
--[ 2019.11.06.19.25.01.610.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.25.05.204.0 ]--
r 114         start.getI(); 
--[ 2019.11.06.19.25.05.254.0 ]--
r 114         start.getI();
--[ 2019.11.06.19.25.08.115.0 ]--
r 113         
--[ 2019.11.06.19.25.08.351.0 ]--
- 113
--[ 2019.11.06.19.25.10.518.0 ]--
r 113         sstart.getI();
--[ 2019.11.06.19.25.10.660.0 ]--
r 113         ststart.getI();
--[ 2019.11.06.19.25.10.818.0 ]--
r 113         stdstart.getI();
--[ 2019.11.06.19.25.11.668.0 ]--
r 113         ststart.getI();
--[ 2019.11.06.19.25.11.764.0 ]--
r 113         sstart.getI();
--[ 2019.11.06.19.25.11.875.0 ]--
r 113         start.getI();
--[ 2019.11.06.19.25.12.015.0 ]--
r 113         Sstart.getI();
--[ 2019.11.06.19.25.12.170.0 ]--
r 113         Ststart.getI();
--[ 2019.11.06.19.25.12.322.0 ]--
r 113         Stdstart.getI();
--[ 2019.11.06.19.25.12.473.0 ]--
r 113         StdOstart.getI();
--[ 2019.11.06.19.25.12.622.0 ]--
r 113         StdOustart.getI();
--[ 2019.11.06.19.25.12.751.0 ]--
r 113         StdOutstart.getI();
--[ 2019.11.06.19.25.12.867.0 ]--
r 113         StdOut.start.getI();
--[ 2019.11.06.19.25.13.073.0 ]--
r 113         StdOut.pstart.getI();
--[ 2019.11.06.19.25.13.192.0 ]--
r 113         StdOut.prstart.getI();
--[ 2019.11.06.19.25.13.234.0 ]--
r 113         StdOut.pristart.getI();
--[ 2019.11.06.19.25.13.298.0 ]--
r 113         StdOut.prinstart.getI();
--[ 2019.11.06.19.25.13.354.0 ]--
r 113         StdOut.printstart.getI();
--[ 2019.11.06.19.25.14.054.0 ]--
r 113         StdOut.printlstart.getI();
--[ 2019.11.06.19.25.14.098.0 ]--
r 113         StdOut.printlnstart.getI();
--[ 2019.11.06.19.25.14.276.0 ]--
r 113         StdOut.println(start.getI();
--[ 2019.11.06.19.25.15.981.0 ]--
r 113         StdOut.println(start.getI());
--[ 2019.11.06.19.25.20.493.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.25.35.476.0 ]--
+ 114         
--[ 2019.11.06.19.25.37.044.0 ]--
r 114         f
--[ 2019.11.06.19.25.37.144.0 ]--
r 114         fo
--[ 2019.11.06.19.25.37.211.0 ]--
r 114         for
--[ 2019.11.06.19.25.37.396.0 ]--
r 114         for()
--[ 2019.11.06.19.25.37.675.0 ]--
r 114         for(i)
--[ 2019.11.06.19.25.38.882.0 ]--
r 114         for(in)
--[ 2019.11.06.19.25.38.952.0 ]--
r 114         for(int)
--[ 2019.11.06.19.25.39.026.0 ]--
r 114         for(int )
--[ 2019.11.06.19.25.39.095.0 ]--
r 114         for(int i)
--[ 2019.11.06.19.25.39.210.0 ]--
r 114         for(int i )
--[ 2019.11.06.19.25.39.452.0 ]--
r 114         for(int i =)
--[ 2019.11.06.19.25.39.634.0 ]--
r 114         for(int i = )
--[ 2019.11.06.19.25.41.644.0 ]--
r 114         for(int i = s)
--[ 2019.11.06.19.25.41.806.0 ]--
r 114         for(int i = st)
--[ 2019.11.06.19.25.41.864.0 ]--
r 114         for(int i = sta)
--[ 2019.11.06.19.25.41.965.0 ]--
r 114         for(int i = star)
--[ 2019.11.06.19.25.42.086.0 ]--
r 114         for(int i = start)
--[ 2019.11.06.19.25.42.173.0 ]--
r 114         for(int i = start.)
--[ 2019.11.06.19.25.42.255.0 ]--
r 114         for(int i = start.g)
--[ 2019.11.06.19.25.42.321.0 ]--
r 114         for(int i = start.ge)
--[ 2019.11.06.19.25.42.430.0 ]--
r 114         for(int i = start.get)
--[ 2019.11.06.19.25.42.777.0 ]--
r 114         for(int i = start.get )
--[ 2019.11.06.19.25.42.830.0 ]--
r 114         for(int i = start.get)
--[ 2019.11.06.19.25.43.070.0 ]--
r 114         for(int i = start.getI)
--[ 2019.11.06.19.25.43.349.0 ]--
r 114         for(int i = start.getI())
--[ 2019.11.06.19.25.43.904.0 ]--
r 114         for(int i = start.getI();)
--[ 2019.11.06.19.25.45.124.0 ]--
r 114         for(int i = start.getI(); )
--[ 2019.11.06.19.25.45.792.0 ]--
r 114         for(int i = start.getI(); i)
--[ 2019.11.06.19.25.45.900.0 ]--
r 114         for(int i = start.getI(); i )
--[ 2019.11.06.19.25.45.991.0 ]--
r 114         for(int i = start.getI(); i <)
--[ 2019.11.06.19.25.46.080.0 ]--
r 114         for(int i = start.getI(); i < )
--[ 2019.11.06.19.25.46.416.0 ]--
r 114         for(int i = start.getI(); i < e)
--[ 2019.11.06.19.25.46.486.0 ]--
r 114         for(int i = start.getI(); i < en)
--[ 2019.11.06.19.25.46.815.0 ]--
r 114         for(int i = start.getI(); i < end)
--[ 2019.11.06.19.25.47.081.0 ]--
r 114         for(int i = start.getI(); i < end.)
--[ 2019.11.06.19.25.48.086.0 ]--
r 114         for(int i = start.getI(); i < end.g)
--[ 2019.11.06.19.25.48.138.0 ]--
r 114         for(int i = start.getI(); i < end.ge)
--[ 2019.11.06.19.25.48.585.0 ]--
r 114         for(int i = start.getI(); i < end.get)
--[ 2019.11.06.19.25.49.131.0 ]--
r 114         for(int i = start.getI(); i < end.getI)
--[ 2019.11.06.19.25.49.378.0 ]--
r 114         for(int i = start.getI(); i < end.getI())
--[ 2019.11.06.19.25.50.612.0 ]--
r 114         for(int i = start.getI(); i < end.getI();)
--[ 2019.11.06.19.25.50.883.0 ]--
r 114         for(int i = start.getI(); i < end.getI(); )
--[ 2019.11.06.19.25.51.816.0 ]--
r 114         for(int i = start.getI(); i < end.getI(); i)
--[ 2019.11.06.19.25.51.979.0 ]--
r 114         for(int i = start.getI(); i < end.getI(); i+)
--[ 2019.11.06.19.25.52.328.0 ]--
r 114         for(int i = start.getI(); i < end.getI(); i++)
--[ 2019.11.06.19.25.53.134.0 ]--
r 114         for(int i = start.getI(); i < end.getI(); i++){
--[ 2019.11.06.19.25.53.328.0 ]--
+ 115 
+ 116 }
--[ 2019.11.06.19.25.53.349.0 ]--
r 116         }
--[ 2019.11.06.19.25.53.373.0 ]--
r 115             
--[ 2019.11.06.19.25.57.170.0 ]--
r 115              
--[ 2019.11.06.19.25.57.232.0 ]--
r 115             
--[ 2019.11.06.19.25.57.945.0 ]--
- 115
--[ 2019.11.06.19.26.05.980.0 ]--
- 113
- 113
r 113 
--[ 2019.11.06.19.26.06.644.0 ]--
- 113
--[ 2019.11.06.19.26.09.105.0 ]--
+ 113 
--[ 2019.11.06.19.26.09.450.0 ]--
+ 113         StdOut.println(start.getI());
+ 114         for(int i = start.getI(); i < end.getI(); i++){
r 115         }
--[ 2019.11.06.19.26.13.796.0 ]--
- 113
- 113
r 113         s
--[ 2019.11.06.19.26.13.848.0 ]--
r 113         s.
--[ 2019.11.06.19.26.13.997.0 ]--
r 113         s.p
--[ 2019.11.06.19.26.14.142.0 ]--
r 113         s.pi
--[ 2019.11.06.19.26.14.267.0 ]--
r 113         s.pis
--[ 2019.11.06.19.26.14.341.0 ]--
r 113         s.pish
--[ 2019.11.06.19.26.14.533.0 ]--
r 113         s.pish()
--[ 2019.11.06.19.26.14.663.0 ]--
r 113         s.pish(s)
--[ 2019.11.06.19.26.14.831.0 ]--
r 113         s.pish()
--[ 2019.11.06.19.26.14.944.0 ]--
r 113         s.pish
--[ 2019.11.06.19.26.15.034.0 ]--
r 113         s.pis
--[ 2019.11.06.19.26.15.168.0 ]--
r 113         s.pi
--[ 2019.11.06.19.26.15.254.0 ]--
r 113         s.p
--[ 2019.11.06.19.26.15.456.0 ]--
r 113         s.pu
--[ 2019.11.06.19.26.15.521.0 ]--
r 113         s.puh
--[ 2019.11.06.19.26.15.608.0 ]--
r 113         s.puhs
--[ 2019.11.06.19.26.16.076.0 ]--
r 113         s.puh
--[ 2019.11.06.19.26.16.277.0 ]--
r 113         s.puhs
--[ 2019.11.06.19.26.16.491.0 ]--
r 113         s.puh
--[ 2019.11.06.19.26.16.611.0 ]--
r 113         s.pu
--[ 2019.11.06.19.26.16.700.0 ]--
r 113         s.pus
--[ 2019.11.06.19.26.16.770.0 ]--
r 113         s.push
--[ 2019.11.06.19.26.17.014.0 ]--
r 113         s.push()
--[ 2019.11.06.19.26.17.361.0 ]--
r 113         s.push(s)
--[ 2019.11.06.19.26.17.502.0 ]--
r 113         s.push(st)
--[ 2019.11.06.19.26.17.566.0 ]--
r 113         s.push(sta)
--[ 2019.11.06.19.26.17.640.0 ]--
r 113         s.push(star)
--[ 2019.11.06.19.26.17.798.0 ]--
r 113         s.push(start)
--[ 2019.11.06.19.26.18.460.0 ]--
r 113         s.push(start);
--[ 2019.11.06.19.26.18.936.0 ]--
r 113         s.push(start); 
--[ 2019.11.06.19.26.19.004.0 ]--
r 113         s.push(start);
--[ 2019.11.06.19.26.20.149.0 ]--
+ 115         
--[ 2019.11.06.19.26.22.204.0 ]--
r 115          
--[ 2019.11.06.19.26.22.265.0 ]--
r 115         
--[ 2019.11.06.19.26.22.753.0 ]--
r 115         S
--[ 2019.11.06.19.26.22.953.0 ]--
r 115         St
--[ 2019.11.06.19.26.23.121.0 ]--
r 115         Std
--[ 2019.11.06.19.26.23.980.0 ]--
r 115         St
--[ 2019.11.06.19.26.24.075.0 ]--
r 115         S
--[ 2019.11.06.19.26.24.194.0 ]--
r 115         
--[ 2019.11.06.19.26.24.476.0 ]--
- 115
--[ 2019.11.06.19.26.30.667.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.26.32.965.0 ]--
+ 113         
--[ 2019.11.06.19.26.33.191.0 ]--
r 113         S
--[ 2019.11.06.19.26.33.353.0 ]--
r 113         St
--[ 2019.11.06.19.26.33.547.0 ]--
r 113         Std
--[ 2019.11.06.19.26.34.418.0 ]--
+ 114         
--[ 2019.11.06.19.26.34.441.0 ]--
r 114                 
--[ 2019.11.06.19.26.35.196.0 ]--
- 114
--[ 2019.11.06.19.26.35.938.0 ]--
r 113         StdO
--[ 2019.11.06.19.26.36.226.0 ]--
r 113         StdOut
--[ 2019.11.06.19.26.36.513.0 ]--
r 113         StdOutp
--[ 2019.11.06.19.26.36.787.0 ]--
r 113         StdOut
--[ 2019.11.06.19.26.37.756.0 ]--
r 113         StdOut.
--[ 2019.11.06.19.26.37.945.0 ]--
r 113         StdOut.p
--[ 2019.11.06.19.26.38.044.0 ]--
r 113         StdOut.pt
--[ 2019.11.06.19.26.38.149.0 ]--
r 113         StdOut.pti
--[ 2019.11.06.19.26.39.152.0 ]--
r 113         StdOut.println
--[ 2019.11.06.19.26.39.158.0 ]--
r 113         StdOut.println()
--[ 2019.11.06.19.26.39.163.0 ]--
r 113         StdOut.println();
--[ 2019.11.06.19.26.40.553.0 ]--
r 113         StdOut.println(e);
--[ 2019.11.06.19.26.40.638.0 ]--
r 113         StdOut.println(en);
--[ 2019.11.06.19.26.40.711.0 ]--
r 113         StdOut.println(end);
--[ 2019.11.06.19.26.41.108.0 ]--
r 113         StdOut.println(end;);
--[ 2019.11.06.19.26.41.964.0 ]--
r 113         StdOut.println(end);
--[ 2019.11.06.19.26.46.801.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.26.56.260.0 ]--
r 114         s.push(start); 
--[ 2019.11.06.19.26.56.287.0 ]--
r 114         s.push(start);
--[ 2019.11.06.19.26.56.501.0 ]--
+ 115         
--[ 2019.11.06.19.26.58.236.0 ]--
r 115         f
--[ 2019.11.06.19.26.58.329.0 ]--
r 115         fo
--[ 2019.11.06.19.26.58.458.0 ]--
r 115         for
--[ 2019.11.06.19.26.58.769.0 ]--
r 115         for 
--[ 2019.11.06.19.26.59.111.0 ]--
r 115         for
--[ 2019.11.06.19.26.59.394.0 ]--
r 115         for()
--[ 2019.11.06.19.26.59.991.0 ]--
r 115         for(i)
--[ 2019.11.06.19.27.01.322.0 ]--
r 115         for(in)
--[ 2019.11.06.19.27.01.394.0 ]--
r 115         for(int)
--[ 2019.11.06.19.27.01.463.0 ]--
r 115         for(int )
--[ 2019.11.06.19.27.01.530.0 ]--
r 115         for(int i)
--[ 2019.11.06.19.27.01.653.0 ]--
r 115         for(int i )
--[ 2019.11.06.19.27.02.327.0 ]--
r 115         for(int i =)
--[ 2019.11.06.19.27.02.424.0 ]--
r 115         for(int i = )
--[ 2019.11.06.19.27.04.867.0 ]--
r 115         for(int i = 1)
--[ 2019.11.06.19.27.05.343.0 ]--
r 115         for(int i = 1;)
--[ 2019.11.06.19.27.05.718.0 ]--
r 115         for(int i = 1; )
--[ 2019.11.06.19.27.06.555.0 ]--
r 115         for(int i = 1; i)
--[ 2019.11.06.19.27.07.216.0 ]--
r 115         for(int i = 1; i )
--[ 2019.11.06.19.27.07.317.0 ]--
r 115         for(int i = 1; i  )
--[ 2019.11.06.19.27.07.564.0 ]--
r 115         for(int i = 1; i  <)
--[ 2019.11.06.19.27.07.645.0 ]--
r 115         for(int i = 1; i  < )
--[ 2019.11.06.19.27.08.263.0 ]--
r 115         for(int i = 1; i  <)
--[ 2019.11.06.19.27.08.396.0 ]--
r 115         for(int i = 1; i  )
--[ 2019.11.06.19.27.08.520.0 ]--
r 115         for(int i = 1; i )
--[ 2019.11.06.19.27.09.008.0 ]--
r 115         for(int i = 1; i <)
--[ 2019.11.06.19.27.09.151.0 ]--
r 115         for(int i = 1; i < )
--[ 2019.11.06.19.27.09.242.0 ]--
r 115         for(int i = 1; i < 2)
--[ 2019.11.06.19.27.09.343.0 ]--
r 115         for(int i = 1; i < 29)
--[ 2019.11.06.19.27.09.789.0 ]--
r 115         for(int i = 1; i < 29;)
--[ 2019.11.06.19.27.09.925.0 ]--
r 115         for(int i = 1; i < 29; )
--[ 2019.11.06.19.27.10.293.0 ]--
r 115         for(int i = 1; i < 29; i)
--[ 2019.11.06.19.27.10.521.0 ]--
r 115         for(int i = 1; i < 29; i+)
--[ 2019.11.06.19.27.10.649.0 ]--
r 115         for(int i = 1; i < 29; i++)
--[ 2019.11.06.19.27.10.709.0 ]--
r 115         for(int i = 1; i < 29; i+++)
--[ 2019.11.06.19.27.11.484.0 ]--
r 115         for(int i = 1; i < 29; i++)
--[ 2019.11.06.19.27.12.953.0 ]--
r 115         for(int i = 1; i < 29; i++){
--[ 2019.11.06.19.27.13.152.0 ]--
+ 116 
+ 117 }
--[ 2019.11.06.19.27.13.172.0 ]--
r 117         }
--[ 2019.11.06.19.27.13.201.0 ]--
r 116             
--[ 2019.11.06.19.27.13.714.0 ]--
r 116             f
--[ 2019.11.06.19.27.13.825.0 ]--
r 116             fo
--[ 2019.11.06.19.27.13.884.0 ]--
r 116             for
--[ 2019.11.06.19.27.14.479.0 ]--
r 116             for 
--[ 2019.11.06.19.27.14.839.0 ]--
r 116             for i
--[ 2019.11.06.19.27.14.934.0 ]--
r 116             for in
--[ 2019.11.06.19.27.14.974.0 ]--
r 116             for int
--[ 2019.11.06.19.27.15.323.0 ]--
r 116             for in
--[ 2019.11.06.19.27.15.424.0 ]--
r 116             for i
--[ 2019.11.06.19.27.15.534.0 ]--
r 116             for 
--[ 2019.11.06.19.27.15.741.0 ]--
r 116             for )
--[ 2019.11.06.19.27.16.012.0 ]--
r 116             for 
--[ 2019.11.06.19.27.16.087.0 ]--
r 116             for
--[ 2019.11.06.19.27.16.405.0 ]--
r 116             for()
--[ 2019.11.06.19.27.16.576.0 ]--
r 116             for(i)
--[ 2019.11.06.19.27.16.624.0 ]--
r 116             for(in)
--[ 2019.11.06.19.27.16.702.0 ]--
r 116             for(int)
--[ 2019.11.06.19.27.16.776.0 ]--
r 116             for(int )
--[ 2019.11.06.19.27.16.943.0 ]--
r 116             for(int j)
--[ 2019.11.06.19.27.17.057.0 ]--
r 116             for(int j )
--[ 2019.11.06.19.27.17.175.0 ]--
r 116             for(int j =)
--[ 2019.11.06.19.27.17.304.0 ]--
r 116             for(int j = )
--[ 2019.11.06.19.27.18.473.0 ]--
r 116             for(int j = 1)
--[ 2019.11.06.19.27.18.951.0 ]--
r 116             for(int j = 1;)
--[ 2019.11.06.19.27.19.202.0 ]--
r 116             for(int j = 1; )
--[ 2019.11.06.19.27.20.280.0 ]--
r 116             for(int j = 1; I)
--[ 2019.11.06.19.27.20.935.0 ]--
r 116             for(int j = 1; )
--[ 2019.11.06.19.27.21.317.0 ]--
r 116             for(int j = 1; j)
--[ 2019.11.06.19.27.21.439.0 ]--
r 116             for(int j = 1; j )
--[ 2019.11.06.19.27.21.567.0 ]--
r 116             for(int j = 1; j <)
--[ 2019.11.06.19.27.21.757.0 ]--
r 116             for(int j = 1; j < )
--[ 2019.11.06.19.27.21.952.0 ]--
r 116             for(int j = 1; j < 2)
--[ 2019.11.06.19.27.22.091.0 ]--
r 116             for(int j = 1; j < 29)
--[ 2019.11.06.19.27.22.519.0 ]--
r 116             for(int j = 1; j < 29;)
--[ 2019.11.06.19.27.22.653.0 ]--
r 116             for(int j = 1; j < 29; )
--[ 2019.11.06.19.27.23.224.0 ]--
r 116             for(int j = 1; j < 29; j)
--[ 2019.11.06.19.27.23.564.0 ]--
r 116             for(int j = 1; j < 29; j_)
--[ 2019.11.06.19.27.24.021.0 ]--
r 116             for(int j = 1; j < 29; j)
--[ 2019.11.06.19.27.24.192.0 ]--
r 116             for(int j = 1; j < 29; j+)
--[ 2019.11.06.19.27.24.311.0 ]--
r 116             for(int j = 1; j < 29; j++)
--[ 2019.11.06.19.27.25.072.0 ]--
r 116             for(int j = 1; j < 29; j++){
--[ 2019.11.06.19.27.25.280.0 ]--
+ 117 
+ 118 }
--[ 2019.11.06.19.27.25.316.0 ]--
r 118             }
--[ 2019.11.06.19.27.25.349.0 ]--
r 117                 
--[ 2019.11.06.19.27.27.038.0 ]--
r 117                 c
--[ 2019.11.06.19.27.27.120.0 ]--
r 117                 co
--[ 2019.11.06.19.27.27.175.0 ]--
r 117                 con
--[ 2019.11.06.19.27.27.573.0 ]--
r 117                 co
--[ 2019.11.06.19.27.27.681.0 ]--
r 117                 c
--[ 2019.11.06.19.27.27.783.0 ]--
r 117                 
--[ 2019.11.06.19.27.28.144.0 ]--
r 117                  
--[ 2019.11.06.19.27.28.227.0 ]--
r 117                 
--[ 2019.11.06.19.27.28.638.0 ]--
r 117                 s
--[ 2019.11.06.19.27.28.735.0 ]--
r 117                 s.
--[ 2019.11.06.19.27.28.963.0 ]--
r 117                 s.p
--[ 2019.11.06.19.27.29.064.0 ]--
r 117                 s.pu
--[ 2019.11.06.19.27.29.261.0 ]--
r 117                 s.pus
--[ 2019.11.06.19.27.29.421.0 ]--
r 117                 s.push
--[ 2019.11.06.19.27.29.796.0 ]--
r 117                 s.push()
--[ 2019.11.06.19.27.31.534.0 ]--
r 117                 s.push(n)
--[ 2019.11.06.19.27.31.602.0 ]--
r 117                 s.push(ne)
--[ 2019.11.06.19.27.31.784.0 ]--
r 117                 s.push(new)
--[ 2019.11.06.19.27.31.870.0 ]--
r 117                 s.push(new )
--[ 2019.11.06.19.27.31.959.0 ]--
r 117                 s.push(new C)
--[ 2019.11.06.19.27.32.060.0 ]--
r 117                 s.push(new Co)
--[ 2019.11.06.19.27.32.165.0 ]--
r 117                 s.push(new Coo)
--[ 2019.11.06.19.27.32.247.0 ]--
r 117                 s.push(new Coor)
--[ 2019.11.06.19.27.32.417.0 ]--
r 117                 s.push(new Coord)
--[ 2019.11.06.19.27.32.934.0 ]--
r 117                 s.push(new Coord())
--[ 2019.11.06.19.27.33.981.0 ]--
r 117                 s.push(new Coord(i))
--[ 2019.11.06.19.27.34.254.0 ]--
r 117                 s.push(new Coord(i,))
--[ 2019.11.06.19.27.34.769.0 ]--
r 117                 s.push(new Coord(i,j))
--[ 2019.11.06.19.27.36.673.0 ]--
r 117                 s.push(new Coord(i,j));
--[ 2019.11.06.19.27.40.442.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.27.52.531.0 ]--
r 116             
--[ 2019.11.06.19.27.52.806.0 ]--
- 116
--[ 2019.11.06.19.28.08.207.0 ]--
- 115
- 115
- 115
r 115         
--[ 2019.11.06.19.28.09.030.0 ]--
- 115
--[ 2019.11.06.19.28.23.149.0 ]--
r 114         s.push(start); 
--[ 2019.11.06.19.28.23.199.0 ]--
r 114         s.push(start);
--[ 2019.11.06.19.28.26.245.0 ]--
- 94
--[ 2019.11.06.19.28.26.462.0 ]--
+ 94         
--[ 2019.11.06.19.29.09.769.0 ]--
r 113 
--[ 2019.11.06.19.29.09.940.0 ]--
- 113
--[ 2019.11.06.19.29.27.364.0 ]--
+ 114         
--[ 2019.11.06.19.29.31.878.0 ]--
r 114         f
--[ 2019.11.06.19.29.31.989.0 ]--
r 114         fo
--[ 2019.11.06.19.29.32.105.0 ]--
r 114         for
--[ 2019.11.06.19.29.32.611.0 ]--
r 114         for()
--[ 2019.11.06.19.29.33.524.0 ]--
r 114         for(i)
--[ 2019.11.06.19.29.38.008.0 ]--
r 114         for(in)
--[ 2019.11.06.19.29.38.084.0 ]--
r 114         for(int)
--[ 2019.11.06.19.29.38.166.0 ]--
r 114         for(int )
--[ 2019.11.06.19.29.38.216.0 ]--
r 114         for(int i)
--[ 2019.11.06.19.29.38.343.0 ]--
r 114         for(int i )
--[ 2019.11.06.19.29.38.541.0 ]--
r 114         for(int i =)
--[ 2019.11.06.19.29.38.735.0 ]--
r 114         for(int i = )
--[ 2019.11.06.19.29.40.588.0 ]--
r 114         for(int i = d)
--[ 2019.11.06.19.29.40.744.0 ]--
r 114         for(int i = do)
--[ 2019.11.06.19.29.41.326.0 ]--
r 114         for(int i = d)
--[ 2019.11.06.19.29.41.432.0 ]--
r 114         for(int i = )
--[ 2019.11.06.19.29.42.025.0 ]--
r 114         for(int i = S)
--[ 2019.11.06.19.29.42.371.0 ]--
r 114         for(int i = )
--[ 2019.11.06.19.29.43.428.0 ]--
r 114         for(int i =  )
--[ 2019.11.06.19.29.43.502.0 ]--
r 114         for(int i = )
--[ 2019.11.06.19.29.44.529.0 ]--
r 114         for(int i = i)
--[ 2019.11.06.19.29.44.682.0 ]--
r 114         for(int i = )
--[ 2019.11.06.19.29.46.348.0 ]--
r 114         for(int i = a)
--[ 2019.11.06.19.29.46.462.0 ]--
r 114         for(int i = )
--[ 2019.11.06.19.29.49.476.0 ]--
r 114         for(int i =  )
--[ 2019.11.06.19.29.49.546.0 ]--
r 114         for(int i = )
--[ 2019.11.06.19.29.49.635.0 ]--
r 114         for(int i = s)
--[ 2019.11.06.19.29.49.755.0 ]--
r 114         for(int i = st)
--[ 2019.11.06.19.29.49.817.0 ]--
r 114         for(int i = sta)
--[ 2019.11.06.19.29.49.904.0 ]--
r 114         for(int i = star)
--[ 2019.11.06.19.29.50.048.0 ]--
r 114         for(int i = start)
--[ 2019.11.06.19.29.50.143.0 ]--
r 114         for(int i = start.)
--[ 2019.11.06.19.29.50.234.0 ]--
r 114         for(int i = start.g)
--[ 2019.11.06.19.29.50.331.0 ]--
r 114         for(int i = start.ge)
--[ 2019.11.06.19.29.50.435.0 ]--
r 114         for(int i = start.get)
--[ 2019.11.06.19.29.50.960.0 ]--
r 114         for(int i = start.getI)
--[ 2019.11.06.19.29.51.164.0 ]--
r 114         for(int i = start.getI())
--[ 2019.11.06.19.29.51.443.0 ]--
r 114         for(int i = start.getI();)
--[ 2019.11.06.19.29.51.904.0 ]--
r 114         for(int i = start.getI(); )
--[ 2019.11.06.19.29.51.967.0 ]--
r 114         for(int i = start.getI();)
--[ 2019.11.06.19.29.53.622.0 ]--
r 114         for(int i = start.getI(); )
--[ 2019.11.06.19.29.53.981.0 ]--
r 114         for(int i = start.getI(); i)
--[ 2019.11.06.19.29.54.517.0 ]--
r 114         for(int i = start.getI(); i )
--[ 2019.11.06.19.29.54.665.0 ]--
r 114         for(int i = start.getI(); i <)
--[ 2019.11.06.19.29.54.766.0 ]--
r 114         for(int i = start.getI(); i < )
--[ 2019.11.06.19.29.57.032.0 ]--
r 114         for(int i = start.getI(); i < e)
--[ 2019.11.06.19.29.57.125.0 ]--
r 114         for(int i = start.getI(); i < en)
--[ 2019.11.06.19.29.57.191.0 ]--
r 114         for(int i = start.getI(); i < end)
--[ 2019.11.06.19.29.57.324.0 ]--
r 114         for(int i = start.getI(); i < end.)
--[ 2019.11.06.19.29.57.483.0 ]--
r 114         for(int i = start.getI(); i < end.g)
--[ 2019.11.06.19.29.57.532.0 ]--
r 114         for(int i = start.getI(); i < end.ge)
--[ 2019.11.06.19.29.57.675.0 ]--
r 114         for(int i = start.getI(); i < end.get)
--[ 2019.11.06.19.29.58.195.0 ]--
r 114         for(int i = start.getI(); i < end.getI)
--[ 2019.11.06.19.29.58.446.0 ]--
r 114         for(int i = start.getI(); i < end.getI())
--[ 2019.11.06.19.29.58.840.0 ]--
r 114         for(int i = start.getI(); i < end.getI();)
--[ 2019.11.06.19.29.59.080.0 ]--
r 114         for(int i = start.getI(); i < end.getI(); )
--[ 2019.11.06.19.29.59.544.0 ]--
r 114         for(int i = start.getI(); i < end.getI(); i)
--[ 2019.11.06.19.29.59.728.0 ]--
r 114         for(int i = start.getI(); i < end.getI(); i+_)
--[ 2019.11.06.19.30.00.223.0 ]--
r 114         for(int i = start.getI(); i < end.getI(); i+)
--[ 2019.11.06.19.30.00.365.0 ]--
r 114         for(int i = start.getI(); i < end.getI(); i++)
--[ 2019.11.06.19.30.01.257.0 ]--
r 114         for(int i = start.getI(); i < end.getI(); i++){
--[ 2019.11.06.19.30.01.448.0 ]--
+ 115 
+ 116 }
--[ 2019.11.06.19.30.01.469.0 ]--
r 116         }
--[ 2019.11.06.19.30.01.495.0 ]--
r 115             
--[ 2019.11.06.19.30.19.973.0 ]--
r 115             s
--[ 2019.11.06.19.30.20.117.0 ]--
r 115             s.
--[ 2019.11.06.19.30.20.597.0 ]--
r 115             s.p
--[ 2019.11.06.19.30.20.638.0 ]--
r 115             s.pu
--[ 2019.11.06.19.30.20.766.0 ]--
r 115             s.pus
--[ 2019.11.06.19.30.20.823.0 ]--
r 115             s.push
--[ 2019.11.06.19.30.21.014.0 ]--
r 115             s.push()
--[ 2019.11.06.19.30.21.560.0 ]--
r 115             s.push(C)
--[ 2019.11.06.19.30.21.670.0 ]--
r 115             s.push(Co)
--[ 2019.11.06.19.30.22.136.0 ]--
r 115             s.push(Coor)
--[ 2019.11.06.19.30.22.229.0 ]--
r 115             s.push(Coord)
--[ 2019.11.06.19.30.22.826.0 ]--
r 115             s.push(Coord )
--[ 2019.11.06.19.30.23.152.0 ]--
r 115             s.push(Coord ())
--[ 2019.11.06.19.30.23.850.0 ]--
r 115             s.push(Coord )
--[ 2019.11.06.19.30.23.984.0 ]--
r 115             s.push(Coord)
--[ 2019.11.06.19.30.24.186.0 ]--
r 115             s.push(Coord())
--[ 2019.11.06.19.30.25.396.0 ]--
r 115             s.push(Coord(i))
--[ 2019.11.06.19.30.26.726.0 ]--
r 115             s.push(Coord(i,))
--[ 2019.11.06.19.30.27.360.0 ]--
r 115             s.push(Coord(i, ))
--[ 2019.11.06.19.30.27.689.0 ]--
r 115             s.push(Coord(i,))
--[ 2019.11.06.19.30.27.888.0 ]--
r 115             s.push(Coord(i,e))
--[ 2019.11.06.19.30.27.964.0 ]--
r 115             s.push(Coord(i,en))
--[ 2019.11.06.19.30.28.074.0 ]--
r 115             s.push(Coord(i,end))
--[ 2019.11.06.19.30.28.842.0 ]--
r 115             s.push(Coord(i,en))
--[ 2019.11.06.19.30.28.951.0 ]--
r 115             s.push(Coord(i,e))
--[ 2019.11.06.19.30.29.073.0 ]--
r 115             s.push(Coord(i,))
--[ 2019.11.06.19.30.29.223.0 ]--
r 115             s.push(Coord(i,s))
--[ 2019.11.06.19.30.29.456.0 ]--
r 115             s.push(Coord(i,st))
--[ 2019.11.06.19.30.29.489.0 ]--
r 115             s.push(Coord(i,sta))
--[ 2019.11.06.19.30.29.599.0 ]--
r 115             s.push(Coord(i,star))
--[ 2019.11.06.19.30.29.727.0 ]--
r 115             s.push(Coord(i,start))
--[ 2019.11.06.19.30.30.119.0 ]--
r 115             s.push(Coord(i,start.))
--[ 2019.11.06.19.30.30.359.0 ]--
r 115             s.push(Coord(i,start.g))
--[ 2019.11.06.19.30.30.399.0 ]--
r 115             s.push(Coord(i,start.ge))
--[ 2019.11.06.19.30.30.479.0 ]--
r 115             s.push(Coord(i,start.get))
--[ 2019.11.06.19.30.30.843.0 ]--
r 115             s.push(Coord(i,start.getJ))
--[ 2019.11.06.19.30.31.110.0 ]--
r 115             s.push(Coord(i,start.getJ()))
--[ 2019.11.06.19.30.34.025.0 ]--
r 115             s.push(Coord(i,start.getJ()));
--[ 2019.11.06.19.30.35.173.0 ]--
r 115             s.push(Coord(i,start.getJ())); 
--[ 2019.11.06.19.30.35.199.0 ]--
r 115             s.push(Coord(i,start.getJ()));
--[ 2019.11.06.19.30.41.840.0 ]--
r 115             s.push(nCoord(i,start.getJ()));
--[ 2019.11.06.19.30.41.900.0 ]--
r 115             s.push(neCoord(i,start.getJ()));
--[ 2019.11.06.19.30.42.020.0 ]--
r 115             s.push(newCoord(i,start.getJ()));
--[ 2019.11.06.19.30.42.069.0 ]--
r 115             s.push(new Coord(i,start.getJ()));
--[ 2019.11.06.19.30.44.717.0 ]--
r 94 
--[ 2019.11.06.19.30.46.069.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.30.52.519.0 ]--
r 114         for(int i = start.getI(); i =< end.getI(); i++){
--[ 2019.11.06.19.30.56.079.0 ]--
UpdateTree (AD): 0 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class

--[ 2019.11.06.19.30.56.100.0 ]--
CompilationStatus (AEW): 0 3 0
[Ljava.lang.String;@36e66a86
--[ 2019.11.06.19.31.03.597.0 ]--
r 114         for(int i = start.getI(); i = end.getI(); i++){
--[ 2019.11.06.19.31.03.615.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.623.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.627.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.631.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.635.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.639.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.643.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.647.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.651.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.657.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.669.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.674.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.693.0 ]--
r 114         for(int i = start.getI(); i  end.getI(); i++){
--[ 2019.11.06.19.31.03.696.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.700.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.703.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.706.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.709.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.712.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.716.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.719.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.722.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.725.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.728.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.978.0 ]--
r 114         for(int i = start.getI(); i < end.getI(); i++){
--[ 2019.11.06.19.31.03.981.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.986.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.989.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.992.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.995.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.03.999.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.04.004.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.04.007.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.04.011.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.04.016.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.04.020.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.04.330.0 ]--
r 114         for(int i = start.getI(); i <= end.getI(); i++){
--[ 2019.11.06.19.31.04.336.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.04.342.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.07.635.0 ]--
UpdateTree (AD): 2 0
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.06.19.31.07.639.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.31.26.892.0 ]--
- 114
- 114
- 114
r 114         
--[ 2019.11.06.19.31.27.093.0 ]--
- 114
--[ 2019.11.06.19.31.28.381.0 ]--
+ 114         
--[ 2019.11.06.19.31.28.849.0 ]--
r 114         s
--[ 2019.11.06.19.31.29.508.0 ]--
r 114         s.
--[ 2019.11.06.19.31.29.860.0 ]--
r 114         s.p
--[ 2019.11.06.19.31.30.348.0 ]--
r 114         s.pu
--[ 2019.11.06.19.31.30.437.0 ]--
r 114         s.pus
--[ 2019.11.06.19.31.30.516.0 ]--
r 114         s.push
--[ 2019.11.06.19.31.30.819.0 ]--
r 114         s.push()
--[ 2019.11.06.19.31.31.512.0 ]--
r 114         s.push(e)
--[ 2019.11.06.19.31.31.573.0 ]--
r 114         s.push(en)
--[ 2019.11.06.19.31.31.652.0 ]--
r 114         s.push(end)
--[ 2019.11.06.19.31.31.955.0 ]--
r 114         s.push(end);
--[ 2019.11.06.19.31.32.319.0 ]--
r 114         s.push(end); 
--[ 2019.11.06.19.31.32.390.0 ]--
r 114         s.push(end);
--[ 2019.11.06.19.36.04.676.0 ]--
- 94
r 94         
--[ 2019.11.06.19.36.06.086.0 ]--
+ 94         
--[ 2019.11.06.19.36.27.407.0 ]--
r 94         M
--[ 2019.11.06.19.36.27.511.0 ]--
r 94         Mi
--[ 2019.11.06.19.36.27.573.0 ]--
r 94         Min
--[ 2019.11.06.19.36.28.214.0 ]--
r 94         MinP
--[ 2019.11.06.19.36.28.859.0 ]--
r 94         MinPQ
--[ 2019.11.06.19.36.29.353.0 ]--
r 94         MinPQ<>
--[ 2019.11.06.19.36.30.297.0 ]--
r 94         MinPQ< >
--[ 2019.11.06.19.36.30.373.0 ]--
r 94         MinPQ<>
--[ 2019.11.06.19.37.08.616.0 ]--
- 94
--[ 2019.11.06.19.37.09.445.0 ]--
- 94
--[ 2019.11.06.19.37.09.560.0 ]--
r 93     public void computePath() { 
--[ 2019.11.06.19.37.09.654.0 ]--
r 93     public void computePath() {
--[ 2019.11.06.19.39.25.335.0 ]--
+ 94         
--[ 2019.11.06.19.39.25.438.0 ]--
+ 94         
--[ 2019.11.06.19.39.26.622.0 ]--
r 94         <
--[ 2019.11.06.19.39.26.941.0 ]--
r 94         
--[ 2019.11.06.19.39.27.313.0 ]--
r 94         P
--[ 2019.11.06.19.39.27.799.0 ]--
r 94         P 
--[ 2019.11.06.19.39.27.847.0 ]--
r 94         P
--[ 2019.11.06.19.39.28.547.0 ]--
r 94         
--[ 2019.11.06.19.39.28.728.0 ]--
r 94         M
--[ 2019.11.06.19.39.29.589.0 ]--
r 94         Mi
--[ 2019.11.06.19.39.29.613.0 ]--
r 94         Min
--[ 2019.11.06.19.39.30.244.0 ]--
r 94         MinQ
--[ 2019.11.06.19.39.31.049.0 ]--
r 94         Min
--[ 2019.11.06.19.39.31.293.0 ]--
r 94         MinP
--[ 2019.11.06.19.39.31.410.0 ]--
r 94         MinPQ
--[ 2019.11.06.19.39.32.079.0 ]--
r 94         MinPQ<>
--[ 2019.11.06.19.39.32.433.0 ]--
r 94         MinPQ<p>
--[ 2019.11.06.19.39.32.695.0 ]--
r 94         MinPQ<>
--[ 2019.11.06.19.39.32.857.0 ]--
r 94         MinPQ<P>
--[ 2019.11.06.19.39.32.978.0 ]--
r 94         MinPQ<Pf>
--[ 2019.11.06.19.39.33.705.0 ]--
r 94         MinPQ<PfN>
--[ 2019.11.06.19.39.33.864.0 ]--
r 94         MinPQ<PfNo>
--[ 2019.11.06.19.39.33.917.0 ]--
r 94         MinPQ<PfNod>
--[ 2019.11.06.19.39.33.983.0 ]--
r 94         MinPQ<PfNode>
--[ 2019.11.06.19.39.34.223.0 ]--
r 94         MinPQ<PfNode(>
--[ 2019.11.06.19.39.34.849.0 ]--
r 94         MinPQ<PfNode()>
--[ 2019.11.06.19.39.35.532.0 ]--
r 94         MinPQ<PfNode() >
--[ 2019.11.06.19.39.35.583.0 ]--
r 94         MinPQ<PfNode()>
--[ 2019.11.06.19.39.35.990.0 ]--
r 94         MinPQ<PfNode(>
--[ 2019.11.06.19.39.36.111.0 ]--
r 94         MinPQ<PfNode>
--[ 2019.11.06.19.39.39.932.0 ]--
r 94         MinPQ<PNode>
--[ 2019.11.06.19.39.40.035.0 ]--
r 94         MinPQ<PFNode>
--[ 2019.11.06.19.39.41.282.0 ]--
r 94         MinPQ<PFNode> 
--[ 2019.11.06.19.39.46.390.0 ]--
r 94         MinPQ<PFNode> q
--[ 2019.11.06.19.39.46.484.0 ]--
r 94         MinPQ<PFNode> qu
--[ 2019.11.06.19.39.46.553.0 ]--
r 94         MinPQ<PFNode> que
--[ 2019.11.06.19.39.46.642.0 ]--
r 94         MinPQ<PFNode> queu
--[ 2019.11.06.19.39.46.718.0 ]--
r 94         MinPQ<PFNode> queue
--[ 2019.11.06.19.39.48.926.0 ]--
r 94         MinPQ<PFNode> queue 
--[ 2019.11.06.19.39.49.012.0 ]--
r 94         MinPQ<PFNode> queue
--[ 2019.11.06.19.39.49.126.0 ]--
r 94         MinPQ<PFNode> queu
--[ 2019.11.06.19.39.49.229.0 ]--
r 94         MinPQ<PFNode> que
--[ 2019.11.06.19.39.49.369.0 ]--
r 94         MinPQ<PFNode> qu
--[ 2019.11.06.19.39.49.565.0 ]--
r 94         MinPQ<PFNode> q
--[ 2019.11.06.19.39.50.033.0 ]--
r 94         MinPQ<PFNode> 
--[ 2019.11.06.19.39.50.811.0 ]--
r 94         MinPQ<PFNode> P
--[ 2019.11.06.19.39.50.946.0 ]--
r 94         MinPQ<PFNode> PF
--[ 2019.11.06.19.39.51.454.0 ]--
r 94         MinPQ<PFNode> P
--[ 2019.11.06.19.39.51.700.0 ]--
r 94         MinPQ<PFNode> 
--[ 2019.11.06.19.39.52.105.0 ]--
r 94         MinPQ<PFNode> p
--[ 2019.11.06.19.39.52.217.0 ]--
r 94         MinPQ<PFNode> pf
--[ 2019.11.06.19.39.52.452.0 ]--
r 94         MinPQ<PFNode> pfQ
--[ 2019.11.06.19.39.52.565.0 ]--
r 94         MinPQ<PFNode> pfQu
--[ 2019.11.06.19.39.52.649.0 ]--
r 94         MinPQ<PFNode> pfQue
--[ 2019.11.06.19.39.52.776.0 ]--
r 94         MinPQ<PFNode> pfQueu
--[ 2019.11.06.19.39.52.854.0 ]--
r 94         MinPQ<PFNode> pfQueue
--[ 2019.11.06.19.39.53.474.0 ]--
r 94         MinPQ<PFNode> pfQueue 
--[ 2019.11.06.19.39.53.594.0 ]--
r 94         MinPQ<PFNode> pfQueue =
--[ 2019.11.06.19.39.53.665.0 ]--
r 94         MinPQ<PFNode> pfQueue = 
--[ 2019.11.06.19.39.55.679.0 ]--
r 94         MinPQ<PFNode> pfQueue = n
--[ 2019.11.06.19.39.55.735.0 ]--
r 94         MinPQ<PFNode> pfQueue = ne
--[ 2019.11.06.19.39.55.867.0 ]--
r 94         MinPQ<PFNode> pfQueue = new
--[ 2019.11.06.19.39.55.973.0 ]--
r 94         MinPQ<PFNode> pfQueue = new 
--[ 2019.11.06.19.39.56.299.0 ]--
r 94         MinPQ<PFNode> pfQueue = new M
--[ 2019.11.06.19.39.56.406.0 ]--
r 94         MinPQ<PFNode> pfQueue = new Mi
--[ 2019.11.06.19.39.56.464.0 ]--
r 94         MinPQ<PFNode> pfQueue = new Min
--[ 2019.11.06.19.39.57.093.0 ]--
r 94         MinPQ<PFNode> pfQueue = new MinP
--[ 2019.11.06.19.39.57.329.0 ]--
r 94         MinPQ<PFNode> pfQueue = new Min
--[ 2019.11.06.19.39.57.578.0 ]--
r 94         MinPQ<PFNode> pfQueue = new MinP
--[ 2019.11.06.19.39.57.650.0 ]--
r 94         MinPQ<PFNode> pfQueue = new MinPQ
--[ 2019.11.06.19.39.58.005.0 ]--
r 94         MinPQ<PFNode> pfQueue = new MinPQ>
--[ 2019.11.06.19.39.58.086.0 ]--
r 94         MinPQ<PFNode> pfQueue = new MinPQ>?
--[ 2019.11.06.19.39.58.601.0 ]--
r 94         MinPQ<PFNode> pfQueue = new MinPQ>
--[ 2019.11.06.19.39.58.744.0 ]--
r 94         MinPQ<PFNode> pfQueue = new MinPQ
--[ 2019.11.06.19.39.58.989.0 ]--
r 94         MinPQ<PFNode> pfQueue = new MinPQ<>
--[ 2019.11.06.19.39.59.356.0 ]--
r 94         MinPQ<PFNode> pfQueue = new MinPQ<>()
--[ 2019.11.06.19.39.59.529.0 ]--
r 94         MinPQ<PFNode> pfQueue = new MinPQ<>();
--[ 2019.11.06.19.40.00.637.0 ]--
r 94         MinPQ<PFNode> pfQueue = new MinPQ<>(); 
--[ 2019.11.06.19.40.00.667.0 ]--
r 94         MinPQ<PFNode> pfQueue = new MinPQ<>();
--[ 2019.11.06.19.40.05.935.0 ]--
+ 95         
--[ 2019.11.06.19.40.07.878.0 ]--
r 95         m
--[ 2019.11.06.19.40.07.937.0 ]--
r 95         mi
--[ 2019.11.06.19.40.08.021.0 ]--
r 95         min
--[ 2019.11.06.19.40.08.987.0 ]--
r 95         mi
--[ 2019.11.06.19.40.09.097.0 ]--
r 95         m
--[ 2019.11.06.19.40.09.202.0 ]--
r 95         
--[ 2019.11.06.19.40.10.134.0 ]--
r 95         p
--[ 2019.11.06.19.40.10.269.0 ]--
r 95         pF
--[ 2019.11.06.19.40.10.741.0 ]--
r 95         p
--[ 2019.11.06.19.40.10.852.0 ]--
r 95         pf
--[ 2019.11.06.19.40.11.077.0 ]--
r 95         pfQ
--[ 2019.11.06.19.40.11.183.0 ]--
r 95         pfQu
--[ 2019.11.06.19.40.11.272.0 ]--
r 95         pfQue
--[ 2019.11.06.19.40.11.417.0 ]--
r 95         pfQuee
--[ 2019.11.06.19.40.11.818.0 ]--
r 95         pfQue
--[ 2019.11.06.19.40.12.087.0 ]--
r 95         pfQueu
--[ 2019.11.06.19.40.12.153.0 ]--
r 95         pfQueue
--[ 2019.11.06.19.40.13.175.0 ]--
r 95         pfQueue,
--[ 2019.11.06.19.40.13.608.0 ]--
r 95         pfQueue, 
--[ 2019.11.06.19.40.13.644.0 ]--
r 95         pfQueue,
--[ 2019.11.06.19.40.13.777.0 ]--
r 95         pfQueue
--[ 2019.11.06.19.40.13.947.0 ]--
r 95         pfQueue.
--[ 2019.11.06.19.40.14.201.0 ]--
r 95         pfQueue.i
--[ 2019.11.06.19.40.14.233.0 ]--
r 95         pfQueue.in
--[ 2019.11.06.19.40.15.616.0 ]--
r 95         pfQueue.i
--[ 2019.11.06.19.40.15.735.0 ]--
r 95         pfQueue.
--[ 2019.11.06.19.40.18.870.0 ]--
r 95         pfQueue.e
--[ 2019.11.06.19.40.18.917.0 ]--
r 95         pfQueue.en
--[ 2019.11.06.19.40.19.074.0 ]--
r 95         pfQueue.enq
--[ 2019.11.06.19.40.19.461.0 ]--
r 95         pfQueue.enqu
--[ 2019.11.06.19.40.19.702.0 ]--
r 95         pfQueue.enque
--[ 2019.11.06.19.40.19.933.0 ]--
r 95         pfQueue.enqueu
--[ 2019.11.06.19.40.20.558.0 ]--
r 95         pfQueue.enqueu 
--[ 2019.11.06.19.40.20.616.0 ]--
r 95         pfQueue.enqueu
--[ 2019.11.06.19.40.20.883.0 ]--
r 95         pfQueue.
--[ 2019.11.06.19.40.21.546.0 ]--
r 95         pfQueue.q
--[ 2019.11.06.19.40.21.763.0 ]--
r 95         pfQueue.qn
--[ 2019.11.06.19.40.21.879.0 ]--
r 95         pfQueue.qne
--[ 2019.11.06.19.40.22.223.0 ]--
r 95         pfQueue.qn
--[ 2019.11.06.19.40.22.486.0 ]--
r 95         pfQueue.q
--[ 2019.11.06.19.40.22.607.0 ]--
r 95         pfQueue.
--[ 2019.11.06.19.40.22.716.0 ]--
r 95         pfQueue.e
--[ 2019.11.06.19.40.22.816.0 ]--
r 95         pfQueue.en
--[ 2019.11.06.19.40.22.932.0 ]--
r 95         pfQueue.enq
--[ 2019.11.06.19.40.23.058.0 ]--
r 95         pfQueue.enqu
--[ 2019.11.06.19.40.23.160.0 ]--
r 95         pfQueue.enque
--[ 2019.11.06.19.40.23.252.0 ]--
r 95         pfQueue.enqueu
--[ 2019.11.06.19.40.23.304.0 ]--
r 95         pfQueue.enqueue
--[ 2019.11.06.19.40.24.288.0 ]--
r 95         pfQueue.enqueue 
--[ 2019.11.06.19.40.24.384.0 ]--
r 95         pfQueue.enqueue
--[ 2019.11.06.19.40.24.544.0 ]--
r 95         pfQueue.
--[ 2019.11.06.19.40.41.455.0 ]--
r 95         pfQueue.i
--[ 2019.11.06.19.40.41.511.0 ]--
r 95         pfQueue.in
--[ 2019.11.06.19.40.41.586.0 ]--
r 95         pfQueue.ins
--[ 2019.11.06.19.40.41.738.0 ]--
r 95         pfQueue.inse
--[ 2019.11.06.19.40.41.801.0 ]--
r 95         pfQueue.inser
--[ 2019.11.06.19.40.41.959.0 ]--
r 95         pfQueue.insert
--[ 2019.11.06.19.40.42.157.0 ]--
r 95         pfQueue.insert()
--[ 2019.11.06.19.40.44.846.0 ]--
r 95         pfQueue.insert(s)
--[ 2019.11.06.19.40.44.998.0 ]--
r 95         pfQueue.insert(st)
--[ 2019.11.06.19.40.45.067.0 ]--
r 95         pfQueue.insert(sta)
--[ 2019.11.06.19.40.45.164.0 ]--
r 95         pfQueue.insert(star)
--[ 2019.11.06.19.40.45.323.0 ]--
r 95         pfQueue.insert(start)
--[ 2019.11.06.19.40.46.482.0 ]--
r 95         pfQueue.insert(start )
--[ 2019.11.06.19.40.46.594.0 ]--
r 95         pfQueue.insert(start)
--[ 2019.11.06.19.40.47.733.0 ]--
r 95         pfQueue.insert(start);
--[ 2019.11.06.19.40.49.099.0 ]--
r 95         pfQueue.insert();
--[ 2019.11.06.19.40.58.344.0 ]--
+ 95         
--[ 2019.11.06.19.40.59.151.0 ]--
+ 95         
--[ 2019.11.06.19.40.59.903.0 ]--
r 95          
--[ 2019.11.06.19.40.59.950.0 ]--
r 95         
--[ 2019.11.06.19.41.25.768.0 ]--
r 95         P
--[ 2019.11.06.19.41.25.832.0 ]--
r 95         PF
--[ 2019.11.06.19.41.26.412.0 ]--
r 95         PFN
--[ 2019.11.06.19.41.26.568.0 ]--
r 95         PFNo
--[ 2019.11.06.19.41.26.661.0 ]--
r 95         PFNod
--[ 2019.11.06.19.41.26.696.0 ]--
r 95         PFNode
--[ 2019.11.06.19.41.38.538.0 ]--
r 95         PFNode 
--[ 2019.11.06.19.41.38.995.0 ]--
r 95         PFNode s
--[ 2019.11.06.19.41.39.110.0 ]--
r 95         PFNode st
--[ 2019.11.06.19.41.39.199.0 ]--
r 95         PFNode sta
--[ 2019.11.06.19.41.39.337.0 ]--
r 95         PFNode star
--[ 2019.11.06.19.41.39.455.0 ]--
r 95         PFNode start
--[ 2019.11.06.19.41.39.681.0 ]--
r 95         PFNode start 
--[ 2019.11.06.19.41.39.835.0 ]--
r 95         PFNode start =
--[ 2019.11.06.19.41.40.022.0 ]--
r 95         PFNode start = 
--[ 2019.11.06.19.41.40.227.0 ]--
r 95         PFNode start = n
--[ 2019.11.06.19.41.40.326.0 ]--
r 95         PFNode start = ne
--[ 2019.11.06.19.41.40.491.0 ]--
r 95         PFNode start = new
--[ 2019.11.06.19.41.40.583.0 ]--
r 95         PFNode start = new 
--[ 2019.11.06.19.41.40.923.0 ]--
r 95         PFNode start = new P
--[ 2019.11.06.19.41.41.258.0 ]--
r 95         PFNode start = new Pf
--[ 2019.11.06.19.41.41.764.0 ]--
r 95         PFNode start = new P
--[ 2019.11.06.19.41.42.184.0 ]--
r 95         PFNode start = new PF
--[ 2019.11.06.19.41.43.134.0 ]--
r 95         PFNode start = new PFN
--[ 2019.11.06.19.41.43.321.0 ]--
r 95         PFNode start = new PFNo
--[ 2019.11.06.19.41.43.912.0 ]--
r 95         PFNode start = new PFNod
--[ 2019.11.06.19.41.43.952.0 ]--
r 95         PFNode start = new PFNode
--[ 2019.11.06.19.41.44.158.0 ]--
r 95         PFNode start = new PFNode()
--[ 2019.11.06.19.41.44.287.0 ]--
r 95         PFNode start = new PFNode(s)
--[ 2019.11.06.19.41.44.455.0 ]--
r 95         PFNode start = new PFNode(st)
--[ 2019.11.06.19.41.44.502.0 ]--
r 95         PFNode start = new PFNode(sta)
--[ 2019.11.06.19.41.44.606.0 ]--
r 95         PFNode start = new PFNode(star)
--[ 2019.11.06.19.41.44.768.0 ]--
r 95         PFNode start = new PFNode(start)
--[ 2019.11.06.19.41.45.707.0 ]--
r 95         PFNode start = new PFNode(start )
--[ 2019.11.06.19.41.45.897.0 ]--
r 95         PFNode start = new PFNode(start)
--[ 2019.11.06.19.41.48.116.0 ]--
r 95         PFNode start = new PFNode(start,)
--[ 2019.11.06.19.41.48.465.0 ]--
r 95         PFNode start = new PFNode(start, )
--[ 2019.11.06.19.41.49.138.0 ]--
r 95         PFNode start = new PFNode(start,  )
--[ 2019.11.06.19.41.49.210.0 ]--
r 95         PFNode start = new PFNode(start, )
--[ 2019.11.06.19.41.50.691.0 ]--
r 95         PFNode start = new PFNode(
--[ 2019.11.06.19.41.55.535.0 ]--
r 95         PFNode t = new PFNode(
--[ 2019.11.06.19.41.55.690.0 ]--
r 95         PFNode th = new PFNode(
--[ 2019.11.06.19.41.55.718.0 ]--
r 95         PFNode thi = new PFNode(
--[ 2019.11.06.19.41.55.812.0 ]--
r 95         PFNode this = new PFNode(
--[ 2019.11.06.19.41.55.953.0 ]--
r 95         PFNode this. = new PFNode(
--[ 2019.11.06.19.41.56.193.0 ]--
r 95         PFNode this.s = new PFNode(
--[ 2019.11.06.19.41.56.260.0 ]--
r 95         PFNode this.st = new PFNode(
--[ 2019.11.06.19.41.56.338.0 ]--
r 95         PFNode this.sta = new PFNode(
--[ 2019.11.06.19.41.56.419.0 ]--
r 95         PFNode this.star = new PFNode(
--[ 2019.11.06.19.41.56.562.0 ]--
r 95         PFNode this.start = new PFNode(
--[ 2019.11.06.19.41.56.673.0 ]--
r 95         PFNode this.start  = new PFNode(
--[ 2019.11.06.19.41.56.757.0 ]--
r 95         PFNode this.start = new PFNode(
--[ 2019.11.06.19.42.01.003.0 ]--
r 95         PFNode b = new PFNode(
--[ 2019.11.06.19.42.01.131.0 ]--
r 95         PFNode be = new PFNode(
--[ 2019.11.06.19.42.01.249.0 ]--
r 95         PFNode beg = new PFNode(
--[ 2019.11.06.19.42.01.344.0 ]--
r 95         PFNode begi = new PFNode(
--[ 2019.11.06.19.42.01.392.0 ]--
r 95         PFNode begin = new PFNode(
--[ 2019.11.06.19.42.03.406.0 ]--
r 95         PFNode begin = new PFNode
--[ 2019.11.06.19.42.03.784.0 ]--
r 95         PFNode begin = new PFNode()
--[ 2019.11.06.19.42.09.356.0 ]--
- 97
r 97                 
--[ 2019.11.06.19.42.09.521.0 ]--
- 96
--[ 2019.11.06.19.42.09.681.0 ]--
- 96
--[ 2019.11.06.19.42.10.453.0 ]--
+ 96         
--[ 2019.11.06.19.42.10.460.0 ]--
r 96                 
--[ 2019.11.06.19.42.10.652.0 ]--
+ 96                 
--[ 2019.11.06.19.42.13.968.0 ]--
r 95         PFNode begin = new P
--[ 2019.11.06.19.42.14.097.0 ]--
r 95         PFNode begin = new PF
--[ 2019.11.06.19.42.15.227.0 ]--
r 95         PFNode begin = new PFNode
--[ 2019.11.06.19.42.15.240.0 ]--
r 95         PFNode begin = new PFNode()
--[ 2019.11.06.19.42.15.676.0 ]--
r 95         PFNode begin = new PFNode(.)
--[ 2019.11.06.19.42.16.269.0 ]--
r 95         PFNode begin = new PFNode()
--[ 2019.11.06.19.42.16.714.0 ]--
r 95         PFNode begin = new PFNode(s)
--[ 2019.11.06.19.42.17.241.0 ]--
r 95         PFNode begin = new PFNode()
--[ 2019.11.06.19.42.24.695.0 ]--
r 95         
--[ 2019.11.06.19.42.25.065.0 ]--
r 95         P
--[ 2019.11.06.19.42.25.143.0 ]--
r 95         PF
--[ 2019.11.06.19.42.25.300.0 ]--
r 95         PFN
--[ 2019.11.06.19.42.25.662.0 ]--
r 95         PFNo
--[ 2019.11.06.19.42.25.722.0 ]--
r 95         PFNod
--[ 2019.11.06.19.42.25.789.0 ]--
r 95         PFNode
--[ 2019.11.06.19.42.26.006.0 ]--
r 95         PFNode 
--[ 2019.11.06.19.42.28.071.0 ]--
r 95         PFNode b
--[ 2019.11.06.19.42.28.151.0 ]--
r 95         PFNode be
--[ 2019.11.06.19.42.28.281.0 ]--
r 95         PFNode beg
--[ 2019.11.06.19.42.28.360.0 ]--
r 95         PFNode begi
--[ 2019.11.06.19.42.28.408.0 ]--
r 95         PFNode begin
--[ 2019.11.06.19.42.28.674.0 ]--
r 95         PFNode begin=
--[ 2019.11.06.19.42.29.074.0 ]--
r 95         PFNode begin
--[ 2019.11.06.19.42.29.160.0 ]--
r 95         PFNode begin 
--[ 2019.11.06.19.42.29.241.0 ]--
r 95         PFNode begin =
--[ 2019.11.06.19.42.29.323.0 ]--
r 95         PFNode begin = 
--[ 2019.11.06.19.42.29.450.0 ]--
r 95         PFNode begin = n
--[ 2019.11.06.19.42.29.520.0 ]--
r 95         PFNode begin = ne
--[ 2019.11.06.19.42.29.686.0 ]--
r 95         PFNode begin = new
--[ 2019.11.06.19.42.29.970.0 ]--
r 95         PFNode begin = new 
--[ 2019.11.06.19.42.30.272.0 ]--
r 95         PFNode begin = new P
--[ 2019.11.06.19.42.30.401.0 ]--
r 95         PFNode begin = new PF
--[ 2019.11.06.19.42.31.112.0 ]--
r 95         PFNode begin = new PFN
--[ 2019.11.06.19.42.31.278.0 ]--
r 95         PFNode begin = new PFNo
--[ 2019.11.06.19.42.31.350.0 ]--
r 95         PFNode begin = new PFNod
--[ 2019.11.06.19.42.31.416.0 ]--
r 95         PFNode begin = new PFNode
--[ 2019.11.06.19.42.39.848.0 ]--
r 95         PFNode begin = new PFNode9
--[ 2019.11.06.19.42.39.935.0 ]--
r 95         PFNode begin = new PFNode9s
--[ 2019.11.06.19.42.40.098.0 ]--
r 95         PFNode begin = new PFNode9st
--[ 2019.11.06.19.42.40.153.0 ]--
r 95         PFNode begin = new PFNode9sta
--[ 2019.11.06.19.42.40.272.0 ]--
r 95         PFNode begin = new PFNode9star
--[ 2019.11.06.19.42.40.417.0 ]--
r 95         PFNode begin = new PFNode9sta
--[ 2019.11.06.19.42.40.538.0 ]--
r 95         PFNode begin = new PFNode9st
--[ 2019.11.06.19.42.40.642.0 ]--
r 95         PFNode begin = new PFNode9s
--[ 2019.11.06.19.42.40.753.0 ]--
r 95         PFNode begin = new PFNode9
--[ 2019.11.06.19.42.40.933.0 ]--
r 95         PFNode begin = new PFNode9()
--[ 2019.11.06.19.42.41.210.0 ]--
r 95         PFNode begin = new PFNode9
--[ 2019.11.06.19.42.41.294.0 ]--
r 95         PFNode begin = new PFNode
--[ 2019.11.06.19.42.41.469.0 ]--
r 95         PFNode begin = new PFNode()
--[ 2019.11.06.19.42.41.570.0 ]--
r 95         PFNode begin = new PFNode(s)
--[ 2019.11.06.19.42.41.692.0 ]--
r 95         PFNode begin = new PFNode(st)
--[ 2019.11.06.19.42.41.764.0 ]--
r 95         PFNode begin = new PFNode(sta)
--[ 2019.11.06.19.42.41.878.0 ]--
r 95         PFNode begin = new PFNode(star)
--[ 2019.11.06.19.42.42.002.0 ]--
r 95         PFNode begin = new PFNode(start)
--[ 2019.11.06.19.42.42.104.0 ]--
r 95         PFNode begin = new PFNode(start,)
--[ 2019.11.06.19.42.42.246.0 ]--
r 95         PFNode begin = new PFNode(start, )
--[ 2019.11.06.19.42.45.710.0 ]--
r 95         PFNode begin = new PFNode(start, n)
--[ 2019.11.06.19.42.45.772.0 ]--
r 95         PFNode begin = new PFNode(start, nu)
--[ 2019.11.06.19.42.45.966.0 ]--
r 95         PFNode begin = new PFNode(start, nul)
--[ 2019.11.06.19.42.46.078.0 ]--
r 95         PFNode begin = new PFNode(start, null)
--[ 2019.11.06.19.42.47.262.0 ]--
r 95         PFNode begin = new PFNode(start, null);
--[ 2019.11.06.19.42.48.342.0 ]--
r 95         PFNode begin = new PFNode(start, null); 
--[ 2019.11.06.19.42.48.384.0 ]--
r 95         PFNode begin = new PFNode(start, null);
--[ 2019.11.06.19.42.51.686.0 ]--
r 96         
--[ 2019.11.06.19.42.52.734.0 ]--
- 96
--[ 2019.11.06.19.42.53.032.0 ]--
+ 96         
--[ 2019.11.06.19.42.54.023.0 ]--
+ 96         
--[ 2019.11.06.19.42.55.615.0 ]--
r 97         p
--[ 2019.11.06.19.42.55.723.0 ]--
r 97         pf
--[ 2019.11.06.19.42.55.929.0 ]--
r 97         pfQ
--[ 2019.11.06.19.42.56.054.0 ]--
r 97         pfQu
--[ 2019.11.06.19.42.56.146.0 ]--
r 97         pfQue
--[ 2019.11.06.19.42.56.297.0 ]--
r 97         pfQuee
--[ 2019.11.06.19.42.56.352.0 ]--
r 97         pfQuee.
--[ 2019.11.06.19.42.56.816.0 ]--
r 97         pfQuee
--[ 2019.11.06.19.42.56.924.0 ]--
r 97         pfQue
--[ 2019.11.06.19.42.57.644.0 ]--
r 97         pfQu
--[ 2019.11.06.19.42.58.181.0 ]--
r 97         pfQue
--[ 2019.11.06.19.42.58.268.0 ]--
r 97         pfQueu
--[ 2019.11.06.19.42.58.316.0 ]--
r 97         pfQueue
--[ 2019.11.06.19.42.58.700.0 ]--
r 97         pfQueue.
--[ 2019.11.06.19.42.59.048.0 ]--
r 97         pfQueue.i
--[ 2019.11.06.19.42.59.101.0 ]--
r 97         pfQueue.in
--[ 2019.11.06.19.42.59.204.0 ]--
r 97         pfQueue.ins
--[ 2019.11.06.19.42.59.331.0 ]--
r 97         pfQueue.inse
--[ 2019.11.06.19.42.59.424.0 ]--
r 97         pfQueue.inser
--[ 2019.11.06.19.42.59.671.0 ]--
r 97         pfQueue.insert
--[ 2019.11.06.19.43.00.087.0 ]--
r 97         pfQueue.insert()
--[ 2019.11.06.19.43.00.706.0 ]--
r 97         pfQueue.insert(b)
--[ 2019.11.06.19.43.00.795.0 ]--
r 97         pfQueue.insert(be)
--[ 2019.11.06.19.43.01.086.0 ]--
r 97         pfQueue.insert(beg)
--[ 2019.11.06.19.43.01.157.0 ]--
r 97         pfQueue.insert(begi)
--[ 2019.11.06.19.43.01.213.0 ]--
r 97         pfQueue.insert(begin)
--[ 2019.11.06.19.43.01.858.0 ]--
r 97         pfQueue.insert(begin);
--[ 2019.11.06.19.43.02.967.0 ]--
r 97         pfQueue.insert(begin); 
--[ 2019.11.06.19.43.03.012.0 ]--
r 97         pfQueue.insert(begin);
--[ 2019.11.06.19.43.04.673.0 ]--
+ 96         
--[ 2019.11.06.19.43.05.632.0 ]--
r 96         P
--[ 2019.11.06.19.43.05.735.0 ]--
r 96         PF
--[ 2019.11.06.19.43.06.227.0 ]--
r 96         PFN
--[ 2019.11.06.19.43.06.341.0 ]--
r 96         PFNo
--[ 2019.11.06.19.43.06.411.0 ]--
r 96         PFNod
--[ 2019.11.06.19.43.06.467.0 ]--
r 96         PFNode
--[ 2019.11.06.19.43.07.181.0 ]--
r 96         PFNode 
--[ 2019.11.06.19.43.07.452.0 ]--
r 96         PFNode e
--[ 2019.11.06.19.43.07.556.0 ]--
r 96         PFNode en
--[ 2019.11.06.19.43.07.675.0 ]--
r 96         PFNode end
--[ 2019.11.06.19.43.08.067.0 ]--
r 96         PFNode end 
--[ 2019.11.06.19.43.08.155.0 ]--
r 96         PFNode end =
--[ 2019.11.06.19.43.08.266.0 ]--
r 96         PFNode end = 
--[ 2019.11.06.19.43.08.405.0 ]--
r 96         PFNode end = n
--[ 2019.11.06.19.43.08.440.0 ]--
r 96         PFNode end = ne
--[ 2019.11.06.19.43.08.589.0 ]--
r 96         PFNode end = new
--[ 2019.11.06.19.43.08.775.0 ]--
r 96         PFNode end = new 
--[ 2019.11.06.19.43.09.399.0 ]--
r 96         PFNode end = new P
--[ 2019.11.06.19.43.09.530.0 ]--
r 96         PFNode end = new PF
--[ 2019.11.06.19.43.09.982.0 ]--
r 96         PFNode end = new PFN
--[ 2019.11.06.19.43.10.111.0 ]--
r 96         PFNode end = new PFNo
--[ 2019.11.06.19.43.10.171.0 ]--
r 96         PFNode end = new PFNod
--[ 2019.11.06.19.43.10.218.0 ]--
r 96         PFNode end = new PFNode
--[ 2019.11.06.19.43.10.998.0 ]--
r 96         PFNode end = new PFNode()
--[ 2019.11.06.19.43.12.180.0 ]--
r 96         PFNode end = new PFNode(e)
--[ 2019.11.06.19.43.12.247.0 ]--
r 96         PFNode end = new PFNode(en)
--[ 2019.11.06.19.43.12.328.0 ]--
r 96         PFNode end = new PFNode(end)
--[ 2019.11.06.19.43.12.453.0 ]--
r 96         PFNode end = new PFNode(end,)
--[ 2019.11.06.19.43.12.590.0 ]--
r 96         PFNode end = new PFNode(end, )
--[ 2019.11.06.19.43.13.234.0 ]--
r 96         PFNode end = new PFNode(end,)
--[ 2019.11.06.19.43.13.337.0 ]--
r 96         PFNode end = new PFNode(end)
--[ 2019.11.06.19.43.13.447.0 ]--
r 96         PFNode end = new PFNode(en)
--[ 2019.11.06.19.43.13.568.0 ]--
r 96         PFNode end = new PFNode(e)
--[ 2019.11.06.19.43.13.674.0 ]--
r 96         PFNode end = new PFNode()
--[ 2019.11.06.19.43.13.786.0 ]--
r 96         PFNode end = new PFNode(t)
--[ 2019.11.06.19.43.13.855.0 ]--
r 96         PFNode end = new PFNode(th)
--[ 2019.11.06.19.43.13.888.0 ]--
r 96         PFNode end = new PFNode(thi)
--[ 2019.11.06.19.43.13.954.0 ]--
r 96         PFNode end = new PFNode(this)
--[ 2019.11.06.19.43.14.123.0 ]--
r 96         PFNode end = new PFNode(this.)
--[ 2019.11.06.19.43.14.287.0 ]--
r 96         PFNode end = new PFNode(this.e)
--[ 2019.11.06.19.43.14.369.0 ]--
r 96         PFNode end = new PFNode(this.en)
--[ 2019.11.06.19.43.14.465.0 ]--
r 96         PFNode end = new PFNode(this.end)
--[ 2019.11.06.19.43.15.168.0 ]--
r 96         PFNode end = new PFNode(this.end,)
--[ 2019.11.06.19.43.16.071.0 ]--
r 96         PFNode end = new PFNode(this.end, )
--[ 2019.11.06.19.43.18.414.0 ]--
r 96         PFNode end = new PFNode(this.end,)
--[ 2019.11.06.19.43.18.775.0 ]--
r 96         PFNode end = new PFNode(this.end, )
--[ 2019.11.06.19.43.23.383.0 ]--
r 96         PFNode end = new PFNode(this.end, b)
--[ 2019.11.06.19.43.23.490.0 ]--
r 96         PFNode end = new PFNode(this.end, be)
--[ 2019.11.06.19.43.23.681.0 ]--
r 96         PFNode end = new PFNode(this.end, beg)
--[ 2019.11.06.19.43.23.748.0 ]--
r 96         PFNode end = new PFNode(this.end, begi)
--[ 2019.11.06.19.43.23.788.0 ]--
r 96         PFNode end = new PFNode(this.end, begin)
--[ 2019.11.06.19.43.24.716.0 ]--
r 96         PFNode end = new PFNode(this.end, s)
--[ 2019.11.06.19.43.24.872.0 ]--
r 96         PFNode end = new PFNode(this.end, st)
--[ 2019.11.06.19.43.24.906.0 ]--
r 96         PFNode end = new PFNode(this.end, sta)
--[ 2019.11.06.19.43.24.998.0 ]--
r 96         PFNode end = new PFNode(this.end, star)
--[ 2019.11.06.19.43.25.145.0 ]--
r 96         PFNode end = new PFNode(this.end, start)
--[ 2019.11.06.19.43.28.321.0 ]--
r 95         PFNode s = new PFNode(start, null);
--[ 2019.11.06.19.43.28.460.0 ]--
r 95         PFNode st = new PFNode(start, null);
--[ 2019.11.06.19.43.28.523.0 ]--
r 95         PFNode sta = new PFNode(start, null);
--[ 2019.11.06.19.43.28.673.0 ]--
r 95         PFNode star = new PFNode(start, null);
--[ 2019.11.06.19.43.28.739.0 ]--
r 95         PFNode start = new PFNode(start, null);
--[ 2019.11.06.19.43.30.095.0 ]--
r 95         PFNode start = new PFNode(tstart, null);
--[ 2019.11.06.19.43.30.272.0 ]--
r 95         PFNode start = new PFNode(thstart, null);
--[ 2019.11.06.19.43.30.328.0 ]--
r 95         PFNode start = new PFNode(thistart, null);
--[ 2019.11.06.19.43.30.451.0 ]--
r 95         PFNode start = new PFNode(thisstart, null);
--[ 2019.11.06.19.43.30.624.0 ]--
r 95         PFNode start = new PFNode(this.start, null);
--[ 2019.11.06.19.43.33.822.0 ]--
r 96         PFNode end = new PFNode(this.end, start);
--[ 2019.11.06.19.43.36.331.0 ]--
r 98         pfQueue.insert(s);
--[ 2019.11.06.19.43.36.991.0 ]--
r 98         pfQueue.insert(st);
--[ 2019.11.06.19.43.37.060.0 ]--
r 98         pfQueue.insert(sta);
--[ 2019.11.06.19.43.37.153.0 ]--
r 98         pfQueue.insert(star);
--[ 2019.11.06.19.43.37.297.0 ]--
r 98         pfQueue.insert(start);
--[ 2019.11.06.19.43.38.335.0 ]--
+ 99         
--[ 2019.11.06.19.43.39.560.0 ]--
r 99         p
--[ 2019.11.06.19.43.39.646.0 ]--
r 99         pf
--[ 2019.11.06.19.43.39.933.0 ]--
r 99         pfQ
--[ 2019.11.06.19.43.40.407.0 ]--
r 99         pfQu
--[ 2019.11.06.19.43.40.475.0 ]--
r 99         pfQue
--[ 2019.11.06.19.43.40.543.0 ]--
r 99         pfQueu
--[ 2019.11.06.19.43.40.596.0 ]--
r 99         pfQueue
--[ 2019.11.06.19.43.40.822.0 ]--
r 99         pfQueue.
--[ 2019.11.06.19.43.41.061.0 ]--
r 99         pfQueue.i
--[ 2019.11.06.19.43.41.086.0 ]--
r 99         pfQueue.in
--[ 2019.11.06.19.43.41.168.0 ]--
r 99         pfQueue.int
--[ 2019.11.06.19.43.41.208.0 ]--
r 99         pfQueue.inte
--[ 2019.11.06.19.43.41.457.0 ]--
r 99         pfQueue.int
--[ 2019.11.06.19.43.41.767.0 ]--
r 99         pfQueue.in
--[ 2019.11.06.19.43.41.853.0 ]--
r 99         pfQueue.ins
--[ 2019.11.06.19.43.42.000.0 ]--
r 99         pfQueue.inse
--[ 2019.11.06.19.43.42.065.0 ]--
r 99         pfQueue.inser
--[ 2019.11.06.19.43.42.488.0 ]--
r 99         pfQueue.insert
--[ 2019.11.06.19.43.42.993.0 ]--
r 99         pfQueue.insert()
--[ 2019.11.06.19.43.43.351.0 ]--
r 99         pfQueue.insert(e)
--[ 2019.11.06.19.43.43.433.0 ]--
r 99         pfQueue.insert(en)
--[ 2019.11.06.19.43.43.521.0 ]--
r 99         pfQueue.insert(end)
--[ 2019.11.06.19.43.44.074.0 ]--
r 99         pfQueue.insert(end);
--[ 2019.11.06.19.43.45.823.0 ]--
r 99         pfQueue.insert(end); 
--[ 2019.11.06.19.43.45.875.0 ]--
r 99         pfQueue.insert(end);
--[ 2019.11.06.19.43.50.787.0 ]--
r 100         
--[ 2019.11.06.19.43.51.201.0 ]--
- 100
--[ 2019.11.06.19.43.51.496.0 ]--
+ 100         
--[ 2019.11.06.19.43.52.839.0 ]--
+ 100         
--[ 2019.11.06.19.44.49.551.0 ]--
+ 100         
--[ 2019.11.06.19.45.05.655.0 ]--
- 100
--[ 2019.11.06.19.45.05.863.0 ]--
- 100
--[ 2019.11.06.19.45.10.439.0 ]--
+ 100         
--[ 2019.11.06.19.45.10.544.0 ]--
+ 100         
--[ 2019.11.06.19.45.13.454.0 ]--
+ 15     private boolean pathFound;\
r 16     
--[ 2019.11.06.19.45.13.956.0 ]--
- 16
--[ 2019.11.06.19.45.14.050.0 ]--
r 15     private boolean pathFound;
--[ 2019.11.06.19.45.14.325.0 ]--
+ 16     
--[ 2019.11.06.19.45.14.603.0 ]--
r 16     p
--[ 2019.11.06.19.45.14.701.0 ]--
r 16     pr
--[ 2019.11.06.19.45.14.775.0 ]--
r 16     pri
--[ 2019.11.06.19.45.14.856.0 ]--
r 16     priv
--[ 2019.11.06.19.45.14.960.0 ]--
r 16     priva
--[ 2019.11.06.19.45.15.121.0 ]--
r 16     privat
--[ 2019.11.06.19.45.15.195.0 ]--
r 16     private
--[ 2019.11.06.19.45.15.971.0 ]--
r 16     private 
--[ 2019.11.06.19.45.24.409.0 ]--
r 16     private M
--[ 2019.11.06.19.45.24.610.0 ]--
r 16     private Mi
--[ 2019.11.06.19.45.24.685.0 ]--
r 16     private Min
--[ 2019.11.06.19.45.25.533.0 ]--
r 16     private MinP
--[ 2019.11.06.19.45.25.645.0 ]--
r 16     private MinPQ
--[ 2019.11.06.19.45.26.317.0 ]--
r 16     private MinPQ 
--[ 2019.11.06.19.45.26.588.0 ]--
r 16     private MinPQ
--[ 2019.11.06.19.45.27.494.0 ]--
r 16     private MinPQ<>
--[ 2019.11.06.19.45.27.665.0 ]--
r 16     private MinPQ<C>
--[ 2019.11.06.19.45.27.899.0 ]--
r 16     private MinPQ<Co>
--[ 2019.11.06.19.45.27.988.0 ]--
r 16     private MinPQ<Coo>
--[ 2019.11.06.19.45.28.082.0 ]--
r 16     private MinPQ<Coor>
--[ 2019.11.06.19.45.28.267.0 ]--
r 16     private MinPQ<Coord>
--[ 2019.11.06.19.45.29.679.0 ]--
r 16     private MinPQ<Coord> 
--[ 2019.11.06.19.45.32.848.0 ]--
r 16     private MinPQ<Coord> t
--[ 2019.11.06.19.45.32.921.0 ]--
r 16     private MinPQ<Coord> te
--[ 2019.11.06.19.45.33.041.0 ]--
r 16     private MinPQ<Coord> tes
--[ 2019.11.06.19.45.33.138.0 ]--
r 16     private MinPQ<Coord> test
--[ 2019.11.06.19.45.33.230.0 ]--
r 16     private MinPQ<Coord> test;
--[ 2019.11.06.19.45.34.399.0 ]--
r 16     private MinPQ<Coord> test; 
--[ 2019.11.06.19.45.34.433.0 ]--
r 16     private MinPQ<Coord> test;
--[ 2019.11.06.19.45.37.324.0 ]--
r 102         t
--[ 2019.11.06.19.45.37.395.0 ]--
r 102         te
--[ 2019.11.06.19.45.37.536.0 ]--
r 102         tes
--[ 2019.11.06.19.45.37.665.0 ]--
r 102         test
--[ 2019.11.06.19.45.37.724.0 ]--
r 102         test 
--[ 2019.11.06.19.45.37.851.0 ]--
r 102         test =
--[ 2019.11.06.19.45.37.925.0 ]--
r 102         test = 
--[ 2019.11.06.19.45.40.751.0 ]--
r 102         test = p
--[ 2019.11.06.19.45.40.835.0 ]--
r 102         test = pf
--[ 2019.11.06.19.45.41.157.0 ]--
r 102         test = pfQ
--[ 2019.11.06.19.45.41.846.0 ]--
r 102         test = pfQu
--[ 2019.11.06.19.45.41.908.0 ]--
r 102         test = pfQue
--[ 2019.11.06.19.45.41.976.0 ]--
r 102         test = pfQueu
--[ 2019.11.06.19.45.42.048.0 ]--
r 102         test = pfQueue
--[ 2019.11.06.19.45.42.423.0 ]--
r 102         test = pfQueue()
--[ 2019.11.06.19.45.42.895.0 ]--
r 102         test = pfQueue
--[ 2019.11.06.19.45.43.139.0 ]--
r 102         test = pfQueue;
--[ 2019.11.06.19.45.43.991.0 ]--
r 102         test = pfQueue; 
--[ 2019.11.06.19.45.44.077.0 ]--
r 102         test = pfQueue;
--[ 2019.11.06.19.45.57.752.0 ]--
r 16     private MinPQ<P> test;
--[ 2019.11.06.19.45.57.913.0 ]--
r 16     private MinPQ<PF> test;
--[ 2019.11.06.19.45.58.104.0 ]--
r 16     private MinPQ<PFN> test;
--[ 2019.11.06.19.45.58.325.0 ]--
r 16     private MinPQ<PFNo> test;
--[ 2019.11.06.19.45.58.365.0 ]--
r 16     private MinPQ<PFNod> test;
--[ 2019.11.06.19.45.58.418.0 ]--
r 16     private MinPQ<PFNode> test;
--[ 2019.11.06.19.46.02.750.0 ]--
r 123         return ;
--[ 2019.11.06.19.46.03.004.0 ]--
r 123         return t;
--[ 2019.11.06.19.46.03.030.0 ]--
r 123         return te;
--[ 2019.11.06.19.46.03.186.0 ]--
r 123         return tes;
--[ 2019.11.06.19.46.03.266.0 ]--
r 123         return test;
--[ 2019.11.06.19.46.10.801.0 ]--
r 123         return ;
--[ 2019.11.06.19.46.11.482.0 ]--
r 123         return s;
--[ 2019.11.06.19.46.15.870.0 ]--
- 101
r 101 
--[ 2019.11.06.19.46.16.339.0 ]--
r 101  
--[ 2019.11.06.19.46.16.377.0 ]--
- 101
--[ 2019.11.06.19.46.19.152.0 ]--
r 16 
--[ 2019.11.06.19.46.19.297.0 ]--
- 16
--[ 2019.11.06.19.47.15.271.0 ]--
r 97 
r 100 
--[ 2019.11.06.19.47.16.555.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.47.30.766.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.49.39.185.0 ]--
+ 117         
--[ 2019.11.06.19.49.39.685.0 ]--
r 117         /
--[ 2019.11.06.19.49.39.822.0 ]--
r 117         /*
--[ 2019.11.06.19.49.41.829.0 ]--
+ 121         
+ 123          */
--[ 2019.11.06.19.49.44.503.0 ]--
r 121         *
--[ 2019.11.06.19.49.44.649.0 ]--
r 121         */
--[ 2019.11.06.19.49.45.904.0 ]--
r 123          *
--[ 2019.11.06.19.49.46.042.0 ]--
r 123          
--[ 2019.11.06.19.49.46.315.0 ]--
r 123         
--[ 2019.11.06.19.49.46.682.0 ]--
- 123
--[ 2019.11.06.19.49.46.919.0 ]--
r 122         return s
--[ 2019.11.06.19.49.47.698.0 ]--
r 122         return 
--[ 2019.11.06.19.49.47.980.0 ]--
r 122         return n
--[ 2019.11.06.19.49.48.006.0 ]--
r 122         return nu
--[ 2019.11.06.19.49.48.258.0 ]--
r 122         return nul
--[ 2019.11.06.19.49.48.375.0 ]--
r 122         return null
--[ 2019.11.06.19.49.48.555.0 ]--
r 122         return null;
--[ 2019.11.06.19.49.48.707.0 ]--
r 122         return null; 
--[ 2019.11.06.19.49.48.784.0 ]--
r 122         return null;
--[ 2019.11.06.19.49.51.624.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.49.57.160.0 ]--
+ 101         
--[ 2019.11.06.19.49.58.040.0 ]--
r 101         i
--[ 2019.11.06.19.49.58.129.0 ]--
r 101         if
--[ 2019.11.06.19.49.58.423.0 ]--
r 101         if()
--[ 2019.11.06.19.50.05.303.0 ]--
r 101         if( )
--[ 2019.11.06.19.50.05.374.0 ]--
r 101         if()
--[ 2019.11.06.19.50.06.499.0 ]--
r 101         if(
--[ 2019.11.06.19.50.06.609.0 ]--
r 101         if
--[ 2019.11.06.19.50.06.712.0 ]--
r 101         i
--[ 2019.11.06.19.50.06.969.0 ]--
r 101         
--[ 2019.11.06.19.50.07.263.0 ]--
- 100
--[ 2019.11.06.19.50.10.844.0 ]--
r 117         /
--[ 2019.11.06.19.50.10.971.0 ]--
r 117         
--[ 2019.11.06.19.50.12.377.0 ]--
r 121         /
--[ 2019.11.06.19.50.13.127.0 ]--
r 121         
--[ 2019.11.06.19.50.14.795.0 ]--
r 122         return s;
--[ 2019.11.06.19.50.17.235.0 ]--
- 117
--[ 2019.11.06.19.50.18.691.0 ]--
+ 117         
--[ 2019.11.06.19.50.20.641.0 ]--
r 100 
r 121 
--[ 2019.11.06.19.50.21.896.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.50.57.512.0 ]--
+ 97         
--[ 2019.11.06.19.50.58.005.0 ]--
r 97         P
--[ 2019.11.06.19.50.58.080.0 ]--
r 97         PF
--[ 2019.11.06.19.50.58.326.0 ]--
r 97         PFN
--[ 2019.11.06.19.50.58.473.0 ]--
r 97         PFNo
--[ 2019.11.06.19.50.58.542.0 ]--
r 97         PFNod
--[ 2019.11.06.19.50.58.598.0 ]--
r 97         PFNode
--[ 2019.11.06.19.50.58.670.0 ]--
r 97         PFNode.
--[ 2019.11.06.19.50.59.274.0 ]--
r 97         PFNode. 
--[ 2019.11.06.19.50.59.387.0 ]--
r 97         PFNode.
--[ 2019.11.06.19.50.59.604.0 ]--
r 97         PFNode
--[ 2019.11.06.19.50.59.787.0 ]--
r 97         
--[ 2019.11.06.19.51.01.013.0 ]--
r 97         s
--[ 2019.11.06.19.51.01.226.0 ]--
r 97         st
--[ 2019.11.06.19.51.01.267.0 ]--
r 97         sta
--[ 2019.11.06.19.51.01.393.0 ]--
r 97         star
--[ 2019.11.06.19.51.01.539.0 ]--
r 97         start
--[ 2019.11.06.19.51.01.630.0 ]--
r 97         start.
--[ 2019.11.06.19.51.03.472.0 ]--
r 97         start.g
--[ 2019.11.06.19.51.05.197.0 ]--
r 97         start.
--[ 2019.11.06.19.51.05.396.0 ]--
r 97         start.l
--[ 2019.11.06.19.51.05.949.0 ]--
r 97         start.
--[ 2019.11.06.19.51.15.548.0 ]--
r 97 
--[ 2019.11.06.19.51.15.841.0 ]--
- 97
--[ 2019.11.06.19.54.00.534.0 ]--
r 117 
--[ 2019.11.06.19.54.06.769.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.19.56.59.113.0 ]--
- 94
- 94
- 94
- 95
- 95
--[ 2019.11.06.19.56.59.308.0 ]--
- 94
--[ 2019.11.06.20.03.56.604.0 ]--
+ 60         
--[ 2019.11.06.20.03.56.704.0 ]--
+ 60         
--[ 2019.11.06.20.03.57.122.0 ]--
- 60
--[ 2019.11.06.20.03.58.339.0 ]--
+ 60         
--[ 2019.11.06.20.03.58.672.0 ]--
r 61         p
--[ 2019.11.06.20.03.58.764.0 ]--
r 61         pu
--[ 2019.11.06.20.03.58.829.0 ]--
r 61         pub
--[ 2019.11.06.20.03.58.895.0 ]--
r 61         publ
--[ 2019.11.06.20.03.59.035.0 ]--
r 61         publi
--[ 2019.11.06.20.03.59.138.0 ]--
r 61         public
--[ 2019.11.06.20.03.59.823.0 ]--
r 61         public 
--[ 2019.11.06.20.04.00.223.0 ]--
r 61         public g
--[ 2019.11.06.20.04.00.308.0 ]--
r 61         public ge
--[ 2019.11.06.20.04.00.419.0 ]--
r 61         public get
--[ 2019.11.06.20.04.01.299.0 ]--
r 61         public getC
--[ 2019.11.06.20.04.01.446.0 ]--
r 61         public getCo
--[ 2019.11.06.20.04.01.554.0 ]--
r 61         public getCoo
--[ 2019.11.06.20.04.01.619.0 ]--
r 61         public getCoor
--[ 2019.11.06.20.04.01.765.0 ]--
r 61         public getCoord
--[ 2019.11.06.20.04.03.282.0 ]--
r 61         public getCoord()
--[ 2019.11.06.20.04.03.493.0 ]--
r 61         public getCoord() 
--[ 2019.11.06.20.04.04.005.0 ]--
r 61         public getCoord()
--[ 2019.11.06.20.04.04.645.0 ]--
r 61         public getCoord() 
--[ 2019.11.06.20.04.04.868.0 ]--
r 61         public getCoord() {}
--[ 2019.11.06.20.04.05.033.0 ]--
+ 61         public getCoord() {
r 62         }
--[ 2019.11.06.20.04.05.050.0 ]--
+ 62             
--[ 2019.11.06.20.04.10.566.0 ]--
r 61         public CgetCoord() {
--[ 2019.11.06.20.04.10.719.0 ]--
r 61         public CogetCoord() {
--[ 2019.11.06.20.04.10.829.0 ]--
r 61         public CoogetCoord() {
--[ 2019.11.06.20.04.10.908.0 ]--
r 61         public CoorgetCoord() {
--[ 2019.11.06.20.04.11.081.0 ]--
r 61         public CoordgetCoord() {
--[ 2019.11.06.20.04.11.661.0 ]--
r 61         public Coord getCoord() {
--[ 2019.11.06.20.04.14.033.0 ]--
+ 62             
--[ 2019.11.06.20.04.14.719.0 ]--
r 62             r
--[ 2019.11.06.20.04.14.759.0 ]--
r 62             re
--[ 2019.11.06.20.04.14.917.0 ]--
r 62             ret
--[ 2019.11.06.20.04.15.021.0 ]--
r 62             retu
--[ 2019.11.06.20.04.15.081.0 ]--
r 62             retur
--[ 2019.11.06.20.04.15.199.0 ]--
r 62             return
--[ 2019.11.06.20.04.15.385.0 ]--
r 62             return 
--[ 2019.11.06.20.04.16.861.0 ]--
- 62
r 62             return
--[ 2019.11.06.20.04.17.647.0 ]--
r 62             return 
--[ 2019.11.06.20.04.20.837.0 ]--
r 62             return P
--[ 2019.11.06.20.04.20.929.0 ]--
r 62             return PF
--[ 2019.11.06.20.04.21.092.0 ]--
r 62             return PFn
--[ 2019.11.06.20.04.21.592.0 ]--
r 62             return PF
--[ 2019.11.06.20.04.21.853.0 ]--
r 62             return PFN
--[ 2019.11.06.20.04.22.083.0 ]--
r 62             return PFNo
--[ 2019.11.06.20.04.22.164.0 ]--
r 62             return PFNod
--[ 2019.11.06.20.04.22.235.0 ]--
r 62             return PFNode
--[ 2019.11.06.20.04.22.326.0 ]--
r 62             return PFNode.
--[ 2019.11.06.20.04.23.719.0 ]--
r 62             return PFNode.c
--[ 2019.11.06.20.04.24.356.0 ]--
r 62             return PFNode.c 
--[ 2019.11.06.20.04.24.411.0 ]--
r 62             return PFNode.c
--[ 2019.11.06.20.04.24.604.0 ]--
r 62             return PFNode.
--[ 2019.11.06.20.04.24.867.0 ]--
r 62             return PFNode
--[ 2019.11.06.20.04.24.999.0 ]--
r 62             return PFNod
--[ 2019.11.06.20.04.25.088.0 ]--
r 62             return PFNo
--[ 2019.11.06.20.04.25.203.0 ]--
r 62             return PFN
--[ 2019.11.06.20.04.25.284.0 ]--
r 62             return PF
--[ 2019.11.06.20.04.25.405.0 ]--
r 62             return P
--[ 2019.11.06.20.04.25.510.0 ]--
r 62             return 
--[ 2019.11.06.20.04.28.361.0 ]--
r 62             return
--[ 2019.11.06.20.04.28.542.0 ]--
r 62             return 
--[ 2019.11.06.20.04.30.186.0 ]--
r 62             return l
--[ 2019.11.06.20.04.30.333.0 ]--
r 62             return lo
--[ 2019.11.06.20.04.30.470.0 ]--
r 62             return loc
--[ 2019.11.06.20.04.31.400.0 ]--
r 62             return loc 
--[ 2019.11.06.20.04.31.492.0 ]--
r 62             return loc
--[ 2019.11.06.20.04.32.164.0 ]--
r 62             return loc;
--[ 2019.11.06.20.04.35.503.0 ]--
r 62             
--[ 2019.11.06.20.04.39.329.0 ]--
- 61
- 61
r 61         
--[ 2019.11.06.20.04.39.627.0 ]--
- 60
--[ 2019.11.06.20.04.40.274.0 ]--
- 60
--[ 2019.11.06.20.04.44.792.0 ]--
+ 24         public PFNode(Coord loc, PFNode fromNode) { 
r 25         }
--[ 2019.11.06.20.04.44.825.0 ]--
+ 25             
--[ 2019.11.06.20.04.48.928.0 ]--
r 25             l
--[ 2019.11.06.20.04.49.083.0 ]--
r 25             lo
--[ 2019.11.06.20.04.49.204.0 ]--
r 25             loc
--[ 2019.11.06.20.04.49.806.0 ]--
r 25             loca
--[ 2019.11.06.20.04.49.950.0 ]--
r 25             locat
--[ 2019.11.06.20.04.50.038.0 ]--
r 25             locati
--[ 2019.11.06.20.04.50.093.0 ]--
r 25             locatio
--[ 2019.11.06.20.04.50.187.0 ]--
r 25             location
--[ 2019.11.06.20.04.50.266.0 ]--
r 25             location 
--[ 2019.11.06.20.04.50.375.0 ]--
r 25             location =
--[ 2019.11.06.20.04.50.488.0 ]--
r 25             location = 
--[ 2019.11.06.20.04.50.772.0 ]--
r 25             location = l
--[ 2019.11.06.20.04.51.028.0 ]--
r 25             location = lo
--[ 2019.11.06.20.04.51.139.0 ]--
r 25             location = loc
--[ 2019.11.06.20.04.52.989.0 ]--
r 25             location = loc;
--[ 2019.11.06.20.04.54.856.0 ]--
r 25             Clocation = loc;
--[ 2019.11.06.20.04.55.003.0 ]--
r 25             Colocation = loc;
--[ 2019.11.06.20.04.55.107.0 ]--
r 25             Coolocation = loc;
--[ 2019.11.06.20.04.55.159.0 ]--
r 25             Coorlocation = loc;
--[ 2019.11.06.20.04.55.319.0 ]--
r 25             Coordlocation = loc;
--[ 2019.11.06.20.04.55.385.0 ]--
r 25             Coord location = loc;
--[ 2019.11.06.20.04.58.396.0 ]--
+ 62         
--[ 2019.11.06.20.04.59.123.0 ]--
+ 62         
--[ 2019.11.06.20.04.59.604.0 ]--
r 63         p
--[ 2019.11.06.20.04.59.695.0 ]--
r 63         pu
--[ 2019.11.06.20.04.59.807.0 ]--
r 63         pub
--[ 2019.11.06.20.05.00.252.0 ]--
r 63         publ
--[ 2019.11.06.20.05.00.394.0 ]--
r 63         publi
--[ 2019.11.06.20.05.00.493.0 ]--
r 63         public
--[ 2019.11.06.20.05.01.072.0 ]--
r 63         public 
--[ 2019.11.06.20.05.01.748.0 ]--
r 63         public g
--[ 2019.11.06.20.05.01.813.0 ]--
r 63         public ge
--[ 2019.11.06.20.05.01.959.0 ]--
r 63         public get
--[ 2019.11.06.20.05.03.736.0 ]--
r 63         public getC
--[ 2019.11.06.20.05.03.842.0 ]--
r 63         public getCo
--[ 2019.11.06.20.05.03.946.0 ]--
r 63         public getCoo
--[ 2019.11.06.20.05.04.010.0 ]--
r 63         public getCoor
--[ 2019.11.06.20.05.04.318.0 ]--
r 63         public getCoord
--[ 2019.11.06.20.05.04.563.0 ]--
r 63         public getCoord()
--[ 2019.11.06.20.05.04.798.0 ]--
r 63         public getCoord(){}
--[ 2019.11.06.20.05.05.400.0 ]--
+ 63         public getCoord(){
r 64         }
--[ 2019.11.06.20.05.05.438.0 ]--
+ 64             
--[ 2019.11.06.20.05.06.378.0 ]--
r 64             r
--[ 2019.11.06.20.05.06.445.0 ]--
r 64             re
--[ 2019.11.06.20.05.06.623.0 ]--
r 64             ret
--[ 2019.11.06.20.05.06.731.0 ]--
r 64             retu
--[ 2019.11.06.20.05.06.772.0 ]--
r 64             retur
--[ 2019.11.06.20.05.06.878.0 ]--
r 64             return
--[ 2019.11.06.20.05.08.133.0 ]--
r 63         public CgetCoord(){
--[ 2019.11.06.20.05.08.234.0 ]--
r 63         public CogetCoord(){
--[ 2019.11.06.20.05.08.330.0 ]--
r 63         public CoogetCoord(){
--[ 2019.11.06.20.05.08.420.0 ]--
r 63         public CoorgetCoord(){
--[ 2019.11.06.20.05.08.583.0 ]--
r 63         public CoordgetCoord(){
--[ 2019.11.06.20.05.08.647.0 ]--
r 63         public Coord getCoord(){
--[ 2019.11.06.20.05.10.693.0 ]--
r 64             return 
--[ 2019.11.06.20.05.11.013.0 ]--
r 64             return l
--[ 2019.11.06.20.05.11.168.0 ]--
r 64             return lo
--[ 2019.11.06.20.05.11.248.0 ]--
r 64             return loc
--[ 2019.11.06.20.05.11.381.0 ]--
r 64             return loca
--[ 2019.11.06.20.05.11.456.0 ]--
r 64             return locat
--[ 2019.11.06.20.05.11.517.0 ]--
r 64             return locati
--[ 2019.11.06.20.05.11.578.0 ]--
r 64             return locatio
--[ 2019.11.06.20.05.11.698.0 ]--
r 64             return location
--[ 2019.11.06.20.05.11.862.0 ]--
r 64             return location 
--[ 2019.11.06.20.05.11.969.0 ]--
r 64             return location
--[ 2019.11.06.20.05.12.166.0 ]--
r 64             return location;
--[ 2019.11.06.20.05.20.547.0 ]--
+ 16     
--[ 2019.11.06.20.05.20.906.0 ]--
r 16     p
--[ 2019.11.06.20.05.21.009.0 ]--
r 16     pr
--[ 2019.11.06.20.05.21.109.0 ]--
r 16     pri
--[ 2019.11.06.20.05.21.204.0 ]--
r 16     priv
--[ 2019.11.06.20.05.21.354.0 ]--
r 16     priva
--[ 2019.11.06.20.05.21.485.0 ]--
r 16     privat
--[ 2019.11.06.20.05.21.547.0 ]--
r 16     private
--[ 2019.11.06.20.05.21.795.0 ]--
r 16     private 
--[ 2019.11.06.20.05.21.971.0 ]--
r 16     private l
--[ 2019.11.06.20.05.22.138.0 ]--
r 16     private lo
--[ 2019.11.06.20.05.22.183.0 ]--
r 16     private loc
--[ 2019.11.06.20.05.22.250.0 ]--
r 16     private loca
--[ 2019.11.06.20.05.22.375.0 ]--
r 16     private locat
--[ 2019.11.06.20.05.22.421.0 ]--
r 16     private locati
--[ 2019.11.06.20.05.22.509.0 ]--
r 16     private locatio
--[ 2019.11.06.20.05.22.586.0 ]--
r 16     private location
--[ 2019.11.06.20.05.24.516.0 ]--
r 16     private Clocation
--[ 2019.11.06.20.05.24.611.0 ]--
r 16     private Colocation
--[ 2019.11.06.20.05.24.709.0 ]--
r 16     private Coolocation
--[ 2019.11.06.20.05.24.800.0 ]--
r 16     private Coorlocation
--[ 2019.11.06.20.05.24.948.0 ]--
r 16     private Coordlocation
--[ 2019.11.06.20.05.25.020.0 ]--
r 16     private Coord location
--[ 2019.11.06.20.05.26.320.0 ]--
r 16     private Coord location;
--[ 2019.11.06.20.05.30.193.0 ]--
r 26             Coor location = loc;
--[ 2019.11.06.20.05.30.317.0 ]--
r 26             Coo location = loc;
--[ 2019.11.06.20.05.30.421.0 ]--
r 26             Co location = loc;
--[ 2019.11.06.20.05.30.546.0 ]--
r 26             C location = loc;
--[ 2019.11.06.20.05.30.653.0 ]--
r 26              location = loc;
--[ 2019.11.06.20.05.31.270.0 ]--
r 26             location = loc;
--[ 2019.11.06.20.05.37.076.0 ]--
- 63
--[ 2019.11.06.20.05.40.492.0 ]--
+ 63         
--[ 2019.11.06.20.05.43.617.0 ]--
+ 102         
--[ 2019.11.06.20.05.45.026.0 ]--
r 102         S
--[ 2019.11.06.20.05.45.170.0 ]--
r 102         St
--[ 2019.11.06.20.05.45.558.0 ]--
r 102         Std
--[ 2019.11.06.20.05.45.828.0 ]--
r 102         StdO
--[ 2019.11.06.20.05.46.076.0 ]--
r 102         StdOut
--[ 2019.11.06.20.05.46.222.0 ]--
r 102         StdOut.
--[ 2019.11.06.20.05.46.416.0 ]--
r 102         StdOut.p
--[ 2019.11.06.20.05.46.617.0 ]--
r 102         StdOut.pr
--[ 2019.11.06.20.05.46.676.0 ]--
r 102         StdOut.pri
--[ 2019.11.06.20.05.46.800.0 ]--
r 102         StdOut.prin
--[ 2019.11.06.20.05.47.071.0 ]--
r 102         StdOut.println
--[ 2019.11.06.20.05.47.083.0 ]--
r 102         StdOut.println()
--[ 2019.11.06.20.05.47.098.0 ]--
r 102         StdOut.println();
--[ 2019.11.06.20.05.47.476.0 ]--
r 102         StdOut.println(());
--[ 2019.11.06.20.05.47.922.0 ]--
r 102         StdOut.println();
--[ 2019.11.06.20.05.53.311.0 ]--
r 102         
--[ 2019.11.06.20.05.53.949.0 ]--
r 102          
--[ 2019.11.06.20.05.54.012.0 ]--
r 102         
--[ 2019.11.06.20.05.59.786.0 ]--
r 101     
--[ 2019.11.06.20.06.00.452.0 ]--
- 101
--[ 2019.11.06.20.06.00.639.0 ]--
+ 101         
--[ 2019.11.06.20.06.01.703.0 ]--
+ 101         
--[ 2019.11.06.20.06.02.375.0 ]--
r 102         n
--[ 2019.11.06.20.06.02.462.0 ]--
r 102         ne
--[ 2019.11.06.20.06.02.710.0 ]--
r 102         n
--[ 2019.11.06.20.06.02.827.0 ]--
r 102         
--[ 2019.11.06.20.06.03.201.0 ]--
- 101
--[ 2019.11.06.20.06.03.848.0 ]--
+ 101         
--[ 2019.11.06.20.06.04.133.0 ]--
r 102          
--[ 2019.11.06.20.06.04.195.0 ]--
r 102         
--[ 2019.11.06.20.06.05.131.0 ]--
r 102         P
--[ 2019.11.06.20.06.05.226.0 ]--
r 102         PF
--[ 2019.11.06.20.06.06.293.0 ]--
r 102         PFNode
--[ 2019.11.06.20.06.12.944.0 ]--
r 102         PFNode()
--[ 2019.11.06.20.06.13.362.0 ]--
r 102         PFNode( )
--[ 2019.11.06.20.06.13.469.0 ]--
r 102         PFNode()
--[ 2019.11.06.20.06.13.589.0 ]--
r 102         PFNode(s)
--[ 2019.11.06.20.06.13.737.0 ]--
r 102         PFNode(st)
--[ 2019.11.06.20.06.13.974.0 ]--
r 102         PFNode(sta)
--[ 2019.11.06.20.06.15.115.0 ]--
r 102         PFNode(star)
--[ 2019.11.06.20.06.15.276.0 ]--
r 102         PFNode(start)
--[ 2019.11.06.20.06.15.440.0 ]--
r 102         PFNode(start,)
--[ 2019.11.06.20.06.15.613.0 ]--
r 102         PFNode(start, )
--[ 2019.11.06.20.06.17.305.0 ]--
r 102         PFNode(start, n)
--[ 2019.11.06.20.06.17.352.0 ]--
r 102         PFNode(start, nu)
--[ 2019.11.06.20.06.17.547.0 ]--
r 102         PFNode(start, nul)
--[ 2019.11.06.20.06.17.653.0 ]--
r 102         PFNode(start, null)
--[ 2019.11.06.20.06.22.485.0 ]--
r 102         PPFNode(start, null)
--[ 2019.11.06.20.06.23.025.0 ]--
r 102         PFPFNode(start, null)
--[ 2019.11.06.20.06.23.212.0 ]--
r 102         PFNPFNode(start, null)
--[ 2019.11.06.20.06.23.459.0 ]--
r 102         PFNoPFNode(start, null)
--[ 2019.11.06.20.06.23.509.0 ]--
r 102         PFNodPFNode(start, null)
--[ 2019.11.06.20.06.23.583.0 ]--
r 102         PFNodePFNode(start, null)
--[ 2019.11.06.20.06.23.714.0 ]--
r 102         PFNode PFNode(start, null)
--[ 2019.11.06.20.06.26.072.0 ]--
r 102         PFNode tPFNode(start, null)
--[ 2019.11.06.20.06.26.183.0 ]--
r 102         PFNode thPFNode(start, null)
--[ 2019.11.06.20.06.26.238.0 ]--
r 102         PFNode thiPFNode(start, null)
--[ 2019.11.06.20.06.26.564.0 ]--
r 102         PFNode thPFNode(start, null)
--[ 2019.11.06.20.06.26.667.0 ]--
r 102         PFNode tPFNode(start, null)
--[ 2019.11.06.20.06.26.789.0 ]--
r 102         PFNode PFNode(start, null)
--[ 2019.11.06.20.06.26.956.0 ]--
r 102         PFNode sPFNode(start, null)
--[ 2019.11.06.20.06.27.101.0 ]--
r 102         PFNode stPFNode(start, null)
--[ 2019.11.06.20.06.27.187.0 ]--
r 102         PFNode staPFNode(start, null)
--[ 2019.11.06.20.06.27.306.0 ]--
r 102         PFNode starPFNode(start, null)
--[ 2019.11.06.20.06.27.469.0 ]--
r 102         PFNode startPFNode(start, null)
--[ 2019.11.06.20.06.27.692.0 ]--
r 102         PFNode start PFNode(start, null)
--[ 2019.11.06.20.06.29.089.0 ]--
r 102         PFNode start PFNode(tstart, null)
--[ 2019.11.06.20.06.29.227.0 ]--
r 102         PFNode start PFNode(thstart, null)
--[ 2019.11.06.20.06.29.276.0 ]--
r 102         PFNode start PFNode(thistart, null)
--[ 2019.11.06.20.06.29.442.0 ]--
r 102         PFNode start PFNode(thisstart, null)
--[ 2019.11.06.20.06.29.611.0 ]--
r 102         PFNode start PFNode(this.start, null)
--[ 2019.11.06.20.06.30.740.0 ]--
r 102         PFNode start PFNode(this. start, null)
--[ 2019.11.06.20.06.30.790.0 ]--
r 102         PFNode start PFNode(this.start, null)
--[ 2019.11.06.20.06.34.501.0 ]--
r 102         PFNode start =PFNode(this.start, null)
--[ 2019.11.06.20.06.34.582.0 ]--
r 102         PFNode start = PFNode(this.start, null)
--[ 2019.11.06.20.06.34.710.0 ]--
r 102         PFNode start = nPFNode(this.start, null)
--[ 2019.11.06.20.06.34.764.0 ]--
r 102         PFNode start = nePFNode(this.start, null)
--[ 2019.11.06.20.06.34.925.0 ]--
r 102         PFNode start = newPFNode(this.start, null)
--[ 2019.11.06.20.06.35.300.0 ]--
r 102         PFNode start = new PFNode(this.start, null)
--[ 2019.11.06.20.06.37.814.0 ]--
r 102         PFNode start = new PFNode(this.start, null);
--[ 2019.11.06.20.06.37.986.0 ]--
+ 103         
--[ 2019.11.06.20.06.38.396.0 ]--
r 103         P
--[ 2019.11.06.20.06.38.475.0 ]--
r 103         PF
--[ 2019.11.06.20.06.38.574.0 ]--
r 103         PF 
--[ 2019.11.06.20.06.38.928.0 ]--
r 103         PF
--[ 2019.11.06.20.06.39.073.0 ]--
r 103         PFn
--[ 2019.11.06.20.06.39.222.0 ]--
r 103         PFno
--[ 2019.11.06.20.06.39.237.0 ]--
r 103         PFnod
--[ 2019.11.06.20.06.39.374.0 ]--
r 103         PFnod 
--[ 2019.11.06.20.06.39.446.0 ]--
r 103         PFnod e
--[ 2019.11.06.20.06.39.653.0 ]--
r 103         PFnod en
--[ 2019.11.06.20.06.39.802.0 ]--
r 103         PFnod end
--[ 2019.11.06.20.06.39.906.0 ]--
r 103         PFnod end 
--[ 2019.11.06.20.06.40.430.0 ]--
r 103         PFnod 
--[ 2019.11.06.20.06.40.677.0 ]--
r 103         PFnod
--[ 2019.11.06.20.06.40.883.0 ]--
r 103         PFnode
--[ 2019.11.06.20.06.40.973.0 ]--
r 103         PFnode 
--[ 2019.11.06.20.06.41.095.0 ]--
r 103         PFnode e
--[ 2019.11.06.20.06.41.209.0 ]--
r 103         PFnode en
--[ 2019.11.06.20.06.41.251.0 ]--
r 103         PFnode end
--[ 2019.11.06.20.06.41.335.0 ]--
r 103         PFnode end 
--[ 2019.11.06.20.06.41.444.0 ]--
r 103         PFnode end =
--[ 2019.11.06.20.06.41.544.0 ]--
r 103         PFnode end = 
--[ 2019.11.06.20.06.41.644.0 ]--
r 103         PFnode end = n
--[ 2019.11.06.20.06.41.710.0 ]--
r 103         PFnode end = ne
--[ 2019.11.06.20.06.41.850.0 ]--
r 103         PFnode end = new
--[ 2019.11.06.20.06.41.914.0 ]--
r 103         PFnode end = new 
--[ 2019.11.06.20.06.42.067.0 ]--
r 103         PFnode end = new P
--[ 2019.11.06.20.06.42.450.0 ]--
r 103         PFnode end = new PF
--[ 2019.11.06.20.06.42.597.0 ]--
r 103         PFnode end = new PFN
--[ 2019.11.06.20.06.42.708.0 ]--
r 103         PFnode end = new PFNo
--[ 2019.11.06.20.06.43.267.0 ]--
r 103         PFnode end = new PFNod
--[ 2019.11.06.20.06.43.320.0 ]--
r 103         PFnode end = new PFNode
--[ 2019.11.06.20.06.43.540.0 ]--
r 103         PFnode end = new PFNode9
--[ 2019.11.06.20.06.43.616.0 ]--
r 103         PFnode end = new PFNode9t
--[ 2019.11.06.20.06.43.699.0 ]--
r 103         PFnode end = new PFNode9th
--[ 2019.11.06.20.06.43.741.0 ]--
r 103         PFnode end = new PFNode9thi
--[ 2019.11.06.20.06.43.820.0 ]--
r 103         PFnode end = new PFNode9this
--[ 2019.11.06.20.06.44.046.0 ]--
r 103         PFnode end = new PFNode9thi
--[ 2019.11.06.20.06.44.165.0 ]--
r 103         PFnode end = new PFNode9th
--[ 2019.11.06.20.06.44.243.0 ]--
r 103         PFnode end = new PFNode9t
--[ 2019.11.06.20.06.44.370.0 ]--
r 103         PFnode end = new PFNode9
--[ 2019.11.06.20.06.44.669.0 ]--
r 103         PFnode end = new PFNode
--[ 2019.11.06.20.06.44.842.0 ]--
r 103         PFnode end = new PFNode)
--[ 2019.11.06.20.06.44.981.0 ]--
r 103         PFnode end = new PFNode)t
--[ 2019.11.06.20.06.45.145.0 ]--
r 103         PFnode end = new PFNode)th
--[ 2019.11.06.20.06.45.190.0 ]--
r 103         PFnode end = new PFNode)thi
--[ 2019.11.06.20.06.45.436.0 ]--
r 103         PFnode end = new PFNode)th
--[ 2019.11.06.20.06.45.537.0 ]--
r 103         PFnode end = new PFNode)t
--[ 2019.11.06.20.06.45.640.0 ]--
r 103         PFnode end = new PFNode)
--[ 2019.11.06.20.06.45.731.0 ]--
r 103         PFnode end = new PFNode
--[ 2019.11.06.20.06.45.905.0 ]--
r 103         PFnode end = new PFNode()
--[ 2019.11.06.20.06.46.066.0 ]--
r 103         PFnode end = new PFNode(t)
--[ 2019.11.06.20.06.46.150.0 ]--
r 103         PFnode end = new PFNode(th)
--[ 2019.11.06.20.06.46.203.0 ]--
r 103         PFnode end = new PFNode(thi)
--[ 2019.11.06.20.06.46.301.0 ]--
r 103         PFnode end = new PFNode(this)
--[ 2019.11.06.20.06.46.431.0 ]--
r 103         PFnode end = new PFNode(this.)
--[ 2019.11.06.20.06.46.563.0 ]--
r 103         PFnode end = new PFNode(this.e)
--[ 2019.11.06.20.06.46.703.0 ]--
r 103         PFnode end = new PFNode(this.en)
--[ 2019.11.06.20.06.46.828.0 ]--
r 103         PFnode end = new PFNode(this.end)
--[ 2019.11.06.20.06.46.952.0 ]--
r 103         PFnode end = new PFNode(this.end,)
--[ 2019.11.06.20.06.47.303.0 ]--
r 103         PFnode end = new PFNode(this.end, )
--[ 2019.11.06.20.06.50.122.0 ]--
r 103         PFnode end = new PFNode(this.end, t)
--[ 2019.11.06.20.06.50.199.0 ]--
r 103         PFnode end = new PFNode(this.end, th)
--[ 2019.11.06.20.06.50.236.0 ]--
r 103         PFnode end = new PFNode(this.end, thi)
--[ 2019.11.06.20.06.50.300.0 ]--
r 103         PFnode end = new PFNode(this.end, this)
--[ 2019.11.06.20.06.50.474.0 ]--
r 103         PFnode end = new PFNode(this.end, this.)
--[ 2019.11.06.20.06.50.647.0 ]--
r 103         PFnode end = new PFNode(this.end, this.s)
--[ 2019.11.06.20.06.51.326.0 ]--
r 103         PFnode end = new PFNode(this.end, this.)
--[ 2019.11.06.20.06.51.463.0 ]--
r 103         PFnode end = new PFNode(this.end, this)
--[ 2019.11.06.20.06.51.585.0 ]--
r 103         PFnode end = new PFNode(this.end, thi)
--[ 2019.11.06.20.06.51.767.0 ]--
r 103         PFnode end = new PFNode(this.end, th)
--[ 2019.11.06.20.06.51.930.0 ]--
r 103         PFnode end = new PFNode(this.end, t)
--[ 2019.11.06.20.06.52.187.0 ]--
r 103         PFnode end = new PFNode(this.end, )
--[ 2019.11.06.20.06.53.061.0 ]--
r 103         PFnode end = new PFNode(this.end, s)
--[ 2019.11.06.20.06.53.194.0 ]--
r 103         PFnode end = new PFNode(this.end, st)
--[ 2019.11.06.20.06.53.286.0 ]--
r 103         PFnode end = new PFNode(this.end, sta)
--[ 2019.11.06.20.06.53.412.0 ]--
r 103         PFnode end = new PFNode(this.end, star)
--[ 2019.11.06.20.06.53.538.0 ]--
r 103         PFnode end = new PFNode(this.end, start)
--[ 2019.11.06.20.06.54.430.0 ]--
r 103         PFnode end = new PFNode(this.end, start);
--[ 2019.11.06.20.06.55.634.0 ]--
r 103         PFnode end = new PFNode(this.end, start); 
--[ 2019.11.06.20.06.55.696.0 ]--
r 103         PFnode end = new PFNode(this.end, start);
--[ 2019.11.06.20.06.58.858.0 ]--
r 103         PFode end = new PFNode(this.end, start);
--[ 2019.11.06.20.06.58.969.0 ]--
r 103         PFNode end = new PFNode(this.end, start);
--[ 2019.11.06.20.07.00.699.0 ]--
+ 104         
--[ 2019.11.06.20.07.00.798.0 ]--
+ 104         
--[ 2019.11.06.20.07.02.627.0 ]--
r 105         S
--[ 2019.11.06.20.07.02.765.0 ]--
r 105         ST
--[ 2019.11.06.20.07.02.910.0 ]--
r 105         STD
--[ 2019.11.06.20.07.03.537.0 ]--
r 105         STDO
--[ 2019.11.06.20.07.03.956.0 ]--
r 105         STD
--[ 2019.11.06.20.07.04.073.0 ]--
r 105         ST
--[ 2019.11.06.20.07.04.200.0 ]--
r 105         S
--[ 2019.11.06.20.07.04.358.0 ]--
r 105         St
--[ 2019.11.06.20.07.04.530.0 ]--
r 105         Std
--[ 2019.11.06.20.07.04.790.0 ]--
r 105         StdO
--[ 2019.11.06.20.07.04.936.0 ]--
r 105         StdOut
--[ 2019.11.06.20.07.05.138.0 ]--
r 105         StdOut.
--[ 2019.11.06.20.07.05.385.0 ]--
r 105         StdOut.p
--[ 2019.11.06.20.07.05.520.0 ]--
r 105         StdOut.pr
--[ 2019.11.06.20.07.05.590.0 ]--
r 105         StdOut.pri
--[ 2019.11.06.20.07.05.637.0 ]--
r 105         StdOut.prin
--[ 2019.11.06.20.07.05.816.0 ]--
r 105         StdOut.println
--[ 2019.11.06.20.07.05.828.0 ]--
r 105         StdOut.println()
--[ 2019.11.06.20.07.05.842.0 ]--
r 105         StdOut.println();
--[ 2019.11.06.20.07.07.058.0 ]--
r 105         StdOut.println(s);
--[ 2019.11.06.20.07.07.175.0 ]--
r 105         StdOut.println(st);
--[ 2019.11.06.20.07.07.255.0 ]--
r 105         StdOut.println(sta);
--[ 2019.11.06.20.07.07.352.0 ]--
r 105         StdOut.println(star);
--[ 2019.11.06.20.07.07.489.0 ]--
r 105         StdOut.println(start);
--[ 2019.11.06.20.07.07.595.0 ]--
r 105         StdOut.println(start.);
--[ 2019.11.06.20.07.07.960.0 ]--
r 105         StdOut.println(start.g);
--[ 2019.11.06.20.07.08.061.0 ]--
r 105         StdOut.println(start.ge);
--[ 2019.11.06.20.07.08.229.0 ]--
r 105         StdOut.println(start.get);
--[ 2019.11.06.20.07.09.526.0 ]--
r 105         StdOut.println(start.getCoord);
--[ 2019.11.06.20.07.09.538.0 ]--
r 105         StdOut.println(start.getCoord());
--[ 2019.11.06.20.07.13.913.0 ]--
r 25         public PFNode(Coord loc, PFNode fromNode) {
r 63 
r 101 
r 104 
r 106 
--[ 2019.11.06.20.07.15.211.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.07.23.106.0 ]--
+ 105         
--[ 2019.11.06.20.07.23.196.0 ]--
+ 105         
--[ 2019.11.06.20.07.24.778.0 ]--
+ 102         
--[ 2019.11.06.20.07.25.019.0 ]--
r 102             
--[ 2019.11.06.20.07.25.399.0 ]--
r 102         
--[ 2019.11.06.20.07.25.679.0 ]--
r 102          
--[ 2019.11.06.20.07.25.733.0 ]--
r 102         
--[ 2019.11.06.20.08.19.171.0 ]--
r 16     private Coord location; 
--[ 2019.11.06.20.08.19.198.0 ]--
r 16     private Coord location;
--[ 2019.11.06.20.08.19.372.0 ]--
+ 17     
--[ 2019.11.06.20.08.19.604.0 ]--
r 17     p
--[ 2019.11.06.20.08.19.694.0 ]--
r 17     pr
--[ 2019.11.06.20.08.19.828.0 ]--
r 17     pri
--[ 2019.11.06.20.08.20.282.0 ]--
r 17     priv
--[ 2019.11.06.20.08.20.371.0 ]--
r 17     priva
--[ 2019.11.06.20.08.20.489.0 ]--
r 17     privat
--[ 2019.11.06.20.08.20.548.0 ]--
r 17     private
--[ 2019.11.06.20.08.20.639.0 ]--
r 17     private 
--[ 2019.11.06.20.08.20.971.0 ]--
r 17     private Stack<Coord> s = new Stack<>();
--[ 2019.11.06.20.08.21.662.0 ]--
r 17     private Stack<Coord> s = new Stack<>(); 
--[ 2019.11.06.20.08.21.722.0 ]--
r 17     private Stack<Coord> s = new Stack<>();
--[ 2019.11.06.20.08.25.658.0 ]--
r 17     private Stack<Coord>  = new Stack<>();
--[ 2019.11.06.20.08.25.781.0 ]--
r 17     private Stack<Coord> c = new Stack<>();
--[ 2019.11.06.20.08.25.870.0 ]--
r 17     private Stack<Coord> co = new Stack<>();
--[ 2019.11.06.20.08.26.129.0 ]--
r 17     private Stack<Coord> coo = new Stack<>();
--[ 2019.11.06.20.08.26.321.0 ]--
r 17     private Stack<Coord> coor = new Stack<>();
--[ 2019.11.06.20.08.26.513.0 ]--
r 17     private Stack<Coord> coord = new Stack<>();
--[ 2019.11.06.20.08.26.716.0 ]--
r 17     private Stack<Coord> coordS = new Stack<>();
--[ 2019.11.06.20.08.26.876.0 ]--
r 17     private Stack<Coord> coordSt = new Stack<>();
--[ 2019.11.06.20.08.26.949.0 ]--
r 17     private Stack<Coord> coordSta = new Stack<>();
--[ 2019.11.06.20.08.27.082.0 ]--
r 17     private Stack<Coord> coordStac = new Stack<>();
--[ 2019.11.06.20.08.27.206.0 ]--
r 17     private Stack<Coord> coordStack = new Stack<>();
--[ 2019.11.06.20.08.27.413.0 ]--
r 17     private Stack<Coord> coordStack  = new Stack<>();
--[ 2019.11.06.20.08.27.509.0 ]--
r 17     private Stack<Coord> coordStack = new Stack<>();
--[ 2019.11.06.20.08.28.737.0 ]--
r 17     private Stack<Coord>  = new Stack<>();
--[ 2019.11.06.20.08.29.686.0 ]--
r 17     private Stack<Coord> c = new Stack<>();
--[ 2019.11.06.20.08.29.881.0 ]--
r 17     private Stack<Coord> co = new Stack<>();
--[ 2019.11.06.20.08.29.977.0 ]--
r 17     private Stack<Coord> coo = new Stack<>();
--[ 2019.11.06.20.08.30.113.0 ]--
r 17     private Stack<Coord> coor = new Stack<>();
--[ 2019.11.06.20.08.32.094.0 ]--
r 17     private Stack<Coord> coo = new Stack<>();
--[ 2019.11.06.20.08.32.211.0 ]--
r 17     private Stack<Coord> co = new Stack<>();
--[ 2019.11.06.20.08.32.515.0 ]--
r 17     private Stack<Coord> c = new Stack<>();
--[ 2019.11.06.20.08.32.706.0 ]--
r 17     private Stack<Coord>  = new Stack<>();
--[ 2019.11.06.20.08.51.298.0 ]--
r 17     private Stack<Coord> s = new Stack<>();
--[ 2019.11.06.20.08.51.823.0 ]--
r 17     private Stack<Coord> st = new Stack<>();
--[ 2019.11.06.20.08.51.899.0 ]--
r 17     private Stack<Coord> sta = new Stack<>();
--[ 2019.11.06.20.08.52.395.0 ]--
r 17     private Stack<Coord> st = new Stack<>();
--[ 2019.11.06.20.08.52.532.0 ]--
r 17     private Stack<Coord> s = new Stack<>();
--[ 2019.11.06.20.08.52.951.0 ]--
r 17     private Stack<Coord>  = new Stack<>();
--[ 2019.11.06.20.08.53.469.0 ]--
r 17     private Stack<Coord> c = new Stack<>();
--[ 2019.11.06.20.08.53.581.0 ]--
r 17     private Stack<Coord> co = new Stack<>();
--[ 2019.11.06.20.08.54.998.0 ]--
r 17     private Stack<Coord> coordStack = new Stack<>();
--[ 2019.11.06.20.08.56.722.0 ]--
r 17     private Stack<Coord> coordStack  = new Stack<>();
--[ 2019.11.06.20.08.56.775.0 ]--
r 17     private Stack<Coord> coordStack = new Stack<>();
--[ 2019.11.06.20.09.05.346.0 ]--
r 132         return ;
--[ 2019.11.06.20.09.05.493.0 ]--
r 132         return c;
--[ 2019.11.06.20.09.05.578.0 ]--
r 132         return co;
--[ 2019.11.06.20.09.05.677.0 ]--
r 132         return coo;
--[ 2019.11.06.20.09.05.772.0 ]--
r 132         return coor;
--[ 2019.11.06.20.09.05.963.0 ]--
r 132         return coord;
--[ 2019.11.06.20.09.06.173.0 ]--
r 132         return coordS;
--[ 2019.11.06.20.09.06.290.0 ]--
r 132         return coordSt;
--[ 2019.11.06.20.09.06.355.0 ]--
r 132         return coordSta;
--[ 2019.11.06.20.09.06.475.0 ]--
r 132         return coordStac;
--[ 2019.11.06.20.09.06.577.0 ]--
r 132         return coordStack;
--[ 2019.11.06.20.09.06.765.0 ]--
r 132         return coordStack ;
--[ 2019.11.06.20.09.06.843.0 ]--
r 132         return coordStack;
--[ 2019.11.06.20.09.10.369.0 ]--
+ 128         
--[ 2019.11.06.20.09.11.180.0 ]--
r 128         /
--[ 2019.11.06.20.09.11.280.0 ]--
r 128         /*
--[ 2019.11.06.20.09.12.941.0 ]--
r 132     
--[ 2019.11.06.20.09.13.192.0 ]--
r 132         
--[ 2019.11.06.20.09.13.342.0 ]--
r 132             
--[ 2019.11.06.20.09.13.761.0 ]--
r 132            
--[ 2019.11.06.20.09.14.426.0 ]--
r 132           
--[ 2019.11.06.20.09.14.795.0 ]--
r 132          
--[ 2019.11.06.20.09.15.190.0 ]--
r 132          *
--[ 2019.11.06.20.09.15.437.0 ]--
r 132          
--[ 2019.11.06.20.09.15.555.0 ]--
r 132         
--[ 2019.11.06.20.09.15.807.0 ]--
r 132         *
--[ 2019.11.06.20.09.15.908.0 ]--
r 132         */
--[ 2019.11.06.20.09.16.695.0 ]--
r 132         */ 
--[ 2019.11.06.20.09.16.734.0 ]--
r 132         */
--[ 2019.11.06.20.09.16.913.0 ]--
+ 133         
--[ 2019.11.06.20.09.19.922.0 ]--
+ 107         
--[ 2019.11.06.20.09.21.211.0 ]--
r 107          
--[ 2019.11.06.20.09.21.280.0 ]--
r 107         
--[ 2019.11.06.20.09.21.410.0 ]--
- 106
--[ 2019.11.06.20.09.21.529.0 ]--
- 106
--[ 2019.11.06.20.09.24.112.0 ]--
r 108         
--[ 2019.11.06.20.09.24.231.0 ]--
- 106
--[ 2019.11.06.20.09.26.643.0 ]--
r 107         c
--[ 2019.11.06.20.09.26.936.0 ]--
r 107         
--[ 2019.11.06.20.09.27.149.0 ]--
r 107         c
--[ 2019.11.06.20.09.27.253.0 ]--
r 107         co
--[ 2019.11.06.20.09.27.348.0 ]--
r 107         coo
--[ 2019.11.06.20.09.27.406.0 ]--
r 107         coor
--[ 2019.11.06.20.09.27.566.0 ]--
r 107         coord
--[ 2019.11.06.20.09.27.817.0 ]--
r 107         coordStack
--[ 2019.11.06.20.09.28.320.0 ]--
r 107         coordStack.
--[ 2019.11.06.20.09.29.056.0 ]--
r 107         coordStack.p
--[ 2019.11.06.20.09.29.213.0 ]--
r 107         coordStack.pu
--[ 2019.11.06.20.09.29.765.0 ]--
r 107         coordStack.pus
--[ 2019.11.06.20.09.29.867.0 ]--
r 107         coordStack.push
--[ 2019.11.06.20.09.30.310.0 ]--
r 107         coordStack.push()
--[ 2019.11.06.20.09.30.821.0 ]--
r 107         coordStack.push( )
--[ 2019.11.06.20.09.30.861.0 ]--
r 107         coordStack.push()
--[ 2019.11.06.20.09.31.093.0 ]--
r 107         coordStack.push(s)
--[ 2019.11.06.20.09.31.274.0 ]--
r 107         coordStack.push(st)
--[ 2019.11.06.20.09.31.330.0 ]--
r 107         coordStack.push(sta)
--[ 2019.11.06.20.09.31.424.0 ]--
r 107         coordStack.push(star)
--[ 2019.11.06.20.09.31.548.0 ]--
r 107         coordStack.push(start)
--[ 2019.11.06.20.09.31.666.0 ]--
r 107         coordStack.push(start.)
--[ 2019.11.06.20.09.32.597.0 ]--
r 107         coordStack.push(start.getCoord)
--[ 2019.11.06.20.09.32.604.0 ]--
r 107         coordStack.push(start.getCoord())
--[ 2019.11.06.20.09.33.919.0 ]--
r 107         coordStack.push(start.getCoord());
--[ 2019.11.06.20.09.34.122.0 ]--
+ 108         
--[ 2019.11.06.20.09.34.457.0 ]--
r 108         c
--[ 2019.11.06.20.09.34.536.0 ]--
r 108         co
--[ 2019.11.06.20.09.34.657.0 ]--
r 108         coo
--[ 2019.11.06.20.09.34.784.0 ]--
r 108         cood
--[ 2019.11.06.20.09.35.419.0 ]--
r 108         coo
--[ 2019.11.06.20.09.35.542.0 ]--
r 108         coor
--[ 2019.11.06.20.09.36.161.0 ]--
r 108         coordStack
--[ 2019.11.06.20.09.36.610.0 ]--
r 108         coordStack.
--[ 2019.11.06.20.09.36.931.0 ]--
r 108         coordStack.p
--[ 2019.11.06.20.09.36.989.0 ]--
r 108         coordStack.pu
--[ 2019.11.06.20.09.37.098.0 ]--
r 108         coordStack.pus
--[ 2019.11.06.20.09.37.173.0 ]--
r 108         coordStack.push
--[ 2019.11.06.20.09.37.361.0 ]--
r 108         coordStack.push()
--[ 2019.11.06.20.09.38.174.0 ]--
r 108         coordStack.push(e)
--[ 2019.11.06.20.09.38.262.0 ]--
r 108         coordStack.push(en)
--[ 2019.11.06.20.09.38.324.0 ]--
r 108         coordStack.push(end)
--[ 2019.11.06.20.09.38.513.0 ]--
r 108         coordStack.push(end.)
--[ 2019.11.06.20.09.38.628.0 ]--
r 108         coordStack.push(end.g)
--[ 2019.11.06.20.09.38.696.0 ]--
r 108         coordStack.push(end.ge)
--[ 2019.11.06.20.09.39.055.0 ]--
r 108         coordStack.push(end.getCoord)
--[ 2019.11.06.20.09.39.067.0 ]--
r 108         coordStack.push(end.getCoord())
--[ 2019.11.06.20.09.40.442.0 ]--
r 108         coordStack.push(end.getCoord());
--[ 2019.11.06.20.09.42.542.0 ]--
r 108         coordStack.push(end.getCoord()); 
--[ 2019.11.06.20.09.42.602.0 ]--
r 108         coordStack.push(end.getCoord());
--[ 2019.11.06.20.09.44.478.0 ]--
r 103 
r 106 
r 132 
--[ 2019.11.06.20.09.45.665.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.10.19.657.0 ]--
- 102
- 103
- 103
- 104
- 104
--[ 2019.11.06.20.10.19.775.0 ]--
- 102
r 102         
--[ 2019.11.06.20.10.23.423.0 ]--
r 121         
--[ 2019.11.06.20.10.24.710.0 ]--
r 125         /
--[ 2019.11.06.20.10.25.714.0 ]--
r 125         
--[ 2019.11.06.20.10.27.591.0 ]--
r 127         return s;
--[ 2019.11.06.20.10.31.816.0 ]--
r 17 
--[ 2019.11.06.20.10.31.979.0 ]--
- 17
--[ 2019.11.06.20.10.34.199.0 ]--
r 16 
--[ 2019.11.06.20.10.34.338.0 ]--
- 16
--[ 2019.11.06.20.10.36.274.0 ]--
- 63
- 63
- 63
--[ 2019.11.06.20.10.36.426.0 ]--
- 62
--[ 2019.11.06.20.10.41.525.0 ]--
r 25 
--[ 2019.11.06.20.10.41.909.0 ]--
- 25
--[ 2019.11.06.20.10.42.989.0 ]--
+ 25             
--[ 2019.11.06.20.21.23.600.0 ]--
r 25 
r 96 
r 115 
r 119 
--[ 2019.11.06.20.28.59.230.0 ]--
- 96
--[ 2019.11.06.20.28.59.423.0 ]--
+ 96         
--[ 2019.11.06.20.29.04.005.0 ]--
r 96         P
--[ 2019.11.06.20.29.04.072.0 ]--
r 96         PF
--[ 2019.11.06.20.29.05.561.0 ]--
r 96         PF 
--[ 2019.11.06.20.29.05.607.0 ]--
r 96         PF
--[ 2019.11.06.20.29.05.752.0 ]--
r 96         P
--[ 2019.11.06.20.29.05.890.0 ]--
r 96         
--[ 2019.11.06.20.29.07.945.0 ]--
r 96         M
--[ 2019.11.06.20.29.08.215.0 ]--
r 96         Mi
--[ 2019.11.06.20.29.08.247.0 ]--
r 96         Min
--[ 2019.11.06.20.29.08.722.0 ]--
r 96         MinP
--[ 2019.11.06.20.29.08.898.0 ]--
r 96         MinPQ
--[ 2019.11.06.20.29.10.401.0 ]--
r 96         MinPQ<>
--[ 2019.11.06.20.29.24.277.0 ]--
r 96         MinPQ<P>
--[ 2019.11.06.20.29.24.357.0 ]--
r 96         MinPQ<PF>
--[ 2019.11.06.20.29.24.458.0 ]--
r 96         MinPQ<PFN>
--[ 2019.11.06.20.29.25.025.0 ]--
r 96         MinPQ<PFNode>
--[ 2019.11.06.20.29.26.785.0 ]--
r 96         MinPQ<PFNode> 
--[ 2019.11.06.20.29.29.119.0 ]--
r 96         MinPQ<PFNode> p
--[ 2019.11.06.20.29.29.248.0 ]--
r 96         MinPQ<PFNode> pf
--[ 2019.11.06.20.29.29.621.0 ]--
r 96         MinPQ<PFNode> pfQ
--[ 2019.11.06.20.29.30.147.0 ]--
r 96         MinPQ<PFNode> pfQu
--[ 2019.11.06.20.29.30.231.0 ]--
r 96         MinPQ<PFNode> pfQue
--[ 2019.11.06.20.29.30.313.0 ]--
r 96         MinPQ<PFNode> pfQueu
--[ 2019.11.06.20.29.30.387.0 ]--
r 96         MinPQ<PFNode> pfQueue
--[ 2019.11.06.20.29.30.793.0 ]--
r 96         MinPQ<PFNode> pfQueue 
--[ 2019.11.06.20.29.30.913.0 ]--
r 96         MinPQ<PFNode> pfQueue =
--[ 2019.11.06.20.29.31.032.0 ]--
r 96         MinPQ<PFNode> pfQueue = 
--[ 2019.11.06.20.29.31.134.0 ]--
r 96         MinPQ<PFNode> pfQueue = n
--[ 2019.11.06.20.29.31.209.0 ]--
r 96         MinPQ<PFNode> pfQueue = ne
--[ 2019.11.06.20.29.31.320.0 ]--
r 96         MinPQ<PFNode> pfQueue = new
--[ 2019.11.06.20.29.31.488.0 ]--
r 96         MinPQ<PFNode> pfQueue = new 
--[ 2019.11.06.20.29.32.105.0 ]--
r 96         MinPQ<PFNode> pfQueue = new M
--[ 2019.11.06.20.29.32.208.0 ]--
r 96         MinPQ<PFNode> pfQueue = new MI
--[ 2019.11.06.20.29.32.285.0 ]--
r 96         MinPQ<PFNode> pfQueue = new MIN
--[ 2019.11.06.20.29.32.809.0 ]--
r 96         MinPQ<PFNode> pfQueue = new MI
--[ 2019.11.06.20.29.32.896.0 ]--
r 96         MinPQ<PFNode> pfQueue = new M
--[ 2019.11.06.20.29.33.196.0 ]--
r 96         MinPQ<PFNode> pfQueue = new Mi
--[ 2019.11.06.20.29.33.221.0 ]--
r 96         MinPQ<PFNode> pfQueue = new Min
--[ 2019.11.06.20.29.33.316.0 ]--
r 96         MinPQ<PFNode> pfQueue = new MinP
--[ 2019.11.06.20.29.33.423.0 ]--
r 96         MinPQ<PFNode> pfQueue = new MinPQ
--[ 2019.11.06.20.29.33.967.0 ]--
r 96         MinPQ<PFNode> pfQueue = new MinPQ<>
--[ 2019.11.06.20.29.34.351.0 ]--
r 96         MinPQ<PFNode> pfQueue = new MinPQ<>)
--[ 2019.11.06.20.29.34.727.0 ]--
r 96         MinPQ<PFNode> pfQueue = new MinPQ<>);.
--[ 2019.11.06.20.29.34.955.0 ]--
r 96         MinPQ<PFNode> pfQueue = new MinPQ<>);
--[ 2019.11.06.20.29.35.055.0 ]--
r 96         MinPQ<PFNode> pfQueue = new MinPQ<>)
--[ 2019.11.06.20.29.35.567.0 ]--
r 96         MinPQ<PFNode> pfQueue = new MinPQ<>
--[ 2019.11.06.20.29.35.760.0 ]--
r 96         MinPQ<PFNode> pfQueue = new MinPQ<>()
--[ 2019.11.06.20.29.36.007.0 ]--
r 96         MinPQ<PFNode> pfQueue = new MinPQ<>();l
--[ 2019.11.06.20.29.36.406.0 ]--
r 96         MinPQ<PFNode> pfQueue = new MinPQ<>();
--[ 2019.11.06.20.29.36.722.0 ]--
r 96         MinPQ<PFNode> pfQueue = new MinPQ<>(); 
--[ 2019.11.06.20.29.36.774.0 ]--
r 96         MinPQ<PFNode> pfQueue = new MinPQ<>();
--[ 2019.11.06.20.29.38.309.0 ]--
+ 97         
--[ 2019.11.06.20.29.43.149.0 ]--
r 97         P
--[ 2019.11.06.20.29.43.262.0 ]--
r 97         PF
--[ 2019.11.06.20.29.43.962.0 ]--
r 97         PF 
--[ 2019.11.06.20.29.44.014.0 ]--
r 97         PF
--[ 2019.11.06.20.29.44.190.0 ]--
r 97         PFN
--[ 2019.11.06.20.29.44.377.0 ]--
r 97         PFNo
--[ 2019.11.06.20.29.44.486.0 ]--
r 97         PFNod
--[ 2019.11.06.20.29.44.541.0 ]--
r 97         PFNode
--[ 2019.11.06.20.29.45.362.0 ]--
r 97         PFNode 
--[ 2019.11.06.20.29.45.954.0 ]--
r 97         PFNode s
--[ 2019.11.06.20.29.46.048.0 ]--
r 97         PFNode st
--[ 2019.11.06.20.29.46.146.0 ]--
r 97         PFNode sta
--[ 2019.11.06.20.29.46.229.0 ]--
r 97         PFNode star
--[ 2019.11.06.20.29.46.361.0 ]--
r 97         PFNode start
--[ 2019.11.06.20.29.46.419.0 ]--
r 97         PFNode start 
--[ 2019.11.06.20.29.46.537.0 ]--
r 97         PFNode start =
--[ 2019.11.06.20.29.46.600.0 ]--
r 97         PFNode start = 
--[ 2019.11.06.20.29.46.726.0 ]--
r 97         PFNode start = n
--[ 2019.11.06.20.29.46.929.0 ]--
r 97         PFNode start = nw
--[ 2019.11.06.20.29.47.174.0 ]--
r 97         PFNode start = n
--[ 2019.11.06.20.29.47.229.0 ]--
r 97         PFNode start = ne
--[ 2019.11.06.20.29.47.394.0 ]--
r 97         PFNode start = new
--[ 2019.11.06.20.29.47.637.0 ]--
r 97         PFNode start = new 
--[ 2019.11.06.20.29.48.022.0 ]--
r 97         PFNode start = new P
--[ 2019.11.06.20.29.48.155.0 ]--
r 97         PFNode start = new PF
--[ 2019.11.06.20.29.48.689.0 ]--
r 97         PFNode start = new PFN
--[ 2019.11.06.20.29.48.838.0 ]--
r 97         PFNode start = new PFNo
--[ 2019.11.06.20.29.49.051.0 ]--
r 97         PFNode start = new PFNod
--[ 2019.11.06.20.29.49.105.0 ]--
r 97         PFNode start = new PFNode
--[ 2019.11.06.20.29.49.339.0 ]--
r 97         PFNode start = new PFNode()
--[ 2019.11.06.20.29.49.776.0 ]--
r 97         PFNode start = new PFNode(t)
--[ 2019.11.06.20.29.49.817.0 ]--
r 97         PFNode start = new PFNode(th)
--[ 2019.11.06.20.29.49.879.0 ]--
r 97         PFNode start = new PFNode(thi)
--[ 2019.11.06.20.29.49.919.0 ]--
r 97         PFNode start = new PFNode(this)
--[ 2019.11.06.20.29.50.050.0 ]--
r 97         PFNode start = new PFNode(this.)
--[ 2019.11.06.20.29.50.230.0 ]--
r 97         PFNode start = new PFNode(this.s)
--[ 2019.11.06.20.29.50.382.0 ]--
r 97         PFNode start = new PFNode(this.st)
--[ 2019.11.06.20.29.50.428.0 ]--
r 97         PFNode start = new PFNode(this.sta)
--[ 2019.11.06.20.29.50.539.0 ]--
r 97         PFNode start = new PFNode(this.star)
--[ 2019.11.06.20.29.50.686.0 ]--
r 97         PFNode start = new PFNode(this.start)
--[ 2019.11.06.20.29.50.809.0 ]--
r 97         PFNode start = new PFNode(this.start,)
--[ 2019.11.06.20.29.50.911.0 ]--
r 97         PFNode start = new PFNode(this.start, )
--[ 2019.11.06.20.29.51.120.0 ]--
r 97         PFNode start = new PFNode(this.start, n)
--[ 2019.11.06.20.29.51.187.0 ]--
r 97         PFNode start = new PFNode(this.start, nu)
--[ 2019.11.06.20.29.51.387.0 ]--
r 97         PFNode start = new PFNode(this.start, nul)
--[ 2019.11.06.20.29.51.485.0 ]--
r 97         PFNode start = new PFNode(this.start, null)
--[ 2019.11.06.20.29.51.851.0 ]--
r 97         PFNode start = new PFNode(this.start, null);
--[ 2019.11.06.20.29.52.021.0 ]--
+ 98         
--[ 2019.11.06.20.29.53.557.0 ]--
r 98         p
--[ 2019.11.06.20.29.53.624.0 ]--
r 98         pf
--[ 2019.11.06.20.29.53.817.0 ]--
r 98         pfN
--[ 2019.11.06.20.29.53.950.0 ]--
r 98         pfNo
--[ 2019.11.06.20.29.54.006.0 ]--
r 98         pfNod
--[ 2019.11.06.20.29.54.184.0 ]--
r 98         pfNo
--[ 2019.11.06.20.29.54.280.0 ]--
r 98         pfN
--[ 2019.11.06.20.29.54.367.0 ]--
r 98         pf
--[ 2019.11.06.20.29.54.474.0 ]--
r 98         p
--[ 2019.11.06.20.29.54.601.0 ]--
r 98         
--[ 2019.11.06.20.29.54.746.0 ]--
r 98         P
--[ 2019.11.06.20.29.54.862.0 ]--
r 98         PF
--[ 2019.11.06.20.29.54.964.0 ]--
r 98         PFN
--[ 2019.11.06.20.29.55.134.0 ]--
r 98         PFNo
--[ 2019.11.06.20.29.55.207.0 ]--
r 98         PFNod
--[ 2019.11.06.20.29.55.277.0 ]--
r 98         PFNode
--[ 2019.11.06.20.29.55.389.0 ]--
r 98         PFNode 
--[ 2019.11.06.20.29.55.579.0 ]--
r 98         PFNode e
--[ 2019.11.06.20.29.55.686.0 ]--
r 98         PFNode en
--[ 2019.11.06.20.29.55.774.0 ]--
r 98         PFNode end
--[ 2019.11.06.20.29.55.871.0 ]--
r 98         PFNode end 
--[ 2019.11.06.20.29.56.209.0 ]--
r 98         PFNode end =
--[ 2019.11.06.20.29.56.416.0 ]--
r 98         PFNode end = 
--[ 2019.11.06.20.29.56.502.0 ]--
r 98         PFNode end = n
--[ 2019.11.06.20.29.56.560.0 ]--
r 98         PFNode end = ne
--[ 2019.11.06.20.29.57.177.0 ]--
r 98         PFNode end = new
--[ 2019.11.06.20.29.57.264.0 ]--
r 98         PFNode end = new 
--[ 2019.11.06.20.29.57.385.0 ]--
r 98         PFNode end = new P
--[ 2019.11.06.20.29.57.478.0 ]--
r 98         PFNode end = new PF
--[ 2019.11.06.20.29.57.610.0 ]--
r 98         PFNode end = new PFN
--[ 2019.11.06.20.29.57.774.0 ]--
r 98         PFNode end = new PFNo
--[ 2019.11.06.20.29.57.842.0 ]--
r 98         PFNode end = new PFNod
--[ 2019.11.06.20.29.57.915.0 ]--
r 98         PFNode end = new PFNode
--[ 2019.11.06.20.29.58.091.0 ]--
r 98         PFNode end = new PFNode()
--[ 2019.11.06.20.29.58.408.0 ]--
r 98         PFNode end = new PFNode(t)
--[ 2019.11.06.20.29.58.507.0 ]--
r 98         PFNode end = new PFNode(th)
--[ 2019.11.06.20.29.58.553.0 ]--
r 98         PFNode end = new PFNode(thi)
--[ 2019.11.06.20.29.58.591.0 ]--
r 98         PFNode end = new PFNode(this)
--[ 2019.11.06.20.29.58.741.0 ]--
r 98         PFNode end = new PFNode(this.)
--[ 2019.11.06.20.29.58.838.0 ]--
r 98         PFNode end = new PFNode(this.e)
--[ 2019.11.06.20.29.58.987.0 ]--
r 98         PFNode end = new PFNode(this.en)
--[ 2019.11.06.20.29.59.081.0 ]--
r 98         PFNode end = new PFNode(this.end)
--[ 2019.11.06.20.29.59.227.0 ]--
r 98         PFNode end = new PFNode(this.end,)
--[ 2019.11.06.20.29.59.312.0 ]--
r 98         PFNode end = new PFNode(this.end, )
--[ 2019.11.06.20.29.59.681.0 ]--
r 98         PFNode end = new PFNode(this.end, b)
--[ 2019.11.06.20.30.00.117.0 ]--
r 98         PFNode end = new PFNode(this.end, )
--[ 2019.11.06.20.30.01.421.0 ]--
r 98         PFNode end = new PFNode(this.end, s)
--[ 2019.11.06.20.30.01.587.0 ]--
r 98         PFNode end = new PFNode(this.end, st)
--[ 2019.11.06.20.30.01.651.0 ]--
r 98         PFNode end = new PFNode(this.end, sta)
--[ 2019.11.06.20.30.01.748.0 ]--
r 98         PFNode end = new PFNode(this.end, star)
--[ 2019.11.06.20.30.01.847.0 ]--
r 98         PFNode end = new PFNode(this.end, start)
--[ 2019.11.06.20.30.02.385.0 ]--
r 98         PFNode end = new PFNode(this.end, start);
--[ 2019.11.06.20.30.02.629.0 ]--
+ 99         
--[ 2019.11.06.20.30.03.528.0 ]--
+ 99         
--[ 2019.11.06.20.30.22.396.0 ]--
+ 16     
--[ 2019.11.06.20.30.22.745.0 ]--
r 16     p
--[ 2019.11.06.20.30.22.843.0 ]--
r 16     pr
--[ 2019.11.06.20.30.22.946.0 ]--
r 16     pri
--[ 2019.11.06.20.30.23.032.0 ]--
r 16     priv
--[ 2019.11.06.20.30.23.172.0 ]--
r 16     priva
--[ 2019.11.06.20.30.23.265.0 ]--
r 16     privat
--[ 2019.11.06.20.30.23.343.0 ]--
r 16     private
--[ 2019.11.06.20.30.23.493.0 ]--
r 16     private 
--[ 2019.11.06.20.30.28.170.0 ]--
r 16     private S
--[ 2019.11.06.20.30.28.278.0 ]--
r 16     private St
--[ 2019.11.06.20.30.28.366.0 ]--
r 16     private Sta
--[ 2019.11.06.20.30.28.531.0 ]--
r 16     private Stac
--[ 2019.11.06.20.30.28.642.0 ]--
r 16     private Stacl
--[ 2019.11.06.20.30.29.609.0 ]--
r 16     private Stac
--[ 2019.11.06.20.30.29.838.0 ]--
r 16     private Stack
--[ 2019.11.06.20.30.30.019.0 ]--
r 16     private Stack<>
--[ 2019.11.06.20.30.30.086.0 ]--
r 16     private Stack<C>
--[ 2019.11.06.20.30.30.246.0 ]--
r 16     private Stack<Co>
--[ 2019.11.06.20.30.30.362.0 ]--
r 16     private Stack<Coo>
--[ 2019.11.06.20.30.30.440.0 ]--
r 16     private Stack<Coor>
--[ 2019.11.06.20.30.30.618.0 ]--
r 16     private Stack<Coord>
--[ 2019.11.06.20.30.31.302.0 ]--
r 16     private Stack<Coord> 
--[ 2019.11.06.20.30.35.786.0 ]--
r 16     private Stack<Coord> s
--[ 2019.11.06.20.30.36.878.0 ]--
r 16     private Stack<Coord> s;
--[ 2019.11.06.20.30.37.529.0 ]--
r 16     private Stack<Coord> s; 
--[ 2019.11.06.20.30.37.681.0 ]--
r 16     private Stack<Coord> s;
--[ 2019.11.06.20.30.46.774.0 ]--
- 102
--[ 2019.11.06.20.30.47.067.0 ]--
+ 100         
--[ 2019.11.06.20.30.50.710.0 ]--
+ 17     
--[ 2019.11.06.20.30.51.185.0 ]--
r 17     p
--[ 2019.11.06.20.30.51.246.0 ]--
r 17     pr
--[ 2019.11.06.20.30.51.371.0 ]--
r 17     pri
--[ 2019.11.06.20.30.51.455.0 ]--
r 17     priv
--[ 2019.11.06.20.30.51.597.0 ]--
r 17     priva
--[ 2019.11.06.20.30.51.747.0 ]--
r 17     privat
--[ 2019.11.06.20.30.51.837.0 ]--
r 17     private
--[ 2019.11.06.20.30.52.074.0 ]--
r 17     private 
--[ 2019.11.06.20.30.52.611.0 ]--
r 17     private l
--[ 2019.11.06.20.30.52.728.0 ]--
r 17     private lo
--[ 2019.11.06.20.30.52.832.0 ]--
r 17     private loc
--[ 2019.11.06.20.30.52.918.0 ]--
r 17     private loca
--[ 2019.11.06.20.30.53.032.0 ]--
r 17     private locat
--[ 2019.11.06.20.30.53.054.0 ]--
r 17     private locati
--[ 2019.11.06.20.30.53.134.0 ]--
r 17     private locatio
--[ 2019.11.06.20.30.53.241.0 ]--
r 17     private location
--[ 2019.11.06.20.30.53.663.0 ]--
r 17     private location;
--[ 2019.11.06.20.30.56.093.0 ]--
r 17     private Clocation;
--[ 2019.11.06.20.30.56.198.0 ]--
r 17     private Colocation;
--[ 2019.11.06.20.30.56.301.0 ]--
r 17     private Coolocation;
--[ 2019.11.06.20.30.56.378.0 ]--
r 17     private Coorlocation;
--[ 2019.11.06.20.30.56.537.0 ]--
r 17     private Coordlocation;
--[ 2019.11.06.20.30.56.617.0 ]--
r 17     private Coord location;
--[ 2019.11.06.20.30.59.134.0 ]--
- 27
--[ 2019.11.06.20.30.59.319.0 ]--
+ 27             
--[ 2019.11.06.20.30.59.809.0 ]--
r 27             l
--[ 2019.11.06.20.31.00.122.0 ]--
r 27             lo
--[ 2019.11.06.20.31.00.198.0 ]--
r 27             loc
--[ 2019.11.06.20.31.00.302.0 ]--
r 27             loca
--[ 2019.11.06.20.31.00.402.0 ]--
r 27             locat
--[ 2019.11.06.20.31.00.451.0 ]--
r 27             locati
--[ 2019.11.06.20.31.00.511.0 ]--
r 27             locatio
--[ 2019.11.06.20.31.00.594.0 ]--
r 27             location
--[ 2019.11.06.20.31.00.721.0 ]--
r 27             location 
--[ 2019.11.06.20.31.00.776.0 ]--
r 27             location =
--[ 2019.11.06.20.31.00.882.0 ]--
r 27             location = 
--[ 2019.11.06.20.31.00.968.0 ]--
r 27             location = l
--[ 2019.11.06.20.31.01.175.0 ]--
r 27             location = lc
--[ 2019.11.06.20.31.01.423.0 ]--
r 27             location = l
--[ 2019.11.06.20.31.01.592.0 ]--
r 27             location = loi
--[ 2019.11.06.20.31.01.638.0 ]--
r 27             location = loic
--[ 2019.11.06.20.31.02.039.0 ]--
r 27             location = loi
--[ 2019.11.06.20.31.02.176.0 ]--
r 27             location = lo
--[ 2019.11.06.20.31.02.248.0 ]--
r 27             location = loc
--[ 2019.11.06.20.31.02.334.0 ]--
r 27             location = loc;
--[ 2019.11.06.20.31.02.841.0 ]--
r 27             location = loc; 
--[ 2019.11.06.20.31.02.898.0 ]--
r 27             location = loc;
--[ 2019.11.06.20.31.04.864.0 ]--
+ 64         
--[ 2019.11.06.20.31.04.999.0 ]--
+ 64         
--[ 2019.11.06.20.31.06.332.0 ]--
r 65         p
--[ 2019.11.06.20.31.06.396.0 ]--
r 65         pu
--[ 2019.11.06.20.31.06.458.0 ]--
r 65         pug
--[ 2019.11.06.20.31.06.533.0 ]--
r 65         pugl
--[ 2019.11.06.20.31.06.664.0 ]--
r 65         pugli
--[ 2019.11.06.20.31.06.809.0 ]--
r 65         puglic
--[ 2019.11.06.20.31.07.119.0 ]--
r 65         pugli
--[ 2019.11.06.20.31.07.232.0 ]--
r 65         pugl
--[ 2019.11.06.20.31.07.345.0 ]--
r 65         pug
--[ 2019.11.06.20.31.07.462.0 ]--
r 65         pu
--[ 2019.11.06.20.31.07.590.0 ]--
r 65         pub
--[ 2019.11.06.20.31.07.645.0 ]--
r 65         publ
--[ 2019.11.06.20.31.07.792.0 ]--
r 65         publi
--[ 2019.11.06.20.31.07.895.0 ]--
r 65         public
--[ 2019.11.06.20.31.08.028.0 ]--
r 65         public 
--[ 2019.11.06.20.31.08.108.0 ]--
r 65         public g
--[ 2019.11.06.20.31.08.191.0 ]--
r 65         public ge
--[ 2019.11.06.20.31.08.301.0 ]--
r 65         public get
--[ 2019.11.06.20.31.09.651.0 ]--
r 65         public getC
--[ 2019.11.06.20.31.09.800.0 ]--
r 65         public getCo
--[ 2019.11.06.20.31.09.915.0 ]--
r 65         public getCoo
--[ 2019.11.06.20.31.10.057.0 ]--
r 65         public getCoor
--[ 2019.11.06.20.31.10.685.0 ]--
r 65         public getCoord
--[ 2019.11.06.20.31.11.033.0 ]--
r 65         public getCoord()
--[ 2019.11.06.20.31.12.742.0 ]--
r 65         public getCoord(){}
--[ 2019.11.06.20.31.12.908.0 ]--
+ 65         public getCoord(){
r 66         }
--[ 2019.11.06.20.31.12.938.0 ]--
+ 66             
--[ 2019.11.06.20.31.14.230.0 ]--
r 66             r
--[ 2019.11.06.20.31.14.306.0 ]--
r 66             re
--[ 2019.11.06.20.31.14.434.0 ]--
r 66             ret
--[ 2019.11.06.20.31.14.523.0 ]--
r 66             retu
--[ 2019.11.06.20.31.14.586.0 ]--
r 66             retur
--[ 2019.11.06.20.31.14.670.0 ]--
r 66             return
--[ 2019.11.06.20.31.14.777.0 ]--
r 66             return 
--[ 2019.11.06.20.31.16.653.0 ]--
r 65         public CgetCoord(){
--[ 2019.11.06.20.31.16.750.0 ]--
r 65         public CogetCoord(){
--[ 2019.11.06.20.31.16.838.0 ]--
r 65         public CoogetCoord(){
--[ 2019.11.06.20.31.16.929.0 ]--
r 65         public CoorgetCoord(){
--[ 2019.11.06.20.31.17.073.0 ]--
r 65         public CoordgetCoord(){
--[ 2019.11.06.20.31.17.114.0 ]--
r 65         public Coord getCoord(){
--[ 2019.11.06.20.31.19.972.0 ]--
r 66             return l
--[ 2019.11.06.20.31.20.125.0 ]--
r 66             return lo
--[ 2019.11.06.20.31.20.202.0 ]--
r 66             return loc
--[ 2019.11.06.20.31.21.244.0 ]--
r 66             return location
--[ 2019.11.06.20.31.21.521.0 ]--
r 66             return location;
--[ 2019.11.06.20.31.27.882.0 ]--
r 106         s
--[ 2019.11.06.20.31.28.412.0 ]--
r 106         s.
--[ 2019.11.06.20.31.29.030.0 ]--
r 106         s. 
--[ 2019.11.06.20.31.29.063.0 ]--
r 106         s.
--[ 2019.11.06.20.31.29.607.0 ]--
r 106         s.i
--[ 2019.11.06.20.31.29.970.0 ]--
r 106         s.in
--[ 2019.11.06.20.31.30.377.0 ]--
r 106         s.ins
--[ 2019.11.06.20.31.30.762.0 ]--
r 106         s.
--[ 2019.11.06.20.31.31.125.0 ]--
r 106         s
--[ 2019.11.06.20.31.31.289.0 ]--
r 106         
--[ 2019.11.06.20.31.31.677.0 ]--
- 105
--[ 2019.11.06.20.31.32.053.0 ]--
r 105          
--[ 2019.11.06.20.31.32.118.0 ]--
r 105         
--[ 2019.11.06.20.31.34.562.0 ]--
r 105          
--[ 2019.11.06.20.31.34.587.0 ]--
r 105         
--[ 2019.11.06.20.31.34.782.0 ]--
+ 105         
--[ 2019.11.06.20.31.34.972.0 ]--
r 106         s
--[ 2019.11.06.20.31.35.618.0 ]--
r 106         s 
--[ 2019.11.06.20.31.35.713.0 ]--
r 106         s =
--[ 2019.11.06.20.31.35.790.0 ]--
r 106         s = 
--[ 2019.11.06.20.31.35.941.0 ]--
r 106         s = n
--[ 2019.11.06.20.31.35.980.0 ]--
r 106         s = ne
--[ 2019.11.06.20.31.36.130.0 ]--
r 106         s = new
--[ 2019.11.06.20.31.36.262.0 ]--
r 106         s = new 
--[ 2019.11.06.20.31.36.432.0 ]--
r 106         s = new
--[ 2019.11.06.20.31.38.534.0 ]--
r 106         s = new 
--[ 2019.11.06.20.31.39.395.0 ]--
r 106         s = new S
--[ 2019.11.06.20.31.39.563.0 ]--
r 106         s = new St
--[ 2019.11.06.20.31.39.670.0 ]--
r 106         s = new Sta
--[ 2019.11.06.20.31.40.535.0 ]--
r 106         s = new Stac
--[ 2019.11.06.20.31.40.616.0 ]--
r 106         s = new Stacl
--[ 2019.11.06.20.31.40.972.0 ]--
r 106         s = new Stacl<>
--[ 2019.11.06.20.31.41.313.0 ]--
r 106         s = new Stacl<
--[ 2019.11.06.20.31.41.404.0 ]--
r 106         s = new Stacl
--[ 2019.11.06.20.31.41.512.0 ]--
r 106         s = new Stac
--[ 2019.11.06.20.31.41.839.0 ]--
r 106         s = new Sta
--[ 2019.11.06.20.31.42.335.0 ]--
r 106         s = new Stac
--[ 2019.11.06.20.31.42.414.0 ]--
r 106         s = new Stack
--[ 2019.11.06.20.31.42.601.0 ]--
r 106         s = new Stack<>
--[ 2019.11.06.20.31.43.054.0 ]--
r 106         s = new Stack<>;
--[ 2019.11.06.20.31.43.296.0 ]--
r 106         s = new Stack<>
--[ 2019.11.06.20.31.43.478.0 ]--
r 106         s = new Stack<>()
--[ 2019.11.06.20.31.43.728.0 ]--
r 106         s = new Stack<>();
--[ 2019.11.06.20.31.44.477.0 ]--
r 106         s = new Stack<>(); 
--[ 2019.11.06.20.31.44.528.0 ]--
r 106         s = new Stack<>();
--[ 2019.11.06.20.31.48.448.0 ]--
+ 107         
--[ 2019.11.06.20.31.48.808.0 ]--
+ 107         
--[ 2019.11.06.20.31.48.913.0 ]--
r 108         s
--[ 2019.11.06.20.31.48.980.0 ]--
r 108         s.
--[ 2019.11.06.20.31.50.385.0 ]--
r 108         s.p
--[ 2019.11.06.20.31.50.451.0 ]--
r 108         s.pu
--[ 2019.11.06.20.31.50.631.0 ]--
r 108         s.pus
--[ 2019.11.06.20.31.50.722.0 ]--
r 108         s.push
--[ 2019.11.06.20.31.52.326.0 ]--
r 108         s.push()
--[ 2019.11.06.20.31.52.797.0 ]--
r 108         s.push(s)
--[ 2019.11.06.20.31.52.924.0 ]--
r 108         s.push(st)
--[ 2019.11.06.20.31.53.016.0 ]--
r 108         s.push(sta)
--[ 2019.11.06.20.31.53.072.0 ]--
r 108         s.push(star)
--[ 2019.11.06.20.31.53.239.0 ]--
r 108         s.push(start)
--[ 2019.11.06.20.31.53.325.0 ]--
r 108         s.push(start.)
--[ 2019.11.06.20.31.53.652.0 ]--
r 108         s.push(start.g)
--[ 2019.11.06.20.31.53.702.0 ]--
r 108         s.push(start.ge)
--[ 2019.11.06.20.31.53.826.0 ]--
r 108         s.push(start.gete)
--[ 2019.11.06.20.31.53.925.0 ]--
+ 108         s.push(start.gete
r 109         )
--[ 2019.11.06.20.31.54.622.0 ]--
- 108
r 108         s.push(start.gete)
--[ 2019.11.06.20.31.55.503.0 ]--
r 108         s.push(start.get)
--[ 2019.11.06.20.31.55.987.0 ]--
r 108         s.push(start.getc)
--[ 2019.11.06.20.31.56.508.0 ]--
r 108         s.push(start.getCoord)
--[ 2019.11.06.20.31.56.521.0 ]--
r 108         s.push(start.getCoord())
--[ 2019.11.06.20.31.57.504.0 ]--
r 108         s.push(start.getCoord());
--[ 2019.11.06.20.31.58.419.0 ]--
+ 109         
--[ 2019.11.06.20.31.58.938.0 ]--
r 109         s
--[ 2019.11.06.20.31.59.018.0 ]--
r 109         s.
--[ 2019.11.06.20.31.59.437.0 ]--
r 109         s.p
--[ 2019.11.06.20.31.59.494.0 ]--
r 109         s.pu
--[ 2019.11.06.20.31.59.661.0 ]--
r 109         s.pus
--[ 2019.11.06.20.31.59.752.0 ]--
r 109         s.push
--[ 2019.11.06.20.32.00.233.0 ]--
r 109         s.push()
--[ 2019.11.06.20.32.00.249.0 ]--
r 109         s.push();
--[ 2019.11.06.20.32.01.363.0 ]--
r 109         s.push(e);
--[ 2019.11.06.20.32.01.433.0 ]--
r 109         s.push(en);
--[ 2019.11.06.20.32.01.533.0 ]--
r 109         s.push(end);
--[ 2019.11.06.20.32.01.941.0 ]--
r 109         s.push(end.);
--[ 2019.11.06.20.32.02.560.0 ]--
r 109         s.push(end.getCoord);
--[ 2019.11.06.20.32.02.577.0 ]--
r 109         s.push(end.getCoord());
--[ 2019.11.06.20.32.07.626.0 ]--
r 128     
--[ 2019.11.06.20.32.08.242.0 ]--
r 128         
--[ 2019.11.06.20.32.09.949.0 ]--
r 128          
--[ 2019.11.06.20.32.10.028.0 ]--
r 128         
--[ 2019.11.06.20.32.11.782.0 ]--
r 128         /
--[ 2019.11.06.20.32.11.939.0 ]--
r 128         /*
--[ 2019.11.06.20.32.13.542.0 ]--
r 132     
--[ 2019.11.06.20.32.14.179.0 ]--
r 132         
--[ 2019.11.06.20.32.14.516.0 ]--
r 132         *
--[ 2019.11.06.20.32.14.701.0 ]--
r 132         */
--[ 2019.11.06.20.32.18.071.0 ]--
r 64 
r 105 
r 107 
r 110 
--[ 2019.11.06.20.32.19.297.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.32.26.875.0 ]--
r 109         s.push(end.getCoord()); 
--[ 2019.11.06.20.32.26.914.0 ]--
r 109         s.push(end.getCoord());
--[ 2019.11.06.20.32.27.728.0 ]--
+ 108         
--[ 2019.11.06.20.32.27.809.0 ]--
+ 108         
--[ 2019.11.06.20.32.28.086.0 ]--
r 109             
--[ 2019.11.06.20.32.28.650.0 ]--
r 109         
--[ 2019.11.06.20.32.34.463.0 ]--
r 108         s
--[ 2019.11.06.20.32.34.807.0 ]--
r 108         
--[ 2019.11.06.20.32.35.942.0 ]--
r 108          
--[ 2019.11.06.20.32.35.992.0 ]--
r 108         
--[ 2019.11.06.20.32.36.154.0 ]--
r 108         c
--[ 2019.11.06.20.32.36.273.0 ]--
r 108         co
--[ 2019.11.06.20.32.36.362.0 ]--
r 108         con
--[ 2019.11.06.20.32.36.407.0 ]--
r 108         cons
--[ 2019.11.06.20.32.36.555.0 ]--
r 108         consl
--[ 2019.11.06.20.32.37.067.0 ]--
r 108         cons
--[ 2019.11.06.20.32.37.764.0 ]--
r 108         conso
--[ 2019.11.06.20.32.38.011.0 ]--
r 108         cons
--[ 2019.11.06.20.32.38.070.0 ]--
r 108         con
--[ 2019.11.06.20.32.38.176.0 ]--
r 108         co
--[ 2019.11.06.20.32.38.285.0 ]--
r 108         c
--[ 2019.11.06.20.32.38.685.0 ]--
r 108         
--[ 2019.11.06.20.32.38.874.0 ]--
r 108         S
--[ 2019.11.06.20.32.39.213.0 ]--
r 108         St
--[ 2019.11.06.20.32.39.404.0 ]--
r 108         Std
--[ 2019.11.06.20.32.39.580.0 ]--
r 108         StdO
--[ 2019.11.06.20.32.39.733.0 ]--
r 108         StdOut
--[ 2019.11.06.20.32.39.924.0 ]--
r 108         StdOut.
--[ 2019.11.06.20.32.40.101.0 ]--
r 108         StdOut.p
--[ 2019.11.06.20.32.40.202.0 ]--
r 108         StdOut.pr
--[ 2019.11.06.20.32.40.289.0 ]--
r 108         StdOut.pri
--[ 2019.11.06.20.32.40.341.0 ]--
r 108         StdOut.prin
--[ 2019.11.06.20.32.40.668.0 ]--
r 108         StdOut.println
--[ 2019.11.06.20.32.40.681.0 ]--
r 108         StdOut.println()
--[ 2019.11.06.20.32.40.691.0 ]--
r 108         StdOut.println();
--[ 2019.11.06.20.32.42.637.0 ]--
r 108         StdOut.println(s);
--[ 2019.11.06.20.32.42.775.0 ]--
r 108         StdOut.println(st);
--[ 2019.11.06.20.32.42.833.0 ]--
r 108         StdOut.println(sta);
--[ 2019.11.06.20.32.42.907.0 ]--
r 108         StdOut.println(star);
--[ 2019.11.06.20.32.43.393.0 ]--
r 108         StdOut.println(start);
--[ 2019.11.06.20.32.43.509.0 ]--
r 108         StdOut.println(start.);
--[ 2019.11.06.20.32.43.583.0 ]--
r 108         StdOut.println(start.g);
--[ 2019.11.06.20.32.43.637.0 ]--
r 108         StdOut.println(start.ge);
--[ 2019.11.06.20.32.44.253.0 ]--
r 108         StdOut.println(start.getCoord);
--[ 2019.11.06.20.32.44.266.0 ]--
r 108         StdOut.println(start.getCoord());
--[ 2019.11.06.20.32.45.189.0 ]--
+ 109         
--[ 2019.11.06.20.32.45.532.0 ]--
r 109          
--[ 2019.11.06.20.32.45.583.0 ]--
r 109         
--[ 2019.11.06.20.32.45.755.0 ]--
r 109         S
--[ 2019.11.06.20.32.45.907.0 ]--
r 109         St
--[ 2019.11.06.20.32.46.101.0 ]--
r 109         Std
--[ 2019.11.06.20.32.46.264.0 ]--
r 109         StdO
--[ 2019.11.06.20.32.46.455.0 ]--
r 109         StdOut
--[ 2019.11.06.20.32.46.607.0 ]--
r 109         StdOut.
--[ 2019.11.06.20.32.47.287.0 ]--
r 109         StdOut.p
--[ 2019.11.06.20.32.47.357.0 ]--
r 109         StdOut.pr
--[ 2019.11.06.20.32.47.432.0 ]--
r 109         StdOut.pri
--[ 2019.11.06.20.32.47.482.0 ]--
r 109         StdOut.prin
--[ 2019.11.06.20.32.47.561.0 ]--
r 109         StdOut.print
--[ 2019.11.06.20.32.47.727.0 ]--
r 109         StdOut.printl
--[ 2019.11.06.20.32.47.798.0 ]--
r 109         StdOut.println
--[ 2019.11.06.20.32.47.972.0 ]--
r 109         StdOut.println()
--[ 2019.11.06.20.32.48.407.0 ]--
r 109         StdOut.println(e)
--[ 2019.11.06.20.32.48.522.0 ]--
r 109         StdOut.println(en)
--[ 2019.11.06.20.32.48.586.0 ]--
r 109         StdOut.println(end)
--[ 2019.11.06.20.32.48.727.0 ]--
r 109         StdOut.println(end.)
--[ 2019.11.06.20.32.48.827.0 ]--
r 109         StdOut.println(end.gf)
--[ 2019.11.06.20.32.48.849.0 ]--
r 109         StdOut.println(end.gfe)
--[ 2019.11.06.20.32.49.454.0 ]--
r 109         StdOut.println(end.gf)
--[ 2019.11.06.20.32.49.585.0 ]--
r 109         StdOut.println(end.g)
--[ 2019.11.06.20.32.49.651.0 ]--
r 109         StdOut.println(end.ge)
--[ 2019.11.06.20.32.49.728.0 ]--
r 109         StdOut.println(end.get)
--[ 2019.11.06.20.32.50.247.0 ]--
r 109         StdOut.println(end.getCoord)
--[ 2019.11.06.20.32.50.255.0 ]--
r 109         StdOut.println(end.getCoord())
--[ 2019.11.06.20.32.51.573.0 ]--
r 109         StdOut.println(end.getCoord());
--[ 2019.11.06.20.32.53.480.0 ]--
r 110 
--[ 2019.11.06.20.32.54.795.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.33.10.872.0 ]--
r 109         /StdOut.println(end.getCoord());
--[ 2019.11.06.20.33.11.525.0 ]--
r 109         //StdOut.println(end.getCoord());
--[ 2019.11.06.20.33.14.948.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.33.26.647.0 ]--
r 111         s.push(n);
--[ 2019.11.06.20.33.26.857.0 ]--
r 111         s.push(nw);
--[ 2019.11.06.20.33.26.997.0 ]--
r 111         s.push(nw );
--[ 2019.11.06.20.33.27.368.0 ]--
r 111         s.push(nw);
--[ 2019.11.06.20.33.27.455.0 ]--
r 111         s.push(n);
--[ 2019.11.06.20.33.27.533.0 ]--
r 111         s.push(ne);
--[ 2019.11.06.20.33.27.661.0 ]--
r 111         s.push(new);
--[ 2019.11.06.20.33.27.760.0 ]--
r 111         s.push(new );
--[ 2019.11.06.20.33.27.859.0 ]--
r 111         s.push(new C);
--[ 2019.11.06.20.33.28.009.0 ]--
r 111         s.push(new Co);
--[ 2019.11.06.20.33.28.132.0 ]--
r 111         s.push(new Coo);
--[ 2019.11.06.20.33.28.210.0 ]--
r 111         s.push(new Coor);
--[ 2019.11.06.20.33.28.369.0 ]--
r 111         s.push(new Coord);
--[ 2019.11.06.20.33.28.826.0 ]--
r 111         s.push(new Coord );
--[ 2019.11.06.20.33.28.985.0 ]--
r 111         s.push(new Coord 1);
--[ 2019.11.06.20.33.29.097.0 ]--
r 111         s.push(new Coord 1,);
--[ 2019.11.06.20.33.29.337.0 ]--
r 111         s.push(new Coord 1);
--[ 2019.11.06.20.33.29.440.0 ]--
r 111         s.push(new Coord );
--[ 2019.11.06.20.33.29.593.0 ]--
r 111         s.push(new Coord);
--[ 2019.11.06.20.33.29.759.0 ]--
r 111         s.push(new Coord());
--[ 2019.11.06.20.33.30.000.0 ]--
r 111         s.push(new Coord(1));
--[ 2019.11.06.20.33.30.166.0 ]--
r 111         s.push(new Coord(1,));
--[ 2019.11.06.20.33.30.483.0 ]--
r 111         s.push(new Coord(1,1));
--[ 2019.11.06.20.33.31.482.0 ]--
r 111         s.push(new Coord(1,1;));
--[ 2019.11.06.20.33.31.769.0 ]--
r 111         s.push(new Coord(1,1));
--[ 2019.11.06.20.33.31.970.0 ]--
r 111         s.push(new Coord(1,1 ));
--[ 2019.11.06.20.33.32.024.0 ]--
r 111         s.push(new Coord(1,1));
--[ 2019.11.06.20.33.37.895.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.34.30.381.0 ]--
r 136     
--[ 2019.11.06.20.34.30.779.0 ]--
r 136         
--[ 2019.11.06.20.34.31.127.0 ]--
r 136         /
--[ 2019.11.06.20.34.31.242.0 ]--
r 136         //
--[ 2019.11.06.20.34.34.893.0 ]--
+ 136         
--[ 2019.11.06.20.34.35.698.0 ]--
r 137         //R
--[ 2019.11.06.20.34.35.852.0 ]--
r 137         //Re
--[ 2019.11.06.20.34.35.982.0 ]--
r 137         //Ret
--[ 2019.11.06.20.34.36.105.0 ]--
r 137         //Retu
--[ 2019.11.06.20.34.36.168.0 ]--
r 137         //Retur
--[ 2019.11.06.20.34.36.262.0 ]--
r 137         //Return
--[ 2019.11.06.20.34.36.363.0 ]--
r 137         //Return 
--[ 2019.11.06.20.34.36.599.0 ]--
r 137         //Return a
--[ 2019.11.06.20.34.37.066.0 ]--
r 137         //Return a 
--[ 2019.11.06.20.34.37.148.0 ]--
r 137         //Return a s
--[ 2019.11.06.20.34.37.315.0 ]--
r 137         //Return a st
--[ 2019.11.06.20.34.37.387.0 ]--
r 137         //Return a sta
--[ 2019.11.06.20.34.37.530.0 ]--
r 137         //Return a stac
--[ 2019.11.06.20.34.37.642.0 ]--
r 137         //Return a stack
--[ 2019.11.06.20.34.38.454.0 ]--
r 137         //Return a 
--[ 2019.11.06.20.34.38.803.0 ]--
r 137         //Return a
--[ 2019.11.06.20.34.38.970.0 ]--
r 137         //Return an
--[ 2019.11.06.20.34.39.089.0 ]--
r 137         //Return an 
--[ 2019.11.06.20.34.39.645.0 ]--
r 137         //Return an
--[ 2019.11.06.20.34.39.785.0 ]--
r 137         //Return a
--[ 2019.11.06.20.34.39.897.0 ]--
r 137         //Return a 
--[ 2019.11.06.20.34.39.960.0 ]--
r 137         //Return a s
--[ 2019.11.06.20.34.40.133.0 ]--
r 137         //Return a srt
--[ 2019.11.06.20.34.40.179.0 ]--
r 137         //Return a srta
--[ 2019.11.06.20.34.40.709.0 ]--
r 137         //Return a srt
--[ 2019.11.06.20.34.40.819.0 ]--
r 137         //Return a sr
--[ 2019.11.06.20.34.41.297.0 ]--
r 137         //Return a s
--[ 2019.11.06.20.34.41.353.0 ]--
r 137         //Return a st
--[ 2019.11.06.20.34.41.418.0 ]--
r 137         //Return a sta
--[ 2019.11.06.20.34.41.540.0 ]--
r 137         //Return a stac
--[ 2019.11.06.20.34.41.647.0 ]--
r 137         //Return a stack
--[ 2019.11.06.20.34.41.730.0 ]--
r 137         //Return a stack 
--[ 2019.11.06.20.34.41.826.0 ]--
r 137         //Return a stack o
--[ 2019.11.06.20.34.41.916.0 ]--
r 137         //Return a stack of
--[ 2019.11.06.20.34.42.055.0 ]--
r 137         //Return a stack of 
--[ 2019.11.06.20.34.43.576.0 ]--
r 137         //Return a stack of  
--[ 2019.11.06.20.34.43.657.0 ]--
r 137         //Return a stack of 
--[ 2019.11.06.20.34.44.838.0 ]--
r 137         //Return a stack of c
--[ 2019.11.06.20.34.44.970.0 ]--
r 137         //Return a stack of co
--[ 2019.11.06.20.34.45.077.0 ]--
r 137         //Return a stack of coo
--[ 2019.11.06.20.34.45.157.0 ]--
r 137         //Return a stack of coor
--[ 2019.11.06.20.34.45.322.0 ]--
r 137         //Return a stack of coord
--[ 2019.11.06.20.34.45.381.0 ]--
r 137         //Return a stack of coordi
--[ 2019.11.06.20.34.45.565.0 ]--
r 137         //Return a stack of coordin
--[ 2019.11.06.20.34.45.663.0 ]--
r 137         //Return a stack of coordina
--[ 2019.11.06.20.34.45.754.0 ]--
r 137         //Return a stack of coordinat
--[ 2019.11.06.20.34.45.816.0 ]--
r 137         //Return a stack of coordinate
--[ 2019.11.06.20.34.45.967.0 ]--
r 137         //Return a stack of coordinates
--[ 2019.11.06.20.34.46.948.0 ]--
r 137         //Return a stack of coordinates 
--[ 2019.11.06.20.34.47.039.0 ]--
r 137         //Return a stack of coordinates
--[ 2019.11.06.20.34.47.639.0 ]--
r 137         //Return a stack of coordinates 
--[ 2019.11.06.20.34.49.308.0 ]--
r 137         //Return a stack of coordinates  
--[ 2019.11.06.20.34.49.410.0 ]--
r 137         //Return a stack of coordinates 
--[ 2019.11.06.20.34.50.308.0 ]--
r 137         //Return a stack of coordinates
--[ 2019.11.06.20.34.50.850.0 ]--
r 137         //Return a stack of coordinates 
--[ 2019.11.06.20.34.50.914.0 ]--
r 137         //Return a stack of coordinates
--[ 2019.11.06.20.34.51.159.0 ]--
r 137         //Return a stack of coordinates 
--[ 2019.11.06.20.34.51.906.0 ]--
r 137         //Return a stack of coordinates f
--[ 2019.11.06.20.34.51.977.0 ]--
r 137         //Return a stack of coordinates fo
--[ 2019.11.06.20.34.52.070.0 ]--
r 137         //Return a stack of coordinates for
--[ 2019.11.06.20.34.52.133.0 ]--
r 137         //Return a stack of coordinates for 
--[ 2019.11.06.20.34.52.197.0 ]--
r 137         //Return a stack of coordinates for t
--[ 2019.11.06.20.34.52.286.0 ]--
r 137         //Return a stack of coordinates for th
--[ 2019.11.06.20.34.52.335.0 ]--
r 137         //Return a stack of coordinates for the
--[ 2019.11.06.20.34.52.421.0 ]--
r 137         //Return a stack of coordinates for the 
--[ 2019.11.06.20.34.52.478.0 ]--
r 137         //Return a stack of coordinates for the v
--[ 2019.11.06.20.34.52.621.0 ]--
r 137         //Return a stack of coordinates for the vi
--[ 2019.11.06.20.34.53.518.0 ]--
r 137         //Return a stack of coordinates for the viz
--[ 2019.11.06.20.34.53.848.0 ]--
r 137         //Return a stack of coordinates for the vizu
--[ 2019.11.06.20.34.53.935.0 ]--
r 137         //Return a stack of coordinates for the vizua
--[ 2019.11.06.20.34.54.041.0 ]--
r 137         //Return a stack of coordinates for the vizual
--[ 2019.11.06.20.34.54.188.0 ]--
r 137         //Return a stack of coordinates for the vizuali
--[ 2019.11.06.20.34.54.239.0 ]--
r 137         //Return a stack of coordinates for the vizualiz
--[ 2019.11.06.20.34.54.402.0 ]--
r 137         //Return a stack of coordinates for the vizualize
--[ 2019.11.06.20.34.54.521.0 ]--
r 137         //Return a stack of coordinates for the vizualizer
--[ 2019.11.06.20.34.54.575.0 ]--
r 137         //Return a stack of coordinates for the vizualizer 
--[ 2019.11.06.20.34.54.650.0 ]--
r 137         //Return a stack of coordinates for the vizualizer
--[ 2019.11.06.20.34.56.254.0 ]--
r 137         //Return a stack of coordinates for the 
--[ 2019.11.06.20.34.56.631.0 ]--
r 137         //Return a stack of coordinates for the c
--[ 2019.11.06.20.34.56.712.0 ]--
r 137         //Return a stack of coordinates for the ci
--[ 2019.11.06.20.34.56.790.0 ]--
r 137         //Return a stack of coordinates for the cis
--[ 2019.11.06.20.34.56.880.0 ]--
r 137         //Return a stack of coordinates for the cisu
--[ 2019.11.06.20.34.56.955.0 ]--
r 137         //Return a stack of coordinates for the cisua
--[ 2019.11.06.20.34.57.056.0 ]--
r 137         //Return a stack of coordinates for the cisual
--[ 2019.11.06.20.34.57.329.0 ]--
r 137         //Return a stack of coordinates for the cisua
--[ 2019.11.06.20.34.57.571.0 ]--
r 137         //Return a stack of coordinates for the 
--[ 2019.11.06.20.34.58.143.0 ]--
r 137         //Return a stack of coordinates for the v
--[ 2019.11.06.20.34.58.252.0 ]--
r 137         //Return a stack of coordinates for the vi
--[ 2019.11.06.20.34.58.496.0 ]--
r 137         //Return a stack of coordinates for the vis
--[ 2019.11.06.20.34.58.592.0 ]--
r 137         //Return a stack of coordinates for the visu
--[ 2019.11.06.20.34.58.652.0 ]--
r 137         //Return a stack of coordinates for the visua
--[ 2019.11.06.20.34.58.761.0 ]--
r 137         //Return a stack of coordinates for the visual
--[ 2019.11.06.20.34.58.886.0 ]--
r 137         //Return a stack of coordinates for the visuali
--[ 2019.11.06.20.34.58.910.0 ]--
r 137         //Return a stack of coordinates for the visualiz
--[ 2019.11.06.20.34.59.058.0 ]--
r 137         //Return a stack of coordinates for the visualize
--[ 2019.11.06.20.34.59.127.0 ]--
r 137         //Return a stack of coordinates for the visualizer
--[ 2019.11.06.20.34.59.216.0 ]--
r 137         //Return a stack of coordinates for the visualizer 
--[ 2019.11.06.20.34.59.280.0 ]--
r 137         //Return a stack of coordinates for the visualizer
--[ 2019.11.06.20.34.59.740.0 ]--
r 137         //Return a stack of coordinates for the visualizer.
--[ 2019.11.06.20.35.00.622.0 ]--
r 137         //Return a stack of coordinates for the visualizer
--[ 2019.11.06.20.35.11.151.0 ]--
+ 103         
--[ 2019.11.06.20.35.14.542.0 ]--
r 109         /StdOut.println(start.getCoord());
--[ 2019.11.06.20.35.14.656.0 ]--
r 109         //StdOut.println(start.getCoord());
--[ 2019.11.06.20.35.15.686.0 ]--
+ 103         
--[ 2019.11.06.20.35.16.440.0 ]--
+ 103         
--[ 2019.11.06.20.35.16.924.0 ]--
r 104         S
--[ 2019.11.06.20.35.17.091.0 ]--
r 104         ST
--[ 2019.11.06.20.35.17.501.0 ]--
r 104         S
--[ 2019.11.06.20.35.17.617.0 ]--
r 104         St
--[ 2019.11.06.20.35.17.794.0 ]--
r 104         Std
--[ 2019.11.06.20.35.17.965.0 ]--
+ 105         
--[ 2019.11.06.20.35.17.976.0 ]--
r 105                 
--[ 2019.11.06.20.35.18.514.0 ]--
- 105
--[ 2019.11.06.20.35.18.617.0 ]--
r 104         St
--[ 2019.11.06.20.35.18.737.0 ]--
r 104         S
--[ 2019.11.06.20.35.19.353.0 ]--
r 104         St
--[ 2019.11.06.20.35.19.562.0 ]--
r 104         Std
--[ 2019.11.06.20.35.19.811.0 ]--
r 104         StdOut
--[ 2019.11.06.20.35.20.107.0 ]--
r 104         StdOut.
--[ 2019.11.06.20.35.20.301.0 ]--
r 104         StdOut.p
--[ 2019.11.06.20.35.20.422.0 ]--
r 104         StdOut.pr
--[ 2019.11.06.20.35.20.474.0 ]--
r 104         StdOut.pri
--[ 2019.11.06.20.35.20.523.0 ]--
r 104         StdOut.prin
--[ 2019.11.06.20.35.20.616.0 ]--
r 104         StdOut.print
--[ 2019.11.06.20.35.21.741.0 ]--
r 104         StdOut.printl
--[ 2019.11.06.20.35.22.127.0 ]--
r 104         StdOut.println
--[ 2019.11.06.20.35.22.144.0 ]--
r 104         StdOut.println()
--[ 2019.11.06.20.35.22.156.0 ]--
r 104         StdOut.println();
--[ 2019.11.06.20.35.22.970.0 ]--
r 104         StdOut.println(t);
--[ 2019.11.06.20.35.23.061.0 ]--
r 104         StdOut.println(th);
--[ 2019.11.06.20.35.23.084.0 ]--
r 104         StdOut.println(thi);
--[ 2019.11.06.20.35.23.162.0 ]--
r 104         StdOut.println(this);
--[ 2019.11.06.20.35.23.400.0 ]--
r 104         StdOut.println(this.);
--[ 2019.11.06.20.35.23.652.0 ]--
r 104         StdOut.println(this.s);
--[ 2019.11.06.20.35.23.738.0 ]--
r 104         StdOut.println(this.st);
--[ 2019.11.06.20.35.23.810.0 ]--
r 104         StdOut.println(this.sta);
--[ 2019.11.06.20.35.23.901.0 ]--
r 104         StdOut.println(this.star);
--[ 2019.11.06.20.35.24.048.0 ]--
r 104         StdOut.println(this.start);
--[ 2019.11.06.20.35.26.217.0 ]--
r 103 
r 105 
r 139 
--[ 2019.11.06.20.35.27.405.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.35.43.131.0 ]--
r 104         
--[ 2019.11.06.20.35.43.370.0 ]--
- 103
--[ 2019.11.06.20.35.43.959.0 ]--
- 103
--[ 2019.11.06.20.35.44.460.0 ]--
r 102         MinPQ<PFNode> pfQueue = new MinPQ<>(); 
--[ 2019.11.06.20.35.44.498.0 ]--
r 102         MinPQ<PFNode> pfQueue = new MinPQ<>();
--[ 2019.11.06.20.35.47.343.0 ]--
+ 105         
--[ 2019.11.06.20.35.47.489.0 ]--
+ 105         
--[ 2019.11.06.20.35.48.959.0 ]--
+ 105         
--[ 2019.11.06.20.35.49.612.0 ]--
r 106         s
--[ 2019.11.06.20.35.49.749.0 ]--
r 106         st
--[ 2019.11.06.20.35.49.831.0 ]--
r 106         sta
--[ 2019.11.06.20.35.49.913.0 ]--
r 106         star
--[ 2019.11.06.20.35.50.048.0 ]--
r 106         start
--[ 2019.11.06.20.35.50.128.0 ]--
r 106         start.
--[ 2019.11.06.20.35.50.207.0 ]--
r 106         start.g
--[ 2019.11.06.20.35.50.282.0 ]--
r 106         start.ge
--[ 2019.11.06.20.35.50.401.0 ]--
r 106         start.get
--[ 2019.11.06.20.35.50.953.0 ]--
r 106         start.getCoord
--[ 2019.11.06.20.35.50.960.0 ]--
r 106         start.getCoord()
--[ 2019.11.06.20.35.52.008.0 ]--
r 106         start.getCoord();
--[ 2019.11.06.20.35.54.144.0 ]--
r 106         (start.getCoord();
--[ 2019.11.06.20.35.55.183.0 ]--
r 106         start.getCoord();
--[ 2019.11.06.20.35.55.284.0 ]--
r 106         sstart.getCoord();
--[ 2019.11.06.20.35.55.405.0 ]--
r 106         ststart.getCoord();
--[ 2019.11.06.20.35.55.589.0 ]--
r 106         sstart.getCoord();
--[ 2019.11.06.20.35.55.737.0 ]--
r 106         start.getCoord();
--[ 2019.11.06.20.35.55.973.0 ]--
r 106         Sstart.getCoord();
--[ 2019.11.06.20.35.56.081.0 ]--
r 106         Ststart.getCoord();
--[ 2019.11.06.20.35.56.238.0 ]--
r 106         Stdstart.getCoord();
--[ 2019.11.06.20.35.56.953.0 ]--
r 106         StdOutstart.getCoord();
--[ 2019.11.06.20.35.56.963.0 ]--
r 106         StdOut start.getCoord();
--[ 2019.11.06.20.35.56.973.0 ]--
r 106         StdOutstart.getCoord();
--[ 2019.11.06.20.35.57.098.0 ]--
r 106         StdOut.start.getCoord();
--[ 2019.11.06.20.35.57.285.0 ]--
r 106         StdOut.pstart.getCoord();
--[ 2019.11.06.20.35.57.414.0 ]--
r 106         StdOut.prstart.getCoord();
--[ 2019.11.06.20.35.57.444.0 ]--
r 106         StdOut.pristart.getCoord();
--[ 2019.11.06.20.35.57.498.0 ]--
r 106         StdOut.prinstart.getCoord();
--[ 2019.11.06.20.35.57.586.0 ]--
r 106         StdOut.printstart.getCoord();
--[ 2019.11.06.20.35.57.710.0 ]--
r 106         StdOut.printlstart.getCoord();
--[ 2019.11.06.20.35.57.844.0 ]--
r 106         StdOut.printlnstart.getCoord();
--[ 2019.11.06.20.35.58.422.0 ]--
r 106         StdOut.println(start.getCoord();
--[ 2019.11.06.20.35.59.802.0 ]--
r 106         StdOut.println(start.getCoord());
--[ 2019.11.06.20.36.01.792.0 ]--
r 105 
r 107 
--[ 2019.11.06.20.36.03.025.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.36.24.956.0 ]--
r 115         s.push(s);
--[ 2019.11.06.20.36.25.180.0 ]--
r 115         s.push(st);
--[ 2019.11.06.20.36.25.328.0 ]--
r 115         s.push(sta);
--[ 2019.11.06.20.36.25.438.0 ]--
r 115         s.push(star);
--[ 2019.11.06.20.36.25.639.0 ]--
r 115         s.push(start);
--[ 2019.11.06.20.36.25.884.0 ]--
r 115         s.push(start.);
--[ 2019.11.06.20.36.26.036.0 ]--
r 115         s.push(start.g);
--[ 2019.11.06.20.36.26.089.0 ]--
r 115         s.push(start.ge);
--[ 2019.11.06.20.36.26.172.0 ]--
r 115         s.push(start.get);
--[ 2019.11.06.20.36.26.570.0 ]--
r 115         s.push(start.getC);
--[ 2019.11.06.20.36.26.690.0 ]--
r 115         s.push(start.getCo);
--[ 2019.11.06.20.36.26.803.0 ]--
r 115         s.push(start.getCoo);
--[ 2019.11.06.20.36.26.868.0 ]--
r 115         s.push(start.getCoor);
--[ 2019.11.06.20.36.27.047.0 ]--
r 115         s.push(start.getCoord);
--[ 2019.11.06.20.36.27.447.0 ]--
r 115         s.push(start.getCoord());
--[ 2019.11.06.20.36.30.470.0 ]--
r 115         s.push(start.getCoord() );
--[ 2019.11.06.20.36.30.496.0 ]--
r 115         s.push(start.getCoord());
--[ 2019.11.06.20.36.35.271.0 ]--
+ 108         
--[ 2019.11.06.20.36.35.398.0 ]--
+ 108         
--[ 2019.11.06.20.36.36.414.0 ]--
r 107     
--[ 2019.11.06.20.36.36.579.0 ]--
r 107         
--[ 2019.11.06.20.36.36.947.0 ]--
r 107         S
--[ 2019.11.06.20.36.37.174.0 ]--
r 107         St
--[ 2019.11.06.20.36.37.351.0 ]--
r 107         Std
--[ 2019.11.06.20.36.37.596.0 ]--
r 107         StdO
--[ 2019.11.06.20.36.37.750.0 ]--
r 107         StdOut
--[ 2019.11.06.20.36.40.094.0 ]--
r 106         StdOut.println("start.getCoord());
--[ 2019.11.06.20.36.40.183.0 ]--
r 106         StdOut.println("Sstart.getCoord());
--[ 2019.11.06.20.36.40.361.0 ]--
r 106         StdOut.println("Ststart.getCoord());
--[ 2019.11.06.20.36.40.425.0 ]--
r 106         StdOut.println("Stastart.getCoord());
--[ 2019.11.06.20.36.40.547.0 ]--
r 106         StdOut.println("Starstart.getCoord());
--[ 2019.11.06.20.36.40.706.0 ]--
r 106         StdOut.println("Startstart.getCoord());
--[ 2019.11.06.20.36.40.786.0 ]--
r 106         StdOut.println("Start start.getCoord());
--[ 2019.11.06.20.36.40.864.0 ]--
r 106         StdOut.println("Start cstart.getCoord());
--[ 2019.11.06.20.36.40.938.0 ]--
r 106         StdOut.println("Start costart.getCoord());
--[ 2019.11.06.20.36.41.050.0 ]--
r 106         StdOut.println("Start coostart.getCoord());
--[ 2019.11.06.20.36.41.114.0 ]--
r 106         StdOut.println("Start coorstart.getCoord());
--[ 2019.11.06.20.36.41.257.0 ]--
r 106         StdOut.println("Start coordstart.getCoord());
--[ 2019.11.06.20.36.42.220.0 ]--
r 106         StdOut.println("Start coord:start.getCoord());
--[ 2019.11.06.20.36.42.329.0 ]--
r 106         StdOut.println("Start coord: start.getCoord());
--[ 2019.11.06.20.36.42.407.0 ]--
r 106         StdOut.println("Start coord: "start.getCoord());
--[ 2019.11.06.20.36.42.521.0 ]--
r 106         StdOut.println("Start coord: " start.getCoord());
--[ 2019.11.06.20.36.42.881.0 ]--
r 106         StdOut.println("Start coord: " +start.getCoord());
--[ 2019.11.06.20.36.42.952.0 ]--
r 106         StdOut.println("Start coord: " + start.getCoord());
--[ 2019.11.06.20.36.45.615.0 ]--
r 107         StdOut.
--[ 2019.11.06.20.36.45.838.0 ]--
r 107         StdOut.p
--[ 2019.11.06.20.36.45.974.0 ]--
r 107         StdOut.pr
--[ 2019.11.06.20.36.46.019.0 ]--
r 107         StdOut.pri
--[ 2019.11.06.20.36.46.060.0 ]--
r 107         StdOut.prin
--[ 2019.11.06.20.36.46.135.0 ]--
r 107         StdOut.print
--[ 2019.11.06.20.36.46.511.0 ]--
r 107         StdOut.printl
--[ 2019.11.06.20.36.46.575.0 ]--
r 107         StdOut.println
--[ 2019.11.06.20.36.46.824.0 ]--
r 107         StdOut.println()
--[ 2019.11.06.20.36.47.369.0 ]--
r 107         StdOut.println("")
--[ 2019.11.06.20.36.47.529.0 ]--
r 107         StdOut.println("E")
--[ 2019.11.06.20.36.47.602.0 ]--
r 107         StdOut.println("En")
--[ 2019.11.06.20.36.47.719.0 ]--
r 107         StdOut.println("End")
--[ 2019.11.06.20.36.47.799.0 ]--
r 107         StdOut.println("End ")
--[ 2019.11.06.20.36.47.914.0 ]--
r 107         StdOut.println("End C")
--[ 2019.11.06.20.36.47.974.0 ]--
r 107         StdOut.println("End Co")
--[ 2019.11.06.20.36.48.086.0 ]--
r 107         StdOut.println("End Coo")
--[ 2019.11.06.20.36.48.310.0 ]--
r 107         StdOut.println("End Cood")
--[ 2019.11.06.20.36.48.650.0 ]--
r 107         StdOut.println("End Coo")
--[ 2019.11.06.20.36.48.726.0 ]--
r 107         StdOut.println("End Co")
--[ 2019.11.06.20.36.48.833.0 ]--
r 107         StdOut.println("End C")
--[ 2019.11.06.20.36.48.944.0 ]--
r 107         StdOut.println("End ")
--[ 2019.11.06.20.36.49.029.0 ]--
r 107         StdOut.println("End c")
--[ 2019.11.06.20.36.49.102.0 ]--
r 107         StdOut.println("End co")
--[ 2019.11.06.20.36.49.217.0 ]--
r 107         StdOut.println("End coo")
--[ 2019.11.06.20.36.49.269.0 ]--
r 107         StdOut.println("End coor")
--[ 2019.11.06.20.36.49.416.0 ]--
r 107         StdOut.println("End coord")
--[ 2019.11.06.20.36.49.652.0 ]--
r 107         StdOut.println("End coord" )
--[ 2019.11.06.20.36.50.486.0 ]--
r 107         StdOut.println("End coord" +)
--[ 2019.11.06.20.36.50.577.0 ]--
r 107         StdOut.println("End coord" + )
--[ 2019.11.06.20.36.51.080.0 ]--
r 107         StdOut.println("End coord" + e)
--[ 2019.11.06.20.36.51.165.0 ]--
r 107         StdOut.println("End coord" + en)
--[ 2019.11.06.20.36.51.252.0 ]--
r 107         StdOut.println("End coord" + end)
--[ 2019.11.06.20.36.51.392.0 ]--
r 107         StdOut.println("End coord" + end.)
--[ 2019.11.06.20.36.51.723.0 ]--
r 107         StdOut.println("End coord" + end.g)
--[ 2019.11.06.20.36.51.776.0 ]--
r 107         StdOut.println("End coord" + end.ge)
--[ 2019.11.06.20.36.51.898.0 ]--
r 107         StdOut.println("End coord" + end.get)
--[ 2019.11.06.20.36.53.915.0 ]--
r 107         StdOut.println("End coord" + end.getC)
--[ 2019.11.06.20.36.54.441.0 ]--
r 107         StdOut.println("End coord" + end.getCo)
--[ 2019.11.06.20.36.54.839.0 ]--
r 107         StdOut.println("End coord" + end.getCoo)
--[ 2019.11.06.20.36.55.926.0 ]--
r 107         StdOut.println("End coord" + end.)
--[ 2019.11.06.20.36.56.966.0 ]--
r 107         StdOut.println("End coord" + end)
--[ 2019.11.06.20.36.58.245.0 ]--
r 107         StdOut.println("End coord" + end )
--[ 2019.11.06.20.36.58.273.0 ]--
r 107         StdOut.println("End coord" + end)
--[ 2019.11.06.20.36.58.882.0 ]--
r 107         StdOut.println("End coord" + en)
--[ 2019.11.06.20.36.58.985.0 ]--
r 107         StdOut.println("End coord" + e)
--[ 2019.11.06.20.36.59.105.0 ]--
r 107         StdOut.println("End coord" + )
--[ 2019.11.06.20.37.02.852.0 ]--
r 107         
--[ 2019.11.06.20.37.03.046.0 ]--
- 107
--[ 2019.11.06.20.37.04.577.0 ]--
+ 110         
--[ 2019.11.06.20.37.05.214.0 ]--
+ 110         
--[ 2019.11.06.20.37.05.318.0 ]--
r 111         StdOut.println("End coord" + )
--[ 2019.11.06.20.37.05.346.0 ]--
r 110 
--[ 2019.11.06.20.37.06.765.0 ]--
r 111         StdOut.println("End coord" +  )
--[ 2019.11.06.20.37.06.878.0 ]--
r 111         StdOut.println("End coord" +  e)
--[ 2019.11.06.20.37.06.957.0 ]--
r 111         StdOut.println("End coord" +  en)
--[ 2019.11.06.20.37.07.035.0 ]--
r 111         StdOut.println("End coord" +  end)
--[ 2019.11.06.20.37.07.193.0 ]--
r 111         StdOut.println("End coord" +  end.)
--[ 2019.11.06.20.37.07.322.0 ]--
r 111         StdOut.println("End coord" +  end.g)
--[ 2019.11.06.20.37.07.526.0 ]--
r 111         StdOut.println("End coord" +  end.ge)
--[ 2019.11.06.20.37.07.681.0 ]--
r 111         StdOut.println("End coord" +  end.get)
--[ 2019.11.06.20.37.08.006.0 ]--
r 111         StdOut.println("End coord" +  end.getCoord)
--[ 2019.11.06.20.37.08.021.0 ]--
r 111         StdOut.println("End coord" +  end.getCoord())
--[ 2019.11.06.20.37.09.106.0 ]--
r 111         StdOut.println("End coord" +  end.getCoord());
--[ 2019.11.06.20.37.11.319.0 ]--
r 107 
r 108 
--[ 2019.11.06.20.37.12.652.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.37.21.510.0 ]--
r 115         /StdOut.println(start.getCoord());
--[ 2019.11.06.20.37.21.662.0 ]--
r 115         StdOut.println(start.getCoord());
--[ 2019.11.06.20.37.23.838.0 ]--
r 115         StdOut.println(sstart.getCoord());
--[ 2019.11.06.20.37.24.013.0 ]--
r 115         StdOut.println(ststart.getCoord());
--[ 2019.11.06.20.37.24.056.0 ]--
r 115         StdOut.println(stastart.getCoord());
--[ 2019.11.06.20.37.24.154.0 ]--
r 115         StdOut.println(starstart.getCoord());
--[ 2019.11.06.20.37.24.319.0 ]--
r 115         StdOut.println(startstart.getCoord());
--[ 2019.11.06.20.37.25.193.0 ]--
r 115         StdOut.println(starstart.getCoord());
--[ 2019.11.06.20.37.25.328.0 ]--
r 115         StdOut.println(stastart.getCoord());
--[ 2019.11.06.20.37.25.419.0 ]--
r 115         StdOut.println(ststart.getCoord());
--[ 2019.11.06.20.37.25.537.0 ]--
r 115         StdOut.println(sstart.getCoord());
--[ 2019.11.06.20.37.25.655.0 ]--
r 115         StdOut.println(start.getCoord());
--[ 2019.11.06.20.37.25.912.0 ]--
r 115         StdOut.println("start.getCoord());
--[ 2019.11.06.20.37.26.082.0 ]--
r 115         StdOut.println("Sstart.getCoord());
--[ 2019.11.06.20.37.26.240.0 ]--
r 115         StdOut.println("Ststart.getCoord());
--[ 2019.11.06.20.37.26.320.0 ]--
r 115         StdOut.println("Stastart.getCoord());
--[ 2019.11.06.20.37.26.462.0 ]--
r 115         StdOut.println("Starstart.getCoord());
--[ 2019.11.06.20.37.26.639.0 ]--
r 115         StdOut.println("Startstart.getCoord());
--[ 2019.11.06.20.37.26.740.0 ]--
r 115         StdOut.println("Start start.getCoord());
--[ 2019.11.06.20.37.26.913.0 ]--
r 115         StdOut.println("Start cstart.getCoord());
--[ 2019.11.06.20.37.27.009.0 ]--
r 115         StdOut.println("Start costart.getCoord());
--[ 2019.11.06.20.37.27.103.0 ]--
r 115         StdOut.println("Start coostart.getCoord());
--[ 2019.11.06.20.37.27.171.0 ]--
r 115         StdOut.println("Start coorstart.getCoord());
--[ 2019.11.06.20.37.27.359.0 ]--
r 115         StdOut.println("Start coordstart.getCoord());
--[ 2019.11.06.20.37.27.522.0 ]--
r 115         StdOut.println("Start coord"start.getCoord());
--[ 2019.11.06.20.37.28.335.0 ]--
r 115         StdOut.println("Start coord" start.getCoord());
--[ 2019.11.06.20.37.28.417.0 ]--
r 115         StdOut.println("Start coord" :start.getCoord());
--[ 2019.11.06.20.37.28.496.0 ]--
r 115         StdOut.println("Start coord" : start.getCoord());
--[ 2019.11.06.20.37.29.074.0 ]--
r 115         StdOut.println("Start coord" : +start.getCoord());
--[ 2019.11.06.20.37.29.407.0 ]--
r 115         StdOut.println("Start coord" : start.getCoord());
--[ 2019.11.06.20.37.29.609.0 ]--
r 115         StdOut.println("Start coord" :start.getCoord());
--[ 2019.11.06.20.37.29.702.0 ]--
r 115         StdOut.println("Start coord" start.getCoord());
--[ 2019.11.06.20.37.29.815.0 ]--
r 115         StdOut.println("Start coord"start.getCoord());
--[ 2019.11.06.20.37.29.927.0 ]--
r 115         StdOut.println("Start coordstart.getCoord());
--[ 2019.11.06.20.37.30.453.0 ]--
r 115         StdOut.println("Start coord:start.getCoord());
--[ 2019.11.06.20.37.30.542.0 ]--
r 115         StdOut.println("Start coord: start.getCoord());
--[ 2019.11.06.20.37.30.635.0 ]--
r 115         StdOut.println("Start coord: "start.getCoord());
--[ 2019.11.06.20.37.30.741.0 ]--
r 115         StdOut.println("Start coord: " start.getCoord());
--[ 2019.11.06.20.37.30.830.0 ]--
r 115         StdOut.println("Start coord: " _start.getCoord());
--[ 2019.11.06.20.37.31.114.0 ]--
r 115         StdOut.println("Start coord: " _ start.getCoord());
--[ 2019.11.06.20.37.31.547.0 ]--
r 115         StdOut.println("Start coord: " _start.getCoord());
--[ 2019.11.06.20.37.31.666.0 ]--
r 115         StdOut.println("Start coord: " start.getCoord());
--[ 2019.11.06.20.37.31.860.0 ]--
r 115         StdOut.println("Start coord: " +start.getCoord());
--[ 2019.11.06.20.37.31.887.0 ]--
r 115         StdOut.println("Start coord: " + start.getCoord());
--[ 2019.11.06.20.37.35.200.0 ]--
r 116         /StdOut.println(end.getCoord());
--[ 2019.11.06.20.37.35.322.0 ]--
r 116         StdOut.println(end.getCoord());
--[ 2019.11.06.20.37.36.899.0 ]--
r 116         StdOut.println("end.getCoord());
--[ 2019.11.06.20.37.37.049.0 ]--
r 116         StdOut.println("Eend.getCoord());
--[ 2019.11.06.20.37.37.130.0 ]--
r 116         StdOut.println("Enend.getCoord());
--[ 2019.11.06.20.37.37.256.0 ]--
r 116         StdOut.println("Endend.getCoord());
--[ 2019.11.06.20.37.37.318.0 ]--
r 116         StdOut.println("End end.getCoord());
--[ 2019.11.06.20.37.37.420.0 ]--
r 116         StdOut.println("End Cend.getCoord());
--[ 2019.11.06.20.37.37.478.0 ]--
r 116         StdOut.println("End Coend.getCoord());
--[ 2019.11.06.20.37.37.595.0 ]--
r 116         StdOut.println("End Cooend.getCoord());
--[ 2019.11.06.20.37.37.836.0 ]--
r 116         StdOut.println("End Coend.getCoord());
--[ 2019.11.06.20.37.37.905.0 ]--
r 116         StdOut.println("End Cend.getCoord());
--[ 2019.11.06.20.37.38.025.0 ]--
r 116         StdOut.println("End end.getCoord());
--[ 2019.11.06.20.37.38.154.0 ]--
r 116         StdOut.println("End cend.getCoord());
--[ 2019.11.06.20.37.38.184.0 ]--
r 116         StdOut.println("End coend.getCoord());
--[ 2019.11.06.20.37.38.286.0 ]--
r 116         StdOut.println("End cooend.getCoord());
--[ 2019.11.06.20.37.38.400.0 ]--
r 116         StdOut.println("End coorend.getCoord());
--[ 2019.11.06.20.37.38.546.0 ]--
r 116         StdOut.println("End coordend.getCoord());
--[ 2019.11.06.20.37.39.973.0 ]--
r 116         StdOut.println("End coord end.getCoord());
--[ 2019.11.06.20.37.40.941.0 ]--
r 116         StdOut.println("End coordend.getCoord());
--[ 2019.11.06.20.37.41.100.0 ]--
r 116         StdOut.println("End coord:end.getCoord());
--[ 2019.11.06.20.37.41.168.0 ]--
r 116         StdOut.println("End coord: end.getCoord());
--[ 2019.11.06.20.37.41.290.0 ]--
r 116         StdOut.println("End coord: "end.getCoord());
--[ 2019.11.06.20.37.41.368.0 ]--
r 116         StdOut.println("End coord: " end.getCoord());
--[ 2019.11.06.20.37.41.482.0 ]--
r 116         StdOut.println("End coord: " +end.getCoord());
--[ 2019.11.06.20.37.41.560.0 ]--
r 116         StdOut.println("End coord: " + end.getCoord());
--[ 2019.11.06.20.37.48.493.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.38.00.847.0 ]--
- 117
- 117
- 117
--[ 2019.11.06.20.38.01.293.0 ]--
- 117
--[ 2019.11.06.20.38.01.679.0 ]--
r 116         StdOut.println("End coord: " + end.getCoord()); 
--[ 2019.11.06.20.38.01.765.0 ]--
r 116         StdOut.println("End coord: " + end.getCoord());
--[ 2019.11.06.20.38.01.903.0 ]--
+ 117         
--[ 2019.11.06.20.38.08.644.0 ]--
r 117 
--[ 2019.11.06.20.38.10.184.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.38.21.459.0 ]--
r 113         /s = new Stack<>();
--[ 2019.11.06.20.38.21.618.0 ]--
r 113         //s = new Stack<>();
--[ 2019.11.06.20.38.24.277.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.38.36.735.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.38.47.730.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.39.36.100.0 ]--
- 112
- 112
- 112
- 112
- 112
--[ 2019.11.06.20.39.36.312.0 ]--
- 112
--[ 2019.11.06.20.39.37.424.0 ]--
+ 112         
--[ 2019.11.06.20.39.37.581.0 ]--
+ 112         
--[ 2019.11.06.20.40.09.461.0 ]--
r 109         PFNode end = new PFNode(this.end, star);
--[ 2019.11.06.20.40.09.552.0 ]--
r 109         PFNode end = new PFNode(this.end, sta);
--[ 2019.11.06.20.40.09.659.0 ]--
r 109         PFNode end = new PFNode(this.end, st);
--[ 2019.11.06.20.40.09.798.0 ]--
r 109         PFNode end = new PFNode(this.end, s);
--[ 2019.11.06.20.40.10.056.0 ]--
r 109         PFNode end = new PFNode(this.end, );
--[ 2019.11.06.20.40.10.678.0 ]--
r 109         PFNode end = new PFNode(this.end, n);
--[ 2019.11.06.20.40.10.714.0 ]--
r 109         PFNode end = new PFNode(this.end, nu);
--[ 2019.11.06.20.40.10.887.0 ]--
r 109         PFNode end = new PFNode(this.end, nul);
--[ 2019.11.06.20.40.10.977.0 ]--
r 109         PFNode end = new PFNode(this.end, null);
--[ 2019.11.06.20.40.11.234.0 ]--
r 109         PFNode end = new PFNode(this.end, null );
--[ 2019.11.06.20.40.11.278.0 ]--
r 109         PFNode end = new PFNode(this.end, null);
--[ 2019.11.06.20.40.14.899.0 ]--
r 109         PFNode end = new PFNode(this.end, null );
--[ 2019.11.06.20.40.15.040.0 ]--
r 109         PFNode end = new PFNode(this.end, );
--[ 2019.11.06.20.40.15.175.0 ]--
r 109         PFNode end = new PFNode(this.end, start);
--[ 2019.11.06.20.40.15.425.0 ]--
- 112
--[ 2019.11.06.20.40.15.572.0 ]--
- 112
--[ 2019.11.06.20.40.15.699.0 ]--
r 112          pathFound = true;
--[ 2019.11.06.20.40.16.016.0 ]--
r 112         pathFound = true;
--[ 2019.11.06.20.40.16.344.0 ]--
+ 112 
--[ 2019.11.06.20.40.16.573.0 ]--
+ 112 
+ 113         //s = new Stack<>();
+ 114 
+ 115         StdOut.println("Start coord: " + start.getCoord());
+ 116         StdOut.println("End coord: " + end.getCoord());
--[ 2019.11.06.20.40.20.267.0 ]--
r 109         PFNode end = new PFNode(this.end, n);
--[ 2019.11.06.20.40.20.320.0 ]--
r 109         PFNode end = new PFNode(this.end, nu);
--[ 2019.11.06.20.40.20.510.0 ]--
r 109         PFNode end = new PFNode(this.end, nul);
--[ 2019.11.06.20.40.20.606.0 ]--
r 109         PFNode end = new PFNode(this.end, null);
--[ 2019.11.06.20.40.24.792.0 ]--
r 113         /s = new Stack<>();
--[ 2019.11.06.20.40.24.879.0 ]--
r 113         s = new Stack<>();
--[ 2019.11.06.20.40.26.909.0 ]--
- 115
- 115
r 115         
--[ 2019.11.06.20.40.27.550.0 ]--
+ 115         
--[ 2019.11.06.20.40.28.670.0 ]--
r 115         s
--[ 2019.11.06.20.40.28.814.0 ]--
r 115         s.
--[ 2019.11.06.20.40.29.089.0 ]--
r 115         s.p
--[ 2019.11.06.20.40.29.138.0 ]--
r 115         s.pu
--[ 2019.11.06.20.40.29.280.0 ]--
r 115         s.pus
--[ 2019.11.06.20.40.29.361.0 ]--
r 115         s.push
--[ 2019.11.06.20.40.30.080.0 ]--
r 115         s.push()
--[ 2019.11.06.20.40.30.749.0 ]--
r 115         s.push(s)
--[ 2019.11.06.20.40.30.893.0 ]--
r 115         s.push(st)
--[ 2019.11.06.20.40.30.964.0 ]--
r 115         s.push(sta)
--[ 2019.11.06.20.40.31.058.0 ]--
r 115         s.push(star)
--[ 2019.11.06.20.40.31.205.0 ]--
r 115         s.push(start)
--[ 2019.11.06.20.40.31.964.0 ]--
r 115         s.push(start);
--[ 2019.11.06.20.40.33.580.0 ]--
r 115         s.push(start); 
--[ 2019.11.06.20.40.33.634.0 ]--
r 115         s.push(start);
--[ 2019.11.06.20.40.37.429.0 ]--
r 115         s.push(start.);
--[ 2019.11.06.20.40.37.497.0 ]--
r 115         s.push(start.g);
--[ 2019.11.06.20.40.37.586.0 ]--
r 115         s.push(start.ge);
--[ 2019.11.06.20.40.37.683.0 ]--
r 115         s.push(start.get);
--[ 2019.11.06.20.40.38.039.0 ]--
r 115         s.push(start.getCoord);
--[ 2019.11.06.20.40.38.054.0 ]--
r 115         s.push(start.getCoord());
--[ 2019.11.06.20.40.40.633.0 ]--
+ 116         
--[ 2019.11.06.20.40.41.163.0 ]--
r 116         s
--[ 2019.11.06.20.40.41.409.0 ]--
r 116         s.
--[ 2019.11.06.20.40.41.806.0 ]--
r 116         s.p
--[ 2019.11.06.20.40.41.910.0 ]--
r 116         s.pui
--[ 2019.11.06.20.40.42.396.0 ]--
r 116         s.pu
--[ 2019.11.06.20.40.42.857.0 ]--
r 116         s.pus
--[ 2019.11.06.20.40.42.945.0 ]--
r 116         s.push
--[ 2019.11.06.20.40.43.438.0 ]--
r 116         s.push()
--[ 2019.11.06.20.40.43.683.0 ]--
r 116         s.push(e)
--[ 2019.11.06.20.40.43.754.0 ]--
r 116         s.push(en)
--[ 2019.11.06.20.40.43.875.0 ]--
r 116         s.push(end)
--[ 2019.11.06.20.40.46.666.0 ]--
r 116         s.push(end.)
--[ 2019.11.06.20.40.46.740.0 ]--
r 116         s.push(end.g)
--[ 2019.11.06.20.40.46.821.0 ]--
r 116         s.push(end.ge)
--[ 2019.11.06.20.40.46.925.0 ]--
r 116         s.push(end.get)
--[ 2019.11.06.20.40.47.122.0 ]--
r 116         s.push(end.getC)
--[ 2019.11.06.20.40.47.216.0 ]--
r 116         s.push(end.getCo)
--[ 2019.11.06.20.40.47.314.0 ]--
r 116         s.push(end.getCoo)
--[ 2019.11.06.20.40.47.361.0 ]--
r 116         s.push(end.getCoor)
--[ 2019.11.06.20.40.47.528.0 ]--
r 116         s.push(end.getCoord)
--[ 2019.11.06.20.40.49.237.0 ]--
r 116         s.push(end.getCoord())
--[ 2019.11.06.20.41.20.191.0 ]--
r 116         s.push(end.getCoord());
--[ 2019.11.06.20.41.22.141.0 ]--
r 117 
--[ 2019.11.06.20.41.23.417.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.41.37.621.0 ]--
r 115         s.push(e.getCoord());
--[ 2019.11.06.20.41.37.703.0 ]--
r 115         s.push(en.getCoord());
--[ 2019.11.06.20.41.37.798.0 ]--
r 115         s.push(end.getCoord());
--[ 2019.11.06.20.41.39.198.0 ]--
r 116         s.push(s.getCoord());
--[ 2019.11.06.20.41.39.323.0 ]--
r 116         s.push(st.getCoord());
--[ 2019.11.06.20.41.39.396.0 ]--
r 116         s.push(sta.getCoord());
--[ 2019.11.06.20.41.39.488.0 ]--
r 116         s.push(star.getCoord());
--[ 2019.11.06.20.41.39.628.0 ]--
r 116         s.push(start.getCoord());
--[ 2019.11.06.20.41.43.573.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.41.49.016.0 ]--
- 114
- 114
- 114
--[ 2019.11.06.20.41.49.155.0 ]--
- 114
--[ 2019.11.06.20.41.49.520.0 ]--
r 113         s = new Stack<>(); 
--[ 2019.11.06.20.41.49.577.0 ]--
r 113         s = new Stack<>();
--[ 2019.11.06.20.41.49.946.0 ]--
+ 114         
--[ 2019.11.06.20.41.50.064.0 ]--
+ 114         
--[ 2019.11.06.20.44.59.966.0 ]--
r 114 
r 115 
--[ 2019.11.06.20.45.01.293.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.45.09.851.0 ]--
r 109         P/FNode end = new PFNode(this.end, null);
--[ 2019.11.06.20.45.09.987.0 ]--
r 109         P//FNode end = new PFNode(this.end, null);
--[ 2019.11.06.20.45.11.129.0 ]--
r 109         P/FNode end = new PFNode(this.end, null);
--[ 2019.11.06.20.45.11.271.0 ]--
r 109         PFNode end = new PFNode(this.end, null);
--[ 2019.11.06.20.45.12.120.0 ]--
r 109         /PFNode end = new PFNode(this.end, null);
--[ 2019.11.06.20.45.12.242.0 ]--
r 109         //PFNode end = new PFNode(this.end, null);
--[ 2019.11.06.20.45.13.292.0 ]--
r 111         /StdOut.println("End coord" +  end.getCoord());
--[ 2019.11.06.20.45.13.412.0 ]--
r 111         //StdOut.println("End coord" +  end.getCoord());
--[ 2019.11.06.20.45.14.159.0 ]--
+ 112 
--[ 2019.11.06.20.45.14.175.0 ]--
r 113         
--[ 2019.11.06.20.45.27.904.0 ]--
r 115 StdOut.println("Start coord: " + start.getCoord());
--[ 2019.11.06.20.45.27.920.0 ]--
r 115         StdOut.println("Start coord: " + start.getCoord());
--[ 2019.11.06.20.45.30.132.0 ]--
r 113 
--[ 2019.11.06.20.45.31.370.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.45.36.220.0 ]--
r 109         /PFNode end = new PFNode(this.end, null);
--[ 2019.11.06.20.45.36.329.0 ]--
r 109         PFNode end = new PFNode(this.end, null);
--[ 2019.11.06.20.45.36.507.0 ]--
r 109          PFNode end = new PFNode(this.end, null);
--[ 2019.11.06.20.45.36.554.0 ]--
r 109         PFNode end = new PFNode(this.end, null);
--[ 2019.11.06.20.45.39.667.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.45.48.924.0 ]--
r 115  
--[ 2019.11.06.20.45.49.040.0 ]--
- 115
--[ 2019.11.06.20.45.51.273.0 ]--
+ 109         
--[ 2019.11.06.20.45.51.589.0 ]--
r 109         StdOut.println("Start coord: " + start.getCoord());
--[ 2019.11.06.20.45.54.916.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.46.01.904.0 ]--
r 109         
--[ 2019.11.06.20.46.02.111.0 ]--
- 107
--[ 2019.11.06.20.46.02.684.0 ]--
r 108          
--[ 2019.11.06.20.46.02.744.0 ]--
r 108         
--[ 2019.11.06.20.46.45.317.0 ]--
r 104         PFNode g = new PFNode(this.start, null);
--[ 2019.11.06.20.46.45.380.0 ]--
r 104         PFNode ge = new PFNode(this.start, null);
--[ 2019.11.06.20.46.45.657.0 ]--
r 104         PFNode g = new PFNode(this.start, null);
--[ 2019.11.06.20.46.45.760.0 ]--
r 104         PFNode  = new PFNode(this.start, null);
--[ 2019.11.06.20.46.45.841.0 ]--
r 104         PFNode t = new PFNode(this.start, null);
--[ 2019.11.06.20.46.45.906.0 ]--
r 104         PFNode te = new PFNode(this.start, null);
--[ 2019.11.06.20.46.46.034.0 ]--
r 104         PFNode tes = new PFNode(this.start, null);
--[ 2019.11.06.20.46.46.105.0 ]--
r 104         PFNode test = new PFNode(this.start, null);
--[ 2019.11.06.20.46.46.192.0 ]--
r 104         PFNode test  = new PFNode(this.start, null);
--[ 2019.11.06.20.46.46.305.0 ]--
r 104         PFNode test = new PFNode(this.start, null);
--[ 2019.11.06.20.46.46.353.0 ]--
r 104         PFNode test1 = new PFNode(this.start, null);
--[ 2019.11.06.20.46.48.520.0 ]--
r 104         PFNode test1 = new PFNode(start, null);
--[ 2019.11.06.20.46.51.556.0 ]--
r 106         StdOut.println("Start coord: " + r.getCoord());
--[ 2019.11.06.20.46.51.986.0 ]--
r 106         StdOut.println("Start coord: " + .getCoord());
--[ 2019.11.06.20.46.52.042.0 ]--
r 106         StdOut.println("Start coord: " + t.getCoord());
--[ 2019.11.06.20.46.52.127.0 ]--
r 106         StdOut.println("Start coord: " + te.getCoord());
--[ 2019.11.06.20.46.52.259.0 ]--
r 106         StdOut.println("Start coord: " + tes.getCoord());
--[ 2019.11.06.20.46.52.339.0 ]--
r 106         StdOut.println("Start coord: " + test.getCoord());
--[ 2019.11.06.20.46.52.462.0 ]--
r 106         StdOut.println("Start coord: " + test1.getCoord());
--[ 2019.11.06.20.46.56.731.0 ]--
r 109         PFNode t = new PFNode(this.end, null);
--[ 2019.11.06.20.46.56.785.0 ]--
r 109         PFNode te = new PFNode(this.end, null);
--[ 2019.11.06.20.46.57.131.0 ]--
r 109         PFNode tes = new PFNode(this.end, null);
--[ 2019.11.06.20.46.57.273.0 ]--
r 109         PFNode test = new PFNode(this.end, null);
--[ 2019.11.06.20.46.57.418.0 ]--
r 109         PFNode test2 = new PFNode(this.end, null);
--[ 2019.11.06.20.46.59.355.0 ]--
r 109         PFNode test2 = new PFNode(end, null);
--[ 2019.11.06.20.47.02.380.0 ]--
+ 110         
--[ 2019.11.06.20.47.02.481.0 ]--
+ 110         
--[ 2019.11.06.20.47.02.638.0 ]--
r 111         StdOut.println("Start coord: " + start.getCoord());
--[ 2019.11.06.20.47.02.666.0 ]--
r 110 
--[ 2019.11.06.20.47.05.237.0 ]--
r 111         StdOut.println("Start coord: " + t.getCoord());
--[ 2019.11.06.20.47.05.304.0 ]--
r 111         StdOut.println("Start coord: " + te.getCoord());
--[ 2019.11.06.20.47.05.445.0 ]--
r 111         StdOut.println("Start coord: " + tes.getCoord());
--[ 2019.11.06.20.47.05.506.0 ]--
r 111         StdOut.println("Start coord: " + test.getCoord());
--[ 2019.11.06.20.47.05.644.0 ]--
r 111         StdOut.println("Start coord: " + test1.getCoord());
--[ 2019.11.06.20.47.07.561.0 ]--
r 108 
--[ 2019.11.06.20.47.08.759.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.47.14.312.0 ]--
- 103
- 103
- 103
- 103
- 103
- 103
- 103
- 103
- 103
--[ 2019.11.06.20.47.14.503.0 ]--
- 103
--[ 2019.11.06.20.47.18.380.0 ]--
r 103         
--[ 2019.11.06.20.47.19.959.0 ]--
- 104
--[ 2019.11.06.20.47.20.064.0 ]--
- 104
--[ 2019.11.06.20.47.20.192.0 ]--
- 103
--[ 2019.11.06.20.47.29.984.0 ]--
+ 105         
--[ 2019.11.06.20.47.30.152.0 ]--
+ 105         
--[ 2019.11.06.20.47.30.289.0 ]--
+ 105         
--[ 2019.11.06.20.47.35.127.0 ]--
- 105
--[ 2019.11.06.20.47.35.234.0 ]--
- 104
--[ 2019.11.06.20.47.35.961.0 ]--
+ 104         
--[ 2019.11.06.20.47.49.249.0 ]--
r 27 
--[ 2019.11.06.20.47.49.386.0 ]--
- 27
--[ 2019.11.06.20.47.53.135.0 ]--
r 17 
--[ 2019.11.06.20.47.53.527.0 ]--
- 17
--[ 2019.11.06.20.47.57.839.0 ]--
- 63
- 63
- 63
--[ 2019.11.06.20.47.58.033.0 ]--
- 62
--[ 2019.11.06.20.47.59.049.0 ]--
+ 62         
--[ 2019.11.06.20.48.02.498.0 ]--
- 62
--[ 2019.11.06.20.51.14.745.0 ]--
r 98         s
--[ 2019.11.06.20.51.14.823.0 ]--
r 98         s.
--[ 2019.11.06.20.51.15.089.0 ]--
r 98         s.p
--[ 2019.11.06.20.51.15.163.0 ]--
r 98         s.pu
--[ 2019.11.06.20.51.15.393.0 ]--
r 98         s.puh
--[ 2019.11.06.20.51.15.800.0 ]--
r 98         s.pu
--[ 2019.11.06.20.51.15.907.0 ]--
r 98         s.pus
--[ 2019.11.06.20.51.15.969.0 ]--
r 98         s.push
--[ 2019.11.06.20.51.16.164.0 ]--
r 98         s.push()
--[ 2019.11.06.20.51.16.259.0 ]--
r 98         s.push(s)
--[ 2019.11.06.20.51.16.366.0 ]--
r 98         s.push(st)
--[ 2019.11.06.20.51.16.428.0 ]--
r 98         s.push(sta)
--[ 2019.11.06.20.51.16.522.0 ]--
r 98         s.push(star)
--[ 2019.11.06.20.51.16.666.0 ]--
r 98         s.push(start)
--[ 2019.11.06.20.51.17.027.0 ]--
r 98         s.push(start);
--[ 2019.11.06.20.51.17.243.0 ]--
+ 99         
--[ 2019.11.06.20.51.17.733.0 ]--
r 99         s
--[ 2019.11.06.20.51.17.808.0 ]--
r 99         s.
--[ 2019.11.06.20.51.18.058.0 ]--
r 99         s.p
--[ 2019.11.06.20.51.18.121.0 ]--
r 99         s.pu
--[ 2019.11.06.20.51.18.306.0 ]--
r 99         s.puh
--[ 2019.11.06.20.51.18.614.0 ]--
r 99         s.puh()
--[ 2019.11.06.20.51.18.828.0 ]--
r 99         s.puh
--[ 2019.11.06.20.51.18.942.0 ]--
r 99         s.pu
--[ 2019.11.06.20.51.19.017.0 ]--
r 99         s.pus
--[ 2019.11.06.20.51.19.098.0 ]--
r 99         s.push
--[ 2019.11.06.20.51.19.494.0 ]--
r 99         s.push()
--[ 2019.11.06.20.51.19.651.0 ]--
r 99         s.push(e)
--[ 2019.11.06.20.51.19.732.0 ]--
r 99         s.push(en)
--[ 2019.11.06.20.51.19.830.0 ]--
r 99         s.push(end)
--[ 2019.11.06.20.51.20.149.0 ]--
r 99         s.push(end);
--[ 2019.11.06.20.51.20.321.0 ]--
r 99         s.push(end); 
--[ 2019.11.06.20.51.20.385.0 ]--
r 99         s.push(end);
--[ 2019.11.06.20.51.23.100.0 ]--
r 100 
r 101 
--[ 2019.11.06.20.51.24.330.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.06.20.52.55.789.0 ]--
DisposeComponent
--[ 2019.11.07.16.35.40.031.0 ]--
NewLogger: P04_Pathfinding
Version: 1.3
--[ 2019.11.07.16.35.40.127.0 ]--
InitTree:
/out/production/P04_Pathfinding/.donotlog
/out/production/P04_Pathfinding/algs4.jar
/out/production/P04_Pathfinding/stdlib.jar
/out/production/P04_Pathfinding/Coord.class
/out/production/P04_Pathfinding/png2emap.py
/out/production/P04_Pathfinding/Walker.class
/out/production/P04_Pathfinding/Terrain.class
/out/production/P04_Pathfinding/ramp.png.emap
/out/production/P04_Pathfinding/ramp2.png.emap
/out/production/P04_Pathfinding/ramp3.png.emap
/out/production/P04_Pathfinding/mazeAB.png.emap
/out/production/P04_Pathfinding/usa128.png.emap
/out/production/P04_Pathfinding/usa256.png.emap
/out/production/P04_Pathfinding/Pathfinder.class
/out/production/P04_Pathfinding/usa1024.png.emap
/out/production/P04_Pathfinding/maze32_0.png.emap
/out/production/P04_Pathfinding/maze32_1.png.emap
/out/production/P04_Pathfinding/maze232_0.png.emap
/out/production/P04_Pathfinding/maze320_0.png.emap
/out/production/P04_Pathfinding/mazeBrain.png.emap
/out/production/P04_Pathfinding/TerrainEditor.class
/out/production/P04_Pathfinding/Pathfinder$PFNode.class
/out/production/P04_Pathfinding/PathfinderVisualizer.class
/out/production/P04_Pathfinding/InteractivePathfinderVisualizer.class
/src/algs4.jar
/src/Coord.java
/src/stdlib.jar
/src/Walker.java
/src/Terrain.java
/src/Pathfinder.java
/src/TerrainEditor.java
/src/PathfinderVisualizer.java
/src/InteractivePathfinderVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/heightmaps/.donotlog
/heightmaps/png2emap.py
/heightmaps/ramp.png.emap
/heightmaps/ramp2.png.emap
/heightmaps/ramp3.png.emap
/heightmaps/mazeAB.png.emap
/heightmaps/usa128.png.emap
/heightmaps/usa256.png.emap
/heightmaps/usa1024.png.emap
/heightmaps/maze32_0.png.emap
/heightmaps/maze32_1.png.emap
/heightmaps/maze232_0.png.emap
/heightmaps/maze320_0.png.emap
/heightmaps/mazeBrain.png.emap
/.cos265
/readme.html
/P04_Pathfinding.iml

--[ 2019.11.07.16.35.40.137.0 ]--
InitFile: /src/InteractivePathfinderVisualizer.java
import java.awt.event.KeyEvent;

/**
 * InteractivePathfinderVisualizer visualizes the terrain and the computed
 * path and allows the user to change parameters of the Pathfinder.  Below
 * is a list of commands and what they do.  Note: some of the commands
 * modify the properties of the path finder and some modify the terrain.
 *
 * Command        Action                                      Terrain
 * C              clear path
 * space          recompute path
 * S/E            set start/end location to mouse
 * left/right     halve/double path search heuristic value
 * 0/1            set path search heuristic to 0 or 1
 * W              start a walker to show the path
 * R              randomly generate a new terrain                *
 * M              smooths terrain under mouse                    *
 * shift+M        smooths all terrain                            *
 * up/down        increase/decrease terrain under mouse          *
 */

public class InteractivePathfinderVisualizer {
    private final static int DELAY = 10;

    // sets how many redraws it should take for the walker to reach its destination
    private final static float STEPS_TO_WALK = 100.0f;

    // for convenience, here are the emap files that are located under heightmaps/ folder
    // the python script in that folder converts png files to emap. \
    // you can use it to create your own maps to test your code
    private final static String[] emaps = {
            "maze32_0.png.emap",    // 0   (32x32 maze)
            "maze32_1.png.emap",    // 1   (another 32x32 maze)
            "maze232_0.png.emap",   // 2   (232x232 maze)
            "maze320_0.png.emap",   // 3   (same as maze32_0, only scaled up by 10x)
            "mazeAB.png.emap",      // 4   (a maze from a site no longer online :( )
            "mazeBrain.png.emap",   // 5   (...)
            "ramp.png.emap",        // 6   (some tests)
            "ramp2.png.emap",       // 7   (...)
            "ramp3.png.emap",       // 8   (...)
            "usa128.png.emap",      // 9   (elevation map of USA from https://bananas.openttd.org/en/heightmap/)
            "usa256.png.emap",      // 10  (same as usa128, only higher resolution)
            "usa1024.png.emap",     // 11  (same as usa128, only higher resolution
    };

    private final static String emapFilename = emaps[0];        // change index to load a different elevation map



    public static void main(String[] args) {
        Terrain terrain = new Terrain(emapFilename);
        Pathfinder pf = new Pathfinder(terrain);
        int N = terrain.getN();

        StdDraw.show(0);

        // set default starting and ending locations
        pf.setPathStart(new Coord(1, 1));
        pf.setPathEnd(new Coord(N-3, N-3));

        // find a path
        pf.computePath();

        PathfinderVisualizer.draw(terrain, pf, null, N);
        StdDraw.show(DELAY);

        // prevent repeated applications
        boolean keyboardR = false;
        boolean keyboardM = false;

        Walker walker = null;

        while(true) {
            boolean recompute = false;
            boolean redraw = false;

            // mouse location on map
            int mouseI = (int) ((StdDraw.mouseX()-24) / 464 * N);
            int mouseJ = (int) ((464 - (StdDraw.mouseY()-36)) / 464 * N);
            boolean isMouseOnMap = (mouseI >=0 && mouseI < N && mouseJ >= 0 && mouseJ < N);

            if(StdDraw.isKeyPressed(KeyEvent.VK_LEFT) || StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
                boolean keyboardLeft = StdDraw.isKeyPressed(KeyEvent.VK_LEFT);
                float m = keyboardLeft ? 0.5f : 2.0f;
                float h = pf.getHeuristic() * m;
                h = Math.max(1.0f/1024.0f, Math.min(1048576.0f, h));
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_0) || StdDraw.isKeyPressed(KeyEvent.VK_1)) {
                boolean keyboard0 = StdDraw.isKeyPressed(KeyEvent.VK_0);
                float h = keyboard0 ? 0 : 1;
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_C)) {
                pf.resetPath();
                walker = null;
                redraw = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_R) && !keyboardR) {
                TerrainEditor.setFractalHeights(terrain);
                TerrainEditor.clampHeights(terrain);
                recompute = true;
            }
            keyboardR = StdDraw.isKeyPressed(KeyEvent.VK_R);

            if(StdDraw.isKeyPressed(KeyEvent.VK_M)) {
                if(StdDraw.isKeyPressed(KeyEvent.VK_SHIFT)) {
                    if(!keyboardM) {
                        TerrainEditor.smoothHeights(terrain);
                        recompute = true;
                    }
                } else {
                    TerrainEditor.smoothHeights(mouseI, mouseJ, N / 20, true, terrain);
                    recompute = true;
                }
            }
            keyboardM = StdDraw.isKeyPressed(KeyEvent.VK_M);

            if(StdDraw.isKeyPressed(KeyEvent.VK_SPACE)) {
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_UP) || StdDraw.isKeyPressed(KeyEvent.VK_DOWN)) {
                boolean keyboardUp = StdDraw.isKeyPressed(KeyEvent.VK_UP);
                float add = keyboardUp ? 8.0f : -8.0f;
                TerrainEditor.addHeight(mouseI, mouseJ, N / 20, add, terrain);
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_S)) {
                pf.setPathStart(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_E)) {
                pf.setPathEnd(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_W)) {
                Iterable<Coord> path = pf.getPathSolution();
                if(path != null) {
                    walker = new Walker(terrain, pf.getPathSolution());
                }
            }

            if(walker != null) {
                if(walker.doneWalking()) {
                    walker = null;
                } else {
                    walker.advance(pf.getPathCost() / STEPS_TO_WALK);
                }
                redraw = true;
            }

            if(recompute) {
                walker = null;
                pf.resetPath();
                if(pf.getPathStart() != null && pf.getPathEnd() != null) {
                    pf.computePath();
                }
                redraw = true;
            }

            if(redraw) {
                PathfinderVisualizer.draw(terrain, pf, walker, N);
                StdDraw.show(DELAY);
            } else {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    /* do nothing */
                }
            }
        }
    }
}

--[ 2019.11.07.16.35.40.143.0 ]--
InitFile: /src/Terrain.java
import java.lang.IndexOutOfBoundsException;

/**
 * Terrain stores elevations for map and computes distance and
 * cost in traversing the terrain.
 */

public class Terrain {
    private int N;
    private int[][] heights;

    public Terrain(int N) {
        this.N = N;
        this.heights = new int[N][N];
    }

    public Terrain(int[][] heights) {
        this.N = heights.length;
        this.heights = heights;
    }

    public Terrain(String emapfile) {
        In in = new In(emapfile);
        this.N = in.readInt();
        this.heights = new int[N][N];
        for (int j = 0; j < N; j++) {
            for (int i = 0; i < N; i++) {
                this.heights[i][j] = in.readInt();
            }
        }
    }

    public int getN() {
        return N;
    }

    public void setHeight(int i, int j, int h) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        heights[i][j] = h;
    }
    public void setHeight(int i, int j, float h) {
        setHeight(i, j, (int) h);
    }
    public void setHeight(Coord loc, int h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }
    public void setHeight(Coord loc, float h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }

    public int getHeight(int i, int j) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        return heights[i][j];
    }
    public int getHeight(Coord loc) {
        return getHeight(loc.getI(), loc.getJ());
    }

    // computes distance between (i0,j0) and (i1,j1) as the crow flies
    public float computeDistance(int i0, int j0, int i1, int j1) {
        return (float)Math.sqrt((i0 - i1) * (i0 - i1) + (j0 - j1) * (j0 - j1));
    }
    public float computeDistance(Coord c0, Coord c1) {
        return computeDistance(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }

    public float computeTravelCost(int i0, int j0, int i1, int j1) {
        float h0 = getHeight(i0, j0), h1 = getHeight(i1, j1);
        float climb = (float)Math.pow(Math.abs(h0 - h1) * 1000.0, 1.5);
        float dist = computeDistance(i0,j0, i1,j1);
        return (1.0f + climb) * dist;
    }
    public float computeTravelCost(Coord c0, Coord c1) {
        return computeTravelCost(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }
    public float computeTravelCost(Iterable<Coord> cs) {
        Coord c0 = null;
        float cost = 0.0f;
        for(Coord c1 : cs) {
            if(c0 != null) cost += computeTravelCost(c0, c1);
            c0 = c1;
        }
        return cost;
    }
}

--[ 2019.11.07.16.35.40.154.0 ]--
InitFile: /src/Walker.java
import java.util.Iterator;

/**
 * Walker takes an Iterable of Coords and simulates an individual
 * walking along the path over the given Terrain
 */
public class Walker {

    // terrain: the Terrain the Walker traverses
    // path: the sequence of Coords the Walker follows
    public Walker(Terrain terrain, Iterable<Coord> path) {
    }

    // returns the Walker's current location
    public Coord getLocation() {
        return null;
    }

    // returns true if Walker has reached the end Coord (last in path)
    public boolean doneWalking() {
        return true;
    }

    // advances the Walker along path
    // byTime: how long the Walker should traverse (may be any non-negative value)
    public void advance(float byTime) {
    }

}

--[ 2019.11.07.16.35.40.160.0 ]--
InitFile: /src/PathfinderVisualizer.java
/**
 * PathfinderVisualizer visualizes the terrain and found path.
 */

import java.awt.Color;
import java.awt.Font;

public class PathfinderVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // color for different elevations.  must be in ascending order!
    private final static int[][] elevationColors = {
            // h    r   g   b   where h=height, r=red, g=green, b=blue
            {  0,   0,  0,  0},
            {  2,   0,  0,160},
            {  4,   0,224,224},
            { 16, 192,192,  0},
            { 64,  16,255, 16},
            {128,  32,224, 32},
            {192, 128,128,  8},
            {224, 164,164,164},
            {255, 255,255,255}
    };

    private final static Color cStart    = new Color(128, 128, 255);
    private final static Color cEnd      = new Color(255, 128, 128);
    private final static Color cSolution = new Color(255, 128, 255);
    private final static Color cSearched = new Color(128,   0, 128);

    // linearly interpolating between the corresponding rgb values
    private static Color colorLERP(float v1, int r0, int g0, int b0, int r1, int g1, int b1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * r0 + v1 * r1);
        int g = (int)(v0 * g0 + v1 * g1);
        int b = (int)(v0 * b0 + v1 * b1);
        return new Color(r, g, b);
    }
    private static Color colorLERP(float v1, Color c0, Color c1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * c0.getRed()   + v1 * c1.getRed());
        int g = (int)(v0 * c0.getGreen() + v1 * c1.getGreen());
        int b = (int)(v0 * c0.getBlue()  + v1 * c1.getBlue());
        int a = (int)(v0 * c0.getAlpha() + v1 * c1.getAlpha());
        return new Color(r, g, b, a);
    }

    // returns color for given height
    private static Color height2Color(int h) {
        h = Math.max(0, Math.min(255, h));

        int[] ec0 = elevationColors[0];  // default lower bound
        int[] ec1 = elevationColors[1];  // default upper bound

        // find upper bound while updating lower bound
        for(int i = 1; i < elevationColors.length; i++) {
            ec1 = elevationColors[i];
            if(h >= ec0[0] && h <= ec1[0]) break;
            ec0 = ec1;
        }

        int h0=ec0[0], r0=ec0[1], g0=ec0[2], b0=ec0[3];
        int h1=ec1[0], r1=ec1[1], g1=ec1[2], b1=ec1[3];
        float v1 = ((float)(h - h0)) / ((float)(h1 - h0));

        return colorLERP(v1, r0, g0, b0, r1, g1, b1);
    }

    private static void drawCircle(int i, int j, int N, double rad) {
        int c = (int)((i+0.5f) * 464.0f / N);
        int r = (int)((j+0.5f) * 464.0f / N);
        StdDraw.circle(c + 24, 464 - r + 36, rad);
    }
    public static void drawCircle(Coord loc, int N, double rad) {
        drawCircle(loc.getI(), loc.getJ(), N, rad);
    }

    private static void drawPath(Iterable<Coord> path, int N) {
        boolean first = true;
        int c0 = 0, r0 = 0;
        for (Coord loc : path) {
            int c1 = (int)((loc.getI()+0.5f) * 464.0f / N);
            int r1 = (int)((loc.getJ()+0.5f) * 464.0f / N);
            if(!first) {
                StdDraw.line(c0 + 24, 464 - r0 + 36, c1 + 24, 464 - r1 + 36);
            }
            first = false;
            c0 = c1; r0 = r1;
        }
    }

    // draw N-by-N pathfinding map
    public static void draw(Terrain terrain, Pathfinder pf, Walker walker, int N) {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.filledSquare(256, 256 + 12, 464 / 2);

        // draw terrain
        for(int row = 0; row < 464; row++) {
            int j = (int)((float)row/464.0f * N);
            for(int col = 0; col < 464; col++) {
                int i = (int)((float)col/464.0f * N);
                Coord loc = new Coord(i,j);
                Color c = height2Color(terrain.getHeight(loc));
                if(pf.wasSearched(loc)) {
                    c = colorLERP(0.50f, c, cSearched);
                }
                StdDraw.setPenColor(c);
                StdDraw.filledSquare(col + 24, 464 - row + 36, 1);
            }
        }

        // draw path start
        if(pf.getPathStart() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathStart(), N, 4.0);

            StdDraw.setPenColor(cStart);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathStart(), N, 4.0);
        }

        // draw path end
        if(pf.getPathEnd() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathEnd(), N, 4.0);

            StdDraw.setPenColor(cEnd);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathEnd(), N, 4.0);
        }

        // draw found path
        if(pf.foundPath()) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawPath(pf.getPathSolution(), N);

            StdDraw.setPenColor(cSolution);
            StdDraw.setPenRadius(0.002);
            drawPath(pf.getPathSolution(), N);
        }

        // draw walker
        if(walker != null) {
            Coord loc = walker.getLocation();
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);

            StdDraw.setPenColor(StdDraw.WHITE);
            StdDraw.setPenRadius(0.002);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);
        }

        // write status text
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.text(96, 12, "heuristic: " + pf.getHeuristic());
        if(pf.foundPath()) StdDraw.text(256, 12, "path: " + pf.getPathCost());
        else               StdDraw.text(256, 12, "no path found");
        StdDraw.text(512-96, 12, "searched: " + pf.getSearchSize() + " (" + (int)(100.0f * pf.getSearchSize() / (N*N)) + "%)");
    }
}

--[ 2019.11.07.16.35.40.173.0 ]--
InitFile: /.cos265


--[ 2019.11.07.16.35.40.184.0 ]--
InitFile: /src/Coord.java
/**
 * Coordinates is an immutable type that store the tuple (i, j)
 */
public final class Coord {
    private final int i;
    private final int j;

    public Coord(int i, int j) {
        this.i = i;
        this.j = j;
    }

    public int getI() { return i; }
    public int getJ() { return j; }

    public boolean isInBounds(int minI, int minJ, int maxI, int maxJ) {
        return i >= minI && j >= minJ && i <= maxI && j <= maxJ;
    }
    public boolean isInBounds(Coord min, Coord max) {
        return i >= min.i && i <= max.i && j >= min.j && j <= max.j;
    }

    public Coord add(int addI, int addJ) {
        return new Coord(i + addI, j + addJ);
    }
    public Coord add(Coord that) { return new Coord(i + that.i, j + that.j); }

    public String toString() { return "(" + i + "," + j + ")"; }

    public boolean equals(Object o) {
        if(this == o) return true;
        if(o == null) return false;
        if(o.getClass() != this.getClass()) return false;
        Coord that = (Coord) o;
        if(this.i != that.i) return false;
        if(this.j != that.j) return false;
        return true;
    }
}

--[ 2019.11.07.16.35.40.194.0 ]--
InitFile: /P04_Pathfinding.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/heightmaps" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.11.07.16.35.40.199.0 ]--
InitFile: /src/TerrainEditor.java
/**
 * The following class provides some simple terrain editing functions.
 */
public class TerrainEditor {
    private static float rndRadius(float d) {
        return (float)StdRandom.uniform(-d,d);
    }

    private static float getFractalHeight(int i, int j, float dh, Terrain terrain, boolean[] isset) {
        int N = terrain.getN();
        dh = Math.max(-64, Math.min(255+64, dh));   // allow the height to go just a bit out of range
        if(!isset[i + j * N]) {
            isset[i + j * N] = true;
            terrain.setHeight(i, j, dh);
        }
        return terrain.getHeight(i,j);
    }

    private static void setFractalHeights(int i0, int j0, int i1, int j1, Terrain terrain, boolean[] isset) {
        int id = i1-i0;
        int jd = j1-j0;
        int i01 = (i0+i1)/2;
        int j01 = (j0+j1)/2;

        if(id <= 1 && jd <= 1) return;

        float h00 = getFractalHeight(i0,j0,32,terrain,isset);
        float h01 = getFractalHeight(i0,j1,32,terrain,isset);
        float h10 = getFractalHeight(i1,j0,32,terrain,isset);
        float h11 = getFractalHeight(i1,j1,32,terrain,isset);

        float d = (float)(Math.sqrt((i1-i0)*(i1-i0) + (j1-j0)*(j1-j0)) * 0.5);

        float d0001 = (h00 + h01) / 2 + rndRadius(d);
        float d0010 = (h00 + h10) / 2 + rndRadius(d);
        float d1101 = (h11 + h01) / 2 + rndRadius(d);
        float d1110 = (h11 + h10) / 2 + rndRadius(d);

        float h0001 = getFractalHeight(i0, j01, d0001, terrain,isset);
        float h0010 = getFractalHeight(i01, j0, d0010, terrain,isset);
        float h1101 = getFractalHeight(i01, j1, d1101, terrain,isset);
        float h1110 = getFractalHeight(i1, j01, d1110, terrain,isset);

        float dm = (float)((h0001 + h0010 + h1101 + h1110) / 4.0);
        float hm = getFractalHeight(i01, j01, dm, terrain,isset);

        if(id > 1 && jd > 1) {
            setFractalHeights(i0, j0, i01, j01, terrain, isset);
            setFractalHeights(i01, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i01, j1, terrain, isset);
            setFractalHeights(i01, j01, i1, j1, terrain, isset);
        } else if(jd > 1) {
            setFractalHeights(i0, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i1, j1, terrain, isset);
        } else {
            setFractalHeights(i0, j0, i01, j1, terrain, isset);
            setFractalHeights(i01, j0, i1, j1, terrain, isset);
        }
    }

    public static void setFractalHeights(Terrain terrain) {
        int N = terrain.getN();
        boolean[] isset = new boolean[N*N];
        setFractalHeights(0, 0, N - 1, N - 1, terrain, isset);
    }

    public static void smoothHeights(Terrain terrain) {
        int N = terrain.getN();
        int radius = (int)Math.ceil(Math.sqrt(N*N/2.0f));
        smoothHeights(N/2, N/2, radius, false, terrain);
    }

    public static void smoothHeights(int ic, int jc, int radius, boolean fallOff, Terrain terrain) {
        final int N = terrain.getN();
        final int w = 2*radius+1;
        float[] s = new float[w*w];
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;

                float m = computeEffect(i, j, ic, jc, radius, fallOff, N);
                if(m <= 0.0000001) {
                    s[sidx] = terrain.getHeight(i,j);
                    continue;
                }
                float h = 0;
                int c = 0;
                if(i > 0 && j > 0) {
                    h += terrain.getHeight(i-1,j-1);
                    c += 1;
                }
                if(i < N-1 && j > 0) {
                    h += terrain.getHeight(i+1,j-1);
                    c += 1;
                }
                if(i > 0 && j < N-1) {
                    h += terrain.getHeight(i-1,j+1);
                    c += 1;
                }
                if(i < N-1 && j < N-1) {
                    h += terrain.getHeight(i+1,j+1);
                    c += 1;
                }
                if(i > 0) {
                    h += terrain.getHeight(i-1,j);
                    c += 1;
                }
                if(j > 0) {
                    h += terrain.getHeight(i,j-1);
                    c += 1;
                }
                if(i < N-1) {
                    h += terrain.getHeight(i+1,j);
                    c += 1;
                }
                if(j < N-1) {
                    h += terrain.getHeight(i,j+1);
                    c += 1;
                }
                s[sidx] = (1-m) * terrain.getHeight(i,j) + m * h / c;
            }
        }
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;
                terrain.setHeight(i, j, s[sidx]);
            }
        }
    }

    public static void clampHeights(Terrain terrain) {
        int N = terrain.getN();
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                terrain.setHeight(i, j, Math.max(0, Math.min(255, terrain.getHeight(i, j))));
            }
        }
    }

    private static float computeEffect(int i, int j, int ic, int jc, int radius, boolean fallOff, int N) {
        if(i < 0 || j < 0 || i >= N || j >= N) return 0;
        if(!fallOff) return 1;
        int d2 = (ic-i)*(ic-i)+(jc-j)*(jc-j);
        if(d2 > radius*radius) return 0;
        return ((float)radius - (float)Math.sqrt(d2)) / (float)radius;
    }

    public static void addHeight(int i, int j, int radius, float add, Terrain terrain) {
        final int N = terrain.getN();
        for(int ja = -radius; ja <= radius; ja++) {
            int r = j + ja;
            if(r < 0 || r >= N) continue;
            for(int ia = -radius; ia <= radius; ia++) {
                int c = i + ia;
                if(c < 0 || c >= N) continue;
                float v = add * computeEffect(c, r, i, j, radius, true, N);
                float h = terrain.getHeight(c, r) + v;
                h = Math.max(0, Math.min(255, h));
                terrain.setHeight(c, r, h);
            }
        }
    }
}

--[ 2019.11.07.16.35.40.207.0 ]--
InitFile: /src/Pathfinder.java
import java.lang.IndexOutOfBoundsException;
import java.lang.IllegalArgumentException;
import java.util.Iterator;

/**
 * Pathfinder uses A* search to find a near optimal path
 * between to locations with given terrain.
 */

public class Pathfinder {

    private Coord start;
    private Coord end;
    private float heuristic;
    private boolean pathFound;
    private Stack<Coord> s;


    /**
     * PFNode will be the key for MinPQ (used in computePath())
     */
    private class PFNode implements Comparable<PFNode> {
        // loc: the location of the PFNode
        // fromNode: how did we get here? (linked list back to start)
        public PFNode(Coord loc, PFNode fromNode) {
        }

        // compares this with that, used to find minimum cost PFNode
        public int compareTo(PFNode that) {
            return 0;
        }

        // returns the cost to travel from starting point to this
        // via the fromNode chain
        public float getCost(float heuristic) {
            return 0;
        }

        // returns if this PFNode is not marked invalid
        public boolean isValid() {
            return false;
        }

        // marks the PFNode as invalid
        public void invalidate() {
        }

        // returns if the PFNode is marked as used
        public boolean isUsed() {
            return true;
        }

        // marks the PFNode as used
        public void use() { }

        // returns an Iterable of PFNodes that surround this
        public Iterable<PFNode> neighbors() {
            Stack<PFNode> s = new Stack<>();
            s.push(new PFNode(null, null));
            return s;
        }
    }

    public Pathfinder(Terrain terrain) {
    }

    public void setPathStart(Coord loc) {
        start = loc;
    }

    public Coord getPathStart() {
        return start;
    }

    public void setPathEnd(Coord loc) {
        end = loc;
    }

    public Coord getPathEnd() {
        return end;
    }

    public void setHeuristic(float v)
    {
        heuristic = v;
    }

    public float getHeuristic() {
        return heuristic;
    }

    public void resetPath() {
    }

    public void computePath() {
        MinPQ<PFNode> pfQueue = new MinPQ<>();
        s = new Stack<>();
        s.push(start);
        s.push(end);


        pathFound = true;
    }

    public boolean foundPath() {
        return pathFound;
    }

    public float getPathCost() {
        return 0;
    }

    public int getSearchSize() {
        return 0;
    }

    public Iterable<Coord> getPathSolution() {

        /*
        Stack<Coord> s = new Stack<>();
        s.push(start);
        s.push(end);
        */

        //Return a stack of coordinates for the visualizer
        return s;
    }

    public boolean wasSearched(Coord loc) {
        return false;
    }
}

--[ 2019.11.07.16.39.08.649.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.16.40.35.482.0 ]--
:/src/Pathfinder.java
+ 97         
--[ 2019.11.07.16.40.36.541.0 ]--
+ 97         
--[ 2019.11.07.16.40.40.443.0 ]--
r 98         C
--[ 2019.11.07.16.40.40.548.0 ]--
r 98         Co
--[ 2019.11.07.16.40.40.641.0 ]--
r 98         Coo
--[ 2019.11.07.16.40.40.698.0 ]--
r 98         Coor
--[ 2019.11.07.16.40.40.970.0 ]--
r 98         Coord
--[ 2019.11.07.16.40.41.137.0 ]--
r 98         Coord 
--[ 2019.11.07.16.40.41.929.0 ]--
r 98         Coord
--[ 2019.11.07.16.40.42.778.0 ]--
r 98         Coord()
--[ 2019.11.07.16.40.42.856.0 ]--
r 98         Coord(0)
--[ 2019.11.07.16.40.43.629.0 ]--
r 98         Coord()
--[ 2019.11.07.16.40.44.022.0 ]--
r 98         Coord
--[ 2019.11.07.16.40.45.611.0 ]--
r 98         Coord 
--[ 2019.11.07.16.40.46.596.0 ]--
r 98         Coord a
--[ 2019.11.07.16.40.46.630.0 ]--
r 98         Coord as
--[ 2019.11.07.16.40.46.785.0 ]--
r 98         Coord asd
--[ 2019.11.07.16.40.46.934.0 ]--
r 98         Coord asdf
--[ 2019.11.07.16.40.47.022.0 ]--
r 98         Coord asdf 
--[ 2019.11.07.16.40.47.103.0 ]--
r 98         Coord asdf =
--[ 2019.11.07.16.40.47.559.0 ]--
r 98         Coord asdf = 
--[ 2019.11.07.16.40.47.661.0 ]--
r 98         Coord asdf = n
--[ 2019.11.07.16.40.47.806.0 ]--
r 98         Coord asdf = ne
--[ 2019.11.07.16.40.47.909.0 ]--
r 98         Coord asdf = new
--[ 2019.11.07.16.40.48.109.0 ]--
r 98         Coord asdf = new 
--[ 2019.11.07.16.40.48.421.0 ]--
r 98         Coord asdf = new C
--[ 2019.11.07.16.40.48.584.0 ]--
r 98         Coord asdf = new Co
--[ 2019.11.07.16.40.48.688.0 ]--
r 98         Coord asdf = new Coo
--[ 2019.11.07.16.40.48.794.0 ]--
r 98         Coord asdf = new Coor
--[ 2019.11.07.16.40.48.978.0 ]--
r 98         Coord asdf = new Coord
--[ 2019.11.07.16.40.50.690.0 ]--
r 98         Coord asdf = new Coord()
--[ 2019.11.07.16.40.56.767.0 ]--
r 98         
--[ 2019.11.07.16.40.57.191.0 ]--
r 98         P
--[ 2019.11.07.16.40.57.269.0 ]--
r 98         PF
--[ 2019.11.07.16.40.57.628.0 ]--
r 98         PFN
--[ 2019.11.07.16.40.57.802.0 ]--
r 98         PFNo
--[ 2019.11.07.16.40.57.881.0 ]--
r 98         PFNod
--[ 2019.11.07.16.40.57.927.0 ]--
r 98         PFNode
--[ 2019.11.07.16.40.58.076.0 ]--
r 98         PFNode 
--[ 2019.11.07.16.40.58.815.0 ]--
r 98         PFNode a
--[ 2019.11.07.16.40.58.908.0 ]--
r 98         PFNode as
--[ 2019.11.07.16.40.59.343.0 ]--
r 98         PFNode asd
--[ 2019.11.07.16.40.59.493.0 ]--
r 98         PFNode asdf
--[ 2019.11.07.16.40.59.558.0 ]--
r 98         PFNode asdf 
--[ 2019.11.07.16.40.59.648.0 ]--
r 98         PFNode asdf =
--[ 2019.11.07.16.40.59.723.0 ]--
r 98         PFNode asdf = 
--[ 2019.11.07.16.40.59.991.0 ]--
r 98         PFNode asdf = n
--[ 2019.11.07.16.41.00.084.0 ]--
r 98         PFNode asdf = ne
--[ 2019.11.07.16.41.00.203.0 ]--
r 98         PFNode asdf = new
--[ 2019.11.07.16.41.00.344.0 ]--
r 98         PFNode asdf = new 
--[ 2019.11.07.16.41.00.542.0 ]--
r 98         PFNode asdf = new F
--[ 2019.11.07.16.41.01.030.0 ]--
r 98         PFNode asdf = new 
--[ 2019.11.07.16.41.01.228.0 ]--
r 98         PFNode asdf = new P
--[ 2019.11.07.16.41.01.333.0 ]--
r 98         PFNode asdf = new PF
--[ 2019.11.07.16.41.01.585.0 ]--
r 98         PFNode asdf = new PFN
--[ 2019.11.07.16.41.01.795.0 ]--
r 98         PFNode asdf = new PFNo
--[ 2019.11.07.16.41.01.871.0 ]--
r 98         PFNode asdf = new PFNod
--[ 2019.11.07.16.41.01.931.0 ]--
r 98         PFNode asdf = new PFNode
--[ 2019.11.07.16.41.02.411.0 ]--
r 98         PFNode asdf = new PFNode()
--[ 2019.11.07.16.41.02.559.0 ]--
r 98         PFNode asdf = new PFNode(s)
--[ 2019.11.07.16.41.02.754.0 ]--
r 98         PFNode asdf = new PFNode(st)
--[ 2019.11.07.16.41.02.814.0 ]--
r 98         PFNode asdf = new PFNode(sta)
--[ 2019.11.07.16.41.02.942.0 ]--
r 98         PFNode asdf = new PFNode(star)
--[ 2019.11.07.16.41.03.075.0 ]--
r 98         PFNode asdf = new PFNode(start)
--[ 2019.11.07.16.41.03.373.0 ]--
r 98         PFNode asdf = new PFNode(start,)
--[ 2019.11.07.16.41.03.839.0 ]--
r 98         PFNode asdf = new PFNode(start, )
--[ 2019.11.07.16.41.04.195.0 ]--
r 98         PFNode asdf = new PFNode(start, n)
--[ 2019.11.07.16.41.04.283.0 ]--
r 98         PFNode asdf = new PFNode(start, nu)
--[ 2019.11.07.16.41.04.434.0 ]--
r 98         PFNode asdf = new PFNode(start, nuk)
--[ 2019.11.07.16.41.04.532.0 ]--
r 98         PFNode asdf = new PFNode(start, nukk)
--[ 2019.11.07.16.41.05.126.0 ]--
r 98         PFNode asdf = new PFNode(start, nukk
--[ 2019.11.07.16.41.05.218.0 ]--
r 98         PFNode asdf = new PFNode(start, nuk
--[ 2019.11.07.16.41.05.453.0 ]--
r 98         PFNode asdf = new PFNode(start, nukl
--[ 2019.11.07.16.41.05.558.0 ]--
r 98         PFNode asdf = new PFNode(start, nukll
--[ 2019.11.07.16.41.05.808.0 ]--
r 98         PFNode asdf = new PFNode(start, nukl
--[ 2019.11.07.16.41.05.906.0 ]--
r 98         PFNode asdf = new PFNode(start, nuk
--[ 2019.11.07.16.41.06.000.0 ]--
r 98         PFNode asdf = new PFNode(start, nu
--[ 2019.11.07.16.41.06.207.0 ]--
r 98         PFNode asdf = new PFNode(start, nul
--[ 2019.11.07.16.41.06.302.0 ]--
r 98         PFNode asdf = new PFNode(start, null
--[ 2019.11.07.16.41.06.462.0 ]--
r 98         PFNode asdf = new PFNode(start, null()
--[ 2019.11.07.16.41.07.315.0 ]--
r 98         PFNode asdf = new PFNode(start, null)
--[ 2019.11.07.16.41.07.805.0 ]--
r 98         PFNode asdf = new PFNode(start, nul)
--[ 2019.11.07.16.41.09.093.0 ]--
r 98         PFNode asdf = new PFNode(start, null)
--[ 2019.11.07.16.41.09.381.0 ]--
r 98         PFNode asdf = new PFNode(start, null);
--[ 2019.11.07.16.41.09.795.0 ]--
r 98         PFNode asdf = new PFNode(start, null); 
--[ 2019.11.07.16.41.09.851.0 ]--
r 98         PFNode asdf = new PFNode(start, null);
--[ 2019.11.07.16.41.10.261.0 ]--
+ 99         
--[ 2019.11.07.16.41.10.708.0 ]--
+ 99         
--[ 2019.11.07.16.41.12.643.0 ]--
+ 99         
--[ 2019.11.07.16.41.12.884.0 ]--
r 100         c
--[ 2019.11.07.16.41.12.962.0 ]--
r 100         co
--[ 2019.11.07.16.41.13.006.0 ]--
r 100         con
--[ 2019.11.07.16.41.13.075.0 ]--
r 100         cons
--[ 2019.11.07.16.41.13.141.0 ]--
r 100         conso
--[ 2019.11.07.16.41.13.701.0 ]--
r 100         cons
--[ 2019.11.07.16.41.13.806.0 ]--
r 100         con
--[ 2019.11.07.16.41.13.927.0 ]--
r 100         co
--[ 2019.11.07.16.41.14.053.0 ]--
r 100         c
--[ 2019.11.07.16.41.14.342.0 ]--
r 100         
--[ 2019.11.07.16.41.14.524.0 ]--
r 100         S
--[ 2019.11.07.16.41.14.671.0 ]--
r 100         St
--[ 2019.11.07.16.41.14.814.0 ]--
r 100         Std
--[ 2019.11.07.16.41.14.991.0 ]--
r 100         StdOut
--[ 2019.11.07.16.41.15.116.0 ]--
r 100         StdOut.
--[ 2019.11.07.16.41.15.306.0 ]--
r 100         StdOut.p
--[ 2019.11.07.16.41.15.727.0 ]--
r 100         StdOut.println
--[ 2019.11.07.16.41.15.746.0 ]--
r 100         StdOut.println()
--[ 2019.11.07.16.41.15.762.0 ]--
r 100         StdOut.println();
--[ 2019.11.07.16.41.16.515.0 ]--
r 100         StdOut.println(a);
--[ 2019.11.07.16.41.16.583.0 ]--
r 100         StdOut.println(as);
--[ 2019.11.07.16.41.16.674.0 ]--
r 100         StdOut.println(asd);
--[ 2019.11.07.16.41.16.844.0 ]--
r 100         StdOut.println(asdf);
--[ 2019.11.07.16.41.18.866.0 ]--
r 97 
r 99 
r 101 
--[ 2019.11.07.16.41.20.224.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.16.41.25.916.0 ]--
r 100         StdOut.println(asdf.);
--[ 2019.11.07.16.41.28.270.0 ]--
r 100         StdOut.println(asdf.getCost);
--[ 2019.11.07.16.41.28.277.0 ]--
r 100         StdOut.println(asdf.getCost());
--[ 2019.11.07.16.41.32.011.0 ]--
r 100         StdOut.println(asdf);
--[ 2019.11.07.16.41.32.842.0 ]--
r 100         StdOut.println(asdf.);
--[ 2019.11.07.16.41.45.222.0 ]--
r 100         
--[ 2019.11.07.16.41.45.405.0 ]--
- 99
--[ 2019.11.07.16.41.45.756.0 ]--
- 99
--[ 2019.11.07.16.41.54.014.0 ]--
+ 26             
--[ 2019.11.07.16.41.54.740.0 ]--
r 26             l
--[ 2019.11.07.16.41.54.888.0 ]--
r 26             lo
--[ 2019.11.07.16.41.54.956.0 ]--
r 26             loc
--[ 2019.11.07.16.41.55.266.0 ]--
r 26             loca
--[ 2019.11.07.16.41.55.446.0 ]--
r 26             locai
--[ 2019.11.07.16.41.55.519.0 ]--
r 26             locaio
--[ 2019.11.07.16.41.55.764.0 ]--
r 26             locai
--[ 2019.11.07.16.41.55.834.0 ]--
r 26             loca
--[ 2019.11.07.16.41.55.942.0 ]--
r 26             locat
--[ 2019.11.07.16.41.56.057.0 ]--
r 26             locato
--[ 2019.11.07.16.41.56.324.0 ]--
r 26             locat
--[ 2019.11.07.16.41.56.482.0 ]--
r 26             locati
--[ 2019.11.07.16.41.56.570.0 ]--
r 26             locatio
--[ 2019.11.07.16.41.56.649.0 ]--
r 26             location
--[ 2019.11.07.16.41.56.778.0 ]--
r 26             location 
--[ 2019.11.07.16.41.56.865.0 ]--
r 26             location =
--[ 2019.11.07.16.41.57.201.0 ]--
r 26             location = 
--[ 2019.11.07.16.41.57.438.0 ]--
r 26             location = n
--[ 2019.11.07.16.41.57.464.0 ]--
r 26             location = no
--[ 2019.11.07.16.41.57.535.0 ]--
r 26             location = nod
--[ 2019.11.07.16.41.57.587.0 ]--
r 26             location = node
--[ 2019.11.07.16.41.58.244.0 ]--
r 26             location = node 
--[ 2019.11.07.16.41.58.273.0 ]--
r 26             location = node
--[ 2019.11.07.16.41.58.385.0 ]--
r 26             location = nod
--[ 2019.11.07.16.41.58.508.0 ]--
r 26             location = no
--[ 2019.11.07.16.41.58.635.0 ]--
r 26             location = n
--[ 2019.11.07.16.41.58.798.0 ]--
r 26             location = 
--[ 2019.11.07.16.41.59.273.0 ]--
r 26             location = l
--[ 2019.11.07.16.41.59.629.0 ]--
r 26             location = lo
--[ 2019.11.07.16.41.59.710.0 ]--
r 26             location = loc
--[ 2019.11.07.16.42.00.321.0 ]--
r 26             location = loc;
--[ 2019.11.07.16.42.00.918.0 ]--
r 26             location = loc
--[ 2019.11.07.16.42.01.034.0 ]--
r 26             location = 
--[ 2019.11.07.16.42.01.282.0 ]--
r 26             location 
--[ 2019.11.07.16.42.01.622.0 ]--
r 26             
--[ 2019.11.07.16.43.38.367.0 ]--
- 26
--[ 2019.11.07.16.43.38.762.0 ]--
+ 26             
--[ 2019.11.07.16.43.40.170.0 ]--
r 26             f
--[ 2019.11.07.16.43.40.238.0 ]--
r 26             fl
--[ 2019.11.07.16.43.40.387.0 ]--
r 26             flo
--[ 2019.11.07.16.43.40.745.0 ]--
r 26             fl
--[ 2019.11.07.16.43.40.850.0 ]--
r 26             f
--[ 2019.11.07.16.43.40.989.0 ]--
r 26             
--[ 2019.11.07.16.43.42.481.0 ]--
r 26             C
--[ 2019.11.07.16.43.42.591.0 ]--
r 26             Co
--[ 2019.11.07.16.43.42.704.0 ]--
r 26             Coo
--[ 2019.11.07.16.43.42.776.0 ]--
r 26             Coor
--[ 2019.11.07.16.43.42.911.0 ]--
r 26             Coord
--[ 2019.11.07.16.43.43.082.0 ]--
r 26             Coord 
--[ 2019.11.07.16.43.43.161.0 ]--
r 26             Coord l
--[ 2019.11.07.16.43.43.310.0 ]--
r 26             Coord lo
--[ 2019.11.07.16.43.43.568.0 ]--
r 26             Coord loc
--[ 2019.11.07.16.43.43.722.0 ]--
r 26             Coord loca
--[ 2019.11.07.16.43.43.819.0 ]--
r 26             Coord locat
--[ 2019.11.07.16.43.43.895.0 ]--
r 26             Coord locati
--[ 2019.11.07.16.43.43.948.0 ]--
r 26             Coord locatio
--[ 2019.11.07.16.43.44.016.0 ]--
r 26             Coord location
--[ 2019.11.07.16.43.44.194.0 ]--
r 26             Coord location=
--[ 2019.11.07.16.43.44.390.0 ]--
r 26             Coord location
--[ 2019.11.07.16.43.44.530.0 ]--
r 26             Coord location 
--[ 2019.11.07.16.43.44.591.0 ]--
r 26             Coord location =
--[ 2019.11.07.16.43.44.700.0 ]--
r 26             Coord location = 
--[ 2019.11.07.16.43.44.841.0 ]--
r 26             Coord location = l
--[ 2019.11.07.16.43.45.074.0 ]--
r 26             Coord location = lo
--[ 2019.11.07.16.43.45.156.0 ]--
r 26             Coord location = loc
--[ 2019.11.07.16.43.45.256.0 ]--
r 26             Coord location = loc;
--[ 2019.11.07.16.43.46.096.0 ]--
r 26             Coord location = loc; 
--[ 2019.11.07.16.43.46.136.0 ]--
r 26             Coord location = loc;
--[ 2019.11.07.16.43.49.445.0 ]--
+ 59             
--[ 2019.11.07.16.43.49.686.0 ]--
r 59             l
--[ 2019.11.07.16.43.49.858.0 ]--
r 59             lo
--[ 2019.11.07.16.43.50.046.0 ]--
r 59             loc
--[ 2019.11.07.16.43.50.152.0 ]--
r 59             loca
--[ 2019.11.07.16.43.50.268.0 ]--
r 59             locat
--[ 2019.11.07.16.43.50.322.0 ]--
r 59             locati
--[ 2019.11.07.16.43.50.403.0 ]--
r 59             locatio
--[ 2019.11.07.16.43.50.488.0 ]--
r 59             location
--[ 2019.11.07.16.43.50.781.0 ]--
r 59             location 
--[ 2019.11.07.16.43.50.859.0 ]--
r 59             location =
--[ 2019.11.07.16.43.50.954.0 ]--
r 59             location = 
--[ 2019.11.07.16.43.52.095.0 ]--
r 59             location 
--[ 2019.11.07.16.43.52.289.0 ]--
r 59             
--[ 2019.11.07.16.43.53.292.0 ]--
- 59
--[ 2019.11.07.16.43.54.659.0 ]--
+ 59             
--[ 2019.11.07.16.43.54.909.0 ]--
r 59             t
--[ 2019.11.07.16.43.55.024.0 ]--
r 59             th
--[ 2019.11.07.16.43.55.071.0 ]--
r 59             thi
--[ 2019.11.07.16.43.55.198.0 ]--
r 59             this
--[ 2019.11.07.16.43.55.349.0 ]--
r 59             this.
--[ 2019.11.07.16.43.55.641.0 ]--
r 59             this.l
--[ 2019.11.07.16.43.55.800.0 ]--
r 59             this.lo
--[ 2019.11.07.16.43.55.900.0 ]--
r 59             this.loc
--[ 2019.11.07.16.43.56.009.0 ]--
r 59             this.loca
--[ 2019.11.07.16.43.56.114.0 ]--
r 59             this.locat
--[ 2019.11.07.16.43.56.168.0 ]--
r 59             this.locati
--[ 2019.11.07.16.43.56.240.0 ]--
r 59             this.locatio
--[ 2019.11.07.16.43.56.688.0 ]--
r 59             this.
--[ 2019.11.07.16.43.56.928.0 ]--
r 59             this
--[ 2019.11.07.16.43.57.373.0 ]--
r 59             
--[ 2019.11.07.16.43.57.664.0 ]--
- 59
--[ 2019.11.07.16.44.02.017.0 ]--
r 26 
--[ 2019.11.07.16.44.03.012.0 ]--
- 26
--[ 2019.11.07.16.44.03.219.0 ]--
+ 26             
--[ 2019.11.07.16.44.50.641.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.16.45.48.241.0 ]--
+ 103         
--[ 2019.11.07.16.45.48.666.0 ]--
r 103         f
--[ 2019.11.07.16.45.48.755.0 ]--
r 103         fo
--[ 2019.11.07.16.45.48.850.0 ]--
r 103         for
--[ 2019.11.07.16.45.49.102.0 ]--
r 103         for()
--[ 2019.11.07.16.45.49.584.0 ]--
r 103         for(i)
--[ 2019.11.07.16.45.50.722.0 ]--
r 103         for(in)
--[ 2019.11.07.16.45.50.768.0 ]--
r 103         for(int)
--[ 2019.11.07.16.45.50.859.0 ]--
r 103         for(int )
--[ 2019.11.07.16.45.50.910.0 ]--
r 103         for(int i)
--[ 2019.11.07.16.45.51.042.0 ]--
r 103         for(int i )
--[ 2019.11.07.16.45.51.341.0 ]--
r 103         for(int i =)
--[ 2019.11.07.16.45.51.536.0 ]--
r 103         for(int i = )
--[ 2019.11.07.16.45.52.424.0 ]--
r 103         for(int i =  )
--[ 2019.11.07.16.45.52.926.0 ]--
r 103         for(int i = )
--[ 2019.11.07.16.46.01.342.0 ]--
r 103         for(int i =  )
--[ 2019.11.07.16.46.01.401.0 ]--
r 103         for(int i = )
--[ 2019.11.07.16.46.01.519.0 ]--
r 103         for(int i = s)
--[ 2019.11.07.16.46.01.694.0 ]--
r 103         for(int i = st)
--[ 2019.11.07.16.46.01.727.0 ]--
r 103         for(int i = sta)
--[ 2019.11.07.16.46.01.845.0 ]--
r 103         for(int i = star)
--[ 2019.11.07.16.46.02.034.0 ]--
r 103         for(int i = star.)
--[ 2019.11.07.16.46.02.282.0 ]--
r 103         for(int i = star)
--[ 2019.11.07.16.46.02.377.0 ]--
r 103         for(int i = start)
--[ 2019.11.07.16.46.02.446.0 ]--
r 103         for(int i = start.)
--[ 2019.11.07.16.46.02.516.0 ]--
r 103         for(int i = start.g)
--[ 2019.11.07.16.46.02.579.0 ]--
r 103         for(int i = start.ge)
--[ 2019.11.07.16.46.02.684.0 ]--
r 103         for(int i = start.get)
--[ 2019.11.07.16.46.03.261.0 ]--
r 103         for(int i = start.getI)
--[ 2019.11.07.16.46.03.270.0 ]--
r 103         for(int i = start.getI())
--[ 2019.11.07.16.46.04.073.0 ]--
r 103         for(int i = start.getI();)
--[ 2019.11.07.16.46.04.359.0 ]--
r 103         for(int i = start.getI(); )
--[ 2019.11.07.16.46.04.525.0 ]--
r 103         for(int i = start.getI(); i)
--[ 2019.11.07.16.46.04.635.0 ]--
r 103         for(int i = start.getI(); i )
--[ 2019.11.07.16.46.04.763.0 ]--
r 103         for(int i = start.getI(); i M)
--[ 2019.11.07.16.46.04.922.0 ]--
r 103         for(int i = start.getI(); i M )
--[ 2019.11.07.16.46.05.303.0 ]--
r 103         for(int i = start.getI(); i M)
--[ 2019.11.07.16.46.06.371.0 ]--
r 103         for(int i = start.getI(); i )
--[ 2019.11.07.16.46.06.726.0 ]--
r 103         for(int i = start.getI(); i <)
--[ 2019.11.07.16.46.06.848.0 ]--
r 103         for(int i = start.getI(); i < )
--[ 2019.11.07.16.46.07.046.0 ]--
r 103         for(int i = start.getI(); i < e)
--[ 2019.11.07.16.46.07.132.0 ]--
r 103         for(int i = start.getI(); i < en)
--[ 2019.11.07.16.46.07.231.0 ]--
r 103         for(int i = start.getI(); i < end)
--[ 2019.11.07.16.46.07.374.0 ]--
r 103         for(int i = start.getI(); i < end.)
--[ 2019.11.07.16.46.07.522.0 ]--
r 103         for(int i = start.getI(); i < end.g)
--[ 2019.11.07.16.46.07.570.0 ]--
r 103         for(int i = start.getI(); i < end.ge)
--[ 2019.11.07.16.46.09.082.0 ]--
r 103         for(int i = start.getI(); i < end.getI)
--[ 2019.11.07.16.46.09.090.0 ]--
r 103         for(int i = start.getI(); i < end.getI())
--[ 2019.11.07.16.46.09.852.0 ]--
r 103         for(int i = start.getI(); i < end.getI();)
--[ 2019.11.07.16.46.10.011.0 ]--
r 103         for(int i = start.getI(); i < end.getI(); )
--[ 2019.11.07.16.46.10.873.0 ]--
r 103         for(int i = start.getI(); i < end.getI(); i)
--[ 2019.11.07.16.46.11.089.0 ]--
r 103         for(int i = start.getI(); i < end.getI(); i+)
--[ 2019.11.07.16.46.11.151.0 ]--
r 103         for(int i = start.getI(); i < end.getI(); i++)
--[ 2019.11.07.16.46.12.082.0 ]--
r 103         for(int i = start.getI(); i < end.getI(); i++){
--[ 2019.11.07.16.46.12.311.0 ]--
+ 104 
+ 105 }
--[ 2019.11.07.16.46.12.347.0 ]--
r 105         }
--[ 2019.11.07.16.46.12.363.0 ]--
r 104             
--[ 2019.11.07.16.46.13.783.0 ]--
r 104             s
--[ 2019.11.07.16.46.13.844.0 ]--
r 104             s.
--[ 2019.11.07.16.46.14.088.0 ]--
r 104             s.p
--[ 2019.11.07.16.46.14.140.0 ]--
r 104             s.pu
--[ 2019.11.07.16.46.14.243.0 ]--
r 104             s.pus
--[ 2019.11.07.16.46.14.323.0 ]--
r 104             s.push
--[ 2019.11.07.16.46.14.472.0 ]--
r 104             s.push()
--[ 2019.11.07.16.46.16.359.0 ]--
r 104             s.push(n)
--[ 2019.11.07.16.46.16.400.0 ]--
r 104             s.push(ne)
--[ 2019.11.07.16.46.16.539.0 ]--
r 104             s.push(new)
--[ 2019.11.07.16.46.16.612.0 ]--
r 104             s.push(new )
--[ 2019.11.07.16.46.16.712.0 ]--
r 104             s.push(new C)
--[ 2019.11.07.16.46.16.813.0 ]--
r 104             s.push(new Co)
--[ 2019.11.07.16.46.16.944.0 ]--
r 104             s.push(new Coo)
--[ 2019.11.07.16.46.16.985.0 ]--
r 104             s.push(new Coor)
--[ 2019.11.07.16.46.17.139.0 ]--
r 104             s.push(new Coord)
--[ 2019.11.07.16.46.17.382.0 ]--
r 104             s.push(new Coord())
--[ 2019.11.07.16.46.17.838.0 ]--
r 104             s.push(new Coord(i))
--[ 2019.11.07.16.46.18.993.0 ]--
r 104             s.push(new Coord(i,))
--[ 2019.11.07.16.46.19.082.0 ]--
r 104             s.push(new Coord(i, ))
--[ 2019.11.07.16.46.19.775.0 ]--
r 104             s.push(new Coord(i, e))
--[ 2019.11.07.16.46.19.883.0 ]--
r 104             s.push(new Coord(i, en))
--[ 2019.11.07.16.46.19.954.0 ]--
r 104             s.push(new Coord(i, end))
--[ 2019.11.07.16.46.20.080.0 ]--
r 104             s.push(new Coord(i, end.))
--[ 2019.11.07.16.46.20.380.0 ]--
r 104             s.push(new Coord(i, end.g))
--[ 2019.11.07.16.46.20.473.0 ]--
r 104             s.push(new Coord(i, end.ge))
--[ 2019.11.07.16.46.20.590.0 ]--
r 104             s.push(new Coord(i, end.get))
--[ 2019.11.07.16.46.20.966.0 ]--
r 104             s.push(new Coord(i, end.getJ))
--[ 2019.11.07.16.46.21.368.0 ]--
r 104             s.push(new Coord(i, end.getJ()))
--[ 2019.11.07.16.46.21.649.0 ]--
r 104             s.push(new Coord(i, end.getJ()));
--[ 2019.11.07.16.46.23.964.0 ]--
r 26 
--[ 2019.11.07.16.46.25.291.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.16.46.36.135.0 ]--
r 104             s.push(new Coord(i, end.get()));
--[ 2019.11.07.16.46.36.185.0 ]--
r 104             s.push(new Coord(i, end.geti()));
--[ 2019.11.07.16.46.39.457.0 ]--
r 104             s.push(new Coord(i, end.getI()));
--[ 2019.11.07.16.46.42.790.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.16.46.46.500.0 ]--
r 104             s.push(new Coord(i, end.getI() ));
--[ 2019.11.07.16.46.46.539.0 ]--
r 104             s.push(new Coord(i, end.getI()));
--[ 2019.11.07.16.47.00.113.0 ]--
- 104
r 104             s.push(new 
--[ 2019.11.07.16.47.01.845.0 ]--
r 104             s
--[ 2019.11.07.16.47.01.951.0 ]--
r 104             
--[ 2019.11.07.16.47.02.090.0 ]--
- 104
--[ 2019.11.07.16.47.02.287.0 ]--
r 103         for(int i = start.getI(); i < end.getI(); i++)
--[ 2019.11.07.16.47.05.630.0 ]--
r 103         for
--[ 2019.11.07.16.47.05.747.0 ]--
r 103         fo
--[ 2019.11.07.16.47.05.841.0 ]--
r 103         f
--[ 2019.11.07.16.47.06.083.0 ]--
r 103         
--[ 2019.11.07.16.47.06.290.0 ]--
- 103
--[ 2019.11.07.16.47.06.703.0 ]--
r 102         s.push(start); 
--[ 2019.11.07.16.47.06.760.0 ]--
r 102         s.push(start);
--[ 2019.11.07.16.47.06.970.0 ]--
+ 103         
--[ 2019.11.07.16.47.16.287.0 ]--
- 103
--[ 2019.11.07.16.47.20.131.0 ]--
r 99         PFNode s = new PFNode(start, null);
--[ 2019.11.07.16.47.20.275.0 ]--
r 99         PFNode st = new PFNode(start, null);
--[ 2019.11.07.16.47.20.323.0 ]--
r 99         PFNode sta = new PFNode(start, null);
--[ 2019.11.07.16.47.21.026.0 ]--
r 99         PFNode star = new PFNode(start, null);
--[ 2019.11.07.16.47.21.150.0 ]--
r 99         PFNode start = new PFNode(start, null);
--[ 2019.11.07.16.47.22.591.0 ]--
r 99         PFNode start = new PFNode(tstart, null);
--[ 2019.11.07.16.47.22.659.0 ]--
r 99         PFNode start = new PFNode(thstart, null);
--[ 2019.11.07.16.47.22.712.0 ]--
r 99         PFNode start = new PFNode(thistart, null);
--[ 2019.11.07.16.47.22.760.0 ]--
r 99         PFNode start = new PFNode(thisstart, null);
--[ 2019.11.07.16.47.22.892.0 ]--
r 99         PFNode start = new PFNode(this.start, null);
--[ 2019.11.07.16.47.31.633.0 ]--
r 99         PFNode start = new PFNode(start, null);
--[ 2019.11.07.16.47.33.310.0 ]--
r 99         PFNode b = new PFNode(start, null);
--[ 2019.11.07.16.47.33.498.0 ]--
r 99         PFNode be = new PFNode(start, null);
--[ 2019.11.07.16.47.33.583.0 ]--
r 99         PFNode beg = new PFNode(start, null);
--[ 2019.11.07.16.47.33.662.0 ]--
r 99         PFNode begi = new PFNode(start, null);
--[ 2019.11.07.16.47.33.711.0 ]--
r 99         PFNode begin = new PFNode(start, null);
--[ 2019.11.07.16.47.35.831.0 ]--
+ 101         
--[ 2019.11.07.16.47.35.969.0 ]--
+ 101         
--[ 2019.11.07.16.47.37.658.0 ]--
r 100     
--[ 2019.11.07.16.47.37.895.0 ]--
r 100         
--[ 2019.11.07.16.47.38.543.0 ]--
r 100         e
--[ 2019.11.07.16.47.38.622.0 ]--
r 100         en
--[ 2019.11.07.16.47.38.721.0 ]--
r 100         end
--[ 2019.11.07.16.47.38.857.0 ]--
r 100         end 
--[ 2019.11.07.16.47.38.925.0 ]--
r 100         end =
--[ 2019.11.07.16.47.39.051.0 ]--
r 100         end = 
--[ 2019.11.07.16.47.39.503.0 ]--
r 100         end =
--[ 2019.11.07.16.47.39.627.0 ]--
r 100         end 
--[ 2019.11.07.16.47.39.716.0 ]--
r 100         end
--[ 2019.11.07.16.47.39.833.0 ]--
r 100         en
--[ 2019.11.07.16.47.39.950.0 ]--
r 100         e
--[ 2019.11.07.16.47.40.370.0 ]--
r 100         
--[ 2019.11.07.16.47.40.551.0 ]--
r 100         P
--[ 2019.11.07.16.47.40.709.0 ]--
r 100         PF
--[ 2019.11.07.16.47.40.981.0 ]--
r 100         PFN
--[ 2019.11.07.16.47.41.145.0 ]--
r 100         PFNo
--[ 2019.11.07.16.47.41.205.0 ]--
r 100         PFNod
--[ 2019.11.07.16.47.41.265.0 ]--
r 100         PFNode
--[ 2019.11.07.16.47.41.362.0 ]--
r 100         PFNode 
--[ 2019.11.07.16.47.41.491.0 ]--
r 100         PFNode e
--[ 2019.11.07.16.47.41.577.0 ]--
r 100         PFNode en
--[ 2019.11.07.16.47.41.647.0 ]--
r 100         PFNode end
--[ 2019.11.07.16.47.41.832.0 ]--
r 100         PFNode end =
--[ 2019.11.07.16.47.41.903.0 ]--
r 100         PFNode end = 
--[ 2019.11.07.16.47.42.018.0 ]--
r 100         PFNode end = n
--[ 2019.11.07.16.47.42.075.0 ]--
r 100         PFNode end = ne
--[ 2019.11.07.16.47.42.213.0 ]--
r 100         PFNode end = new
--[ 2019.11.07.16.47.42.331.0 ]--
r 100         PFNode end = new 
--[ 2019.11.07.16.47.42.843.0 ]--
r 100         PFNode end = 
--[ 2019.11.07.16.47.42.962.0 ]--
r 100         PFNode end 
--[ 2019.11.07.16.47.43.199.0 ]--
r 100         PFNode end
--[ 2019.11.07.16.47.43.338.0 ]--
r 100         PFNode en
--[ 2019.11.07.16.47.43.466.0 ]--
r 100         PFNode e
--[ 2019.11.07.16.47.44.054.0 ]--
r 100         PFNode 
--[ 2019.11.07.16.47.44.666.0 ]--
r 100         PFNode  
--[ 2019.11.07.16.47.45.292.0 ]--
r 100         PFNode 
--[ 2019.11.07.16.47.46.464.0 ]--
r 100         PFNode e
--[ 2019.11.07.16.47.46.539.0 ]--
r 100         PFNode en
--[ 2019.11.07.16.47.46.618.0 ]--
r 100         PFNode end
--[ 2019.11.07.16.47.46.706.0 ]--
r 100         PFNode endi
--[ 2019.11.07.16.47.46.767.0 ]--
r 100         PFNode endin
--[ 2019.11.07.16.47.46.815.0 ]--
r 100         PFNode ending
--[ 2019.11.07.16.47.47.181.0 ]--
r 100         PFNode ending 
--[ 2019.11.07.16.47.47.576.0 ]--
r 100         PFNode ending =
--[ 2019.11.07.16.47.47.685.0 ]--
r 100         PFNode ending = 
--[ 2019.11.07.16.47.47.850.0 ]--
r 100         PFNode ending = n
--[ 2019.11.07.16.47.47.905.0 ]--
r 100         PFNode ending = ne
--[ 2019.11.07.16.47.48.052.0 ]--
r 100         PFNode ending = new
--[ 2019.11.07.16.47.48.255.0 ]--
r 100         PFNode ending = new 
--[ 2019.11.07.16.47.48.404.0 ]--
r 100         PFNode ending = new P
--[ 2019.11.07.16.47.48.487.0 ]--
r 100         PFNode ending = new PF
--[ 2019.11.07.16.47.48.593.0 ]--
r 100         PFNode ending = new PFN
--[ 2019.11.07.16.47.48.813.0 ]--
r 100         PFNode ending = new PFNo
--[ 2019.11.07.16.47.49.122.0 ]--
r 100         PFNode ending = new PFNod
--[ 2019.11.07.16.47.49.172.0 ]--
r 100         PFNode ending = new PFNode
--[ 2019.11.07.16.47.49.652.0 ]--
r 100         PFNode ending = new PFNode()
--[ 2019.11.07.16.47.50.723.0 ]--
r 100         PFNode ending = new PFNode(e)
--[ 2019.11.07.16.47.50.762.0 ]--
r 100         PFNode ending = new PFNode(en)
--[ 2019.11.07.16.47.50.843.0 ]--
r 100         PFNode ending = new PFNode(end)
--[ 2019.11.07.16.47.50.946.0 ]--
r 100         PFNode ending = new PFNode(end,)
--[ 2019.11.07.16.47.51.046.0 ]--
r 100         PFNode ending = new PFNode(end, )
--[ 2019.11.07.16.47.52.897.0 ]--
r 100         PFNode ending = new PFNode(end, n)
--[ 2019.11.07.16.47.52.928.0 ]--
r 100         PFNode ending = new PFNode(end, nu)
--[ 2019.11.07.16.47.53.499.0 ]--
r 100         PFNode ending = new PFNode(end, nul)
--[ 2019.11.07.16.47.53.627.0 ]--
r 100         PFNode ending = new PFNode(end, null)
--[ 2019.11.07.16.47.53.778.0 ]--
r 100         PFNode ending = new PFNode(end, null);
--[ 2019.11.07.16.47.55.894.0 ]--
r 100         PFNode ending = new PFNode(end, null); 
--[ 2019.11.07.16.47.55.946.0 ]--
r 100         PFNode ending = new PFNode(end, null);
--[ 2019.11.07.16.48.05.279.0 ]--
r 104         s.push(b);
--[ 2019.11.07.16.48.05.328.0 ]--
r 104         s.push(be);
--[ 2019.11.07.16.48.05.466.0 ]--
r 104         s.push(beg);
--[ 2019.11.07.16.48.05.543.0 ]--
r 104         s.push(begi);
--[ 2019.11.07.16.48.05.592.0 ]--
r 104         s.push(begin);
--[ 2019.11.07.16.48.06.023.0 ]--
r 104         s.push(begin.);
--[ 2019.11.07.16.48.09.617.0 ]--
r 104         s.push(begin);
--[ 2019.11.07.16.48.09.745.0 ]--
r 104         s.push(begi);
--[ 2019.11.07.16.48.09.891.0 ]--
r 104         s.push(beg);
--[ 2019.11.07.16.48.09.986.0 ]--
r 104         s.push(be);
--[ 2019.11.07.16.48.10.094.0 ]--
r 104         s.push(b);
--[ 2019.11.07.16.48.10.361.0 ]--
r 104         s.push();
--[ 2019.11.07.16.48.10.527.0 ]--
r 104         s.push(s);
--[ 2019.11.07.16.48.10.677.0 ]--
r 104         s.push(st);
--[ 2019.11.07.16.48.10.787.0 ]--
r 104         s.push(sta);
--[ 2019.11.07.16.48.10.873.0 ]--
r 104         s.push(star);
--[ 2019.11.07.16.48.11.021.0 ]--
r 104         s.push(start);
--[ 2019.11.07.16.48.11.178.0 ]--
r 104         s.push(start );
--[ 2019.11.07.16.48.11.231.0 ]--
r 104         s.push(start);
--[ 2019.11.07.16.48.12.222.0 ]--
r 104         s.push(start );
--[ 2019.11.07.16.48.12.258.0 ]--
r 104         s.push(start);
--[ 2019.11.07.16.48.34.352.0 ]--
+ 101         
--[ 2019.11.07.16.48.34.735.0 ]--
r 102         e
--[ 2019.11.07.16.48.34.883.0 ]--
r 102         en
--[ 2019.11.07.16.48.34.953.0 ]--
r 102         end
--[ 2019.11.07.16.48.35.099.0 ]--
r 102         endi
--[ 2019.11.07.16.48.35.146.0 ]--
r 102         endin
--[ 2019.11.07.16.48.35.206.0 ]--
r 102         ending
--[ 2019.11.07.16.48.35.324.0 ]--
r 102         ending.
--[ 2019.11.07.16.48.35.481.0 ]--
r 102         ending.F
--[ 2019.11.07.16.48.35.658.0 ]--
r 102         ending.Fr
--[ 2019.11.07.16.48.36.039.0 ]--
r 102         ending.F
--[ 2019.11.07.16.48.36.122.0 ]--
r 102         ending.
--[ 2019.11.07.16.48.36.235.0 ]--
r 102         ending.f
--[ 2019.11.07.16.48.36.370.0 ]--
r 102         ending.fr
--[ 2019.11.07.16.48.36.438.0 ]--
r 102         ending.fro
--[ 2019.11.07.16.48.36.495.0 ]--
r 102         ending.from
--[ 2019.11.07.16.48.36.703.0 ]--
r 102         ending.fromN
--[ 2019.11.07.16.48.36.782.0 ]--
r 102         ending.fromNo
--[ 2019.11.07.16.48.36.882.0 ]--
r 102         ending.fromNod
--[ 2019.11.07.16.48.36.921.0 ]--
r 102         ending.fromNode
--[ 2019.11.07.16.48.37.240.0 ]--
r 102         ending.fromNode()
--[ 2019.11.07.16.48.37.498.0 ]--
r 102         ending.fromNode();
--[ 2019.11.07.16.48.38.011.0 ]--
r 102         ending.fromNode(); 
--[ 2019.11.07.16.48.38.130.0 ]--
r 102         ending.fromNode();
--[ 2019.11.07.16.48.38.254.0 ]--
r 102         ending.fromNode()
--[ 2019.11.07.16.48.38.386.0 ]--
r 102         ending.fromNode(
--[ 2019.11.07.16.48.38.519.0 ]--
r 102         ending.fromNode
--[ 2019.11.07.16.48.38.738.0 ]--
r 102         ending.
--[ 2019.11.07.16.48.38.986.0 ]--
r 102         ending
--[ 2019.11.07.16.48.39.280.0 ]--
r 102         endin
--[ 2019.11.07.16.48.39.546.0 ]--
r 102         
--[ 2019.11.07.16.48.39.799.0 ]--
- 101
--[ 2019.11.07.16.48.40.111.0 ]--
- 101
--[ 2019.11.07.16.48.41.100.0 ]--
+ 101         
--[ 2019.11.07.16.48.45.448.0 ]--
+ 63         
--[ 2019.11.07.16.48.45.547.0 ]--
+ 63         
--[ 2019.11.07.16.48.47.360.0 ]--
- 63
--[ 2019.11.07.16.48.47.478.0 ]--
- 63
--[ 2019.11.07.16.49.25.316.0 ]--
r 101 
r 102 
--[ 2019.11.07.16.49.29.020.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.16.51.25.978.0 ]--
+ 63         
--[ 2019.11.07.16.51.30.248.0 ]--
+ 63         
--[ 2019.11.07.16.51.37.454.0 ]--
r 64         =
--[ 2019.11.07.16.51.37.959.0 ]--
r 64         
--[ 2019.11.07.16.51.39.816.0 ]--
- 63
--[ 2019.11.07.16.51.40.026.0 ]--
+ 63         
--[ 2019.11.07.16.51.59.913.0 ]--
- 63
--[ 2019.11.07.16.52.00.615.0 ]--
- 63
--[ 2019.11.07.16.57.03.115.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.16.59.11.676.0 ]--
r 118  
--[ 2019.11.07.16.59.11.728.0 ]--
- 118
--[ 2019.11.07.16.59.13.143.0 ]--
+ 118     
--[ 2019.11.07.16.59.17.200.0 ]--
+ 105         
--[ 2019.11.07.16.59.17.969.0 ]--
r 105         f
--[ 2019.11.07.16.59.18.049.0 ]--
r 105         fo
--[ 2019.11.07.16.59.18.137.0 ]--
r 105         for
--[ 2019.11.07.16.59.18.355.0 ]--
r 105         for()
--[ 2019.11.07.16.59.18.541.0 ]--
r 105         for(i)
--[ 2019.11.07.16.59.18.818.0 ]--
r 105         for(i )
--[ 2019.11.07.16.59.19.833.0 ]--
r 105         for(i)
--[ 2019.11.07.16.59.20.176.0 ]--
r 105         for(in)
--[ 2019.11.07.16.59.20.268.0 ]--
r 105         for(int)
--[ 2019.11.07.16.59.20.405.0 ]--
r 105         for(inti)
--[ 2019.11.07.16.59.20.649.0 ]--
r 105         for(int)
--[ 2019.11.07.16.59.20.753.0 ]--
r 105         for(int )
--[ 2019.11.07.16.59.20.839.0 ]--
r 105         for(int i)
--[ 2019.11.07.16.59.20.905.0 ]--
r 105         for(int i )
--[ 2019.11.07.16.59.21.002.0 ]--
r 105         for(int i =)
--[ 2019.11.07.16.59.21.192.0 ]--
r 105         for(int i =0)
--[ 2019.11.07.16.59.21.444.0 ]--
r 105         for(int i =)
--[ 2019.11.07.16.59.21.548.0 ]--
r 105         for(int i = )
--[ 2019.11.07.16.59.21.611.0 ]--
r 105         for(int i = 0)
--[ 2019.11.07.16.59.21.773.0 ]--
r 105         for(int i = 0;)
--[ 2019.11.07.16.59.22.151.0 ]--
r 105         for(int i = 0)
--[ 2019.11.07.16.59.22.252.0 ]--
r 105         for(int i = )
--[ 2019.11.07.16.59.23.488.0 ]--
r 105         for(int i = s)
--[ 2019.11.07.16.59.23.622.0 ]--
r 105         for(int i = st)
--[ 2019.11.07.16.59.23.693.0 ]--
r 105         for(int i = sta)
--[ 2019.11.07.16.59.23.796.0 ]--
r 105         for(int i = star)
--[ 2019.11.07.16.59.23.907.0 ]--
r 105         for(int i = start)
--[ 2019.11.07.16.59.23.978.0 ]--
r 105         for(int i = start.)
--[ 2019.11.07.16.59.24.087.0 ]--
r 105         for(int i = start.g)
--[ 2019.11.07.16.59.24.138.0 ]--
r 105         for(int i = start.ge)
--[ 2019.11.07.16.59.24.196.0 ]--
r 105         for(int i = start.get)
--[ 2019.11.07.16.59.24.910.0 ]--
r 105         for(int i = start.getI)
--[ 2019.11.07.16.59.25.472.0 ]--
r 105         for(int i = start.getI
--[ 2019.11.07.16.59.25.639.0 ]--
r 105         for(int i = start.getI()
--[ 2019.11.07.16.59.25.679.0 ]--
r 105         for(int i = start.getI())
--[ 2019.11.07.16.59.25.963.0 ]--
r 105         for(int i = start.getI();)
--[ 2019.11.07.16.59.26.466.0 ]--
r 105         for(int i = start.getI(); )
--[ 2019.11.07.16.59.26.629.0 ]--
r 105         for(int i = start.getI();)
--[ 2019.11.07.16.59.27.270.0 ]--
r 105         for(int i = start.getI(); )
--[ 2019.11.07.16.59.28.234.0 ]--
r 105         for(int i = start.getI(); j)
--[ 2019.11.07.16.59.28.525.0 ]--
r 105         for(int i = start.getI(); )
--[ 2019.11.07.16.59.28.775.0 ]--
r 105         for(int i = start.getI();  )
--[ 2019.11.07.16.59.29.178.0 ]--
r 105         for(int i = start.getI(); )
--[ 2019.11.07.16.59.35.538.0 ]--
r 105         for(int i = start.getI(); i)
--[ 2019.11.07.16.59.35.629.0 ]--
r 105         for(int i = start.getI(); i )
--[ 2019.11.07.16.59.35.773.0 ]--
r 105         for(int i = start.getI(); i <)
--[ 2019.11.07.16.59.36.166.0 ]--
r 105         for(int i = start.getI(); i <=)
--[ 2019.11.07.16.59.36.419.0 ]--
r 105         for(int i = start.getI(); i <= )
--[ 2019.11.07.16.59.39.524.0 ]--
r 105         for(int i = start.getI(); i <=  )
--[ 2019.11.07.16.59.39.922.0 ]--
r 105         for(int i = start.getI(); i <= )
--[ 2019.11.07.16.59.41.936.0 ]--
r 105         for(int i = start.getI(); i <= e)
--[ 2019.11.07.16.59.42.015.0 ]--
r 105         for(int i = start.getI(); i <= en)
--[ 2019.11.07.16.59.42.092.0 ]--
r 105         for(int i = start.getI(); i <= end)
--[ 2019.11.07.16.59.42.268.0 ]--
r 105         for(int i = start.getI(); i <= end.)
--[ 2019.11.07.16.59.42.397.0 ]--
r 105         for(int i = start.getI(); i <= end.g)
--[ 2019.11.07.16.59.42.453.0 ]--
r 105         for(int i = start.getI(); i <= end.ge)
--[ 2019.11.07.16.59.42.570.0 ]--
r 105         for(int i = start.getI(); i <= end.get)
--[ 2019.11.07.16.59.42.967.0 ]--
r 105         for(int i = start.getI(); i <= end.getI)
--[ 2019.11.07.16.59.43.302.0 ]--
r 105         for(int i = start.getI(); i <= end.getI())
--[ 2019.11.07.16.59.44.482.0 ]--
r 105         for(int i = start.getI(); i <= end.getI();)
--[ 2019.11.07.16.59.44.674.0 ]--
r 105         for(int i = start.getI(); i <= end.getI(); )
--[ 2019.11.07.16.59.44.881.0 ]--
r 105         for(int i = start.getI(); i <= end.getI();  )
--[ 2019.11.07.16.59.44.980.0 ]--
r 105         for(int i = start.getI(); i <= end.getI();  i)
--[ 2019.11.07.16.59.45.347.0 ]--
r 105         for(int i = start.getI(); i <= end.getI();  )
--[ 2019.11.07.16.59.45.435.0 ]--
r 105         for(int i = start.getI(); i <= end.getI(); )
--[ 2019.11.07.16.59.45.653.0 ]--
r 105         for(int i = start.getI(); i <= end.getI(); i)
--[ 2019.11.07.16.59.46.250.0 ]--
r 105         for(int i = start.getI(); i <= end.getI(); i+)
--[ 2019.11.07.16.59.46.437.0 ]--
r 105         for(int i = start.getI(); i <= end.getI(); i++)
--[ 2019.11.07.16.59.46.781.0 ]--
r 105         for(int i = start.getI(); i <= end.getI(); i+)
--[ 2019.11.07.16.59.47.542.0 ]--
r 105         for(int i = start.getI(); i <= end.getI(); i++)
--[ 2019.11.07.16.59.48.379.0 ]--
r 105         for(int i = start.getI(); i <= end.getI(); i++){
--[ 2019.11.07.16.59.48.558.0 ]--
+ 106 
+ 107 }
--[ 2019.11.07.16.59.48.592.0 ]--
r 107         }
--[ 2019.11.07.16.59.48.610.0 ]--
r 106             
--[ 2019.11.07.16.59.52.434.0 ]--
r 106             a
--[ 2019.11.07.16.59.52.928.0 ]--
r 106             
--[ 2019.11.07.16.59.55.355.0 ]--
r 106             s
--[ 2019.11.07.16.59.55.405.0 ]--
r 106             s.
--[ 2019.11.07.16.59.55.630.0 ]--
r 106             s.p
--[ 2019.11.07.16.59.55.680.0 ]--
r 106             s.p8
--[ 2019.11.07.16.59.55.745.0 ]--
r 106             s.p8s
--[ 2019.11.07.16.59.56.001.0 ]--
r 106             s.p8
--[ 2019.11.07.16.59.56.105.0 ]--
r 106             s.p
--[ 2019.11.07.16.59.56.313.0 ]--
r 106             s.pu
--[ 2019.11.07.16.59.56.423.0 ]--
r 106             s.pus
--[ 2019.11.07.16.59.56.491.0 ]--
r 106             s.push
--[ 2019.11.07.16.59.56.689.0 ]--
r 106             s.push()
--[ 2019.11.07.16.59.56.869.0 ]--
r 106             s.push(n)
--[ 2019.11.07.16.59.56.965.0 ]--
r 106             s.push(ne)
--[ 2019.11.07.16.59.57.213.0 ]--
r 106             s.push(n)
--[ 2019.11.07.16.59.57.307.0 ]--
r 106             s.push()
--[ 2019.11.07.16.59.57.534.0 ]--
r 106             s.push(n)
--[ 2019.11.07.16.59.57.599.0 ]--
r 106             s.push(ne)
--[ 2019.11.07.16.59.57.718.0 ]--
r 106             s.push(new)
--[ 2019.11.07.16.59.57.803.0 ]--
r 106             s.push(new )
--[ 2019.11.07.16.59.57.891.0 ]--
r 106             s.push(new C)
--[ 2019.11.07.16.59.57.968.0 ]--
r 106             s.push(new Co)
--[ 2019.11.07.16.59.58.073.0 ]--
r 106             s.push(new Coo)
--[ 2019.11.07.16.59.58.143.0 ]--
r 106             s.push(new Coor)
--[ 2019.11.07.16.59.58.277.0 ]--
r 106             s.push(new Coord)
--[ 2019.11.07.16.59.58.410.0 ]--
r 106             s.push(new Coord())
--[ 2019.11.07.16.59.59.570.0 ]--
r 106             s.push(new Coord(i))
--[ 2019.11.07.16.59.59.635.0 ]--
r 106             s.push(new Coord(in))
--[ 2019.11.07.16.59.59.913.0 ]--
r 106             s.push(new Coord(int))
--[ 2019.11.07.17.00.00.162.0 ]--
r 106             s.push(new Coord(int ))
--[ 2019.11.07.17.00.00.231.0 ]--
r 106             s.push(new Coord(int))
--[ 2019.11.07.17.00.00.420.0 ]--
r 106             s.push(new Coord(in))
--[ 2019.11.07.17.00.00.562.0 ]--
r 106             s.push(new Coord(i))
--[ 2019.11.07.17.00.00.662.0 ]--
r 106             s.push(new Coord())
--[ 2019.11.07.17.00.05.149.0 ]--
r 106             s.push(new Coord(e))
--[ 2019.11.07.17.00.05.207.0 ]--
r 106             s.push(new Coord(en))
--[ 2019.11.07.17.00.05.284.0 ]--
r 106             s.push(new Coord(end))
--[ 2019.11.07.17.00.05.414.0 ]--
r 106             s.push(new Coord(end.))
--[ 2019.11.07.17.00.05.556.0 ]--
r 106             s.push(new Coord(end.g))
--[ 2019.11.07.17.00.05.622.0 ]--
r 106             s.push(new Coord(end.ge))
--[ 2019.11.07.17.00.05.734.0 ]--
r 106             s.push(new Coord(end.get))
--[ 2019.11.07.17.00.06.550.0 ]--
r 106             s.push(new Coord(end.getI))
--[ 2019.11.07.17.00.06.860.0 ]--
r 106             s.push(new Coord(end.getI*))
--[ 2019.11.07.17.00.06.902.0 ]--
r 106             s.push(new Coord(end.getI*()))
--[ 2019.11.07.17.00.07.193.0 ]--
r 106             s.push(new Coord(end.getI*(,)))
--[ 2019.11.07.17.00.07.602.0 ]--
r 106             s.push(new Coord(end.getI*()))
--[ 2019.11.07.17.00.07.750.0 ]--
r 106             s.push(new Coord(end.getI*))
--[ 2019.11.07.17.00.07.989.0 ]--
r 106             s.push(new Coord(end.getI))
--[ 2019.11.07.17.00.08.620.0 ]--
r 106             s.push(new Coord(end.getI()))
--[ 2019.11.07.17.00.08.836.0 ]--
r 106             s.push(new Coord(end.getI(),))
--[ 2019.11.07.17.00.08.938.0 ]--
r 106             s.push(new Coord(end.getI(), ))
--[ 2019.11.07.17.00.09.086.0 ]--
r 106             s.push(new Coord(end.getI(), i))
--[ 2019.11.07.17.00.11.487.0 ]--
r 106             s.push(new Coord(end.getI(), i));
--[ 2019.11.07.17.00.12.554.0 ]--
r 121 
--[ 2019.11.07.17.00.13.757.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.17.00.52.484.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.17.01.20.071.0 ]--
- 105
- 105
r 105         for
--[ 2019.11.07.17.01.20.181.0 ]--
r 105         fo
--[ 2019.11.07.17.01.20.283.0 ]--
r 105         f
--[ 2019.11.07.17.01.20.411.0 ]--
r 105         
--[ 2019.11.07.17.01.20.666.0 ]--
- 105
--[ 2019.11.07.17.01.21.010.0 ]--
r 104         s.push(start); 
--[ 2019.11.07.17.01.21.043.0 ]--
r 104         s.push(start);
--[ 2019.11.07.17.01.33.241.0 ]--
+ 17     
--[ 2019.11.07.17.01.33.686.0 ]--
r 17     p
--[ 2019.11.07.17.01.33.855.0 ]--
r 17     pr
--[ 2019.11.07.17.01.33.892.0 ]--
r 17     pri
--[ 2019.11.07.17.01.34.035.0 ]--
r 17     priv
--[ 2019.11.07.17.01.34.176.0 ]--
r 17     priva
--[ 2019.11.07.17.01.34.284.0 ]--
r 17     privat
--[ 2019.11.07.17.01.34.341.0 ]--
r 17     private
--[ 2019.11.07.17.01.37.864.0 ]--
r 17     
--[ 2019.11.07.17.01.44.867.0 ]--
r 17      
--[ 2019.11.07.17.01.44.917.0 ]--
r 17     
--[ 2019.11.07.17.01.48.283.0 ]--
r 17     p
--[ 2019.11.07.17.01.48.347.0 ]--
r 17     pr
--[ 2019.11.07.17.01.48.452.0 ]--
r 17     pri
--[ 2019.11.07.17.01.48.560.0 ]--
r 17     priv
--[ 2019.11.07.17.01.48.627.0 ]--
r 17     priva
--[ 2019.11.07.17.01.48.764.0 ]--
r 17     privat
--[ 2019.11.07.17.01.48.824.0 ]--
r 17     private
--[ 2019.11.07.17.01.49.921.0 ]--
r 17     private 
--[ 2019.11.07.17.01.50.072.0 ]--
r 17     private b
--[ 2019.11.07.17.01.50.195.0 ]--
r 17     private be
--[ 2019.11.07.17.01.50.455.0 ]--
r 17     private beg
--[ 2019.11.07.17.01.50.644.0 ]--
r 17     private begi
--[ 2019.11.07.17.01.50.687.0 ]--
r 17     private begin
--[ 2019.11.07.17.01.51.035.0 ]--
r 17     private beginC
--[ 2019.11.07.17.01.51.154.0 ]--
r 17     private beginCo
--[ 2019.11.07.17.01.51.259.0 ]--
r 17     private beginCoo
--[ 2019.11.07.17.01.51.339.0 ]--
r 17     private beginCoor
--[ 2019.11.07.17.01.51.483.0 ]--
r 17     private beginCoord
--[ 2019.11.07.17.01.54.800.0 ]--
r 17     private cbeginCoord
--[ 2019.11.07.17.01.55.055.0 ]--
r 17     private beginCoord
--[ 2019.11.07.17.01.55.192.0 ]--
r 17     private cbeginCoord
--[ 2019.11.07.17.01.55.270.0 ]--
r 17     private cobeginCoord
--[ 2019.11.07.17.01.55.380.0 ]--
r 17     private coobeginCoord
--[ 2019.11.07.17.01.55.466.0 ]--
r 17     private coorbeginCoord
--[ 2019.11.07.17.01.55.753.0 ]--
r 17     private coordbeginCoord
--[ 2019.11.07.17.01.56.251.0 ]--
r 17     private coorbeginCoord
--[ 2019.11.07.17.01.56.354.0 ]--
r 17     private coobeginCoord
--[ 2019.11.07.17.01.56.449.0 ]--
r 17     private cobeginCoord
--[ 2019.11.07.17.01.56.557.0 ]--
r 17     private cbeginCoord
--[ 2019.11.07.17.01.56.651.0 ]--
r 17     private beginCoord
--[ 2019.11.07.17.01.56.778.0 ]--
r 17     private CbeginCoord
--[ 2019.11.07.17.01.56.858.0 ]--
r 17     private CobeginCoord
--[ 2019.11.07.17.01.56.992.0 ]--
r 17     private CoobeginCoord
--[ 2019.11.07.17.01.57.067.0 ]--
r 17     private CoorbeginCoord
--[ 2019.11.07.17.01.57.217.0 ]--
r 17     private CoordbeginCoord
--[ 2019.11.07.17.01.57.289.0 ]--
r 17     private Coord beginCoord
--[ 2019.11.07.17.01.57.774.0 ]--
r 17     private Coord beginCoord;
--[ 2019.11.07.17.01.58.029.0 ]--
+ 18     
--[ 2019.11.07.17.01.58.892.0 ]--
r 18     p
--[ 2019.11.07.17.01.59.019.0 ]--
r 18     pr
--[ 2019.11.07.17.01.59.101.0 ]--
r 18     pri
--[ 2019.11.07.17.01.59.351.0 ]--
r 18     priv
--[ 2019.11.07.17.01.59.420.0 ]--
r 18     priva
--[ 2019.11.07.17.01.59.552.0 ]--
r 18     privat
--[ 2019.11.07.17.01.59.596.0 ]--
r 18     private
--[ 2019.11.07.17.01.59.635.0 ]--
r 18     private 
--[ 2019.11.07.17.01.59.788.0 ]--
r 18     private c
--[ 2019.11.07.17.01.59.819.0 ]--
r 18     private co
--[ 2019.11.07.17.01.59.883.0 ]--
r 18     private coo
--[ 2019.11.07.17.02.00.034.0 ]--
r 18     private coor
--[ 2019.11.07.17.02.00.215.0 ]--
r 18     private coord
--[ 2019.11.07.17.02.00.317.0 ]--
r 18     private coord 
--[ 2019.11.07.17.02.00.970.0 ]--
r 18     private coord
--[ 2019.11.07.17.02.01.020.0 ]--
r 18     private coor
--[ 2019.11.07.17.02.01.125.0 ]--
r 18     private coo
--[ 2019.11.07.17.02.01.228.0 ]--
r 18     private co
--[ 2019.11.07.17.02.01.332.0 ]--
r 18     private c
--[ 2019.11.07.17.02.01.434.0 ]--
r 18     private 
--[ 2019.11.07.17.02.01.571.0 ]--
r 18     private C
--[ 2019.11.07.17.02.01.646.0 ]--
r 18     private Co
--[ 2019.11.07.17.02.01.758.0 ]--
r 18     private Coo
--[ 2019.11.07.17.02.01.834.0 ]--
r 18     private Coor
--[ 2019.11.07.17.02.01.957.0 ]--
r 18     private Coord
--[ 2019.11.07.17.02.02.030.0 ]--
r 18     private Coord 
--[ 2019.11.07.17.02.02.090.0 ]--
r 18     private Coord e
--[ 2019.11.07.17.02.02.154.0 ]--
r 18     private Coord en
--[ 2019.11.07.17.02.02.220.0 ]--
r 18     private Coord end
--[ 2019.11.07.17.02.02.740.0 ]--
r 18     private Coord endC
--[ 2019.11.07.17.02.02.826.0 ]--
r 18     private Coord endCo
--[ 2019.11.07.17.02.02.938.0 ]--
r 18     private Coord endCoo
--[ 2019.11.07.17.02.02.972.0 ]--
r 18     private Coord endCoor
--[ 2019.11.07.17.02.03.125.0 ]--
r 18     private Coord endCoord
--[ 2019.11.07.17.02.03.350.0 ]--
r 18     private Coord endCoord;
--[ 2019.11.07.17.02.07.411.0 ]--
r 27         public PFNode(Coord loc, PFNode fromNode) 
--[ 2019.11.07.17.02.08.764.0 ]--
r 27         public PFNode(Coord loc, PFNode fromNode) {
--[ 2019.11.07.17.02.08.984.0 ]--
+ 28             
--[ 2019.11.07.17.02.09.211.0 ]--
r 28             l
--[ 2019.11.07.17.02.09.422.0 ]--
r 28             lo
--[ 2019.11.07.17.02.09.462.0 ]--
r 28             loc
--[ 2019.11.07.17.02.09.600.0 ]--
r 28             loca
--[ 2019.11.07.17.02.09.686.0 ]--
r 28             locat
--[ 2019.11.07.17.02.09.765.0 ]--
r 28             locati
--[ 2019.11.07.17.02.09.860.0 ]--
r 28             locatio
--[ 2019.11.07.17.02.09.909.0 ]--
r 28             location
--[ 2019.11.07.17.02.10.013.0 ]--
r 28             location 
--[ 2019.11.07.17.02.10.124.0 ]--
r 28             location =
--[ 2019.11.07.17.02.10.201.0 ]--
r 28             location = 
--[ 2019.11.07.17.02.10.427.0 ]--
r 28             location = l
--[ 2019.11.07.17.02.10.663.0 ]--
r 28             location = lo
--[ 2019.11.07.17.02.11.000.0 ]--
r 28             location = 
--[ 2019.11.07.17.02.11.117.0 ]--
r 28             location 
--[ 2019.11.07.17.02.11.607.0 ]--
r 28             
--[ 2019.11.07.17.02.13.617.0 ]--
r 28             C
--[ 2019.11.07.17.02.13.721.0 ]--
r 28             Co
--[ 2019.11.07.17.02.13.825.0 ]--
r 28             Coo
--[ 2019.11.07.17.02.13.897.0 ]--
r 28             Coor
--[ 2019.11.07.17.02.14.046.0 ]--
r 28             Coord
--[ 2019.11.07.17.02.14.112.0 ]--
r 28             Coord 
--[ 2019.11.07.17.02.14.131.0 ]--
r 28             Coord l
--[ 2019.11.07.17.02.14.259.0 ]--
r 28             Coord lo
--[ 2019.11.07.17.02.14.323.0 ]--
r 28             Coord loc
--[ 2019.11.07.17.02.14.550.0 ]--
r 28             Coord loca
--[ 2019.11.07.17.02.14.696.0 ]--
r 28             Coord locai
--[ 2019.11.07.17.02.14.757.0 ]--
r 28             Coord locaio
--[ 2019.11.07.17.02.14.956.0 ]--
r 28             Coord locai
--[ 2019.11.07.17.02.15.050.0 ]--
r 28             Coord loca
--[ 2019.11.07.17.02.15.174.0 ]--
r 28             Coord locat
--[ 2019.11.07.17.02.15.237.0 ]--
r 28             Coord locati
--[ 2019.11.07.17.02.15.290.0 ]--
r 28             Coord locatio
--[ 2019.11.07.17.02.15.370.0 ]--
r 28             Coord location
--[ 2019.11.07.17.02.15.613.0 ]--
r 28             Coord location=
--[ 2019.11.07.17.02.15.772.0 ]--
r 28             Coord location
--[ 2019.11.07.17.02.15.895.0 ]--
r 28             Coord location 
--[ 2019.11.07.17.02.15.961.0 ]--
r 28             Coord location =
--[ 2019.11.07.17.02.16.034.0 ]--
r 28             Coord location = 
--[ 2019.11.07.17.02.16.149.0 ]--
r 28             Coord location = l
--[ 2019.11.07.17.02.16.321.0 ]--
r 28             Coord location = lo
--[ 2019.11.07.17.02.16.417.0 ]--
r 28             Coord location = loc
--[ 2019.11.07.17.02.16.825.0 ]--
r 28             Coord location = loc;
--[ 2019.11.07.17.02.17.979.0 ]--
r 28             Coord location = loc; 
--[ 2019.11.07.17.02.18.042.0 ]--
r 28             Coord location = loc;
--[ 2019.11.07.17.02.35.081.0 ]--
r 28 
--[ 2019.11.07.17.02.37.408.0 ]--
- 28
--[ 2019.11.07.17.02.40.152.0 ]--
- 17
- 17
- 17
--[ 2019.11.07.17.08.15.752.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.17.12.27.206.0 ]--
+ 99         
--[ 2019.11.07.17.12.28.037.0 ]--
r 99         P
--[ 2019.11.07.17.12.28.179.0 ]--
r 99         PF
--[ 2019.11.07.17.12.28.263.0 ]--
r 99         PFN
--[ 2019.11.07.17.12.28.463.0 ]--
r 99         PFNo
--[ 2019.11.07.17.12.28.575.0 ]--
r 99         PFNod
--[ 2019.11.07.17.12.28.615.0 ]--
r 99         PFNode
--[ 2019.11.07.17.12.28.714.0 ]--
r 99         PFNode 
--[ 2019.11.07.17.12.30.273.0 ]--
r 99         PFNode i
--[ 2019.11.07.17.12.30.315.0 ]--
r 99         PFNode in
--[ 2019.11.07.17.12.30.366.0 ]--
r 99         PFNode int
--[ 2019.11.07.17.12.30.436.0 ]--
r 99         PFNode inte
--[ 2019.11.07.17.12.30.541.0 ]--
r 99         PFNode inter
--[ 2019.11.07.17.12.30.636.0 ]--
r 99         PFNode interm
--[ 2019.11.07.17.12.30.684.0 ]--
r 99         PFNode interme
--[ 2019.11.07.17.12.30.840.0 ]--
r 99         PFNode intermed
--[ 2019.11.07.17.12.30.903.0 ]--
r 99         PFNode intermedi
--[ 2019.11.07.17.12.30.996.0 ]--
r 99         PFNode intermedia
--[ 2019.11.07.17.12.31.083.0 ]--
r 99         PFNode intermediar
--[ 2019.11.07.17.12.31.266.0 ]--
r 99         PFNode intermediary
--[ 2019.11.07.17.12.31.798.0 ]--
r 99         PFNode intermediary=
--[ 2019.11.07.17.12.31.895.0 ]--
r 99         PFNode intermediary= 
--[ 2019.11.07.17.12.32.079.0 ]--
r 99         PFNode intermediary=
--[ 2019.11.07.17.12.32.198.0 ]--
r 99         PFNode intermediary
--[ 2019.11.07.17.12.32.376.0 ]--
r 99         PFNode intermediary 
--[ 2019.11.07.17.12.32.437.0 ]--
r 99         PFNode intermediary =
--[ 2019.11.07.17.12.32.509.0 ]--
r 99         PFNode intermediary = 
--[ 2019.11.07.17.12.32.681.0 ]--
r 99         PFNode intermediary = n
--[ 2019.11.07.17.12.32.776.0 ]--
r 99         PFNode intermediary = ne
--[ 2019.11.07.17.12.32.900.0 ]--
r 99         PFNode intermediary = new
--[ 2019.11.07.17.12.34.184.0 ]--
r 99         PFNode intermediary = new 
--[ 2019.11.07.17.12.34.406.0 ]--
r 99         PFNode intermediary = new P
--[ 2019.11.07.17.12.34.471.0 ]--
r 99         PFNode intermediary = new PF
--[ 2019.11.07.17.12.34.599.0 ]--
r 99         PFNode intermediary = new PFN
--[ 2019.11.07.17.12.35.081.0 ]--
r 99         PFNode intermediary = new PFNo
--[ 2019.11.07.17.12.35.138.0 ]--
r 99         PFNode intermediary = new PFNod
--[ 2019.11.07.17.12.35.194.0 ]--
r 99         PFNode intermediary = new PFNode
--[ 2019.11.07.17.12.35.925.0 ]--
r 99         PFNode intermediary = new PFNode()
--[ 2019.11.07.17.12.43.517.0 ]--
r 99         PFNode intermediary = new PFNode(())
--[ 2019.11.07.17.12.43.688.0 ]--
r 99         PFNode intermediary = new PFNode((1))
--[ 2019.11.07.17.12.43.801.0 ]--
r 99         PFNode intermediary = new PFNode((1,))
--[ 2019.11.07.17.12.44.176.0 ]--
r 99         PFNode intermediary = new PFNode((1,3))
--[ 2019.11.07.17.12.45.818.0 ]--
r 99         PFNode intermediary = new PFNode((1,3),)
--[ 2019.11.07.17.12.45.903.0 ]--
r 99         PFNode intermediary = new PFNode((1,3),,)
--[ 2019.11.07.17.12.46.488.0 ]--
r 99         PFNode intermediary = new PFNode((1,3),, )
--[ 2019.11.07.17.12.46.712.0 ]--
r 99         PFNode intermediary = new PFNode((1,3),,)
--[ 2019.11.07.17.12.47.040.0 ]--
r 99         PFNode intermediary = new PFNode((1,3),)
--[ 2019.11.07.17.12.47.923.0 ]--
r 99         PFNode intermediary = new PFNode((1,3), )
--[ 2019.11.07.17.12.48.004.0 ]--
r 99         PFNode intermediary = new PFNode((1,3),)
--[ 2019.11.07.17.12.48.819.0 ]--
r 99         PFNode intermediary = new PFNode((1,3))
--[ 2019.11.07.17.12.49.111.0 ]--
r 99         PFNode intermediary = new PFNode((1,3)
--[ 2019.11.07.17.12.49.299.0 ]--
r 99         PFNode intermediary = new PFNode((1,)
--[ 2019.11.07.17.12.49.657.0 ]--
r 99         PFNode intermediary = new PFNode((1)
--[ 2019.11.07.17.12.50.391.0 ]--
r 99         PFNode intermediary = new PFNode(()
--[ 2019.11.07.17.12.57.949.0 ]--
r 99         PFNode intermediary = new PFNode(( )
--[ 2019.11.07.17.12.58.005.0 ]--
r 99         PFNode intermediary = new PFNode(()
--[ 2019.11.07.17.13.01.987.0 ]--
r 99         PFNode intermediary = new PFNode((
--[ 2019.11.07.17.13.02.364.0 ]--
r 99         PFNode intermediary = new PFNode(
--[ 2019.11.07.17.13.02.591.0 ]--
r 99         PFNode intermediary = new PFNode
--[ 2019.11.07.17.13.04.123.0 ]--
r 99         PFNode intermediary = new PFNode()
--[ 2019.11.07.17.13.05.204.0 ]--
r 99         PFNode intermediary = new PFNode(n)
--[ 2019.11.07.17.13.05.279.0 ]--
r 99         PFNode intermediary = new PFNode(ne)
--[ 2019.11.07.17.13.05.416.0 ]--
r 99         PFNode intermediary = new PFNode(new)
--[ 2019.11.07.17.13.05.900.0 ]--
r 99         PFNode intermediary = new PFNode(new )
--[ 2019.11.07.17.13.06.249.0 ]--
r 99         PFNode intermediary = new PFNode(new C)
--[ 2019.11.07.17.13.06.389.0 ]--
r 99         PFNode intermediary = new PFNode(new Co)
--[ 2019.11.07.17.13.06.492.0 ]--
r 99         PFNode intermediary = new PFNode(new Coo)
--[ 2019.11.07.17.13.06.573.0 ]--
r 99         PFNode intermediary = new PFNode(new Coor)
--[ 2019.11.07.17.13.06.710.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord)
--[ 2019.11.07.17.13.07.416.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord())
--[ 2019.11.07.17.13.11.909.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4))
--[ 2019.11.07.17.13.12.121.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,))
--[ 2019.11.07.17.13.12.987.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5))
--[ 2019.11.07.17.13.14.552.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5),)
--[ 2019.11.07.17.13.14.917.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), )
--[ 2019.11.07.17.13.15.347.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), s)
--[ 2019.11.07.17.13.15.512.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), st)
--[ 2019.11.07.17.13.15.564.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), sta)
--[ 2019.11.07.17.13.15.702.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), star)
--[ 2019.11.07.17.13.15.849.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), start)
--[ 2019.11.07.17.13.16.180.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), start);
--[ 2019.11.07.17.13.17.474.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), start); 
--[ 2019.11.07.17.13.17.528.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), start);
--[ 2019.11.07.17.13.41.956.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), tstart);
--[ 2019.11.07.17.13.42.073.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), thstart);
--[ 2019.11.07.17.13.42.150.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), thistart);
--[ 2019.11.07.17.13.42.214.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), thisstart);
--[ 2019.11.07.17.13.42.325.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), this.start);
--[ 2019.11.07.17.13.46.379.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), start);
--[ 2019.11.07.17.13.49.702.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), n);
--[ 2019.11.07.17.13.49.781.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), ne);
--[ 2019.11.07.17.13.49.914.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new);
--[ 2019.11.07.17.13.50.544.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new());
--[ 2019.11.07.17.13.51.195.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new(C));
--[ 2019.11.07.17.13.52.192.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new(Co));
--[ 2019.11.07.17.13.52.283.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new(Coo));
--[ 2019.11.07.17.13.52.383.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new(Coor));
--[ 2019.11.07.17.13.52.574.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new(Coord));
--[ 2019.11.07.17.13.53.042.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new());
--[ 2019.11.07.17.13.54.083.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new();
--[ 2019.11.07.17.13.54.190.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new);
--[ 2019.11.07.17.13.54.576.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new );
--[ 2019.11.07.17.13.54.703.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new C);
--[ 2019.11.07.17.13.55.075.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new );
--[ 2019.11.07.17.13.55.417.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new C);
--[ 2019.11.07.17.13.55.609.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new Co);
--[ 2019.11.07.17.13.55.655.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new Coo);
--[ 2019.11.07.17.13.55.710.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new Coor);
--[ 2019.11.07.17.13.55.842.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new Coord);
--[ 2019.11.07.17.13.55.963.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new Coord());
--[ 2019.11.07.17.13.56.352.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new Coord(0));
--[ 2019.11.07.17.13.56.544.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new Coord(0,));
--[ 2019.11.07.17.13.56.701.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new Coord(0, ));
--[ 2019.11.07.17.13.56.795.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new Coord(0, 0));
--[ 2019.11.07.17.13.57.853.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new Coord(0, 0)l);
--[ 2019.11.07.17.13.58.334.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new Coord(0, 0));
--[ 2019.11.07.17.14.20.472.0 ]--
r 99 
--[ 2019.11.07.17.14.20.706.0 ]--
- 99
--[ 2019.11.07.17.14.35.769.0 ]--
+ 99 
--[ 2019.11.07.17.14.36.188.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), new Coord(0, 0));
--[ 2019.11.07.17.14.42.370.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), b);
--[ 2019.11.07.17.14.42.531.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), be);
--[ 2019.11.07.17.14.42.683.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), beg);
--[ 2019.11.07.17.14.42.748.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), begi);
--[ 2019.11.07.17.14.42.814.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), begin);
--[ 2019.11.07.17.14.43.881.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), begin );
--[ 2019.11.07.17.14.43.913.0 ]--
r 99         PFNode intermediary = new PFNode(new Coord(4,5), begin);
--[ 2019.11.07.17.14.52.891.0 ]--
r 104         s.push(start); 
--[ 2019.11.07.17.14.52.931.0 ]--
r 104         s.push(start);
--[ 2019.11.07.17.14.55.546.0 ]--
+ 62         
--[ 2019.11.07.17.14.56.436.0 ]--
+ 62         
--[ 2019.11.07.17.14.56.842.0 ]--
r 63         p
--[ 2019.11.07.17.14.56.944.0 ]--
r 63         pu
--[ 2019.11.07.17.14.57.026.0 ]--
r 63         pub
--[ 2019.11.07.17.14.57.102.0 ]--
r 63         publ
--[ 2019.11.07.17.14.57.220.0 ]--
r 63         publi
--[ 2019.11.07.17.14.57.317.0 ]--
r 63         public
--[ 2019.11.07.17.14.57.500.0 ]--
r 63         public 
--[ 2019.11.07.17.14.59.522.0 ]--
r 63         public g
--[ 2019.11.07.17.14.59.579.0 ]--
r 63         public ge
--[ 2019.11.07.17.14.59.700.0 ]--
r 63         public get
--[ 2019.11.07.17.15.00.094.0 ]--
r 63         public get 
--[ 2019.11.07.17.15.00.154.0 ]--
r 63         public get
--[ 2019.11.07.17.15.00.435.0 ]--
r 63         public 
--[ 2019.11.07.17.15.00.629.0 ]--
r 63         
--[ 2019.11.07.17.15.00.812.0 ]--
- 62
--[ 2019.11.07.17.15.02.556.0 ]--
+ 62         
--[ 2019.11.07.17.15.02.650.0 ]--
r 63         p
--[ 2019.11.07.17.15.02.735.0 ]--
r 63         pu
--[ 2019.11.07.17.15.02.832.0 ]--
r 63         pub
--[ 2019.11.07.17.15.02.900.0 ]--
r 63         publ
--[ 2019.11.07.17.15.03.036.0 ]--
r 63         publi
--[ 2019.11.07.17.15.03.150.0 ]--
r 63         public
--[ 2019.11.07.17.15.03.311.0 ]--
r 63         public 
--[ 2019.11.07.17.15.03.661.0 ]--
r 63         public g
--[ 2019.11.07.17.15.03.709.0 ]--
r 63         public ge
--[ 2019.11.07.17.15.03.858.0 ]--
r 63         public get
--[ 2019.11.07.17.15.08.176.0 ]--
r 63         public getC
--[ 2019.11.07.17.15.08.291.0 ]--
r 63         public getCo
--[ 2019.11.07.17.15.08.407.0 ]--
r 63         public getCoo
--[ 2019.11.07.17.15.08.474.0 ]--
r 63         public getCoor
--[ 2019.11.07.17.15.08.638.0 ]--
r 63         public getCoord
--[ 2019.11.07.17.15.08.754.0 ]--
r 63         public getCoord()
--[ 2019.11.07.17.15.09.022.0 ]--
r 63         public getCoord(){}
--[ 2019.11.07.17.15.09.281.0 ]--
+ 63         public getCoord(){
r 64         }
--[ 2019.11.07.17.15.09.322.0 ]--
+ 64             
--[ 2019.11.07.17.15.11.694.0 ]--
r 63         public CgetCoord(){
--[ 2019.11.07.17.15.11.844.0 ]--
r 63         public CogetCoord(){
--[ 2019.11.07.17.15.11.944.0 ]--
r 63         public CoogetCoord(){
--[ 2019.11.07.17.15.12.040.0 ]--
r 63         public CoorgetCoord(){
--[ 2019.11.07.17.15.12.160.0 ]--
r 63         public CoordgetCoord(){
--[ 2019.11.07.17.15.12.277.0 ]--
r 63         public Coord getCoord(){
--[ 2019.11.07.17.15.14.362.0 ]--
r 64             r
--[ 2019.11.07.17.15.14.378.0 ]--
r 64             re
--[ 2019.11.07.17.15.14.549.0 ]--
r 64             ret
--[ 2019.11.07.17.15.14.660.0 ]--
r 64             retu
--[ 2019.11.07.17.15.14.716.0 ]--
r 64             retur
--[ 2019.11.07.17.15.14.804.0 ]--
r 64             return
--[ 2019.11.07.17.15.14.942.0 ]--
r 64             return 
--[ 2019.11.07.17.15.17.507.0 ]--
r 64             return l
--[ 2019.11.07.17.15.17.621.0 ]--
r 64             return lo
--[ 2019.11.07.17.15.17.700.0 ]--
r 64             return loc
--[ 2019.11.07.17.15.18.626.0 ]--
r 64             return lo
--[ 2019.11.07.17.15.18.707.0 ]--
r 64             return l
--[ 2019.11.07.17.15.18.795.0 ]--
r 64             return 
--[ 2019.11.07.17.15.18.944.0 ]--
r 64             return t
--[ 2019.11.07.17.15.19.022.0 ]--
r 64             return th
--[ 2019.11.07.17.15.19.057.0 ]--
r 64             return thi
--[ 2019.11.07.17.15.19.108.0 ]--
r 64             return this
--[ 2019.11.07.17.15.19.276.0 ]--
r 64             return this.
--[ 2019.11.07.17.15.19.460.0 ]--
r 64             return this.l
--[ 2019.11.07.17.15.19.630.0 ]--
r 64             return this.lo
--[ 2019.11.07.17.15.19.715.0 ]--
r 64             return this.loc
--[ 2019.11.07.17.15.20.091.0 ]--
r 64             return this.loc 
--[ 2019.11.07.17.15.20.197.0 ]--
r 64             return this.loc
--[ 2019.11.07.17.15.20.372.0 ]--
r 64             return this.
--[ 2019.11.07.17.15.20.628.0 ]--
r 64             return this
--[ 2019.11.07.17.15.21.018.0 ]--
r 64             return thi
--[ 2019.11.07.17.15.21.181.0 ]--
r 64             return th
--[ 2019.11.07.17.15.21.292.0 ]--
r 64             return t
--[ 2019.11.07.17.15.21.975.0 ]--
r 64             return 
--[ 2019.11.07.17.15.33.945.0 ]--
r 62 
--[ 2019.11.07.17.16.00.605.0 ]--
+ 17     
--[ 2019.11.07.17.16.00.860.0 ]--
r 17     p
--[ 2019.11.07.17.16.00.926.0 ]--
r 17     pr
--[ 2019.11.07.17.16.01.019.0 ]--
r 17     pri
--[ 2019.11.07.17.16.01.122.0 ]--
r 17     priv
--[ 2019.11.07.17.16.01.211.0 ]--
r 17     priva
--[ 2019.11.07.17.16.01.344.0 ]--
r 17     privat
--[ 2019.11.07.17.16.01.407.0 ]--
r 17     private
--[ 2019.11.07.17.16.01.466.0 ]--
r 17     private 
--[ 2019.11.07.17.16.01.560.0 ]--
r 17     private l
--[ 2019.11.07.17.16.01.674.0 ]--
r 17     private lo
--[ 2019.11.07.17.16.01.761.0 ]--
r 17     private loc
--[ 2019.11.07.17.16.01.850.0 ]--
r 17     private loca
--[ 2019.11.07.17.16.01.949.0 ]--
r 17     private locat
--[ 2019.11.07.17.16.02.057.0 ]--
r 17     private locati
--[ 2019.11.07.17.16.02.090.0 ]--
r 17     private locatio
--[ 2019.11.07.17.16.02.423.0 ]--
r 17     private location
--[ 2019.11.07.17.16.04.141.0 ]--
r 17     private Clocation
--[ 2019.11.07.17.16.04.243.0 ]--
r 17     private Colocation
--[ 2019.11.07.17.16.04.356.0 ]--
r 17     private Coolocation
--[ 2019.11.07.17.16.04.411.0 ]--
r 17     private Coorlocation
--[ 2019.11.07.17.16.04.585.0 ]--
r 17     private Coordlocation
--[ 2019.11.07.17.16.04.858.0 ]--
r 17     private Coord location
--[ 2019.11.07.17.16.06.414.0 ]--
r 17     private Coord location;
--[ 2019.11.07.17.16.11.114.0 ]--
- 26
--[ 2019.11.07.17.16.11.310.0 ]--
+ 26             
--[ 2019.11.07.17.16.12.038.0 ]--
r 26             l
--[ 2019.11.07.17.16.12.263.0 ]--
r 26             lc
--[ 2019.11.07.17.16.12.445.0 ]--
r 26             lca
--[ 2019.11.07.17.16.12.653.0 ]--
r 26             lc
--[ 2019.11.07.17.16.12.804.0 ]--
r 26             l
--[ 2019.11.07.17.16.12.914.0 ]--
r 26             
--[ 2019.11.07.17.16.13.391.0 ]--
r 26             l
--[ 2019.11.07.17.16.13.534.0 ]--
r 26             lo
--[ 2019.11.07.17.16.13.595.0 ]--
r 26             loc
--[ 2019.11.07.17.16.13.685.0 ]--
r 26             loca
--[ 2019.11.07.17.16.13.765.0 ]--
r 26             locat
--[ 2019.11.07.17.16.13.836.0 ]--
r 26             locati
--[ 2019.11.07.17.16.13.942.0 ]--
r 26             locatio
--[ 2019.11.07.17.16.14.005.0 ]--
r 26             location
--[ 2019.11.07.17.16.14.117.0 ]--
r 26             location 
--[ 2019.11.07.17.16.14.186.0 ]--
r 26             location =
--[ 2019.11.07.17.16.14.281.0 ]--
r 26             location = 
--[ 2019.11.07.17.16.14.424.0 ]--
r 26             location = n
--[ 2019.11.07.17.16.14.727.0 ]--
r 26             location = 
--[ 2019.11.07.17.16.14.866.0 ]--
r 26             location = l
--[ 2019.11.07.17.16.15.239.0 ]--
r 26             location = lo
--[ 2019.11.07.17.16.15.315.0 ]--
r 26             location = loc
--[ 2019.11.07.17.16.15.479.0 ]--
r 26             location = locl
--[ 2019.11.07.17.16.15.901.0 ]--
r 26             location = loc
--[ 2019.11.07.17.16.15.969.0 ]--
r 26             location = loc;
--[ 2019.11.07.17.16.16.228.0 ]--
r 26             location = loc; 
--[ 2019.11.07.17.16.16.274.0 ]--
r 26             location = loc;
--[ 2019.11.07.17.16.18.896.0 ]--
r 65             return l
--[ 2019.11.07.17.16.19.483.0 ]--
r 65             return lo
--[ 2019.11.07.17.16.19.522.0 ]--
r 65             return loc
--[ 2019.11.07.17.16.19.653.0 ]--
r 65             return loca
--[ 2019.11.07.17.16.19.705.0 ]--
r 65             return locat
--[ 2019.11.07.17.16.19.800.0 ]--
r 65             return locati
--[ 2019.11.07.17.16.19.881.0 ]--
r 65             return locatio
--[ 2019.11.07.17.16.19.940.0 ]--
r 65             return location
--[ 2019.11.07.17.16.20.160.0 ]--
r 65             return location;
--[ 2019.11.07.17.16.20.334.0 ]--
r 65             return location;;
--[ 2019.11.07.17.16.20.848.0 ]--
r 65             return location;
--[ 2019.11.07.17.16.21.988.0 ]--
r 65             return location; 
--[ 2019.11.07.17.16.22.036.0 ]--
r 65             return location;
--[ 2019.11.07.17.16.27.574.0 ]--
+ 106         
--[ 2019.11.07.17.16.27.688.0 ]--
+ 106         
--[ 2019.11.07.17.16.29.822.0 ]--
r 107          
--[ 2019.11.07.17.16.29.902.0 ]--
r 107         
--[ 2019.11.07.17.16.30.935.0 ]--
r 107         S
--[ 2019.11.07.17.16.31.044.0 ]--
r 107         ST
--[ 2019.11.07.17.16.31.444.0 ]--
r 107         STd
--[ 2019.11.07.17.16.31.667.0 ]--
r 107         ST
--[ 2019.11.07.17.16.31.745.0 ]--
r 107         S
--[ 2019.11.07.17.16.32.021.0 ]--
r 107         Std
--[ 2019.11.07.17.16.32.124.0 ]--
r 107         StdOut
--[ 2019.11.07.17.16.32.706.0 ]--
r 107         StdOut.
--[ 2019.11.07.17.16.32.905.0 ]--
r 107         StdOut.p
--[ 2019.11.07.17.16.33.015.0 ]--
r 107         StdOut.pr
--[ 2019.11.07.17.16.33.089.0 ]--
r 107         StdOut.pri
--[ 2019.11.07.17.16.33.143.0 ]--
r 107         StdOut.prin
--[ 2019.11.07.17.16.33.398.0 ]--
r 107         StdOut.println
--[ 2019.11.07.17.16.33.405.0 ]--
r 107         StdOut.println()
--[ 2019.11.07.17.16.33.420.0 ]--
r 107         StdOut.println();
--[ 2019.11.07.17.16.33.784.0 ]--
r 107         StdOut.println(());
--[ 2019.11.07.17.16.34.542.0 ]--
r 107         StdOut.println((i));
--[ 2019.11.07.17.16.34.653.0 ]--
r 107         StdOut.println((in));
--[ 2019.11.07.17.16.34.847.0 ]--
r 107         StdOut.println((i));
--[ 2019.11.07.17.16.34.932.0 ]--
r 107         StdOut.println(());
--[ 2019.11.07.17.16.35.025.0 ]--
r 107         StdOut.println();
--[ 2019.11.07.17.16.35.569.0 ]--
r 107         StdOut.println(i);
--[ 2019.11.07.17.16.35.611.0 ]--
r 107         StdOut.println(in);
--[ 2019.11.07.17.16.35.698.0 ]--
r 107         StdOut.println(int);
--[ 2019.11.07.17.16.35.750.0 ]--
r 107         StdOut.println(inte);
--[ 2019.11.07.17.16.35.852.0 ]--
r 107         StdOut.println(inter);
--[ 2019.11.07.17.16.37.289.0 ]--
r 107         StdOut.println(inte);
--[ 2019.11.07.17.16.37.416.0 ]--
r 107         StdOut.println(int);
--[ 2019.11.07.17.16.37.498.0 ]--
r 107         StdOut.println(in);
--[ 2019.11.07.17.16.38.258.0 ]--
r 107         StdOut.println(intermediary);
--[ 2019.11.07.17.16.38.446.0 ]--
r 107         StdOut.println(intermediary.);
--[ 2019.11.07.17.16.39.330.0 ]--
r 107         StdOut.println(intermediary.getCoord);
--[ 2019.11.07.17.16.39.350.0 ]--
r 107         StdOut.println(intermediary.getCoord());
--[ 2019.11.07.17.16.42.188.0 ]--
r 106 
--[ 2019.11.07.17.16.43.587.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.17.16.56.554.0 ]--
r 106         StdOut.println(intermediary.getCoord());
r 107 
--[ 2019.11.07.17.16.56.609.0 ]--
r 105         StdOut.println(intermediary.getCoord());
r 106         PFNode ending = new PFNode(end, null);
--[ 2019.11.07.17.16.57.170.0 ]--
r 105         PFNode ending = new PFNode(end, null);
r 106         StdOut.println(intermediary.getCoord());
--[ 2019.11.07.17.17.01.945.0 ]--
r 105         /PFNode ending = new PFNode(end, null);
--[ 2019.11.07.17.17.02.040.0 ]--
r 105         //PFNode ending = new PFNode(end, null);
--[ 2019.11.07.17.17.05.613.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.17.17.08.070.0 ]--
r 105         //PFNode ending = new PFNode(end, null); 
--[ 2019.11.07.17.17.08.318.0 ]--
r 105         //PFNode ending = new PFNode(end, null);
--[ 2019.11.07.17.17.08.466.0 ]--
+ 106         
--[ 2019.11.07.17.17.08.915.0 ]--
r 106         S
--[ 2019.11.07.17.17.09.095.0 ]--
r 106         St
--[ 2019.11.07.17.17.09.550.0 ]--
r 106         Std
--[ 2019.11.07.17.17.10.107.0 ]--
r 106         StdOut
--[ 2019.11.07.17.17.10.306.0 ]--
r 106         StdOut.
--[ 2019.11.07.17.17.10.763.0 ]--
r 106         StdOut.p
--[ 2019.11.07.17.17.10.873.0 ]--
r 106         StdOut.pr
--[ 2019.11.07.17.17.10.917.0 ]--
r 106         StdOut.pri
--[ 2019.11.07.17.17.10.965.0 ]--
r 106         StdOut.prin
--[ 2019.11.07.17.17.11.075.0 ]--
r 106         StdOut.print
--[ 2019.11.07.17.17.11.304.0 ]--
r 106         StdOut.print()
--[ 2019.11.07.17.17.13.245.0 ]--
r 106         StdOut.print(b)
--[ 2019.11.07.17.17.13.325.0 ]--
r 106         StdOut.print(be)
--[ 2019.11.07.17.17.13.431.0 ]--
r 106         StdOut.print(beg)
--[ 2019.11.07.17.17.13.499.0 ]--
r 106         StdOut.print(begi)
--[ 2019.11.07.17.17.13.541.0 ]--
r 106         StdOut.print(begin)
--[ 2019.11.07.17.17.13.833.0 ]--
r 106         StdOut.print(begin.)
--[ 2019.11.07.17.17.13.954.0 ]--
r 106         StdOut.print(begin.g)
--[ 2019.11.07.17.17.14.059.0 ]--
r 106         StdOut.print(begin.ge)
--[ 2019.11.07.17.17.14.153.0 ]--
r 106         StdOut.print(begin.get)
--[ 2019.11.07.17.17.14.416.0 ]--
r 106         StdOut.print(begin.getCoord)
--[ 2019.11.07.17.17.14.425.0 ]--
r 106         StdOut.print(begin.getCoord())
--[ 2019.11.07.17.17.16.528.0 ]--
r 107 ;        StdOut.println(intermediary.getCoord());
--[ 2019.11.07.17.17.17.562.0 ]--
r 107         StdOut.println(intermediary.getCoord());
--[ 2019.11.07.17.17.18.723.0 ]--
- 106
r 106         StdOut.print(begin.getCoord()) StdOut.println(intermediary.getCoord());
--[ 2019.11.07.17.17.19.336.0 ]--
+ 106         StdOut.print(begin.getCoord()) 
r 107         StdOut.println(intermediary.getCoord());
--[ 2019.11.07.17.17.19.353.0 ]--
r 107     StdOut.println(intermediary.getCoord());
--[ 2019.11.07.17.17.21.545.0 ]--
r 107         StdOut.println(intermediary.getCoord());
--[ 2019.11.07.17.17.23.675.0 ]--
r 106         StdOut.print(begin.getCoord()); 
--[ 2019.11.07.17.17.26.066.0 ]--
r 106         StdOut.print(begin.getCoord());
--[ 2019.11.07.17.17.27.376.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.17.17.33.195.0 ]--
r 106         StdOut.println(intermediary.getCoord());
r 107         StdOut.print(begin.getCoord());
--[ 2019.11.07.17.17.33.584.0 ]--
r 106         StdOut.print(begin.getCoord());
r 107         StdOut.println(intermediary.getCoord());
--[ 2019.11.07.17.17.34.803.0 ]--
- 106
- 106
--[ 2019.11.07.17.17.36.639.0 ]--
+ 111         
--[ 2019.11.07.17.17.37.337.0 ]--
r 111         s
--[ 2019.11.07.17.17.37.435.0 ]--
r 111         s.
--[ 2019.11.07.17.17.37.655.0 ]--
r 111         s.p
--[ 2019.11.07.17.17.37.793.0 ]--
r 111         s.pu
--[ 2019.11.07.17.17.37.858.0 ]--
r 111         s.pus
--[ 2019.11.07.17.17.37.995.0 ]--
r 111         s.push
--[ 2019.11.07.17.17.39.137.0 ]--
r 111         s.push()
--[ 2019.11.07.17.17.39.317.0 ]--
r 111         s.push(i)
--[ 2019.11.07.17.17.39.410.0 ]--
r 111         s.push(in)
--[ 2019.11.07.17.17.39.565.0 ]--
r 111         s.push(int)
--[ 2019.11.07.17.17.39.605.0 ]--
r 111         s.push(inte)
--[ 2019.11.07.17.17.39.702.0 ]--
r 111         s.push(inter)
--[ 2019.11.07.17.17.40.122.0 ]--
r 111         s.push(intermediary)
--[ 2019.11.07.17.17.41.198.0 ]--
r 111         s.push(intermediary);
--[ 2019.11.07.17.17.45.979.0 ]--
r 111         s.push(intermediary.);
--[ 2019.11.07.17.17.46.058.0 ]--
r 111         s.push(intermediary.g);
--[ 2019.11.07.17.17.46.136.0 ]--
r 111         s.push(intermediary.ge);
--[ 2019.11.07.17.17.46.256.0 ]--
r 111         s.push(intermediary.get);
--[ 2019.11.07.17.17.47.165.0 ]--
r 111         s.push(intermediary.getCoord);
--[ 2019.11.07.17.17.47.177.0 ]--
r 111         s.push(intermediary.getCoord());
--[ 2019.11.07.17.17.50.605.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.17.17.58.798.0 ]--
r 104         PFNode intermediary = new PFNode(new Coord(,5), begin);
--[ 2019.11.07.17.17.58.869.0 ]--
r 104         PFNode intermediary = new PFNode(new Coord(2,5), begin);
--[ 2019.11.07.17.17.58.956.0 ]--
r 104         PFNode intermediary = new PFNode(new Coord(20,5), begin);
--[ 2019.11.07.17.18.02.940.0 ]--
r 104         PFNode intermediary = new PFNode(new Coord(20,51), begin);
--[ 2019.11.07.17.18.03.003.0 ]--
r 104         PFNode intermediary = new PFNode(new Coord(20,516), begin);
--[ 2019.11.07.17.18.03.990.0 ]--
r 104         PFNode intermediary = new PFNode(new Coord(20,51), begin);
--[ 2019.11.07.17.18.04.097.0 ]--
r 104         PFNode intermediary = new PFNode(new Coord(20,5), begin);
--[ 2019.11.07.17.18.04.177.0 ]--
r 104         PFNode intermediary = new PFNode(new Coord(20,), begin);
--[ 2019.11.07.17.18.04.236.0 ]--
r 104         PFNode intermediary = new PFNode(new Coord(20,1), begin);
--[ 2019.11.07.17.18.04.283.0 ]--
r 104         PFNode intermediary = new PFNode(new Coord(20,16), begin);
--[ 2019.11.07.17.18.07.168.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.17.18.27.777.0 ]--
r 104 
--[ 2019.11.07.17.18.28.005.0 ]--
- 104
--[ 2019.11.07.17.18.28.710.0 ]--
r 103         PFNode begin = new PFNode(start, null); 
--[ 2019.11.07.17.18.28.756.0 ]--
r 103         PFNode begin = new PFNode(start, null);
--[ 2019.11.07.17.18.31.656.0 ]--
r 110         s.
--[ 2019.11.07.17.18.31.758.0 ]--
r 110         s
--[ 2019.11.07.17.18.31.869.0 ]--
r 110         
--[ 2019.11.07.17.18.32.130.0 ]--
- 110
--[ 2019.11.07.17.18.35.417.0 ]--
r 104         /PFNode ending = new PFNode(end, null);
--[ 2019.11.07.17.18.35.515.0 ]--
r 104         PFNode ending = new PFNode(end, null);
--[ 2019.11.07.17.20.18.567.0 ]--
r 108         
--[ 2019.11.07.17.20.18.693.0 ]--
- 105
--[ 2019.11.07.17.20.18.827.0 ]--
- 105
--[ 2019.11.07.17.20.19.078.0 ]--
- 105
--[ 2019.11.07.17.20.19.410.0 ]--
r 105          
--[ 2019.11.07.17.20.19.426.0 ]--
r 105         
--[ 2019.11.07.17.20.21.279.0 ]--
+ 103         
--[ 2019.11.07.17.20.21.528.0 ]--
+ 103         
--[ 2019.11.07.17.20.22.000.0 ]--
r 103         s = new Stack<>();
--[ 2019.11.07.17.20.30.347.0 ]--
r 108         
--[ 2019.11.07.17.20.30.538.0 ]--
- 107
--[ 2019.11.07.17.20.30.757.0 ]--
- 107
--[ 2019.11.07.17.20.33.305.0 ]--
+ 107         
--[ 2019.11.07.17.20.33.427.0 ]--
+ 107         
--[ 2019.11.07.17.20.34.111.0 ]--
r 108         s.push(start);
--[ 2019.11.07.17.20.34.122.0 ]--
r 107 
--[ 2019.11.07.17.20.46.657.0 ]--
+ 106         
--[ 2019.11.07.17.20.47.672.0 ]--
r 106          
--[ 2019.11.07.17.20.47.716.0 ]--
r 106         
--[ 2019.11.07.17.21.04.585.0 ]--
r 106         O
--[ 2019.11.07.17.21.04.673.0 ]--
r 106         OF
--[ 2019.11.07.17.21.05.604.0 ]--
r 106         O
--[ 2019.11.07.17.21.05.782.0 ]--
r 106         
--[ 2019.11.07.17.21.06.018.0 ]--
r 106         P
--[ 2019.11.07.17.21.06.114.0 ]--
r 106         PF
--[ 2019.11.07.17.21.06.241.0 ]--
r 106         PFN
--[ 2019.11.07.17.21.06.442.0 ]--
r 106         PFNo
--[ 2019.11.07.17.21.06.552.0 ]--
r 106         PFNod
--[ 2019.11.07.17.21.06.604.0 ]--
r 106         PFNode
--[ 2019.11.07.17.21.06.859.0 ]--
r 106         PFNode 
--[ 2019.11.07.17.21.07.077.0 ]--
r 106         PFNode b
--[ 2019.11.07.17.21.07.396.0 ]--
r 106         PFNode 
--[ 2019.11.07.17.21.08.015.0 ]--
r 106         PFNode i
--[ 2019.11.07.17.21.08.047.0 ]--
r 106         PFNode in
--[ 2019.11.07.17.21.08.165.0 ]--
r 106         PFNode int
--[ 2019.11.07.17.21.08.184.0 ]--
r 106         PFNode inte
--[ 2019.11.07.17.21.08.270.0 ]--
r 106         PFNode inter
--[ 2019.11.07.17.21.08.365.0 ]--
r 106         PFNode interm
--[ 2019.11.07.17.21.08.546.0 ]--
r 106         PFNode interme
--[ 2019.11.07.17.21.09.160.0 ]--
r 106         PFNode intermed
--[ 2019.11.07.17.21.09.271.0 ]--
r 106         PFNode intermedi
--[ 2019.11.07.17.21.09.822.0 ]--
r 106         PFNode intermedia
--[ 2019.11.07.17.21.09.937.0 ]--
r 106         PFNode intermediat
--[ 2019.11.07.17.21.10.000.0 ]--
r 106         PFNode intermediate
--[ 2019.11.07.17.21.10.848.0 ]--
r 106         PFNode intermediate 
--[ 2019.11.07.17.21.10.899.0 ]--
r 106         PFNode intermediate =
--[ 2019.11.07.17.21.11.002.0 ]--
r 106         PFNode intermediate = 
--[ 2019.11.07.17.21.11.151.0 ]--
r 106         PFNode intermediate = n
--[ 2019.11.07.17.21.11.240.0 ]--
r 106         PFNode intermediate = ne
--[ 2019.11.07.17.21.11.366.0 ]--
r 106         PFNode intermediate = new
--[ 2019.11.07.17.21.11.433.0 ]--
r 106         PFNode intermediate = new 
--[ 2019.11.07.17.21.11.569.0 ]--
r 106         PFNode intermediate = new P
--[ 2019.11.07.17.21.11.650.0 ]--
r 106         PFNode intermediate = new PF
--[ 2019.11.07.17.21.12.191.0 ]--
r 106         PFNode intermediate = new PFN
--[ 2019.11.07.17.21.12.339.0 ]--
r 106         PFNode intermediate = new PFNo
--[ 2019.11.07.17.21.12.422.0 ]--
r 106         PFNode intermediate = new PFNod
--[ 2019.11.07.17.21.12.477.0 ]--
r 106         PFNode intermediate = new PFNode
--[ 2019.11.07.17.21.13.035.0 ]--
r 106         PFNode intermediate = new PFNodeS
--[ 2019.11.07.17.21.13.308.0 ]--
r 106         PFNode intermediate = new PFNode
--[ 2019.11.07.17.21.13.497.0 ]--
r 106         PFNode intermediate = new PFNode()
--[ 2019.11.07.17.21.28.434.0 ]--
r 106         PFNode intermediate = new PFNode(())
--[ 2019.11.07.17.21.28.665.0 ]--
r 106         PFNode intermediate = new PFNode((1))
--[ 2019.11.07.17.21.28.808.0 ]--
r 106         PFNode intermediate = new PFNode((1m))
--[ 2019.11.07.17.21.29.053.0 ]--
r 106         PFNode intermediate = new PFNode((1m2))
--[ 2019.11.07.17.21.29.378.0 ]--
r 106         PFNode intermediate = new PFNode((1m))
--[ 2019.11.07.17.21.29.489.0 ]--
r 106         PFNode intermediate = new PFNode((1))
--[ 2019.11.07.17.21.30.030.0 ]--
r 106         PFNode intermediate = new PFNode((1,))
--[ 2019.11.07.17.21.30.160.0 ]--
r 106         PFNode intermediate = new PFNode((1,1))
--[ 2019.11.07.17.21.34.136.0 ]--
+ 105         PFNode ending = new PFNode(end, null);
- 108
--[ 2019.11.07.17.21.39.189.0 ]--
r 107 
--[ 2019.11.07.17.21.39.598.0 ]--
- 107
--[ 2019.11.07.18.19.51.746.0 ]--
r 104 
--[ 2019.11.07.18.23.17.516.0 ]--
r 108         s.push(g);
--[ 2019.11.07.18.23.17.547.0 ]--
r 108         s.push(ge);
--[ 2019.11.07.18.23.17.892.0 ]--
r 108         s.push(get);
--[ 2019.11.07.18.23.18.144.0 ]--
r 108         s.push(getP);
--[ 2019.11.07.18.23.18.254.0 ]--
r 108         s.push(getPa);
--[ 2019.11.07.18.23.18.360.0 ]--
r 108         s.push(getPat);
--[ 2019.11.07.18.23.18.433.0 ]--
r 108         s.push(getPath);
--[ 2019.11.07.18.23.18.801.0 ]--
r 108         s.push(getPathE);
--[ 2019.11.07.18.23.18.901.0 ]--
r 108         s.push(getPathEn);
--[ 2019.11.07.18.23.18.981.0 ]--
r 108         s.push(getPathEnd);
--[ 2019.11.07.18.23.19.182.0 ]--
r 108         s.push(getPathEnd());
--[ 2019.11.07.18.23.19.422.0 ]--
r 108         s.push(getPathEnd() );
--[ 2019.11.07.18.23.19.524.0 ]--
r 108         s.push(getPathEnd());
--[ 2019.11.07.18.23.21.391.0 ]--
r 108         s.push(getPathEnd();
--[ 2019.11.07.18.23.21.496.0 ]--
r 108         s.push(getPathEnd);
--[ 2019.11.07.18.23.21.586.0 ]--
r 108         s.push(getPathEn);
--[ 2019.11.07.18.23.21.723.0 ]--
r 108         s.push(getPathE);
--[ 2019.11.07.18.23.21.913.0 ]--
r 108         s.push(getPath);
--[ 2019.11.07.18.23.22.291.0 ]--
r 108         s.push(getPathS);
--[ 2019.11.07.18.23.22.454.0 ]--
r 108         s.push(getPathSt);
--[ 2019.11.07.18.23.22.531.0 ]--
r 108         s.push(getPathSta);
--[ 2019.11.07.18.23.22.647.0 ]--
r 108         s.push(getPathStar);
--[ 2019.11.07.18.23.22.848.0 ]--
r 108         s.push(getPathStart);
--[ 2019.11.07.18.23.23.052.0 ]--
r 108         s.push(getPathStart());
--[ 2019.11.07.18.23.24.451.0 ]--
r 109         s.push(g);
--[ 2019.11.07.18.23.24.541.0 ]--
r 109         s.push(ge);
--[ 2019.11.07.18.23.24.661.0 ]--
r 109         s.push(get);
--[ 2019.11.07.18.23.24.858.0 ]--
r 109         s.push(getP);
--[ 2019.11.07.18.23.24.938.0 ]--
r 109         s.push(getPa);
--[ 2019.11.07.18.23.25.024.0 ]--
r 109         s.push(getPat);
--[ 2019.11.07.18.23.25.112.0 ]--
r 109         s.push(getPath);
--[ 2019.11.07.18.23.25.360.0 ]--
r 109         s.push(getPathE);
--[ 2019.11.07.18.23.25.470.0 ]--
r 109         s.push(getPathEn);
--[ 2019.11.07.18.23.25.551.0 ]--
r 109         s.push(getPathEnd);
--[ 2019.11.07.18.23.25.764.0 ]--
r 109         s.push(getPathEnd());
--[ 2019.11.07.18.23.27.854.0 ]--
r 109         s.push(getPathEnd() );
--[ 2019.11.07.18.23.27.912.0 ]--
r 109         s.push(getPathEnd());
--[ 2019.11.07.18.23.37.678.0 ]--
- 105
r 105         
--[ 2019.11.07.18.23.42.056.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.18.23.51.524.0 ]--
- 106
--[ 2019.11.07.18.25.22.038.0 ]--
r 106         s.push(getPathStart()); 
--[ 2019.11.07.18.25.23.174.0 ]--
r 106         s.push(getPathStart());
--[ 2019.11.07.18.25.23.597.0 ]--
r 105 
--[ 2019.11.07.18.25.48.250.0 ]--
+ 106         
--[ 2019.11.07.18.25.50.850.0 ]--
r 105  
--[ 2019.11.07.18.25.50.966.0 ]--
- 104
r 104         
--[ 2019.11.07.18.25.51.115.0 ]--
r 104             
--[ 2019.11.07.18.25.51.721.0 ]--
r 104         
--[ 2019.11.07.18.25.51.938.0 ]--
+ 104         
--[ 2019.11.07.18.25.54.542.0 ]--
r 105          
--[ 2019.11.07.18.25.54.584.0 ]--
r 105         
--[ 2019.11.07.18.25.56.469.0 ]--
r 105         S
--[ 2019.11.07.18.25.56.567.0 ]--
r 105         ST
--[ 2019.11.07.18.25.56.731.0 ]--
r 105         STD
--[ 2019.11.07.18.25.57.179.0 ]--
r 105         ST
--[ 2019.11.07.18.25.57.265.0 ]--
r 105         S
--[ 2019.11.07.18.25.57.388.0 ]--
r 105         
--[ 2019.11.07.18.25.57.902.0 ]--
r 105         s
--[ 2019.11.07.18.25.58.003.0 ]--
r 105         st
--[ 2019.11.07.18.25.58.176.0 ]--
r 105         std
--[ 2019.11.07.18.25.58.759.0 ]--
r 105         st
--[ 2019.11.07.18.25.58.872.0 ]--
r 105         s
--[ 2019.11.07.18.25.59.163.0 ]--
r 105         
--[ 2019.11.07.18.25.59.176.0 ]--
r 105         S
--[ 2019.11.07.18.25.59.279.0 ]--
r 105         St
--[ 2019.11.07.18.26.00.061.0 ]--
r 105         Std
--[ 2019.11.07.18.26.00.452.0 ]--
r 105         StdO
--[ 2019.11.07.18.26.00.623.0 ]--
r 105         StdOut
--[ 2019.11.07.18.26.00.780.0 ]--
r 105         StdOut.
--[ 2019.11.07.18.26.00.977.0 ]--
r 105         StdOut.p
--[ 2019.11.07.18.26.01.118.0 ]--
r 105         StdOut.pr
--[ 2019.11.07.18.26.01.154.0 ]--
r 105         StdOut.pri
--[ 2019.11.07.18.26.01.204.0 ]--
r 105         StdOut.prin
--[ 2019.11.07.18.26.01.397.0 ]--
r 105         StdOut.println
--[ 2019.11.07.18.26.01.413.0 ]--
r 105         StdOut.println()
--[ 2019.11.07.18.26.01.425.0 ]--
r 105         StdOut.println();
--[ 2019.11.07.18.26.02.879.0 ]--
r 105         StdOut.println(g);
--[ 2019.11.07.18.26.02.948.0 ]--
r 105         StdOut.println(ge);
--[ 2019.11.07.18.26.03.048.0 ]--
r 105         StdOut.println(gete);
--[ 2019.11.07.18.26.03.626.0 ]--
r 105         StdOut.println(geteH);
--[ 2019.11.07.18.26.04.363.0 ]--
r 105         StdOut.println(gete);
--[ 2019.11.07.18.26.04.526.0 ]--
r 105         StdOut.println(get);
--[ 2019.11.07.18.26.04.808.0 ]--
r 105         StdOut.println(getH);
--[ 2019.11.07.18.26.05.344.0 ]--
r 105         StdOut.println(getHeuristic);
--[ 2019.11.07.18.26.05.352.0 ]--
r 105         StdOut.println(getHeuristic());
--[ 2019.11.07.18.26.07.801.0 ]--
r 104 
r 106 
--[ 2019.11.07.18.26.09.107.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.18.26.28.352.0 ]--
- 105
--[ 2019.11.07.18.26.30.781.0 ]--
- 104
--[ 2019.11.07.18.26.52.715.0 ]--
r 26 
--[ 2019.11.07.18.26.57.165.0 ]--
r 17 
--[ 2019.11.07.18.26.57.432.0 ]--
- 17
--[ 2019.11.07.18.27.18.768.0 ]--
- 63
- 63
- 63
--[ 2019.11.07.18.27.19.736.0 ]--
- 62
--[ 2019.11.07.18.27.22.229.0 ]--
- 25
--[ 2019.11.07.18.27.22.424.0 ]--
+ 25             
--[ 2019.11.07.18.27.23.039.0 ]--
r 25             p
--[ 2019.11.07.18.27.23.109.0 ]--
r 25             pu
--[ 2019.11.07.18.27.23.187.0 ]--
r 25             pub
--[ 2019.11.07.18.27.23.294.0 ]--
r 25             publ
--[ 2019.11.07.18.27.23.458.0 ]--
r 25             publi
--[ 2019.11.07.18.27.23.575.0 ]--
r 25             public
--[ 2019.11.07.18.27.23.748.0 ]--
r 25             public 
--[ 2019.11.07.18.27.23.867.0 ]--
r 25             public i
--[ 2019.11.07.18.27.23.906.0 ]--
r 25             public in
--[ 2019.11.07.18.27.24.034.0 ]--
r 25             public int
--[ 2019.11.07.18.27.24.867.0 ]--
r 25             public int 
--[ 2019.11.07.18.27.26.343.0 ]--
r 25             public int t
--[ 2019.11.07.18.27.26.409.0 ]--
r 25             public int te
--[ 2019.11.07.18.27.26.546.0 ]--
r 25             public int tes
--[ 2019.11.07.18.27.26.632.0 ]--
r 25             public int test
--[ 2019.11.07.18.27.26.735.0 ]--
r 25             public int test 
--[ 2019.11.07.18.27.26.871.0 ]--
r 25             public int test =
--[ 2019.11.07.18.27.27.234.0 ]--
r 25             public int test = 
--[ 2019.11.07.18.27.27.530.0 ]--
r 25             public int test = 1
--[ 2019.11.07.18.27.27.595.0 ]--
r 25             public int test = 1;
--[ 2019.11.07.18.27.35.541.0 ]--
r 25             int test = 1;
--[ 2019.11.07.18.27.45.841.0 ]--
r 30             return ;
--[ 2019.11.07.18.27.46.082.0 ]--
r 30             return t;
--[ 2019.11.07.18.27.46.102.0 ]--
r 30             return te;
--[ 2019.11.07.18.27.46.251.0 ]--
r 30             return tes;
--[ 2019.11.07.18.27.46.379.0 ]--
r 30             return test;
--[ 2019.11.07.18.27.48.033.0 ]--
r 30             return ;
--[ 2019.11.07.18.27.48.422.0 ]--
r 30             return 0;
--[ 2019.11.07.18.27.51.386.0 ]--
r 25             
--[ 2019.11.07.18.28.30.224.0 ]--
+ 62         
--[ 2019.11.07.18.28.31.601.0 ]--
r 62         p
--[ 2019.11.07.18.28.31.665.0 ]--
r 62         pu
--[ 2019.11.07.18.28.31.738.0 ]--
r 62         pub
--[ 2019.11.07.18.28.31.808.0 ]--
r 62         publ
--[ 2019.11.07.18.28.31.950.0 ]--
r 62         publi
--[ 2019.11.07.18.28.32.044.0 ]--
r 62         public
--[ 2019.11.07.18.28.32.770.0 ]--
r 62         public 
--[ 2019.11.07.18.28.34.705.0 ]--
+ 62         
--[ 2019.11.07.18.28.35.953.0 ]--
r 63         public  
--[ 2019.11.07.18.28.36.082.0 ]--
r 63         public C 
--[ 2019.11.07.18.28.36.325.0 ]--
r 63         public Co 
--[ 2019.11.07.18.28.36.578.0 ]--
r 63         public Coo 
--[ 2019.11.07.18.28.36.690.0 ]--
r 63         public Coor 
--[ 2019.11.07.18.28.36.857.0 ]--
r 63         public Coord 
--[ 2019.11.07.18.28.37.113.0 ]--
r 63         public Coord  
--[ 2019.11.07.18.28.37.249.0 ]--
r 63         public Coord 9 
--[ 2019.11.07.18.28.37.600.0 ]--
r 63         public Coord  
--[ 2019.11.07.18.28.37.773.0 ]--
r 63         public Coord () 
--[ 2019.11.07.18.28.38.201.0 ]--
r 63         public Coord (g) 
--[ 2019.11.07.18.28.38.270.0 ]--
r 63         public Coord (ge) 
--[ 2019.11.07.18.28.38.377.0 ]--
r 63         public Coord (get) 
--[ 2019.11.07.18.28.39.229.0 ]--
r 63         public Coord (get ) 
--[ 2019.11.07.18.28.39.299.0 ]--
r 63         public Coord (get) 
--[ 2019.11.07.18.28.40.011.0 ]--
r 63         public Coord () 
--[ 2019.11.07.18.28.40.527.0 ]--
r 63         public Coord  
--[ 2019.11.07.18.28.41.507.0 ]--
r 63         public Coord g 
--[ 2019.11.07.18.28.41.535.0 ]--
r 63         public Coord ge 
--[ 2019.11.07.18.28.41.705.0 ]--
r 63         public Coord get 
--[ 2019.11.07.18.28.41.905.0 ]--
r 63         public Coord getC 
--[ 2019.11.07.18.28.42.014.0 ]--
r 63         public Coord getCo 
--[ 2019.11.07.18.28.42.128.0 ]--
r 63         public Coord getCoo 
--[ 2019.11.07.18.28.42.193.0 ]--
r 63         public Coord getCoor 
--[ 2019.11.07.18.28.42.325.0 ]--
r 63         public Coord getCoord 
--[ 2019.11.07.18.28.42.482.0 ]--
r 63         public Coord getCoord() 
--[ 2019.11.07.18.28.42.736.0 ]--
r 63         public Coord getCoord(){} 
--[ 2019.11.07.18.28.42.920.0 ]--
+ 63         public Coord getCoord(){
r 64         } 
--[ 2019.11.07.18.28.42.937.0 ]--
+ 64             
--[ 2019.11.07.18.28.43.416.0 ]--
r 64             r
--[ 2019.11.07.18.28.43.472.0 ]--
r 64             re
--[ 2019.11.07.18.28.43.616.0 ]--
r 64             ret
--[ 2019.11.07.18.28.43.734.0 ]--
r 64             retu
--[ 2019.11.07.18.28.43.792.0 ]--
r 64             retur
--[ 2019.11.07.18.28.43.895.0 ]--
r 64             return
--[ 2019.11.07.18.28.44.020.0 ]--
r 64             return 
--[ 2019.11.07.18.28.44.914.0 ]--
r 64             return l
--[ 2019.11.07.18.28.45.054.0 ]--
r 64             return lo
--[ 2019.11.07.18.28.45.119.0 ]--
r 64             return loc
--[ 2019.11.07.18.28.45.199.0 ]--
r 64             return loca
--[ 2019.11.07.18.28.45.323.0 ]--
r 64             return locat
--[ 2019.11.07.18.28.45.352.0 ]--
r 64             return locati
--[ 2019.11.07.18.28.45.438.0 ]--
r 64             return locatio
--[ 2019.11.07.18.28.45.531.0 ]--
r 64             return location
--[ 2019.11.07.18.28.45.941.0 ]--
r 64             return location;
--[ 2019.11.07.18.28.48.446.0 ]--
r 25             l
--[ 2019.11.07.18.28.48.588.0 ]--
r 25             lo
--[ 2019.11.07.18.28.48.672.0 ]--
r 25             loc
--[ 2019.11.07.18.28.48.807.0 ]--
r 25             loca
--[ 2019.11.07.18.28.48.872.0 ]--
r 25             locat
--[ 2019.11.07.18.28.48.945.0 ]--
r 25             locati
--[ 2019.11.07.18.28.49.015.0 ]--
r 25             locatio
--[ 2019.11.07.18.28.49.704.0 ]--
r 25             location
--[ 2019.11.07.18.28.49.857.0 ]--
r 25             location 
--[ 2019.11.07.18.28.50.042.0 ]--
r 25             location =
--[ 2019.11.07.18.28.50.119.0 ]--
r 25             location = 
--[ 2019.11.07.18.28.50.282.0 ]--
r 25             location = l
--[ 2019.11.07.18.28.50.440.0 ]--
r 25             location = lo
--[ 2019.11.07.18.28.50.525.0 ]--
r 25             location = loc
--[ 2019.11.07.18.28.51.274.0 ]--
r 25             location = loc;
--[ 2019.11.07.18.28.53.552.0 ]--
+ 17     
--[ 2019.11.07.18.28.54.242.0 ]--
r 17     p
--[ 2019.11.07.18.28.54.304.0 ]--
r 17     pr
--[ 2019.11.07.18.28.54.964.0 ]--
r 17     pri
--[ 2019.11.07.18.28.55.031.0 ]--
r 17     priv
--[ 2019.11.07.18.28.55.158.0 ]--
r 17     priva
--[ 2019.11.07.18.28.55.297.0 ]--
r 17     privat
--[ 2019.11.07.18.28.55.362.0 ]--
r 17     private
--[ 2019.11.07.18.28.55.500.0 ]--
r 17     private 
--[ 2019.11.07.18.28.55.624.0 ]--
r 17     private l
--[ 2019.11.07.18.28.56.056.0 ]--
r 17     private lo
--[ 2019.11.07.18.28.56.129.0 ]--
r 17     private loc
--[ 2019.11.07.18.28.56.199.0 ]--
r 17     private loca
--[ 2019.11.07.18.28.56.320.0 ]--
r 17     private locat
--[ 2019.11.07.18.28.56.381.0 ]--
r 17     private locati
--[ 2019.11.07.18.28.56.432.0 ]--
r 17     private locatio
--[ 2019.11.07.18.28.56.518.0 ]--
r 17     private location
--[ 2019.11.07.18.28.56.646.0 ]--
r 17     private location;
--[ 2019.11.07.18.28.59.544.0 ]--
r 17     private Clocation;
--[ 2019.11.07.18.28.59.630.0 ]--
r 17     private Colocation;
--[ 2019.11.07.18.28.59.734.0 ]--
r 17     private Coolocation;
--[ 2019.11.07.18.28.59.802.0 ]--
r 17     private Coorlocation;
--[ 2019.11.07.18.28.59.953.0 ]--
r 17     private Coordlocation;
--[ 2019.11.07.18.29.00.017.0 ]--
r 17     private Coord location;
--[ 2019.11.07.18.29.03.151.0 ]--
r 104     
--[ 2019.11.07.18.29.03.584.0 ]--
r 104         
--[ 2019.11.07.18.29.04.009.0 ]--
+ 104         
--[ 2019.11.07.18.29.04.127.0 ]--
+ 104         
--[ 2019.11.07.18.29.05.928.0 ]--
r 105         P
--[ 2019.11.07.18.29.06.007.0 ]--
r 105         PF
--[ 2019.11.07.18.29.06.126.0 ]--
r 105         PFN
--[ 2019.11.07.18.29.06.311.0 ]--
r 105         PFNo
--[ 2019.11.07.18.29.06.403.0 ]--
r 105         PFNod
--[ 2019.11.07.18.29.06.471.0 ]--
r 105         PFNode
--[ 2019.11.07.18.29.06.875.0 ]--
r 105         PFNode 
--[ 2019.11.07.18.29.07.406.0 ]--
r 105         PFNode t
--[ 2019.11.07.18.29.07.487.0 ]--
r 105         PFNode te
--[ 2019.11.07.18.29.07.614.0 ]--
r 105         PFNode tes
--[ 2019.11.07.18.29.07.770.0 ]--
r 105         PFNode test
--[ 2019.11.07.18.29.07.805.0 ]--
r 105         PFNode test 
--[ 2019.11.07.18.29.08.199.0 ]--
r 105         PFNode test =
--[ 2019.11.07.18.29.08.326.0 ]--
r 105         PFNode test = 
--[ 2019.11.07.18.29.08.446.0 ]--
r 105         PFNode test = n
--[ 2019.11.07.18.29.08.537.0 ]--
r 105         PFNode test = ne
--[ 2019.11.07.18.29.08.680.0 ]--
r 105         PFNode test = new
--[ 2019.11.07.18.29.08.817.0 ]--
r 105         PFNode test = new 
--[ 2019.11.07.18.29.08.990.0 ]--
r 105         PFNode test = new P
--[ 2019.11.07.18.29.09.149.0 ]--
r 105         PFNode test = new PF
--[ 2019.11.07.18.29.09.384.0 ]--
r 105         PFNode test = new PFN
--[ 2019.11.07.18.29.09.545.0 ]--
r 105         PFNode test = new PFNo
--[ 2019.11.07.18.29.09.665.0 ]--
r 105         PFNode test = new PFNod
--[ 2019.11.07.18.29.09.732.0 ]--
r 105         PFNode test = new PFNode
--[ 2019.11.07.18.29.10.229.0 ]--
r 105         PFNode test = new PFNode()
--[ 2019.11.07.18.29.15.624.0 ]--
r 105         PFNode test = new PFNode( )
--[ 2019.11.07.18.29.15.691.0 ]--
r 105         PFNode test = new PFNode()
--[ 2019.11.07.18.29.17.900.0 ]--
r 105         PFNode test = new PFNode(())
--[ 2019.11.07.18.29.18.089.0 ]--
r 105         PFNode test = new PFNode((1))
--[ 2019.11.07.18.29.18.377.0 ]--
r 105         PFNode test = new PFNode((1,))
--[ 2019.11.07.18.29.18.627.0 ]--
r 105         PFNode test = new PFNode((1, ))
--[ 2019.11.07.18.29.18.693.0 ]--
r 105         PFNode test = new PFNode((1, 2))
--[ 2019.11.07.18.29.20.233.0 ]--
r 105         PFNode test = new PFNode((1, 2)
--[ 2019.11.07.18.29.20.539.0 ]--
r 105         PFNode test = new PFNode((1, )
--[ 2019.11.07.18.29.20.921.0 ]--
r 105         PFNode test = new PFNode((1)
--[ 2019.11.07.18.29.21.350.0 ]--
r 105         PFNode test = new PFNode(()
--[ 2019.11.07.18.29.22.447.0 ]--
r 105         PFNode test = new PFNode()
--[ 2019.11.07.18.29.23.325.0 ]--
r 105         PFNode test = new PFNode(n)
--[ 2019.11.07.18.29.23.415.0 ]--
r 105         PFNode test = new PFNode(ne)
--[ 2019.11.07.18.29.23.565.0 ]--
r 105         PFNode test = new PFNode(new)
--[ 2019.11.07.18.29.23.751.0 ]--
r 105         PFNode test = new PFNode(new )
--[ 2019.11.07.18.29.24.430.0 ]--
r 105         PFNode test = new PFNode(new ())
--[ 2019.11.07.18.29.24.586.0 ]--
r 105         PFNode test = new PFNode(new (C))
--[ 2019.11.07.18.29.24.955.0 ]--
r 105         PFNode test = new PFNode(new (Co))
--[ 2019.11.07.18.29.25.078.0 ]--
r 105         PFNode test = new PFNode(new (Coo))
--[ 2019.11.07.18.29.25.204.0 ]--
r 105         PFNode test = new PFNode(new (Coor))
--[ 2019.11.07.18.29.25.394.0 ]--
r 105         PFNode test = new PFNode(new (Coord))
--[ 2019.11.07.18.29.25.778.0 ]--
r 105         PFNode test = new PFNode(new (Coord ))
--[ 2019.11.07.18.29.25.830.0 ]--
r 105         PFNode test = new PFNode(new (Coord))
--[ 2019.11.07.18.29.27.798.0 ]--
r 105         PFNode test = new PFNode(new (Coord ))
--[ 2019.11.07.18.29.27.877.0 ]--
r 105         PFNode test = new PFNode(new (Coord))
--[ 2019.11.07.18.29.33.584.0 ]--
r 105         PFNode b
--[ 2019.11.07.18.29.33.678.0 ]--
r 105         PFNode be
--[ 2019.11.07.18.29.33.849.0 ]--
r 105         PFNode beg
--[ 2019.11.07.18.29.33.936.0 ]--
r 105         PFNode begi
--[ 2019.11.07.18.29.33.977.0 ]--
r 105         PFNode begin
--[ 2019.11.07.18.29.34.114.0 ]--
r 105         PFNode begin 
--[ 2019.11.07.18.29.34.191.0 ]--
r 105         PFNode begin =
--[ 2019.11.07.18.29.34.298.0 ]--
r 105         PFNode begin = 
--[ 2019.11.07.18.29.34.427.0 ]--
r 105         PFNode begin = n
--[ 2019.11.07.18.29.34.763.0 ]--
r 105         PFNode begin = ne
--[ 2019.11.07.18.29.34.898.0 ]--
r 105         PFNode begin = new
--[ 2019.11.07.18.29.40.836.0 ]--
r 105         
--[ 2019.11.07.18.29.40.981.0 ]--
- 104
--[ 2019.11.07.18.29.41.375.0 ]--
- 104
--[ 2019.11.07.18.30.15.682.0 ]--
r 63 
r 66         }
r 104 
--[ 2019.11.07.18.38.45.106.0 ]--
- 64
- 64
- 64
--[ 2019.11.07.18.38.50.119.0 ]--
r 17 
--[ 2019.11.07.18.38.50.372.0 ]--
- 17
--[ 2019.11.07.18.38.54.078.0 ]--
- 25
r 25             location = loc;        }
--[ 2019.11.07.18.38.54.847.0 ]--
+ 25             location = loc;
r 26         }
--[ 2019.11.07.18.38.56.386.0 ]--
- 25
--[ 2019.11.07.18.38.57.210.0 ]--
+ 25             location = loc;
--[ 2019.11.07.18.39.09.613.0 ]--
- 25
--[ 2019.11.07.18.39.11.774.0 ]--
+ 25             location = loc;
--[ 2019.11.07.18.39.18.022.0 ]--
r 25             
--[ 2019.11.07.18.39.43.120.0 ]--
r 25             n
--[ 2019.11.07.18.39.43.184.0 ]--
r 25             ne
--[ 2019.11.07.18.39.44.463.0 ]--
r 25             n
--[ 2019.11.07.18.39.44.872.0 ]--
r 25             
--[ 2019.11.07.18.39.45.296.0 ]--
r 25             i
--[ 2019.11.07.18.39.45.353.0 ]--
r 25             in
--[ 2019.11.07.18.39.45.470.0 ]--
r 25             int
--[ 2019.11.07.18.39.45.570.0 ]--
r 25             int 
--[ 2019.11.07.18.39.45.626.0 ]--
r 25             int t
--[ 2019.11.07.18.39.45.704.0 ]--
r 25             int te
--[ 2019.11.07.18.39.46.033.0 ]--
r 25             int tet
--[ 2019.11.07.18.39.46.210.0 ]--
r 25             int tets
--[ 2019.11.07.18.39.46.385.0 ]--
r 25             int tet
--[ 2019.11.07.18.39.46.593.0 ]--
r 25             int te
--[ 2019.11.07.18.39.46.781.0 ]--
r 25             int tes
--[ 2019.11.07.18.39.46.922.0 ]--
r 25             int test
--[ 2019.11.07.18.39.47.227.0 ]--
r 25             int test 
--[ 2019.11.07.18.39.47.351.0 ]--
r 25             int test =
--[ 2019.11.07.18.39.47.444.0 ]--
r 25             int test = 
--[ 2019.11.07.18.39.48.215.0 ]--
r 25             int test = 1
--[ 2019.11.07.18.39.48.716.0 ]--
r 25             int test = 1;
--[ 2019.11.07.18.39.53.755.0 ]--
r 36             return 0t;
--[ 2019.11.07.18.39.54.029.0 ]--
r 36             return 0;
--[ 2019.11.07.18.39.54.134.0 ]--
r 36             return ;
--[ 2019.11.07.18.39.54.222.0 ]--
r 36             return t;
--[ 2019.11.07.18.39.54.277.0 ]--
r 36             return te;
--[ 2019.11.07.18.39.54.527.0 ]--
r 36             return tes;
--[ 2019.11.07.18.39.54.568.0 ]--
r 36             return test;
--[ 2019.11.07.18.39.58.787.0 ]--
r 36             return ;
--[ 2019.11.07.18.39.59.502.0 ]--
r 36             return 0t;
--[ 2019.11.07.18.40.01.028.0 ]--
r 36             return 0;
--[ 2019.11.07.18.40.02.319.0 ]--
r 25             int te
--[ 2019.11.07.18.40.02.859.0 ]--
r 25             int tets
--[ 2019.11.07.18.40.03.107.0 ]--
r 25             
--[ 2019.11.07.18.40.03.334.0 ]--
r 25             ne
--[ 2019.11.07.18.40.03.641.0 ]--
r 25             
--[ 2019.11.07.18.40.03.991.0 ]--
r 25             location = loc;
--[ 2019.11.07.18.40.05.813.0 ]--
r 25             
--[ 2019.11.07.18.40.09.443.0 ]--
- 35
r 35         public float getCost(float heuristic) { return 0;
--[ 2019.11.07.18.40.11.560.0 ]--
+ 35         public float getCost(float heuristic) {
r 36             return 0;
--[ 2019.11.07.18.40.13.033.0 ]--
- 36
r 36             return 0; }
--[ 2019.11.07.18.40.15.305.0 ]--
- 35
r 35         public float getCost(float heuristic) { return 0; }
--[ 2019.11.07.18.40.35.829.0 ]--
r 25 
--[ 2019.11.07.18.40.37.152.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.18.58.53.375.0 ]--
r 131         return t;
--[ 2019.11.07.18.58.53.540.0 ]--
r 131         return tr;
--[ 2019.11.07.18.58.53.628.0 ]--
r 131         return tru;
--[ 2019.11.07.18.58.54.034.0 ]--
r 131         return true;
--[ 2019.11.07.18.58.57.120.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.18.59.07.935.0 ]--
r 131         return tru;
--[ 2019.11.07.18.59.08.413.0 ]--
r 131         return tr;
--[ 2019.11.07.18.59.08.530.0 ]--
r 131         return t;
--[ 2019.11.07.18.59.08.864.0 ]--
r 131         return ;
--[ 2019.11.07.18.59.08.986.0 ]--
r 131         return f;
--[ 2019.11.07.18.59.09.094.0 ]--
r 131         return fa;
--[ 2019.11.07.18.59.09.160.0 ]--
r 131         return fal;
--[ 2019.11.07.18.59.09.259.0 ]--
r 131         return fals;
--[ 2019.11.07.18.59.09.401.0 ]--
r 131         return false;
--[ 2019.11.07.18.59.10.348.0 ]--
r 131         return false ;
--[ 2019.11.07.18.59.10.395.0 ]--
r 131         return false;
--[ 2019.11.07.18.59.11.349.0 ]--
r 131         return false ;
--[ 2019.11.07.18.59.11.418.0 ]--
r 131         return false;
--[ 2019.11.07.18.59.56.018.0 ]--
r 101     
--[ 2019.11.07.18.59.56.960.0 ]--
+ 102         
--[ 2019.11.07.18.59.57.033.0 ]--
r 102             
--[ 2019.11.07.18.59.57.588.0 ]--
r 102         
--[ 2019.11.07.18.59.57.954.0 ]--
r 102         .
--[ 2019.11.07.18.59.58.199.0 ]--
r 102         
--[ 2019.11.07.18.59.58.336.0 ]--
r 102         s
--[ 2019.11.07.18.59.58.417.0 ]--
r 102         s.
--[ 2019.11.07.18.59.58.627.0 ]--
r 102         s.c
--[ 2019.11.07.18.59.58.896.0 ]--
r 102         s.co
--[ 2019.11.07.18.59.59.054.0 ]--
r 102         s.con
--[ 2019.11.07.18.59.59.637.0 ]--
r 102         s.co
--[ 2019.11.07.18.59.59.737.0 ]--
r 102         s.c
--[ 2019.11.07.18.59.59.890.0 ]--
r 102         s.
--[ 2019.11.07.19.00.00.413.0 ]--
r 102         s.h
--[ 2019.11.07.19.00.00.839.0 ]--
r 102         s.ha
--[ 2019.11.07.19.00.00.969.0 ]--
r 102         s.has
--[ 2019.11.07.19.00.01.417.0 ]--
r 102         s.has 
--[ 2019.11.07.19.00.01.495.0 ]--
r 102         s.has
--[ 2019.11.07.19.00.01.920.0 ]--
r 102         s.ha
--[ 2019.11.07.19.00.02.257.0 ]--
r 102         s.h
--[ 2019.11.07.19.00.02.429.0 ]--
r 102         s.
--[ 2019.11.07.19.00.02.771.0 ]--
r 102         s.h
--[ 2019.11.07.19.00.04.848.0 ]--
r 102         s.
--[ 2019.11.07.19.00.05.562.0 ]--
r 102         s
--[ 2019.11.07.19.00.06.158.0 ]--
r 102         
--[ 2019.11.07.19.00.06.710.0 ]--
- 101
--[ 2019.11.07.19.00.08.239.0 ]--
+ 101         
--[ 2019.11.07.19.00.08.512.0 ]--
r 102         ni
--[ 2019.11.07.19.00.09.001.0 ]--
r 102         n
--[ 2019.11.07.19.00.09.087.0 ]--
r 102         
--[ 2019.11.07.19.00.09.256.0 ]--
r 102         i
--[ 2019.11.07.19.00.09.324.0 ]--
r 102         in
--[ 2019.11.07.19.00.13.833.0 ]--
r 102         i
--[ 2019.11.07.19.00.14.056.0 ]--
r 102         
--[ 2019.11.07.19.00.14.265.0 ]--
- 101
--[ 2019.11.07.19.00.15.504.0 ]--
- 101
--[ 2019.11.07.19.13.27.092.0 ]--
+ 57             
--[ 2019.11.07.19.13.28.601.0 ]--
- 57
--[ 2019.11.07.19.13.31.907.0 ]--
r 57             s.push(new PFNode(null, ;));
--[ 2019.11.07.19.13.32.249.0 ]--
r 57             s.push(new PFNode(null, ));
--[ 2019.11.07.19.13.32.430.0 ]--
r 57             s.push(new PFNode(null, l));
--[ 2019.11.07.19.13.32.586.0 ]--
r 57             s.push(new PFNode(null, lo));
--[ 2019.11.07.19.13.32.651.0 ]--
r 57             s.push(new PFNode(null, loc));
--[ 2019.11.07.19.13.33.524.0 ]--
r 57             s.push(new PFNode(null, loc ));
--[ 2019.11.07.19.13.33.609.0 ]--
r 57             s.push(new PFNode(null, loc));
--[ 2019.11.07.19.13.33.908.0 ]--
r 57             s.push(new PFNode(null, loc ));
--[ 2019.11.07.19.13.34.275.0 ]--
r 57             s.push(new PFNode(null, ));
--[ 2019.11.07.19.13.34.613.0 ]--
r 57             s.push(new PFNode(null, ;));
--[ 2019.11.07.19.13.35.142.0 ]--
r 57             s.push(new PFNode(null, null));
--[ 2019.11.07.19.20.13.967.0 ]--
r 95         MinPQ<PFNode> pfQueue = new MinPQ<>(); 
--[ 2019.11.07.19.20.14.024.0 ]--
r 95         MinPQ<PFNode> pfQueue = new MinPQ<>();
--[ 2019.11.07.19.20.14.188.0 ]--
+ 96         
--[ 2019.11.07.19.20.14.303.0 ]--
+ 96         
--[ 2019.11.07.19.20.16.290.0 ]--
- 96
--[ 2019.11.07.19.20.18.145.0 ]--
+ 96         
--[ 2019.11.07.19.20.18.643.0 ]--
r 97         n
--[ 2019.11.07.19.20.18.737.0 ]--
r 97         ne
--[ 2019.11.07.19.20.19.597.0 ]--
r 97         n
--[ 2019.11.07.19.20.19.735.0 ]--
r 97         
--[ 2019.11.07.19.20.21.194.0 ]--
- 96
--[ 2019.11.07.19.20.21.729.0 ]--
+ 96         
--[ 2019.11.07.19.20.22.106.0 ]--
r 97         n
--[ 2019.11.07.19.20.22.175.0 ]--
r 97         ne
--[ 2019.11.07.19.20.22.326.0 ]--
r 97         new
--[ 2019.11.07.19.20.22.441.0 ]--
r 97         new 
--[ 2019.11.07.19.20.22.605.0 ]--
r 97         new P
--[ 2019.11.07.19.20.22.676.0 ]--
r 97         new PF
--[ 2019.11.07.19.20.23.469.0 ]--
r 97         new PFN
--[ 2019.11.07.19.20.23.617.0 ]--
r 97         new PFNo
--[ 2019.11.07.19.20.23.688.0 ]--
r 97         new PFNod
--[ 2019.11.07.19.20.23.747.0 ]--
r 97         new PFNode
--[ 2019.11.07.19.20.24.079.0 ]--
r 97         new PFNode 
--[ 2019.11.07.19.20.25.211.0 ]--
r 97         new PFNode b
--[ 2019.11.07.19.20.25.341.0 ]--
r 97         new PFNode be
--[ 2019.11.07.19.20.25.588.0 ]--
r 97         new PFNode beg
--[ 2019.11.07.19.20.25.643.0 ]--
r 97         new PFNode begi
--[ 2019.11.07.19.20.25.698.0 ]--
r 97         new PFNode begin
--[ 2019.11.07.19.20.26.011.0 ]--
r 97         new PFNode begin 
--[ 2019.11.07.19.20.26.277.0 ]--
r 97         new PFNode begin =
--[ 2019.11.07.19.20.26.372.0 ]--
r 97         new PFNode begin = 
--[ 2019.11.07.19.20.35.202.0 ]--
r 97          PFNode begin = 
--[ 2019.11.07.19.20.35.889.0 ]--
r 97         PFNode begin = 
--[ 2019.11.07.19.20.37.441.0 ]--
r 97         PFNode begin =  
--[ 2019.11.07.19.20.37.521.0 ]--
r 97         PFNode begin = n 
--[ 2019.11.07.19.20.37.621.0 ]--
r 97         PFNode begin = ne 
--[ 2019.11.07.19.20.37.768.0 ]--
r 97         PFNode begin = new 
--[ 2019.11.07.19.20.37.835.0 ]--
r 97         PFNode begin = new  
--[ 2019.11.07.19.20.37.943.0 ]--
r 97         PFNode begin = new P 
--[ 2019.11.07.19.20.38.012.0 ]--
r 97         PFNode begin = new PF 
--[ 2019.11.07.19.20.38.124.0 ]--
r 97         PFNode begin = new PFN 
--[ 2019.11.07.19.20.38.297.0 ]--
r 97         PFNode begin = new PFNo 
--[ 2019.11.07.19.20.38.381.0 ]--
r 97         PFNode begin = new PFNod 
--[ 2019.11.07.19.20.38.438.0 ]--
r 97         PFNode begin = new PFNode 
--[ 2019.11.07.19.20.38.720.0 ]--
r 97         PFNode begin = new PFNode() 
--[ 2019.11.07.19.20.45.317.0 ]--
r 97         PFNode begin = new PFNode(g) 
--[ 2019.11.07.19.20.45.384.0 ]--
r 97         PFNode begin = new PFNode(ge) 
--[ 2019.11.07.19.20.45.484.0 ]--
r 97         PFNode begin = new PFNode(get) 
--[ 2019.11.07.19.20.45.756.0 ]--
r 97         PFNode begin = new PFNode(getP) 
--[ 2019.11.07.19.20.47.249.0 ]--
r 97         PFNode begin = new PFNode(getPathStart) 
--[ 2019.11.07.19.20.47.267.0 ]--
r 97         PFNode begin = new PFNode(getPathStart()) 
--[ 2019.11.07.19.20.48.272.0 ]--
r 97         PFNode begin = new PFNode(getPathStart(),) 
--[ 2019.11.07.19.20.48.396.0 ]--
r 97         PFNode begin = new PFNode(getPathStart(), ) 
--[ 2019.11.07.19.20.48.568.0 ]--
r 97         PFNode begin = new PFNode(getPathStart(), nu) 
--[ 2019.11.07.19.20.49.089.0 ]--
r 97         PFNode begin = new PFNode(getPathStart(), nul) 
--[ 2019.11.07.19.20.49.199.0 ]--
r 97         PFNode begin = new PFNode(getPathStart(), null) 
--[ 2019.11.07.19.20.50.358.0 ]--
r 97         PFNode begin = new PFNode(getPathStart(), null); 
--[ 2019.11.07.19.20.51.761.0 ]--
r 97         PFNode begin = new PFNode(getPathStart(), null);  
--[ 2019.11.07.19.20.51.802.0 ]--
r 97         PFNode begin = new PFNode(getPathStart(), null); 
--[ 2019.11.07.19.20.51.990.0 ]--
+ 97         PFNode begin = new PFNode(getPathStart(), null);
r 98         
--[ 2019.11.07.19.20.52.503.0 ]--
+ 98         
--[ 2019.11.07.19.20.52.925.0 ]--
- 98
--[ 2019.11.07.19.20.53.430.0 ]--
r 98         p
--[ 2019.11.07.19.20.53.543.0 ]--
r 98         pf
--[ 2019.11.07.19.20.53.795.0 ]--
r 98         pfQ
--[ 2019.11.07.19.20.53.915.0 ]--
r 98         pfQu
--[ 2019.11.07.19.20.54.112.0 ]--
r 98         pfQueue
--[ 2019.11.07.19.20.54.254.0 ]--
r 98         pfQueue.
--[ 2019.11.07.19.20.54.446.0 ]--
r 98         pfQueue.i
--[ 2019.11.07.19.20.54.496.0 ]--
r 98         pfQueue.in
--[ 2019.11.07.19.20.54.616.0 ]--
r 98         pfQueue.ins
--[ 2019.11.07.19.20.54.757.0 ]--
r 98         pfQueue.inse
--[ 2019.11.07.19.20.54.849.0 ]--
r 98         pfQueue.inser
--[ 2019.11.07.19.20.55.355.0 ]--
r 98         pfQueue.insert
--[ 2019.11.07.19.20.55.366.0 ]--
r 98         pfQueue.insert()
--[ 2019.11.07.19.20.55.379.0 ]--
r 98         pfQueue.insert();
--[ 2019.11.07.19.20.57.513.0 ]--
r 98         pfQueue.insert(m);
--[ 2019.11.07.19.20.57.839.0 ]--
r 98         pfQueue.insert();
--[ 2019.11.07.19.20.59.179.0 ]--
r 98         pfQueue.insert(b);
--[ 2019.11.07.19.20.59.334.0 ]--
r 98         pfQueue.insert(be);
--[ 2019.11.07.19.20.59.581.0 ]--
r 98         pfQueue.insert(beg);
--[ 2019.11.07.19.20.59.671.0 ]--
r 98         pfQueue.insert(begi);
--[ 2019.11.07.19.20.59.693.0 ]--
r 98         pfQueue.insert(begin);
--[ 2019.11.07.19.21.00.728.0 ]--
r 98         pfQueue.insert(begin); 
--[ 2019.11.07.19.21.00.782.0 ]--
r 98         pfQueue.insert(begin);
--[ 2019.11.07.19.21.01.092.0 ]--
+ 99         
--[ 2019.11.07.19.21.02.034.0 ]--
- 99
--[ 2019.11.07.19.29.15.273.0 ]--
r 98         
--[ 2019.11.07.19.29.15.465.0 ]--
- 98
--[ 2019.11.07.19.29.15.822.0 ]--
r 97         PFNode begin = new PFNode(getPathStart(), null); 
--[ 2019.11.07.19.29.15.887.0 ]--
r 97         PFNode begin = new PFNode(getPathStart(), null);
--[ 2019.11.07.19.29.20.236.0 ]--
+ 25             
--[ 2019.11.07.19.29.21.476.0 ]--
r 25             t
--[ 2019.11.07.19.29.21.538.0 ]--
r 25             th
--[ 2019.11.07.19.29.21.578.0 ]--
r 25             thi
--[ 2019.11.07.19.29.21.635.0 ]--
r 25             this
--[ 2019.11.07.19.29.21.803.0 ]--
r 25             this.
--[ 2019.11.07.19.29.22.514.0 ]--
r 25             this
--[ 2019.11.07.19.29.22.766.0 ]--
r 25             thi
--[ 2019.11.07.19.29.22.966.0 ]--
r 25             th
--[ 2019.11.07.19.29.23.269.0 ]--
r 25             t
--[ 2019.11.07.19.29.23.600.0 ]--
r 25             
--[ 2019.11.07.19.29.24.037.0 ]--
- 25
--[ 2019.11.07.19.29.53.651.0 ]--
+ 101         
--[ 2019.11.07.19.29.55.581.0 ]--
r 101         ,
--[ 2019.11.07.19.29.57.976.0 ]--
r 101         , 
--[ 2019.11.07.19.29.58.059.0 ]--
r 101         ,
--[ 2019.11.07.19.29.58.370.0 ]--
r 101         
--[ 2019.11.07.19.30.00.128.0 ]--
- 100
--[ 2019.11.07.19.32.09.564.0 ]--
+ 99         
--[ 2019.11.07.19.32.09.698.0 ]--
+ 99         
--[ 2019.11.07.19.32.10.083.0 ]--
r 100         s
--[ 2019.11.07.19.32.10.139.0 ]--
r 100         sd
--[ 2019.11.07.19.32.10.273.0 ]--
r 100         sdfklj
--[ 2019.11.07.19.32.10.441.0 ]--
r 100         sdfkljdgfs
--[ 2019.11.07.19.32.14.817.0 ]--
r 100         sdfkljdgfs 
--[ 2019.11.07.19.32.14.879.0 ]--
r 100         sdfkljdgfs
--[ 2019.11.07.19.32.15.568.0 ]--
r 100         
--[ 2019.11.07.19.32.15.810.0 ]--
- 99
--[ 2019.11.07.19.32.19.041.0 ]--
r 96 
r 101 
--[ 2019.11.07.19.32.20.432.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.19.38.07.586.0 ]--
+ 63     
--[ 2019.11.07.19.38.08.875.0 ]--
- 62
--[ 2019.11.07.19.38.47.219.0 ]--
+ 28         
--[ 2019.11.07.19.38.48.554.0 ]--
- 27
--[ 2019.11.07.19.39.03.982.0 ]--
r 101     
--[ 2019.11.07.19.39.04.622.0 ]--
r 101         
--[ 2019.11.07.19.39.06.171.0 ]--
r 99         ,
--[ 2019.11.07.19.39.07.838.0 ]--
r 27 
r 62 
r 101 
--[ 2019.11.07.19.39.08.964.0 ]--
UpdateTree (AD): 0 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class

--[ 2019.11.07.19.39.08.969.0 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@28bbba10
--[ 2019.11.07.19.39.13.841.0 ]--
r 99         
--[ 2019.11.07.19.39.13.847.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.07.19.39.13.874.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.07.19.39.13.884.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.07.19.39.13.892.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.07.19.39.16.363.0 ]--
UpdateTree (AD): 2 0
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.07.19.39.16.374.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.19.44.23.453.0 ]--
r 99 
--[ 2019.11.07.19.47.52.900.0 ]--
+ 96         
--[ 2019.11.07.19.47.53.252.0 ]--
r 96         t
--[ 2019.11.07.19.47.53.333.0 ]--
r 96         te
--[ 2019.11.07.19.47.53.471.0 ]--
r 96         ter
--[ 2019.11.07.19.47.53.606.0 ]--
r 96         terr
--[ 2019.11.07.19.47.53.715.0 ]--
r 96         terra
--[ 2019.11.07.19.47.53.819.0 ]--
r 96         terrai
--[ 2019.11.07.19.47.53.852.0 ]--
r 96         terrain
--[ 2019.11.07.19.47.54.112.0 ]--
r 96         terrain.
--[ 2019.11.07.19.47.54.395.0 ]--
r 96         terrain. 
--[ 2019.11.07.19.47.54.518.0 ]--
r 96         terrain.
--[ 2019.11.07.19.47.54.658.0 ]--
r 96         terrain
--[ 2019.11.07.19.47.55.226.0 ]--
r 96         
--[ 2019.11.07.19.47.55.627.0 ]--
- 96
--[ 2019.11.07.19.48.01.889.0 ]--
+ 63     public Pathfinder(Terrain terrain) 
r 64     {
--[ 2019.11.07.19.48.03.110.0 ]--
- 63
r 63     public Pathfinder(Terrain terrain) {
--[ 2019.11.07.19.48.06.282.0 ]--
+ 63     public Pathfinder(Terrain terrain) 
r 64     {
--[ 2019.11.07.19.48.07.290.0 ]--
- 63
r 63     public Pathfinder(Terrain terrain) {
--[ 2019.11.07.19.48.09.652.0 ]--
+ 64     
--[ 2019.11.07.19.48.10.147.0 ]--
r 64         
--[ 2019.11.07.19.48.10.731.0 ]--
- 64
--[ 2019.11.07.19.48.11.087.0 ]--
+ 64         
--[ 2019.11.07.19.48.11.571.0 ]--
r 64         t
--[ 2019.11.07.19.48.11.613.0 ]--
r 64         th
--[ 2019.11.07.19.48.11.662.0 ]--
r 64         thi
--[ 2019.11.07.19.48.11.733.0 ]--
r 64         this
--[ 2019.11.07.19.48.11.852.0 ]--
r 64         this.
--[ 2019.11.07.19.48.12.258.0 ]--
r 64         this.t
--[ 2019.11.07.19.48.12.336.0 ]--
r 64         this.te
--[ 2019.11.07.19.48.12.460.0 ]--
r 64         this.ter
--[ 2019.11.07.19.48.12.593.0 ]--
r 64         this.terr
--[ 2019.11.07.19.48.12.635.0 ]--
r 64         this.terra
--[ 2019.11.07.19.48.12.726.0 ]--
r 64         this.terrai
--[ 2019.11.07.19.48.12.758.0 ]--
r 64         this.terrain
--[ 2019.11.07.19.48.12.868.0 ]--
r 64         this.terrain 
--[ 2019.11.07.19.48.13.037.0 ]--
r 64         this.terrain =
--[ 2019.11.07.19.48.13.166.0 ]--
r 64         this.terrain = 
--[ 2019.11.07.19.48.13.327.0 ]--
r 64         this.terrain = t
--[ 2019.11.07.19.48.13.428.0 ]--
r 64         this.terrain = te
--[ 2019.11.07.19.48.13.589.0 ]--
r 64         this.terrain = ter
--[ 2019.11.07.19.48.13.684.0 ]--
r 64         this.terrain = terr
--[ 2019.11.07.19.48.13.762.0 ]--
r 64         this.terrain = terra
--[ 2019.11.07.19.48.13.843.0 ]--
r 64         this.terrain = terrai
--[ 2019.11.07.19.48.13.869.0 ]--
r 64         this.terrain = terrain
--[ 2019.11.07.19.48.14.126.0 ]--
r 64         this.terrain = terrain;
--[ 2019.11.07.19.48.15.402.0 ]--
r 64         this.terrain = terrain; 
--[ 2019.11.07.19.48.15.463.0 ]--
r 64         this.terrain = terrain;
--[ 2019.11.07.19.48.20.237.0 ]--
+ 17     
--[ 2019.11.07.19.48.20.415.0 ]--
r 17     p
--[ 2019.11.07.19.48.20.497.0 ]--
r 17     pr
--[ 2019.11.07.19.48.20.591.0 ]--
r 17     pri
--[ 2019.11.07.19.48.21.058.0 ]--
r 17     priv
--[ 2019.11.07.19.48.21.219.0 ]--
r 17     priva
--[ 2019.11.07.19.48.21.331.0 ]--
r 17     privat
--[ 2019.11.07.19.48.21.396.0 ]--
r 17     private
--[ 2019.11.07.19.48.21.483.0 ]--
r 17     private 
--[ 2019.11.07.19.48.25.835.0 ]--
r 17     private T
--[ 2019.11.07.19.48.25.971.0 ]--
r 17     private Te
--[ 2019.11.07.19.48.26.096.0 ]--
r 17     private Ter
--[ 2019.11.07.19.48.26.211.0 ]--
r 17     private Terr
--[ 2019.11.07.19.48.26.313.0 ]--
r 17     private Terra
--[ 2019.11.07.19.48.26.449.0 ]--
r 17     private Terrai
--[ 2019.11.07.19.48.26.496.0 ]--
r 17     private Terrain
--[ 2019.11.07.19.48.26.575.0 ]--
r 17     private Terrain 
--[ 2019.11.07.19.48.26.628.0 ]--
r 17     private Terrain t
--[ 2019.11.07.19.48.26.684.0 ]--
r 17     private Terrain te
--[ 2019.11.07.19.48.26.815.0 ]--
r 17     private Terrain ter
--[ 2019.11.07.19.48.26.948.0 ]--
r 17     private Terrain terr
--[ 2019.11.07.19.48.27.013.0 ]--
r 17     private Terrain terra
--[ 2019.11.07.19.48.27.067.0 ]--
r 17     private Terrain terrai
--[ 2019.11.07.19.48.27.102.0 ]--
r 17     private Terrain terrain
--[ 2019.11.07.19.48.27.412.0 ]--
r 17     private Terrain terrain;
--[ 2019.11.07.19.48.31.556.0 ]--
+ 102         
--[ 2019.11.07.19.48.32.496.0 ]--
r 101 t
--[ 2019.11.07.19.48.32.618.0 ]--
r 101 te
--[ 2019.11.07.19.48.32.789.0 ]--
r 101 ter
--[ 2019.11.07.19.48.33.090.0 ]--
r 101 te
--[ 2019.11.07.19.48.33.222.0 ]--
r 101 t
--[ 2019.11.07.19.48.33.318.0 ]--
r 101 
--[ 2019.11.07.19.48.33.684.0 ]--
- 100
r 100         
--[ 2019.11.07.19.48.33.883.0 ]--
+ 100         
--[ 2019.11.07.19.48.34.520.0 ]--
r 101         t
--[ 2019.11.07.19.48.34.687.0 ]--
r 101         te
--[ 2019.11.07.19.48.34.765.0 ]--
r 101         ter
--[ 2019.11.07.19.48.34.899.0 ]--
r 101         terr
--[ 2019.11.07.19.48.34.959.0 ]--
r 101         terra
--[ 2019.11.07.19.48.35.085.0 ]--
r 101         terrai
--[ 2019.11.07.19.48.35.117.0 ]--
r 101         terrain
--[ 2019.11.07.19.48.35.291.0 ]--
r 101         terrain.
--[ 2019.11.07.19.48.35.682.0 ]--
r 101         terrain.g
--[ 2019.11.07.19.48.35.740.0 ]--
r 101         terrain.ge
--[ 2019.11.07.19.48.35.856.0 ]--
r 101         terrain.get
--[ 2019.11.07.19.48.36.304.0 ]--
r 101         terrain.get 
--[ 2019.11.07.19.48.36.422.0 ]--
r 101         terrain.get
--[ 2019.11.07.19.48.39.413.0 ]--
r 101         terrain.
--[ 2019.11.07.19.48.39.527.0 ]--
r 101         terrain
--[ 2019.11.07.19.48.39.782.0 ]--
r 101         
--[ 2019.11.07.19.48.40.611.0 ]--
- 100
--[ 2019.11.07.19.48.40.929.0 ]--
+ 100         
--[ 2019.11.07.19.48.41.447.0 ]--
r 101         f
--[ 2019.11.07.19.48.41.536.0 ]--
r 101         fo
--[ 2019.11.07.19.48.41.645.0 ]--
r 101         for
--[ 2019.11.07.19.48.41.919.0 ]--
r 101         for()
--[ 2019.11.07.19.48.44.368.0 ]--
r 101         for(i)
--[ 2019.11.07.19.48.47.374.0 ]--
r 101         for(i )
--[ 2019.11.07.19.48.47.420.0 ]--
r 101         for(i)
--[ 2019.11.07.19.48.48.084.0 ]--
r 101         for(in)
--[ 2019.11.07.19.48.48.174.0 ]--
r 101         for(int)
--[ 2019.11.07.19.48.48.251.0 ]--
r 101         for(int )
--[ 2019.11.07.19.48.48.324.0 ]--
r 101         for(int i)
--[ 2019.11.07.19.48.48.718.0 ]--
r 101         for(int i )
--[ 2019.11.07.19.48.49.178.0 ]--
r 101         for(int i =)
--[ 2019.11.07.19.48.49.325.0 ]--
r 101         for(int i = )
--[ 2019.11.07.19.48.50.665.0 ]--
r 101         for(int i = 0)
--[ 2019.11.07.19.48.51.203.0 ]--
r 101         for(int i = 0;)
--[ 2019.11.07.19.48.52.250.0 ]--
r 101         for(int i = 0; )
--[ 2019.11.07.19.48.56.409.0 ]--
r 101         for(int i = 0; i)
--[ 2019.11.07.19.48.56.918.0 ]--
r 101         for(int i = 0; i )
--[ 2019.11.07.19.48.57.102.0 ]--
r 101         for(int i = 0; i <)
--[ 2019.11.07.19.48.57.180.0 ]--
r 101         for(int i = 0; i < )
--[ 2019.11.07.19.48.58.129.0 ]--
r 101         for(int i = 0; i < d)
--[ 2019.11.07.19.48.58.214.0 ]--
r 101         for(int i = 0; i < )
--[ 2019.11.07.19.48.58.522.0 ]--
r 101         for(int i = 0; i < t)
--[ 2019.11.07.19.48.58.608.0 ]--
r 101         for(int i = 0; i < te)
--[ 2019.11.07.19.48.58.781.0 ]--
r 101         for(int i = 0; i < ter)
--[ 2019.11.07.19.48.58.899.0 ]--
r 101         for(int i = 0; i < terr)
--[ 2019.11.07.19.48.59.007.0 ]--
r 101         for(int i = 0; i < terra)
--[ 2019.11.07.19.48.59.146.0 ]--
r 101         for(int i = 0; i < terrai)
--[ 2019.11.07.19.48.59.219.0 ]--
r 101         for(int i = 0; i < terrain)
--[ 2019.11.07.19.48.59.422.0 ]--
r 101         for(int i = 0; i < terrain.)
--[ 2019.11.07.19.48.59.538.0 ]--
r 101         for(int i = 0; i < terrain.g)
--[ 2019.11.07.19.48.59.629.0 ]--
r 101         for(int i = 0; i < terrain.ge)
--[ 2019.11.07.19.48.59.959.0 ]--
r 101         for(int i = 0; i < terrain.get)
--[ 2019.11.07.19.49.00.481.0 ]--
r 101         for(int i = 0; i < terrain.getN)
--[ 2019.11.07.19.49.00.867.0 ]--
r 101         for(int i = 0; i < terrain.getN())
--[ 2019.11.07.19.49.01.277.0 ]--
r 101         for(int i = 0; i < terrain.getN()
--[ 2019.11.07.19.49.01.422.0 ]--
r 101         for(int i = 0; i < terrain.getN)
--[ 2019.11.07.19.49.02.017.0 ]--
r 101         for(int i = 0; i < terrain.getN())
--[ 2019.11.07.19.49.03.189.0 ]--
r 101         for(int i = 0; i < terrain.getN();)
--[ 2019.11.07.19.49.03.269.0 ]--
r 101         for(int i = 0; i < terrain.getN(); )
--[ 2019.11.07.19.49.03.894.0 ]--
r 101         for(int i = 0; i < terrain.getN(); i)
--[ 2019.11.07.19.49.04.123.0 ]--
r 101         for(int i = 0; i < terrain.getN(); i+)
--[ 2019.11.07.19.49.04.215.0 ]--
r 101         for(int i = 0; i < terrain.getN(); i++)
--[ 2019.11.07.19.49.05.399.0 ]--
r 101         for(int i = 0; i < terrain.getN(); i++){
--[ 2019.11.07.19.49.05.600.0 ]--
+ 102 
+ 103 }
--[ 2019.11.07.19.49.05.631.0 ]--
r 103         }
--[ 2019.11.07.19.49.05.650.0 ]--
r 102             
--[ 2019.11.07.19.49.15.153.0 ]--
r 100 
r 104 
--[ 2019.11.07.19.49.30.479.0 ]--
+ 99         
--[ 2019.11.07.19.49.31.998.0 ]--
+ 97         
--[ 2019.11.07.19.49.32.692.0 ]--
+ 97         
--[ 2019.11.07.19.49.36.995.0 ]--
r 98         n
--[ 2019.11.07.19.49.37.077.0 ]--
r 98         ne
--[ 2019.11.07.19.49.37.836.0 ]--
r 98         new
--[ 2019.11.07.19.49.38.054.0 ]--
r 98         new 
--[ 2019.11.07.19.49.41.843.0 ]--
r 98         new C
--[ 2019.11.07.19.49.41.932.0 ]--
r 98         new Co
--[ 2019.11.07.19.49.42.036.0 ]--
r 98         new Coo
--[ 2019.11.07.19.49.42.122.0 ]--
r 98         new Coor
--[ 2019.11.07.19.49.42.841.0 ]--
r 98         new Coord
--[ 2019.11.07.19.49.42.995.0 ]--
r 98         new Coord[]
--[ 2019.11.07.19.49.43.208.0 ]--
r 98         new Coord[][]
--[ 2019.11.07.19.49.47.432.0 ]--
r 98         Coord[][]
--[ 2019.11.07.19.49.50.390.0 ]--
r 98         Coord[][] 
--[ 2019.11.07.19.49.51.801.0 ]--
r 98         Coord[][] c
--[ 2019.11.07.19.49.51.876.0 ]--
r 98         Coord[][] co
--[ 2019.11.07.19.49.51.990.0 ]--
r 98         Coord[][] cor
--[ 2019.11.07.19.49.52.479.0 ]--
r 98         Coord[][] corr
--[ 2019.11.07.19.49.52.892.0 ]--
r 98         Coord[][] corrd
--[ 2019.11.07.19.49.53.140.0 ]--
r 98         Coord[][] corr
--[ 2019.11.07.19.49.53.236.0 ]--
r 98         Coord[][] cor
--[ 2019.11.07.19.49.54.062.0 ]--
r 98         Coord[][] co
--[ 2019.11.07.19.49.54.239.0 ]--
r 98         Coord[][] coo
--[ 2019.11.07.19.49.54.316.0 ]--
r 98         Coord[][] coor
--[ 2019.11.07.19.49.54.468.0 ]--
r 98         Coord[][] coord
--[ 2019.11.07.19.49.55.821.0 ]--
r 98         Coord[][] coordB
--[ 2019.11.07.19.49.55.918.0 ]--
r 98         Coord[][] coordBo
--[ 2019.11.07.19.49.55.979.0 ]--
r 98         Coord[][] coordBoa
--[ 2019.11.07.19.49.56.067.0 ]--
r 98         Coord[][] coordBoar
--[ 2019.11.07.19.49.56.210.0 ]--
r 98         Coord[][] coordBoard
--[ 2019.11.07.19.49.56.343.0 ]--
r 98         Coord[][] coordBoard 
--[ 2019.11.07.19.49.57.507.0 ]--
r 98         Coord[][] coordBoard =
--[ 2019.11.07.19.49.57.592.0 ]--
r 98         Coord[][] coordBoard = 
--[ 2019.11.07.19.49.57.708.0 ]--
r 98         Coord[][] coordBoard = bn
--[ 2019.11.07.19.49.57.756.0 ]--
r 98         Coord[][] coordBoard = bne
--[ 2019.11.07.19.49.57.884.0 ]--
r 98         Coord[][] coordBoard = bnew
--[ 2019.11.07.19.49.58.160.0 ]--
r 98         Coord[][] coordBoard = bne
--[ 2019.11.07.19.49.58.265.0 ]--
r 98         Coord[][] coordBoard = bn
--[ 2019.11.07.19.49.58.373.0 ]--
r 98         Coord[][] coordBoard = b
--[ 2019.11.07.19.49.58.490.0 ]--
r 98         Coord[][] coordBoard = 
--[ 2019.11.07.19.49.58.672.0 ]--
r 98         Coord[][] coordBoard = n
--[ 2019.11.07.19.49.58.755.0 ]--
r 98         Coord[][] coordBoard = ne
--[ 2019.11.07.19.49.58.888.0 ]--
r 98         Coord[][] coordBoard = new
--[ 2019.11.07.19.49.58.996.0 ]--
r 98         Coord[][] coordBoard = new 
--[ 2019.11.07.19.49.59.095.0 ]--
r 98         Coord[][] coordBoard = new C
--[ 2019.11.07.19.49.59.205.0 ]--
r 98         Coord[][] coordBoard = new Co
--[ 2019.11.07.19.49.59.307.0 ]--
r 98         Coord[][] coordBoard = new Coo
--[ 2019.11.07.19.49.59.386.0 ]--
r 98         Coord[][] coordBoard = new Coor
--[ 2019.11.07.19.49.59.537.0 ]--
r 98         Coord[][] coordBoard = new Coord
--[ 2019.11.07.19.50.00.562.0 ]--
r 98         Coord[][] coordBoard = new Coord[]
--[ 2019.11.07.19.50.00.744.0 ]--
r 98         Coord[][] coordBoard = new Coord[][]
--[ 2019.11.07.19.50.01.335.0 ]--
r 98         Coord[][] coordBoard = new Coord[][] 
--[ 2019.11.07.19.50.01.416.0 ]--
r 98         Coord[][] coordBoard = new Coord[][]
--[ 2019.11.07.19.50.01.475.0 ]--
r 98         Coord[][] coordBoard = new Coord[][];
--[ 2019.11.07.19.50.11.313.0 ]--
r 98         Coord[][] coordBoard = new Coord[t][];
--[ 2019.11.07.19.50.11.373.0 ]--
r 98         Coord[][] coordBoard = new Coord[te][];
--[ 2019.11.07.19.50.11.506.0 ]--
r 98         Coord[][] coordBoard = new Coord[ter][];
--[ 2019.11.07.19.50.11.644.0 ]--
r 98         Coord[][] coordBoard = new Coord[terr][];
--[ 2019.11.07.19.50.11.713.0 ]--
r 98         Coord[][] coordBoard = new Coord[terra][];
--[ 2019.11.07.19.50.11.803.0 ]--
r 98         Coord[][] coordBoard = new Coord[terrai][];
--[ 2019.11.07.19.50.11.840.0 ]--
r 98         Coord[][] coordBoard = new Coord[terrain][];
--[ 2019.11.07.19.50.12.036.0 ]--
r 98         Coord[][] coordBoard = new Coord[terrain.][];
--[ 2019.11.07.19.50.14.125.0 ]--
r 98         Coord[][] coordBoard = new Coord[terrain.getN][];
--[ 2019.11.07.19.50.14.142.0 ]--
r 98         Coord[][] coordBoard = new Coord[terrain.getN()][];
--[ 2019.11.07.19.50.15.517.0 ]--
r 98         Coord[][] coordBoard = new Coord[terrain.getN()][t];
--[ 2019.11.07.19.50.15.576.0 ]--
r 98         Coord[][] coordBoard = new Coord[terrain.getN()][te];
--[ 2019.11.07.19.50.15.701.0 ]--
r 98         Coord[][] coordBoard = new Coord[terrain.getN()][ter];
--[ 2019.11.07.19.50.15.794.0 ]--
r 98         Coord[][] coordBoard = new Coord[terrain.getN()][terr];
--[ 2019.11.07.19.50.16.321.0 ]--
r 98         Coord[][] coordBoard = new Coord[terrain.getN()][terrain];
--[ 2019.11.07.19.50.17.367.0 ]--
r 98         Coord[][] coordBoard = new Coord[terrain.getN()][terrain.];
--[ 2019.11.07.19.50.17.622.0 ]--
r 98         Coord[][] coordBoard = new Coord[terrain.getN()][terrain.g];
--[ 2019.11.07.19.50.17.670.0 ]--
r 98         Coord[][] coordBoard = new Coord[terrain.getN()][terrain.ge];
--[ 2019.11.07.19.50.17.819.0 ]--
r 98         Coord[][] coordBoard = new Coord[terrain.getN()][terrain.get];
--[ 2019.11.07.19.50.18.058.0 ]--
r 98         Coord[][] coordBoard = new Coord[terrain.getN()][terrain.getN];
--[ 2019.11.07.19.50.18.323.0 ]--
r 98         Coord[][] coordBoard = new Coord[terrain.getN()][terrain.getN()];
--[ 2019.11.07.19.50.35.255.0 ]--
r 105             f
--[ 2019.11.07.19.50.35.322.0 ]--
r 105             fo
--[ 2019.11.07.19.50.35.736.0 ]--
r 105             for
--[ 2019.11.07.19.50.35.938.0 ]--
r 105             for()
--[ 2019.11.07.19.50.36.686.0 ]--
r 105             for(i)
--[ 2019.11.07.19.50.36.736.0 ]--
r 105             for(in)
--[ 2019.11.07.19.50.36.843.0 ]--
r 105             for(int)
--[ 2019.11.07.19.50.37.204.0 ]--
r 105             for(int )
--[ 2019.11.07.19.50.37.315.0 ]--
r 105             for(int j)
--[ 2019.11.07.19.50.37.378.0 ]--
r 105             for(int j )
--[ 2019.11.07.19.50.37.468.0 ]--
r 105             for(int j =)
--[ 2019.11.07.19.50.37.556.0 ]--
r 105             for(int j = )
--[ 2019.11.07.19.50.37.660.0 ]--
r 105             for(int j = 0)
--[ 2019.11.07.19.50.38.965.0 ]--
r 105             for(int j = 0;)
--[ 2019.11.07.19.50.39.039.0 ]--
r 105             for(int j = 0; )
--[ 2019.11.07.19.50.39.158.0 ]--
r 105             for(int j = 0; <)
--[ 2019.11.07.19.50.39.328.0 ]--
r 105             for(int j = 0; < )
--[ 2019.11.07.19.50.39.942.0 ]--
r 105             for(int j = 0; <)
--[ 2019.11.07.19.50.40.079.0 ]--
r 105             for(int j = 0; )
--[ 2019.11.07.19.50.40.782.0 ]--
r 105             for(int j = 0; j)
--[ 2019.11.07.19.50.40.852.0 ]--
r 105             for(int j = 0; j )
--[ 2019.11.07.19.50.41.030.0 ]--
r 105             for(int j = 0; j <)
--[ 2019.11.07.19.50.41.160.0 ]--
r 105             for(int j = 0; j < )
--[ 2019.11.07.19.50.41.507.0 ]--
r 105             for(int j = 0; j < t)
--[ 2019.11.07.19.50.41.655.0 ]--
r 105             for(int j = 0; j < te)
--[ 2019.11.07.19.50.41.766.0 ]--
r 105             for(int j = 0; j < ter)
--[ 2019.11.07.19.50.41.908.0 ]--
r 105             for(int j = 0; j < terr)
--[ 2019.11.07.19.50.41.950.0 ]--
r 105             for(int j = 0; j < terra)
--[ 2019.11.07.19.50.42.044.0 ]--
r 105             for(int j = 0; j < terrai)
--[ 2019.11.07.19.50.42.079.0 ]--
r 105             for(int j = 0; j < terrain)
--[ 2019.11.07.19.50.42.315.0 ]--
r 105             for(int j = 0; j < terrain.)
--[ 2019.11.07.19.50.48.273.0 ]--
r 105             for(int j = 0; j < terrain.g)
--[ 2019.11.07.19.50.48.356.0 ]--
r 105             for(int j = 0; j < terrain.ge)
--[ 2019.11.07.19.50.48.471.0 ]--
r 105             for(int j = 0; j < terrain.get)
--[ 2019.11.07.19.50.48.687.0 ]--
r 105             for(int j = 0; j < terrain.getN)
--[ 2019.11.07.19.50.48.994.0 ]--
r 105             for(int j = 0; j < terrain.getN())
--[ 2019.11.07.19.50.50.960.0 ]--
r 105             for(int j = 0; j < terrain.getN()){
--[ 2019.11.07.19.50.51.154.0 ]--
+ 106 
+ 107 }
--[ 2019.11.07.19.50.51.191.0 ]--
r 107             }
--[ 2019.11.07.19.50.51.217.0 ]--
r 106                 
--[ 2019.11.07.19.50.59.792.0 ]--
r 105             for(int j = 0; j < terrain.getN());{
--[ 2019.11.07.19.51.00.020.0 ]--
r 105             for(int j = 0; j < terrain.getN()); {
--[ 2019.11.07.19.51.00.312.0 ]--
r 105             for(int j = 0; j < terrain.getN()); j{
--[ 2019.11.07.19.51.00.661.0 ]--
r 105             for(int j = 0; j < terrain.getN()); j+{
--[ 2019.11.07.19.51.00.770.0 ]--
r 105             for(int j = 0; j < terrain.getN()); j++{
--[ 2019.11.07.19.51.08.311.0 ]--
r 105             for(int j = 0; j < terrain.getN()) j++{
--[ 2019.11.07.19.51.08.510.0 ]--
r 105             for(int j = 0; j < terrain.getN() j++{
--[ 2019.11.07.19.51.09.525.0 ]--
r 105             for(int j = 0; j < terrain.getN()l j++{
--[ 2019.11.07.19.51.09.718.0 ]--
r 105             for(int j = 0; j < terrain.getN() j++{
--[ 2019.11.07.19.51.09.858.0 ]--
r 105             for(int j = 0; j < terrain.getN(); j++{
--[ 2019.11.07.19.51.10.328.0 ]--
r 105             for(int j = 0; j < terrain.getN();  j++{
--[ 2019.11.07.19.51.10.354.0 ]--
r 105             for(int j = 0; j < terrain.getN(); j++{
--[ 2019.11.07.19.51.12.757.0 ]--
- 106
--[ 2019.11.07.19.51.13.017.0 ]--
+ 106                 
--[ 2019.11.07.19.51.16.489.0 ]--
r 106                 c
--[ 2019.11.07.19.51.16.562.0 ]--
r 106                 co
--[ 2019.11.07.19.51.16.685.0 ]--
r 106                 coo
--[ 2019.11.07.19.51.16.740.0 ]--
r 106                 coor
--[ 2019.11.07.19.51.16.926.0 ]--
r 106                 coord
--[ 2019.11.07.19.51.17.125.0 ]--
r 106                 coordb
--[ 2019.11.07.19.51.17.218.0 ]--
r 106                 coordbo
--[ 2019.11.07.19.51.17.261.0 ]--
r 106                 coordboa
--[ 2019.11.07.19.51.17.374.0 ]--
r 106                 coordboar
--[ 2019.11.07.19.51.17.513.0 ]--
r 106                 coordboard
--[ 2019.11.07.19.51.17.812.0 ]--
r 106                 coordboar
--[ 2019.11.07.19.51.17.919.0 ]--
r 106                 coordboa
--[ 2019.11.07.19.51.18.005.0 ]--
r 106                 coordbo
--[ 2019.11.07.19.51.18.140.0 ]--
r 106                 coordb
--[ 2019.11.07.19.51.18.248.0 ]--
r 106                 coord
--[ 2019.11.07.19.51.18.396.0 ]--
r 106                 coordB
--[ 2019.11.07.19.51.18.464.0 ]--
r 106                 coordBo
--[ 2019.11.07.19.51.18.562.0 ]--
r 106                 coordBoa
--[ 2019.11.07.19.51.18.643.0 ]--
r 106                 coordBoar
--[ 2019.11.07.19.51.18.790.0 ]--
r 106                 coordBoard
--[ 2019.11.07.19.51.18.911.0 ]--
r 106                 coordBoard[]
--[ 2019.11.07.19.51.19.109.0 ]--
r 106                 coordBoard[i]
--[ 2019.11.07.19.51.19.525.0 ]--
r 106                 coordBoard[i][]
--[ 2019.11.07.19.51.20.247.0 ]--
r 106                 coordBoard[i][j]
--[ 2019.11.07.19.51.20.732.0 ]--
r 106                 coordBoard[i][j] 
--[ 2019.11.07.19.51.20.991.0 ]--
r 106                 coordBoard[i][j] =
--[ 2019.11.07.19.51.21.344.0 ]--
r 106                 coordBoard[i][j] 
--[ 2019.11.07.19.51.31.826.0 ]--
r 105             for(int j = 0; j < terrain.getN(); j++){
--[ 2019.11.07.19.51.32.994.0 ]--
r 105             for(int j = 0; j < terrain.getN(); j++) {
--[ 2019.11.07.19.51.33.033.0 ]--
r 105             for(int j = 0; j < terrain.getN(); j++){
--[ 2019.11.07.19.51.34.445.0 ]--
r 106                 coordBoard[i][j] =
--[ 2019.11.07.19.51.34.576.0 ]--
r 106                 coordBoard[i][j] = 
--[ 2019.11.07.19.51.35.178.0 ]--
r 106                 coordBoard[i][j] = n
--[ 2019.11.07.19.51.35.252.0 ]--
r 106                 coordBoard[i][j] = ne
--[ 2019.11.07.19.51.35.383.0 ]--
r 106                 coordBoard[i][j] = new
--[ 2019.11.07.19.51.35.471.0 ]--
r 106                 coordBoard[i][j] = new 
--[ 2019.11.07.19.51.35.579.0 ]--
r 106                 coordBoard[i][j] = new C
--[ 2019.11.07.19.51.35.691.0 ]--
r 106                 coordBoard[i][j] = new Co
--[ 2019.11.07.19.51.35.787.0 ]--
r 106                 coordBoard[i][j] = new Coo
--[ 2019.11.07.19.51.35.870.0 ]--
r 106                 coordBoard[i][j] = new Coor
--[ 2019.11.07.19.51.36.018.0 ]--
r 106                 coordBoard[i][j] = new Coord
--[ 2019.11.07.19.51.37.135.0 ]--
r 106                 coordBoard[i][j] = new Coord 
--[ 2019.11.07.19.51.37.164.0 ]--
r 106                 coordBoard[i][j] = new Coord
--[ 2019.11.07.19.51.37.349.0 ]--
r 106                 coordBoard[i][j] = new Coord()
--[ 2019.11.07.19.51.38.529.0 ]--
r 106                 coordBoard[i][j] = new Coord(i)
--[ 2019.11.07.19.51.38.882.0 ]--
r 106                 coordBoard[i][j] = new Coord(i,)
--[ 2019.11.07.19.51.39.237.0 ]--
r 106                 coordBoard[i][j] = new Coord(i,j)
--[ 2019.11.07.19.51.40.415.0 ]--
r 106                 coordBoard[i][j] = new Coord(i,)
--[ 2019.11.07.19.51.40.558.0 ]--
r 106                 coordBoard[i][j] = new Coord(i)
--[ 2019.11.07.19.51.40.694.0 ]--
r 106                 coordBoard[i][j] = new Coord()
--[ 2019.11.07.19.51.41.289.0 ]--
r 106                 coordBoard[i][j] = new Coord(i)
--[ 2019.11.07.19.51.41.430.0 ]--
r 106                 coordBoard[i][j] = new Coord(i,)
--[ 2019.11.07.19.51.41.548.0 ]--
r 106                 coordBoard[i][j] = new Coord(i, )
--[ 2019.11.07.19.51.41.662.0 ]--
r 106                 coordBoard[i][j] = new Coord(i, j)
--[ 2019.11.07.19.51.42.656.0 ]--
r 106                 coordBoard[i][j] = new Coord(i, j);
--[ 2019.11.07.19.51.45.292.0 ]--
- 109
--[ 2019.11.07.19.51.45.625.0 ]--
+ 109         
--[ 2019.11.07.19.51.45.990.0 ]--
+ 109         
--[ 2019.11.07.19.51.48.236.0 ]--
r 97 
r 101 
r 110 
--[ 2019.11.07.19.51.49.671.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.19.52.26.659.0 ]--
+ 107                 
--[ 2019.11.07.19.52.26.906.0 ]--
r 107                 S
--[ 2019.11.07.19.52.26.995.0 ]--
r 107                 St
--[ 2019.11.07.19.52.27.159.0 ]--
r 107                 Std
--[ 2019.11.07.19.52.27.941.0 ]--
r 107                 St
--[ 2019.11.07.19.52.28.034.0 ]--
r 107                 S
--[ 2019.11.07.19.52.28.140.0 ]--
r 107                 
--[ 2019.11.07.19.52.28.425.0 ]--
r 110 
--[ 2019.11.07.19.52.31.100.0 ]--
r 107                 s
--[ 2019.11.07.19.52.31.231.0 ]--
r 107                 sy
--[ 2019.11.07.19.52.31.333.0 ]--
r 107                 sys
--[ 2019.11.07.19.52.31.840.0 ]--
r 107                 syst
--[ 2019.11.07.19.52.31.917.0 ]--
r 107                 syste
--[ 2019.11.07.19.52.31.979.0 ]--
r 107                 system
--[ 2019.11.07.19.52.32.174.0 ]--
r 107                 system.
--[ 2019.11.07.19.52.32.441.0 ]--
r 107                 system.o
--[ 2019.11.07.19.52.32.524.0 ]--
r 107                 system.ou
--[ 2019.11.07.19.52.32.621.0 ]--
r 107                 system.out
--[ 2019.11.07.19.52.32.744.0 ]--
r 107                 system.out.
--[ 2019.11.07.19.52.33.177.0 ]--
r 107                 system.out.p
--[ 2019.11.07.19.52.33.247.0 ]--
r 107                 system.out.pr
--[ 2019.11.07.19.52.33.331.0 ]--
r 107                 system.out.pri
--[ 2019.11.07.19.52.33.371.0 ]--
r 107                 system.out.prin
--[ 2019.11.07.19.52.33.420.0 ]--
r 107                 system.out.print
--[ 2019.11.07.19.52.33.547.0 ]--
r 107                 system.out.print 
--[ 2019.11.07.19.52.33.638.0 ]--
r 107                 system.out.print
--[ 2019.11.07.19.52.37.562.0 ]--
r 107                 ystem.out.print
--[ 2019.11.07.19.52.38.630.0 ]--
r 107                 System.out.print
--[ 2019.11.07.19.52.41.676.0 ]--
r 107                 System.out.print()
--[ 2019.11.07.19.52.42.651.0 ]--
r 107                 System.out.print(c)
--[ 2019.11.07.19.52.42.713.0 ]--
r 107                 System.out.print(co)
--[ 2019.11.07.19.52.42.807.0 ]--
r 107                 System.out.print(coo)
--[ 2019.11.07.19.52.42.885.0 ]--
r 107                 System.out.print(coor)
--[ 2019.11.07.19.52.43.057.0 ]--
r 107                 System.out.print(coord)
--[ 2019.11.07.19.52.43.443.0 ]--
r 107                 System.out.print(coordBoard)
--[ 2019.11.07.19.52.43.815.0 ]--
r 107                 System.out.print(coordBoard[])
--[ 2019.11.07.19.52.44.544.0 ]--
r 107                 System.out.print(coordBoard[i])
--[ 2019.11.07.19.52.44.793.0 ]--
r 107                 System.out.print(coordBoard[i][])
--[ 2019.11.07.19.52.45.615.0 ]--
r 107                 System.out.print(coordBoard[i][h])
--[ 2019.11.07.19.52.46.904.0 ]--
r 107                 System.out.print(coordBoard[i][hj])
--[ 2019.11.07.19.52.47.152.0 ]--
r 107                 System.out.print(coordBoard[i][h])
--[ 2019.11.07.19.52.47.222.0 ]--
r 107                 System.out.print(coordBoard[i][])
--[ 2019.11.07.19.52.47.383.0 ]--
r 107                 System.out.print(coordBoard[i][j])
--[ 2019.11.07.19.52.47.787.0 ]--
r 107                 System.out.print(coordBoard[i][j]])
--[ 2019.11.07.19.52.48.416.0 ]--
r 107                 System.out.print(coordBoard[i][j])
--[ 2019.11.07.19.52.49.115.0 ]--
r 107                 System.out.print(coordBoard[i][j]);
--[ 2019.11.07.19.52.50.037.0 ]--
+ 109             
--[ 2019.11.07.19.52.50.676.0 ]--
r 109             s
--[ 2019.11.07.19.52.50.838.0 ]--
r 109             sy
--[ 2019.11.07.19.52.50.950.0 ]--
r 109             sys
--[ 2019.11.07.19.52.51.079.0 ]--
r 109             syst
--[ 2019.11.07.19.52.51.132.0 ]--
r 109             syste
--[ 2019.11.07.19.52.51.221.0 ]--
r 109             system
--[ 2019.11.07.19.52.51.722.0 ]--
r 109             syste
--[ 2019.11.07.19.52.51.971.0 ]--
r 109             
--[ 2019.11.07.19.52.52.248.0 ]--
r 109             S
--[ 2019.11.07.19.52.52.556.0 ]--
r 109             Ss
--[ 2019.11.07.19.52.52.857.0 ]--
r 109             S
--[ 2019.11.07.19.52.53.091.0 ]--
r 109             
--[ 2019.11.07.19.52.53.584.0 ]--
r 109             S
--[ 2019.11.07.19.52.53.791.0 ]--
r 109             Ss
--[ 2019.11.07.19.52.54.061.0 ]--
r 109             S
--[ 2019.11.07.19.52.54.134.0 ]--
r 109             Sy
--[ 2019.11.07.19.52.54.416.0 ]--
r 109             Sys
--[ 2019.11.07.19.52.54.437.0 ]--
r 109             Syste
--[ 2019.11.07.19.52.54.499.0 ]--
r 109             System
--[ 2019.11.07.19.52.54.624.0 ]--
r 109             System.
--[ 2019.11.07.19.52.54.836.0 ]--
r 109             System.o
--[ 2019.11.07.19.52.54.894.0 ]--
r 109             System.ou
--[ 2019.11.07.19.52.55.006.0 ]--
r 109             System.out
--[ 2019.11.07.19.52.55.125.0 ]--
r 109             System.out.
--[ 2019.11.07.19.52.55.347.0 ]--
r 109             System.out.p
--[ 2019.11.07.19.52.55.423.0 ]--
r 109             System.out.pr
--[ 2019.11.07.19.52.55.496.0 ]--
r 109             System.out.pri
--[ 2019.11.07.19.52.55.538.0 ]--
r 109             System.out.prin
--[ 2019.11.07.19.52.55.598.0 ]--
r 109             System.out.print
--[ 2019.11.07.19.52.57.028.0 ]--
r 109             System.out.printl
--[ 2019.11.07.19.52.57.110.0 ]--
r 109             System.out.println
--[ 2019.11.07.19.52.57.447.0 ]--
r 109             System.out.printlnI
--[ 2019.11.07.19.52.57.827.0 ]--
r 109             System.out.println
--[ 2019.11.07.19.52.57.980.0 ]--
r 109             System.out.println()
--[ 2019.11.07.19.52.58.197.0 ]--
r 109             System.out.println();
--[ 2019.11.07.19.53.02.584.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.19.53.41.705.0 ]--
+ 98         
--[ 2019.11.07.19.53.42.176.0 ]--
r 98         /
--[ 2019.11.07.19.53.42.268.0 ]--
r 98         //
--[ 2019.11.07.19.53.42.791.0 ]--
r 98         //I
--[ 2019.11.07.19.53.42.927.0 ]--
r 98         //In
--[ 2019.11.07.19.53.42.973.0 ]--
r 98         //Ini
--[ 2019.11.07.19.53.43.236.0 ]--
r 98         //Init
--[ 2019.11.07.19.53.43.302.0 ]--
r 98         //Initi
--[ 2019.11.07.19.53.43.387.0 ]--
r 98         //Initia
--[ 2019.11.07.19.53.43.463.0 ]--
r 98         //Initial
--[ 2019.11.07.19.53.43.593.0 ]--
r 98         //Initiali
--[ 2019.11.07.19.53.43.620.0 ]--
r 98         //Initializ
--[ 2019.11.07.19.53.43.790.0 ]--
r 98         //Initialize
--[ 2019.11.07.19.53.43.933.0 ]--
r 98         //Initialize 
--[ 2019.11.07.19.53.45.079.0 ]--
r 98         //Initialize a
--[ 2019.11.07.19.53.45.200.0 ]--
r 98         //Initialize a 
--[ 2019.11.07.19.53.45.239.0 ]--
r 98         //Initialize a c
--[ 2019.11.07.19.53.45.343.0 ]--
r 98         //Initialize a co
--[ 2019.11.07.19.53.46.084.0 ]--
r 98         //Initialize a 
--[ 2019.11.07.19.53.47.436.0 ]--
r 98         //Initialize a  
--[ 2019.11.07.19.53.47.525.0 ]--
r 98         //Initialize a 
--[ 2019.11.07.19.53.47.828.0 ]--
r 98         //Initialize a 2
--[ 2019.11.07.19.53.48.076.0 ]--
r 98         //Initialize a 2D
--[ 2019.11.07.19.53.48.248.0 ]--
r 98         //Initialize a 2D 
--[ 2019.11.07.19.53.48.281.0 ]--
r 98         //Initialize a 2D a
--[ 2019.11.07.19.53.48.737.0 ]--
r 98         //Initialize a 2D ar
--[ 2019.11.07.19.53.48.856.0 ]--
r 98         //Initialize a 2D arr
--[ 2019.11.07.19.53.48.924.0 ]--
r 98         //Initialize a 2D arra
--[ 2019.11.07.19.53.49.046.0 ]--
r 98         //Initialize a 2D array
--[ 2019.11.07.19.53.49.161.0 ]--
r 98         //Initialize a 2D array 
--[ 2019.11.07.19.53.49.343.0 ]--
r 98         //Initialize a 2D array o
--[ 2019.11.07.19.53.49.391.0 ]--
r 98         //Initialize a 2D array on
--[ 2019.11.07.19.53.49.633.0 ]--
r 98         //Initialize a 2D array o
--[ 2019.11.07.19.53.49.727.0 ]--
r 98         //Initialize a 2D array 
--[ 2019.11.07.19.53.49.803.0 ]--
r 98         //Initialize a 2D array c
--[ 2019.11.07.19.53.49.901.0 ]--
r 98         //Initialize a 2D array co
--[ 2019.11.07.19.53.49.999.0 ]--
r 98         //Initialize a 2D array cot
--[ 2019.11.07.19.53.50.294.0 ]--
r 98         //Initialize a 2D array co
--[ 2019.11.07.19.53.50.455.0 ]--
r 98         //Initialize a 2D array con
--[ 2019.11.07.19.53.50.545.0 ]--
r 98         //Initialize a 2D array cont
--[ 2019.11.07.19.53.50.679.0 ]--
r 98         //Initialize a 2D array conta
--[ 2019.11.07.19.53.50.754.0 ]--
r 98         //Initialize a 2D array contai
--[ 2019.11.07.19.53.50.879.0 ]--
r 98         //Initialize a 2D array contain
--[ 2019.11.07.19.53.50.967.0 ]--
r 98         //Initialize a 2D array containi
--[ 2019.11.07.19.53.51.052.0 ]--
r 98         //Initialize a 2D array containin
--[ 2019.11.07.19.53.51.153.0 ]--
r 98         //Initialize a 2D array containing
--[ 2019.11.07.19.53.51.234.0 ]--
r 98         //Initialize a 2D array containing 
--[ 2019.11.07.19.53.51.475.0 ]--
r 98         //Initialize a 2D array containing l
--[ 2019.11.07.19.53.51.759.0 ]--
r 98         //Initialize a 2D array containing 
--[ 2019.11.07.19.53.51.901.0 ]--
r 98         //Initialize a 2D array containing a
--[ 2019.11.07.19.53.51.981.0 ]--
r 98         //Initialize a 2D array containing al
--[ 2019.11.07.19.53.52.087.0 ]--
r 98         //Initialize a 2D array containing all
--[ 2019.11.07.19.53.52.249.0 ]--
r 98         //Initialize a 2D array containing all 
--[ 2019.11.07.19.53.53.184.0 ]--
r 98         //Initialize a 2D array containing all o
--[ 2019.11.07.19.53.53.270.0 ]--
r 98         //Initialize a 2D array containing all of
--[ 2019.11.07.19.53.53.300.0 ]--
r 98         //Initialize a 2D array containing all of 
--[ 2019.11.07.19.53.53.374.0 ]--
r 98         //Initialize a 2D array containing all of t
--[ 2019.11.07.19.53.53.440.0 ]--
r 98         //Initialize a 2D array containing all of th
--[ 2019.11.07.19.53.53.516.0 ]--
r 98         //Initialize a 2D array containing all of the
--[ 2019.11.07.19.53.53.572.0 ]--
r 98         //Initialize a 2D array containing all of the 
--[ 2019.11.07.19.53.53.627.0 ]--
r 98         //Initialize a 2D array containing all of the c
--[ 2019.11.07.19.53.53.705.0 ]--
r 98         //Initialize a 2D array containing all of the co
--[ 2019.11.07.19.53.53.810.0 ]--
r 98         //Initialize a 2D array containing all of the coo
--[ 2019.11.07.19.53.53.894.0 ]--
r 98         //Initialize a 2D array containing all of the coor
--[ 2019.11.07.19.53.54.020.0 ]--
r 98         //Initialize a 2D array containing all of the coord
--[ 2019.11.07.19.53.54.083.0 ]--
r 98         //Initialize a 2D array containing all of the coordi
--[ 2019.11.07.19.53.54.199.0 ]--
r 98         //Initialize a 2D array containing all of the coordin
--[ 2019.11.07.19.53.54.292.0 ]--
r 98         //Initialize a 2D array containing all of the coordina
--[ 2019.11.07.19.53.54.356.0 ]--
r 98         //Initialize a 2D array containing all of the coordinat
--[ 2019.11.07.19.53.54.450.0 ]--
r 98         //Initialize a 2D array containing all of the coordinate
--[ 2019.11.07.19.53.54.619.0 ]--
r 98         //Initialize a 2D array containing all of the coordinates
--[ 2019.11.07.19.53.57.279.0 ]--
r 98         //Initialize a 2D array containing all of the coordinates 
--[ 2019.11.07.19.53.57.542.0 ]--
r 98         //Initialize a 2D array containing all of the coordinates
--[ 2019.11.07.19.54.01.813.0 ]--
+ 100         
--[ 2019.11.07.19.54.02.460.0 ]--
+ 100         
--[ 2019.11.07.19.54.04.227.0 ]--
r 101         /
--[ 2019.11.07.19.54.04.329.0 ]--
r 101         //
--[ 2019.11.07.19.54.04.578.0 ]--
r 101         //T
--[ 2019.11.07.19.54.04.664.0 ]--
r 101         //Th
--[ 2019.11.07.19.54.04.775.0 ]--
r 101         //The
--[ 2019.11.07.19.54.05.395.0 ]--
r 101         //
--[ 2019.11.07.19.54.05.788.0 ]--
r 101         //C
--[ 2019.11.07.19.54.06.180.0 ]--
r 101         //
--[ 2019.11.07.19.54.06.456.0 ]--
r 101         //I
--[ 2019.11.07.19.54.06.622.0 ]--
r 101         //In
--[ 2019.11.07.19.54.06.662.0 ]--
r 101         //Ini
--[ 2019.11.07.19.54.06.815.0 ]--
r 101         //Init
--[ 2019.11.07.19.54.06.902.0 ]--
r 101         //Initi
--[ 2019.11.07.19.54.06.984.0 ]--
r 101         //Initia
--[ 2019.11.07.19.54.07.060.0 ]--
r 101         //Initial
--[ 2019.11.07.19.54.07.207.0 ]--
r 101         //Initiali
--[ 2019.11.07.19.54.07.245.0 ]--
r 101         //Initializ
--[ 2019.11.07.19.54.07.359.0 ]--
r 101         //Initialize
--[ 2019.11.07.19.54.07.459.0 ]--
r 101         //Initialize 
--[ 2019.11.07.19.54.07.568.0 ]--
r 101         //Initialize t
--[ 2019.11.07.19.54.07.664.0 ]--
r 101         //Initialize th
--[ 2019.11.07.19.54.07.751.0 ]--
r 101         //Initialize the
--[ 2019.11.07.19.54.08.137.0 ]--
r 101         //Initialize the 
--[ 2019.11.07.19.54.11.244.0 ]--
r 101         //Initialize 
--[ 2019.11.07.19.54.11.374.0 ]--
r 101         //
--[ 2019.11.07.19.54.11.494.0 ]--
r 101         
--[ 2019.11.07.19.54.12.011.0 ]--
- 100
--[ 2019.11.07.19.54.14.682.0 ]--
+ 106         
--[ 2019.11.07.19.54.15.344.0 ]--
r 106         /
--[ 2019.11.07.19.54.15.455.0 ]--
r 106         //
--[ 2019.11.07.19.54.15.755.0 ]--
r 106         //F
--[ 2019.11.07.19.54.15.960.0 ]--
r 106         //Fi
--[ 2019.11.07.19.54.16.113.0 ]--
r 106         //Fil
--[ 2019.11.07.19.54.16.247.0 ]--
r 106         //Fill
--[ 2019.11.07.19.54.16.399.0 ]--
r 106         //Fill 
--[ 2019.11.07.19.54.16.624.0 ]--
r 106         //Fill t
--[ 2019.11.07.19.54.16.735.0 ]--
r 106         //Fill th
--[ 2019.11.07.19.54.16.842.0 ]--
r 106         //Fill the
--[ 2019.11.07.19.54.17.021.0 ]--
r 106         //Fill the 
--[ 2019.11.07.19.54.19.701.0 ]--
r 106         //Fill the  
--[ 2019.11.07.19.54.19.772.0 ]--
r 106         //Fill the 
--[ 2019.11.07.19.54.19.934.0 ]--
r 106         //Fill the 2
--[ 2019.11.07.19.54.20.119.0 ]--
r 106         //Fill the 2d
--[ 2019.11.07.19.54.20.456.0 ]--
r 106         //Fill the 2dA
--[ 2019.11.07.19.54.20.633.0 ]--
r 106         //Fill the 2d
--[ 2019.11.07.19.54.20.837.0 ]--
r 106         //Fill the 2
--[ 2019.11.07.19.54.20.999.0 ]--
r 106         //Fill the 2D
--[ 2019.11.07.19.54.21.127.0 ]--
r 106         //Fill the 2D 
--[ 2019.11.07.19.54.21.204.0 ]--
r 106         //Fill the 2D A
--[ 2019.11.07.19.54.21.471.0 ]--
r 106         //Fill the 2D 
--[ 2019.11.07.19.54.21.579.0 ]--
r 106         //Fill the 2D a
--[ 2019.11.07.19.54.21.744.0 ]--
r 106         //Fill the 2D ar
--[ 2019.11.07.19.54.21.848.0 ]--
r 106         //Fill the 2D arr
--[ 2019.11.07.19.54.21.916.0 ]--
r 106         //Fill the 2D arra
--[ 2019.11.07.19.54.22.049.0 ]--
r 106         //Fill the 2D array
--[ 2019.11.07.19.54.22.215.0 ]--
r 106         //Fill the 2D array 
--[ 2019.11.07.19.54.22.465.0 ]--
r 106         //Fill the 2D array w
--[ 2019.11.07.19.54.22.575.0 ]--
r 106         //Fill the 2D array wi
--[ 2019.11.07.19.54.22.621.0 ]--
r 106         //Fill the 2D array wit
--[ 2019.11.07.19.54.22.716.0 ]--
r 106         //Fill the 2D array with
--[ 2019.11.07.19.54.22.847.0 ]--
r 106         //Fill the 2D array with 
--[ 2019.11.07.19.54.23.103.0 ]--
r 106         //Fill the 2D array with e
--[ 2019.11.07.19.54.23.188.0 ]--
r 106         //Fill the 2D array with ev
--[ 2019.11.07.19.54.23.279.0 ]--
r 106         //Fill the 2D array with eve
--[ 2019.11.07.19.54.23.377.0 ]--
r 106         //Fill the 2D array with ever
--[ 2019.11.07.19.54.23.540.0 ]--
r 106         //Fill the 2D array with every
--[ 2019.11.07.19.54.23.612.0 ]--
r 106         //Fill the 2D array with every 
--[ 2019.11.07.19.54.23.711.0 ]--
r 106         //Fill the 2D array with every c
--[ 2019.11.07.19.54.23.801.0 ]--
r 106         //Fill the 2D array with every co
--[ 2019.11.07.19.54.23.908.0 ]--
r 106         //Fill the 2D array with every coo
--[ 2019.11.07.19.54.24.006.0 ]--
r 106         //Fill the 2D array with every coor
--[ 2019.11.07.19.54.24.631.0 ]--
r 106         //Fill the 2D array with every coord
--[ 2019.11.07.19.54.24.711.0 ]--
r 106         //Fill the 2D array with every coordi
--[ 2019.11.07.19.54.24.774.0 ]--
r 106         //Fill the 2D array with every coordin
--[ 2019.11.07.19.54.24.865.0 ]--
r 106         //Fill the 2D array with every coordina
--[ 2019.11.07.19.54.24.946.0 ]--
r 106         //Fill the 2D array with every coordinat
--[ 2019.11.07.19.54.25.005.0 ]--
r 106         //Fill the 2D array with every coordinate
--[ 2019.11.07.19.54.30.921.0 ]--
r 98         //Initialize a 2D array 
--[ 2019.11.07.19.54.31.047.0 ]--
r 98         //Initialize a 2D array o
--[ 2019.11.07.19.54.31.125.0 ]--
r 98         //Initialize a 2D array of
--[ 2019.11.07.19.54.31.239.0 ]--
r 98         //Initialize a 2D array of 
--[ 2019.11.07.19.54.31.321.0 ]--
r 98         //Initialize a 2D array of s
--[ 2019.11.07.19.54.31.393.0 ]--
r 98         //Initialize a 2D array of si
--[ 2019.11.07.19.54.31.494.0 ]--
r 98         //Initialize a 2D array of siz
--[ 2019.11.07.19.54.31.637.0 ]--
r 98         //Initialize a 2D array of size
--[ 2019.11.07.19.54.32.427.0 ]--
r 98         //Initialize a 2D array of 
--[ 2019.11.07.19.54.32.585.0 ]--
r 98         //Initialize a 2D array of t
--[ 2019.11.07.19.54.32.643.0 ]--
r 98         //Initialize a 2D array of te
--[ 2019.11.07.19.54.32.761.0 ]--
r 98         //Initialize a 2D array of ter
--[ 2019.11.07.19.54.32.901.0 ]--
r 98         //Initialize a 2D array of terr
--[ 2019.11.07.19.54.33.012.0 ]--
r 98         //Initialize a 2D array of terra
--[ 2019.11.07.19.54.33.133.0 ]--
r 98         //Initialize a 2D array of terrai
--[ 2019.11.07.19.54.33.155.0 ]--
r 98         //Initialize a 2D array of terrain
--[ 2019.11.07.19.54.33.279.0 ]--
r 98         //Initialize a 2D array of terrain 
--[ 2019.11.07.19.54.33.432.0 ]--
r 98         //Initialize a 2D array of terrain s
--[ 2019.11.07.19.54.33.547.0 ]--
r 98         //Initialize a 2D array of terrain si
--[ 2019.11.07.19.54.33.614.0 ]--
r 98         //Initialize a 2D array of terrain siz
--[ 2019.11.07.19.54.33.771.0 ]--
r 98         //Initialize a 2D array of terrain size
--[ 2019.11.07.19.54.33.833.0 ]--
r 98         //Initialize a 2D array of terrain size 
--[ 2019.11.07.19.54.33.910.0 ]--
r 98         //Initialize a 2D array of terrain size N
--[ 2019.11.07.19.54.34.527.0 ]--
r 98         //Initialize a 2D array of terrain size N 
--[ 2019.11.07.19.54.34.590.0 ]--
r 98         //Initialize a 2D array of terrain size N
--[ 2019.11.07.19.54.43.002.0 ]--
r 110                 
--[ 2019.11.07.19.54.43.367.0 ]--
- 110
--[ 2019.11.07.19.54.45.906.0 ]--
r 111             
--[ 2019.11.07.19.54.46.195.0 ]--
- 111
--[ 2019.11.07.19.55.57.891.0 ]--
r 113     
--[ 2019.11.07.19.55.58.352.0 ]--
r 113         
--[ 2019.11.07.20.07.16.489.0 ]--
r 113         s
--[ 2019.11.07.20.07.16.594.0 ]--
r 113         se
--[ 2019.11.07.20.07.16.778.0 ]--
r 113         se,
--[ 2019.11.07.20.07.16.972.0 ]--
r 113         se, 
--[ 2019.11.07.20.07.17.886.0 ]--
r 113         se,
--[ 2019.11.07.20.07.18.041.0 ]--
r 113         se
--[ 2019.11.07.20.07.18.830.0 ]--
r 113         sem
--[ 2019.11.07.20.07.18.975.0 ]--
r 113         sem 
--[ 2019.11.07.20.07.19.099.0 ]--
r 113         sem i
--[ 2019.11.07.20.07.19.232.0 ]--
r 113         sem is
--[ 2019.11.07.20.07.19.343.0 ]--
r 113         sem is 
--[ 2019.11.07.20.07.19.948.0 ]--
r 113         sem is a
--[ 2019.11.07.20.07.20.501.0 ]--
r 113         sem is 
--[ 2019.11.07.20.07.21.452.0 ]--
r 113         sem is a
--[ 2019.11.07.20.07.23.543.0 ]--
r 113         sem is pathFound
--[ 2019.11.07.20.07.24.248.0 ]--
r 113         sem is pathFoundf
--[ 2019.11.07.20.07.24.341.0 ]--
r 113         sem is pathFoundfd
--[ 2019.11.07.20.07.24.452.0 ]--
r 113         sem is pathFoundfda
--[ 2019.11.07.20.07.24.940.0 ]--
r 113         sem is pathFoundfdad
--[ 2019.11.07.20.07.24.974.0 ]--
r 113         sem is pathFoundfdadf
--[ 2019.11.07.20.07.25.389.0 ]--
r 113         sem is pathFoundfdadf 
--[ 2019.11.07.20.07.26.307.0 ]--
r 113         sem is pathFoundfdadf h
--[ 2019.11.07.20.07.26.471.0 ]--
r 113         sem is pathFoundfdadf ha
--[ 2019.11.07.20.07.26.641.0 ]--
r 113         sem is pathFoundfdadf hac
--[ 2019.11.07.20.07.26.785.0 ]--
r 113         sem is pathFoundfdadf hack
--[ 2019.11.07.20.07.26.943.0 ]--
r 113         sem is pathFoundfdadf hacki
--[ 2019.11.07.20.07.27.088.0 ]--
r 113         sem is pathFoundfdadf hackin
--[ 2019.11.07.20.07.27.182.0 ]--
r 113         sem is pathFoundfdadf hacking
--[ 2019.11.07.20.07.27.317.0 ]--
r 113         sem is pathFoundfdadf hacking 
--[ 2019.11.07.20.07.28.184.0 ]--
r 113         sem is pathFoundfdadf hacking .
--[ 2019.11.07.20.07.28.425.0 ]--
r 113         sem is pathFoundfdadf hacking . 
--[ 2019.11.07.20.07.28.981.0 ]--
r 113         sem is pathFoundfdadf hacking . t
--[ 2019.11.07.20.07.29.288.0 ]--
r 113         sem is pathFoundfdadf hacking . 
--[ 2019.11.07.20.07.30.123.0 ]--
r 113         sem is pathFoundfdadf hacking .
--[ 2019.11.07.20.07.30.319.0 ]--
r 113         sem is pathFoundfdadf hacking 
--[ 2019.11.07.20.07.30.695.0 ]--
r 113         sem is pathFoundfdadf hacking
--[ 2019.11.07.20.07.31.151.0 ]--
r 113         sem is pathFoundfdadf hacking 
--[ 2019.11.07.20.07.32.985.0 ]--
r 113         sem is pathFoundfdadf hacking I
--[ 2019.11.07.20.07.33.802.0 ]--
r 113         sem is pathFoundfdadf hacking I 
--[ 2019.11.07.20.07.33.921.0 ]--
r 113         sem is pathFoundfdadf hacking I a
--[ 2019.11.07.20.07.34.038.0 ]--
r 113         sem is pathFoundfdadf hacking I am
--[ 2019.11.07.20.07.34.234.0 ]--
r 113         sem is pathFoundfdadf hacking I am 
--[ 2019.11.07.20.07.34.504.0 ]--
r 113         sem is pathFoundfdadf hacking I am j
--[ 2019.11.07.20.07.34.861.0 ]--
r 113         sem is pathFoundfdadf hacking I am 
--[ 2019.11.07.20.07.35.520.0 ]--
r 113         sem is pathFoundfdadf hacking I am d
--[ 2019.11.07.20.07.35.653.0 ]--
r 113         sem is pathFoundfdadf hacking I am de
--[ 2019.11.07.20.07.35.862.0 ]--
r 113         sem is pathFoundfdadf hacking I am dev
--[ 2019.11.07.20.07.36.037.0 ]--
r 113         sem is pathFoundfdadf hacking I am deve
--[ 2019.11.07.20.07.36.168.0 ]--
r 113         sem is pathFoundfdadf hacking I am devel
--[ 2019.11.07.20.07.36.327.0 ]--
r 113         sem is pathFoundfdadf hacking I am develo
--[ 2019.11.07.20.07.36.446.0 ]--
r 113         sem is pathFoundfdadf hacking I am develop
--[ 2019.11.07.20.07.36.655.0 ]--
r 113         sem is pathFoundfdadf hacking I am developi
--[ 2019.11.07.20.07.36.808.0 ]--
r 113         sem is pathFoundfdadf hacking I am developin
--[ 2019.11.07.20.07.36.909.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing
--[ 2019.11.07.20.07.37.029.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing 
--[ 2019.11.07.20.07.37.187.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a
--[ 2019.11.07.20.07.37.303.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a 
--[ 2019.11.07.20.07.37.529.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a h
--[ 2019.11.07.20.07.37.610.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a ha
--[ 2019.11.07.20.07.37.768.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hac
--[ 2019.11.07.20.07.37.904.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hack
--[ 2019.11.07.20.07.38.062.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacki
--[ 2019.11.07.20.07.38.191.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hackin
--[ 2019.11.07.20.07.38.310.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking
--[ 2019.11.07.20.07.38.400.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking 
--[ 2019.11.07.20.07.38.560.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking p
--[ 2019.11.07.20.07.38.696.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking pr
--[ 2019.11.07.20.07.38.791.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking pro
--[ 2019.11.07.20.07.38.939.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking prog
--[ 2019.11.07.20.07.39.160.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking progr
--[ 2019.11.07.20.07.39.311.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking progra
--[ 2019.11.07.20.07.39.444.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program
--[ 2019.11.07.20.07.39.592.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program 
--[ 2019.11.07.20.07.39.733.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program t
--[ 2019.11.07.20.07.39.879.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program th
--[ 2019.11.07.20.07.39.993.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program tha
--[ 2019.11.07.20.07.40.105.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that
--[ 2019.11.07.20.07.40.250.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that 
--[ 2019.11.07.20.07.40.430.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that w
--[ 2019.11.07.20.07.40.492.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that wi
--[ 2019.11.07.20.07.40.700.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that wil
--[ 2019.11.07.20.07.40.809.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will
--[ 2019.11.07.20.07.40.948.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will 
--[ 2019.11.07.20.07.44.132.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will h
--[ 2019.11.07.20.07.44.244.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will ha
--[ 2019.11.07.20.07.44.371.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hac
--[ 2019.11.07.20.07.44.535.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack
--[ 2019.11.07.20.07.44.690.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack 
--[ 2019.11.07.20.07.44.869.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack i
--[ 2019.11.07.20.07.44.922.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack in
--[ 2019.11.07.20.07.45.087.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack int
--[ 2019.11.07.20.07.45.192.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into
--[ 2019.11.07.20.07.45.270.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into 
--[ 2019.11.07.20.07.45.324.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into t
--[ 2019.11.07.20.07.45.485.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into th
--[ 2019.11.07.20.07.45.542.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the
--[ 2019.11.07.20.07.45.694.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the 
--[ 2019.11.07.20.07.49.783.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the p
--[ 2019.11.07.20.07.49.910.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the pe
--[ 2019.11.07.20.07.50.020.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the pea
--[ 2019.11.07.20.07.50.787.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the pe
--[ 2019.11.07.20.07.51.585.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the pen
--[ 2019.11.07.20.07.51.732.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the pent
--[ 2019.11.07.20.07.51.902.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the penta
--[ 2019.11.07.20.07.52.110.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the pentag
--[ 2019.11.07.20.07.52.253.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the pentago
--[ 2019.11.07.20.07.52.469.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the pentagon
--[ 2019.11.07.20.07.52.707.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the pentagon 
--[ 2019.11.07.20.07.53.560.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the pentagon
--[ 2019.11.07.20.07.53.898.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the pentagon.
--[ 2019.11.07.20.07.54.056.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the pentagon. 
--[ 2019.11.07.20.07.55.210.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the pentagon. I
--[ 2019.11.07.20.07.56.617.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the pentagon. 
--[ 2019.11.07.20.07.56.931.0 ]--
+ 114         
--[ 2019.11.07.20.07.58.096.0 ]--
r 114             
--[ 2019.11.07.20.07.58.257.0 ]--
r 114                 
--[ 2019.11.07.20.07.58.430.0 ]--
r 114                     
--[ 2019.11.07.20.07.59.381.0 ]--
r 114                     I
--[ 2019.11.07.20.07.59.584.0 ]--
r 114                     Im
--[ 2019.11.07.20.07.59.761.0 ]--
r 114                     Im 
--[ 2019.11.07.20.08.00.004.0 ]--
r 114                     Im e
--[ 2019.11.07.20.08.00.237.0 ]--
r 114                     Im es
--[ 2019.11.07.20.08.00.591.0 ]--
r 114                     Im e
--[ 2019.11.07.20.08.00.865.0 ]--
r 114                     Im ex
--[ 2019.11.07.20.08.01.055.0 ]--
r 114                     Im ext
--[ 2019.11.07.20.08.01.260.0 ]--
r 114                     Im extr
--[ 2019.11.07.20.08.01.408.0 ]--
r 114                     Im extra
--[ 2019.11.07.20.08.01.605.0 ]--
r 114                     Im extrac
--[ 2019.11.07.20.08.01.745.0 ]--
r 114                     Im extract
--[ 2019.11.07.20.08.01.847.0 ]--
r 114                     Im extracti
--[ 2019.11.07.20.08.01.972.0 ]--
r 114                     Im extractin
--[ 2019.11.07.20.08.02.111.0 ]--
r 114                     Im extracting
--[ 2019.11.07.20.08.02.207.0 ]--
r 114                     Im extracting 
--[ 2019.11.07.20.08.02.382.0 ]--
r 114                     Im extracting i
--[ 2019.11.07.20.08.02.548.0 ]--
r 114                     Im extracting in
--[ 2019.11.07.20.08.02.724.0 ]--
r 114                     Im extracting inf
--[ 2019.11.07.20.08.02.797.0 ]--
r 114                     Im extracting info
--[ 2019.11.07.20.08.02.931.0 ]--
r 114                     Im extracting infor
--[ 2019.11.07.20.08.03.036.0 ]--
r 114                     Im extracting inform
--[ 2019.11.07.20.08.03.192.0 ]--
r 114                     Im extracting informa
--[ 2019.11.07.20.08.03.333.0 ]--
r 114                     Im extracting informat
--[ 2019.11.07.20.08.03.437.0 ]--
r 114                     Im extracting informati
--[ 2019.11.07.20.08.03.509.0 ]--
r 114                     Im extracting informatio
--[ 2019.11.07.20.08.03.696.0 ]--
r 114                     Im extracting information
--[ 2019.11.07.20.08.03.839.0 ]--
r 114                     Im extracting informationa
--[ 2019.11.07.20.08.03.976.0 ]--
r 114                     Im extracting informationa 
--[ 2019.11.07.20.08.04.647.0 ]--
r 114                     Im extracting informationa
--[ 2019.11.07.20.08.04.799.0 ]--
r 114                     Im extracting information
--[ 2019.11.07.20.08.04.979.0 ]--
r 114                     Im extracting informatio
--[ 2019.11.07.20.08.05.102.0 ]--
r 114                     Im extracting informati
--[ 2019.11.07.20.08.05.279.0 ]--
r 114                     Im extracting informat
--[ 2019.11.07.20.08.05.429.0 ]--
r 114                     Im extracting informa
--[ 2019.11.07.20.08.06.283.0 ]--
r 114                     Im extracting informat
--[ 2019.11.07.20.08.06.422.0 ]--
r 114                     Im extracting informati
--[ 2019.11.07.20.08.06.546.0 ]--
r 114                     Im extracting informatio
--[ 2019.11.07.20.08.06.682.0 ]--
r 114                     Im extracting information
--[ 2019.11.07.20.08.06.874.0 ]--
r 114                     Im extracting information 
--[ 2019.11.07.20.08.07.046.0 ]--
r 114                     Im extracting information oi
--[ 2019.11.07.20.08.07.468.0 ]--
r 114                     Im extracting information o
--[ 2019.11.07.20.08.07.804.0 ]--
r 114                     Im extracting information oo
--[ 2019.11.07.20.08.08.376.0 ]--
r 114                     Im extracting information o
--[ 2019.11.07.20.08.08.632.0 ]--
r 114                     Im extracting information on
--[ 2019.11.07.20.08.08.792.0 ]--
r 114                     Im extracting information on 
--[ 2019.11.07.20.08.09.977.0 ]--
r 114                     Im extracting information on n
--[ 2019.11.07.20.08.10.162.0 ]--
r 114                     Im extracting information on nu
--[ 2019.11.07.20.08.10.486.0 ]--
r 114                     Im extracting information on nuv
--[ 2019.11.07.20.08.10.750.0 ]--
r 114                     Im extracting information on nu
--[ 2019.11.07.20.08.10.982.0 ]--
r 114                     Im extracting information on nuc
--[ 2019.11.07.20.08.11.119.0 ]--
r 114                     Im extracting information on nucl
--[ 2019.11.07.20.08.11.225.0 ]--
r 114                     Im extracting information on nucle
--[ 2019.11.07.20.08.11.317.0 ]--
r 114                     Im extracting information on nuclea
--[ 2019.11.07.20.08.11.496.0 ]--
r 114                     Im extracting information on nuclear
--[ 2019.11.07.20.08.11.673.0 ]--
r 114                     Im extracting information on nuclear 
--[ 2019.11.07.20.08.11.824.0 ]--
r 114                     Im extracting information on nuclear c
--[ 2019.11.07.20.08.11.936.0 ]--
r 114                     Im extracting information on nuclear co
--[ 2019.11.07.20.08.12.103.0 ]--
r 114                     Im extracting information on nuclear cod
--[ 2019.11.07.20.08.12.287.0 ]--
r 114                     Im extracting information on nuclear code
--[ 2019.11.07.20.08.12.446.0 ]--
r 114                     Im extracting information on nuclear codes
--[ 2019.11.07.20.08.12.600.0 ]--
r 114                     Im extracting information on nuclear codes 
--[ 2019.11.07.20.08.12.853.0 ]--
r 114                     Im extracting information on nuclear codes f
--[ 2019.11.07.20.08.12.989.0 ]--
r 114                     Im extracting information on nuclear codes fo
--[ 2019.11.07.20.08.13.137.0 ]--
r 114                     Im extracting information on nuclear codes for
--[ 2019.11.07.20.08.13.255.0 ]--
r 114                     Im extracting information on nuclear codes for 
--[ 2019.11.07.20.08.15.324.0 ]--
r 114                     Im extracting information on nuclear codes for m
--[ 2019.11.07.20.08.15.586.0 ]--
r 114                     Im extracting information on nuclear codes for mi
--[ 2019.11.07.20.08.15.808.0 ]--
r 114                     Im extracting information on nuclear codes for mis
--[ 2019.11.07.20.08.15.951.0 ]--
r 114                     Im extracting information on nuclear codes for miss
--[ 2019.11.07.20.08.16.072.0 ]--
r 114                     Im extracting information on nuclear codes for missi
--[ 2019.11.07.20.08.16.247.0 ]--
r 114                     Im extracting information on nuclear codes for missil
--[ 2019.11.07.20.08.16.390.0 ]--
r 114                     Im extracting information on nuclear codes for missile
--[ 2019.11.07.20.08.16.552.0 ]--
r 114                     Im extracting information on nuclear codes for missile 
--[ 2019.11.07.20.08.16.752.0 ]--
r 114                     Im extracting information on nuclear codes for missile
--[ 2019.11.07.20.08.17.248.0 ]--
r 114                     Im extracting information on nuclear codes for missil
--[ 2019.11.07.20.08.17.280.0 ]--
r 114                     Im extracting information on nuclear codes for missi
--[ 2019.11.07.20.08.17.318.0 ]--
r 114                     Im extracting information on nuclear codes for miss
--[ 2019.11.07.20.08.17.347.0 ]--
r 114                     Im extracting information on nuclear codes for mis
--[ 2019.11.07.20.08.17.373.0 ]--
r 114                     Im extracting information on nuclear codes for mi
--[ 2019.11.07.20.08.18.320.0 ]--
r 114                     Im extracting information on nuclear codes for mis
--[ 2019.11.07.20.08.18.489.0 ]--
r 114                     Im extracting information on nuclear codes for miss
--[ 2019.11.07.20.08.19.103.0 ]--
r 114                     Im extracting information on nuclear codes for missi
--[ 2019.11.07.20.08.19.280.0 ]--
r 114                     Im extracting information on nuclear codes for missil
--[ 2019.11.07.20.08.19.415.0 ]--
r 114                     Im extracting information on nuclear codes for missile
--[ 2019.11.07.20.08.19.510.0 ]--
r 114                     Im extracting information on nuclear codes for missile 
--[ 2019.11.07.20.08.20.325.0 ]--
r 114                     Im extracting information on nuclear codes for missile
--[ 2019.11.07.20.08.20.497.0 ]--
r 114                     Im extracting information on nuclear codes for missiles
--[ 2019.11.07.20.08.20.625.0 ]--
r 114                     Im extracting information on nuclear codes for missiles 
--[ 2019.11.07.20.08.20.892.0 ]--
r 114                     Im extracting information on nuclear codes for missiles i
--[ 2019.11.07.20.08.20.976.0 ]--
r 114                     Im extracting information on nuclear codes for missiles in
--[ 2019.11.07.20.08.21.081.0 ]--
r 114                     Im extracting information on nuclear codes for missiles in 
--[ 2019.11.07.20.08.21.503.0 ]--
r 114                     Im extracting information on nuclear codes for missiles in
--[ 2019.11.07.20.08.21.671.0 ]--
r 114                     Im extracting information on nuclear codes for missiles i
--[ 2019.11.07.20.08.21.841.0 ]--
r 114                     Im extracting information on nuclear codes for missiles 
--[ 2019.11.07.20.08.22.364.0 ]--
r 114                     Im extracting information on nuclear codes for missiles
--[ 2019.11.07.20.08.23.718.0 ]--
r 114                     Im extracting information on nuclear codes for missile
--[ 2019.11.07.20.08.24.201.0 ]--
r 114                     Im extracting information on nuclear codes for missil
--[ 2019.11.07.20.08.24.231.0 ]--
r 114                     Im extracting information on nuclear codes for missi
--[ 2019.11.07.20.08.24.261.0 ]--
r 114                     Im extracting information on nuclear codes for miss
--[ 2019.11.07.20.08.24.292.0 ]--
r 114                     Im extracting information on nuclear codes for mis
--[ 2019.11.07.20.08.24.322.0 ]--
r 114                     Im extracting information on nuclear codes for mi
--[ 2019.11.07.20.08.24.353.0 ]--
r 114                     Im extracting information on nuclear codes for m
--[ 2019.11.07.20.08.24.382.0 ]--
r 114                     Im extracting information on nuclear codes for 
--[ 2019.11.07.20.08.24.412.0 ]--
r 114                     Im extracting information on nuclear codes for
--[ 2019.11.07.20.08.24.443.0 ]--
r 114                     Im extracting information on nuclear codes fo
--[ 2019.11.07.20.08.24.474.0 ]--
r 114                     Im extracting information on nuclear codes f
--[ 2019.11.07.20.08.24.544.0 ]--
r 114                     Im extracting information on nuclear codes
--[ 2019.11.07.20.08.24.565.0 ]--
r 114                     Im extracting information on nuclear code
--[ 2019.11.07.20.08.24.595.0 ]--
r 114                     Im extracting information on nuclear cod
--[ 2019.11.07.20.08.24.625.0 ]--
r 114                     Im extracting information on nuclear co
--[ 2019.11.07.20.08.24.656.0 ]--
r 114                     Im extracting information on nuclear c
--[ 2019.11.07.20.08.24.688.0 ]--
r 114                     Im extracting information on nuclear 
--[ 2019.11.07.20.08.24.723.0 ]--
r 114                     Im extracting information on nuclear
--[ 2019.11.07.20.08.24.750.0 ]--
r 114                     Im extracting information on nuclea
--[ 2019.11.07.20.08.25.739.0 ]--
r 114                     Im extracting information on nuclear
--[ 2019.11.07.20.08.25.908.0 ]--
r 114                     Im extracting information on nuclear 
--[ 2019.11.07.20.08.26.176.0 ]--
r 114                     Im extracting information on nuclear l
--[ 2019.11.07.20.08.26.351.0 ]--
r 114                     Im extracting information on nuclear la
--[ 2019.11.07.20.08.26.520.0 ]--
r 114                     Im extracting information on nuclear lau
--[ 2019.11.07.20.08.26.672.0 ]--
r 114                     Im extracting information on nuclear laun
--[ 2019.11.07.20.08.26.871.0 ]--
r 114                     Im extracting information on nuclear launc
--[ 2019.11.07.20.08.26.942.0 ]--
r 114                     Im extracting information on nuclear launch
--[ 2019.11.07.20.08.27.136.0 ]--
r 114                     Im extracting information on nuclear launche
--[ 2019.11.07.20.08.27.628.0 ]--
r 114                     Im extracting information on nuclear launch
--[ 2019.11.07.20.08.28.823.0 ]--
r 114                     Im extracting information on nuclear launch 
--[ 2019.11.07.20.08.29.290.0 ]--
r 114                     Im extracting information on nuclear launch
--[ 2019.11.07.20.08.29.793.0 ]--
r 114                     Im extracting information on nuclear launc
--[ 2019.11.07.20.08.29.831.0 ]--
r 114                     Im extracting information on nuclear laun
--[ 2019.11.07.20.08.29.860.0 ]--
r 114                     Im extracting information on nuclear lau
--[ 2019.11.07.20.08.29.880.0 ]--
r 114                     Im extracting information on nuclear la
--[ 2019.11.07.20.08.29.913.0 ]--
r 114                     Im extracting information on nuclear l
--[ 2019.11.07.20.08.30.318.0 ]--
r 114                     Im extracting information on nuclear 
--[ 2019.11.07.20.08.30.506.0 ]--
r 114                     Im extracting information on nuclear
--[ 2019.11.07.20.08.30.676.0 ]--
r 114                     Im extracting information on nuclea
--[ 2019.11.07.20.08.30.855.0 ]--
r 114                     Im extracting information on nucle
--[ 2019.11.07.20.08.31.020.0 ]--
r 114                     Im extracting information on nucl
--[ 2019.11.07.20.08.31.184.0 ]--
r 114                     Im extracting information on nuc
--[ 2019.11.07.20.08.31.347.0 ]--
r 114                     Im extracting information on nu
--[ 2019.11.07.20.08.31.503.0 ]--
r 114                     Im extracting information on n
--[ 2019.11.07.20.08.31.669.0 ]--
r 114                     Im extracting information on 
--[ 2019.11.07.20.08.32.692.0 ]--
r 114                     Im extracting information on s
--[ 2019.11.07.20.08.32.925.0 ]--
r 114                     Im extracting information on se
--[ 2019.11.07.20.08.33.422.0 ]--
r 114                     Im extracting information on s
--[ 2019.11.07.20.08.33.590.0 ]--
r 114                     Im extracting information on 
--[ 2019.11.07.20.08.33.776.0 ]--
r 114                     Im extracting information on
--[ 2019.11.07.20.08.34.399.0 ]--
r 114                     Im extracting information o
--[ 2019.11.07.20.08.34.568.0 ]--
r 114                     Im extracting information 
--[ 2019.11.07.20.08.34.789.0 ]--
r 114                     Im extracting information
--[ 2019.11.07.20.08.35.555.0 ]--
r 114                     Im extracting information 
--[ 2019.11.07.20.08.36.710.0 ]--
r 114                     Im extracting information o
--[ 2019.11.07.20.08.37.561.0 ]--
r 114                     Im extracting information on
--[ 2019.11.07.20.08.37.752.0 ]--
r 114                     Im extracting information on 
--[ 2019.11.07.20.08.40.900.0 ]--
r 114                     Im extracting information on s
--[ 2019.11.07.20.08.41.160.0 ]--
r 114                     Im extracting information on se
--[ 2019.11.07.20.08.41.886.0 ]--
r 114                     Im extracting information on s
--[ 2019.11.07.20.08.42.068.0 ]--
r 114                     Im extracting information on 
--[ 2019.11.07.20.08.42.213.0 ]--
r 114                     Im extracting information on
--[ 2019.11.07.20.08.44.412.0 ]--
r 114                     Im extracting information o
--[ 2019.11.07.20.08.44.909.0 ]--
r 114                     Im extracting information 
--[ 2019.11.07.20.08.44.947.0 ]--
r 114                     Im extracting information
--[ 2019.11.07.20.08.44.959.0 ]--
r 114                     Im extracting informatio
--[ 2019.11.07.20.08.44.992.0 ]--
r 114                     Im extracting informati
--[ 2019.11.07.20.08.45.022.0 ]--
r 114                     Im extracting informat
--[ 2019.11.07.20.08.45.051.0 ]--
r 114                     Im extracting informa
--[ 2019.11.07.20.08.45.080.0 ]--
r 114                     Im extracting inform
--[ 2019.11.07.20.08.45.111.0 ]--
r 114                     Im extracting infor
--[ 2019.11.07.20.08.45.142.0 ]--
r 114                     Im extracting info
--[ 2019.11.07.20.08.45.180.0 ]--
r 114                     Im extracting inf
--[ 2019.11.07.20.08.50.596.0 ]--
r 114                     Im extracting information on se
--[ 2019.11.07.20.08.51.455.0 ]--
r 114                     Im extracting information
--[ 2019.11.07.20.09.39.631.0 ]--
- 113
+ 115         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the pentagon. 
--[ 2019.11.07.20.09.39.697.0 ]--
r 113         Im extracting information
r 114                 s = new Stack<>();
--[ 2019.11.07.20.09.40.327.0 ]--
+ 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the pentagon. 
- 116
--[ 2019.11.07.20.09.40.366.0 ]--
r 113         sem is pathFoundfdadf hacking I am developing a hacking program that will hack into the pentagon.
--[ 2019.11.07.20.09.43.343.0 ]--
- 113
r 113         \
--[ 2019.11.07.20.09.43.386.0 ]--
r 113         
--[ 2019.11.07.20.09.43.927.0 ]--
- 112
--[ 2019.11.07.20.09.45.699.0 ]--
r 113         s = new Stack<>();
--[ 2019.11.07.20.09.46.363.0 ]--
r 113          s = new Stack<>();
--[ 2019.11.07.20.09.46.399.0 ]--
r 113         s = new Stack<>();
--[ 2019.11.07.20.09.50.099.0 ]--
- 106
- 106
- 106
- 106
- 106
- 106
--[ 2019.11.07.20.09.54.220.0 ]--
+ 66         
--[ 2019.11.07.20.09.54.980.0 ]--
r 66          
--[ 2019.11.07.20.09.55.025.0 ]--
r 66         
--[ 2019.11.07.20.09.57.702.0 ]--
r 66          
--[ 2019.11.07.20.09.57.734.0 ]--
r 66         
--[ 2019.11.07.20.09.58.009.0 ]--
+ 66         
--[ 2019.11.07.20.10.03.516.0 ]--
r 66          
--[ 2019.11.07.20.10.03.568.0 ]--
r 66         
--[ 2019.11.07.20.10.03.817.0 ]--
r 66         P
--[ 2019.11.07.20.10.03.925.0 ]--
r 66         PF
--[ 2019.11.07.20.10.05.042.0 ]--
r 66         P
--[ 2019.11.07.20.10.05.132.0 ]--
r 66         
--[ 2019.11.07.20.10.08.164.0 ]--
r 66         P
--[ 2019.11.07.20.10.08.741.0 ]--
r 66         PF
--[ 2019.11.07.20.10.08.849.0 ]--
r 66         PFN
--[ 2019.11.07.20.10.09.031.0 ]--
r 66         PFNo
--[ 2019.11.07.20.10.09.120.0 ]--
r 66         PFNod
--[ 2019.11.07.20.10.09.174.0 ]--
r 66         PFNode
--[ 2019.11.07.20.10.09.478.0 ]--
r 66         PFNode[]
--[ 2019.11.07.20.10.09.671.0 ]--
r 66         PFNode[][]
--[ 2019.11.07.20.10.10.515.0 ]--
r 66         PFNode[][] 
--[ 2019.11.07.20.10.12.281.0 ]--
r 66         PFNode[][]  
--[ 2019.11.07.20.10.12.614.0 ]--
r 66         PFNode[][] 
--[ 2019.11.07.20.10.15.339.0 ]--
r 66         PFNode[][]  
--[ 2019.11.07.20.10.15.534.0 ]--
r 66         
--[ 2019.11.07.20.10.16.005.0 ]--
r 66         PF
--[ 2019.11.07.20.10.16.206.0 ]--
r 66         
--[ 2019.11.07.20.10.16.388.0 ]--
r 66          
--[ 2019.11.07.20.10.16.615.0 ]--
r 66         
--[ 2019.11.07.20.10.16.920.0 ]--
- 66
--[ 2019.11.07.20.10.17.148.0 ]--
r 66          
--[ 2019.11.07.20.10.17.391.0 ]--
r 66         
--[ 2019.11.07.20.10.17.634.0 ]--
r 66          
--[ 2019.11.07.20.10.17.865.0 ]--
r 66         
--[ 2019.11.07.20.10.18.081.0 ]--
- 66
--[ 2019.11.07.20.10.18.571.0 ]--
+ 106         //Fill the 2D array with every coordinate
+ 107         for(int i = 0; i < terrain.getN(); i++){
+ 108             for(int j = 0; j < terrain.getN(); j++){
+ 109                 coordBoard[i][j] = new Coord(i, j);
+ 110             }
+ 111         }
--[ 2019.11.07.20.10.23.243.0 ]--
- 106
- 106
- 106
- 106
- 106
- 106
- 106
--[ 2019.11.07.20.10.27.717.0 ]--
+ 66         
--[ 2019.11.07.20.10.28.485.0 ]--
r 66         P
--[ 2019.11.07.20.10.28.597.0 ]--
r 66         PF
--[ 2019.11.07.20.10.28.702.0 ]--
r 66         PFN
--[ 2019.11.07.20.10.29.214.0 ]--
r 66         PFNo
--[ 2019.11.07.20.10.29.296.0 ]--
r 66         PFNod
--[ 2019.11.07.20.10.29.349.0 ]--
r 66         PFNode
--[ 2019.11.07.20.10.29.965.0 ]--
r 66         PFNode[]
--[ 2019.11.07.20.10.30.151.0 ]--
r 66         PFNode[][]
--[ 2019.11.07.20.10.31.072.0 ]--
r 66         PFNode[][] 
--[ 2019.11.07.20.10.31.977.0 ]--
r 66         PFNode[][] c
--[ 2019.11.07.20.10.32.028.0 ]--
r 66         PFNode[][] co
--[ 2019.11.07.20.10.32.151.0 ]--
r 66         PFNode[][] coo
--[ 2019.11.07.20.10.32.232.0 ]--
r 66         PFNode[][] coor
--[ 2019.11.07.20.10.32.372.0 ]--
r 66         PFNode[][] coord
--[ 2019.11.07.20.10.32.648.0 ]--
r 66         PFNode[][] coordB
--[ 2019.11.07.20.10.32.855.0 ]--
r 66         PFNode[][] coordBo
--[ 2019.11.07.20.10.32.897.0 ]--
r 66         PFNode[][] coordBoa
--[ 2019.11.07.20.10.33.019.0 ]--
r 66         PFNode[][] coordBoar
--[ 2019.11.07.20.10.33.159.0 ]--
r 66         PFNode[][] coordBoard
--[ 2019.11.07.20.10.33.366.0 ]--
r 66         PFNode[][] coordBoard 
--[ 2019.11.07.20.10.33.487.0 ]--
r 66         PFNode[][] coordBoard =
--[ 2019.11.07.20.10.33.599.0 ]--
r 66         PFNode[][] coordBoard = 
--[ 2019.11.07.20.10.33.829.0 ]--
r 66         PFNode[][] coordBoard = n
--[ 2019.11.07.20.10.33.907.0 ]--
r 66         PFNode[][] coordBoard = ne
--[ 2019.11.07.20.10.34.076.0 ]--
r 66         PFNode[][] coordBoard = new
--[ 2019.11.07.20.10.34.244.0 ]--
r 66         PFNode[][] coordBoard = new 
--[ 2019.11.07.20.10.35.659.0 ]--
r 66         PFNode[][] coordBoard = new P
--[ 2019.11.07.20.10.35.749.0 ]--
r 66         PFNode[][] coordBoard = new PF
--[ 2019.11.07.20.10.37.313.0 ]--
r 66         PFNode[][] coordBoard = new PFN
--[ 2019.11.07.20.10.37.476.0 ]--
r 66         PFNode[][] coordBoard = new PFNo
--[ 2019.11.07.20.10.37.537.0 ]--
r 66         PFNode[][] coordBoard = new PFNod
--[ 2019.11.07.20.10.37.580.0 ]--
r 66         PFNode[][] coordBoard = new PFNode
--[ 2019.11.07.20.10.37.979.0 ]--
r 66         PFNode[][] coordBoard = new PFNode]
--[ 2019.11.07.20.10.38.021.0 ]--
r 66         PFNode[][] coordBoard = new PFNode][]
--[ 2019.11.07.20.10.38.484.0 ]--
r 66         PFNode[][] coordBoard = new PFNode]
--[ 2019.11.07.20.10.38.598.0 ]--
r 66         PFNode[][] coordBoard = new PFNode
--[ 2019.11.07.20.10.38.863.0 ]--
r 66         PFNode[][] coordBoard = new PFNode 
--[ 2019.11.07.20.10.38.972.0 ]--
r 66         PFNode[][] coordBoard = new PFNode
--[ 2019.11.07.20.10.39.495.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[]
--[ 2019.11.07.20.10.39.981.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[t]
--[ 2019.11.07.20.10.40.081.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[te]
--[ 2019.11.07.20.10.40.199.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[ter]
--[ 2019.11.07.20.10.40.322.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terr]
--[ 2019.11.07.20.10.40.896.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain]
--[ 2019.11.07.20.10.41.158.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain.]
--[ 2019.11.07.20.10.41.496.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain.g]
--[ 2019.11.07.20.10.41.535.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain.ge]
--[ 2019.11.07.20.10.41.794.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain.getN]
--[ 2019.11.07.20.10.41.810.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain.getN()]
--[ 2019.11.07.20.10.43.960.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain.getN()][]
--[ 2019.11.07.20.10.44.045.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain.getN()][t]
--[ 2019.11.07.20.10.44.100.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain.getN()][te]
--[ 2019.11.07.20.10.44.191.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain.getN()][ter]
--[ 2019.11.07.20.10.44.332.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain.getN()][terr]
--[ 2019.11.07.20.10.44.375.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain.getN()][terra]
--[ 2019.11.07.20.10.44.467.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain.getN()][terrai]
--[ 2019.11.07.20.10.44.511.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain.getN()][terrain]
--[ 2019.11.07.20.10.44.736.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain.getN()][terrain.]
--[ 2019.11.07.20.10.45.335.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain.getN()][terrain.g]
--[ 2019.11.07.20.10.45.698.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain.getN()][terrain.getN]
--[ 2019.11.07.20.10.45.711.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain.getN()][terrain.getN()]
--[ 2019.11.07.20.10.46.815.0 ]--
r 66         PFNode[][] coordBoard = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.10.54.103.0 ]--
- 99
r 99         
--[ 2019.11.07.20.10.54.258.0 ]--
- 98
--[ 2019.11.07.20.10.54.453.0 ]--
- 98
--[ 2019.11.07.20.10.57.423.0 ]--
+ 66         
--[ 2019.11.07.20.10.58.196.0 ]--
- 66
--[ 2019.11.07.20.10.58.771.0 ]--
+ 66         
--[ 2019.11.07.20.10.58.936.0 ]--
r 66         /
--[ 2019.11.07.20.10.59.366.0 ]--
+ 67         
--[ 2019.11.07.20.10.59.876.0 ]--
- 67
--[ 2019.11.07.20.10.59.985.0 ]--
r 66         
--[ 2019.11.07.20.11.00.215.0 ]--
+ 66         
--[ 2019.11.07.20.11.00.620.0 ]--
r 67         /
--[ 2019.11.07.20.11.01.068.0 ]--
r 67         /I
--[ 2019.11.07.20.11.01.164.0 ]--
r 67         /In
--[ 2019.11.07.20.11.01.230.0 ]--
r 67         /Ini
--[ 2019.11.07.20.11.01.672.0 ]--
r 67         /In
--[ 2019.11.07.20.11.01.763.0 ]--
r 67         /I
--[ 2019.11.07.20.11.01.896.0 ]--
r 67         /
--[ 2019.11.07.20.11.02.094.0 ]--
r 67         //
--[ 2019.11.07.20.11.02.351.0 ]--
r 67         //I
--[ 2019.11.07.20.11.02.501.0 ]--
r 67         //In
--[ 2019.11.07.20.11.02.575.0 ]--
r 67         //Ini
--[ 2019.11.07.20.11.02.838.0 ]--
r 67         //Iniz
--[ 2019.11.07.20.11.02.916.0 ]--
r 67         //Inizi
--[ 2019.11.07.20.11.03.343.0 ]--
r 67         //Iniz
--[ 2019.11.07.20.11.03.438.0 ]--
r 67         //Ini
--[ 2019.11.07.20.11.03.544.0 ]--
r 67         //Init
--[ 2019.11.07.20.11.03.611.0 ]--
r 67         //Initi
--[ 2019.11.07.20.11.03.681.0 ]--
r 67         //Initia
--[ 2019.11.07.20.11.03.768.0 ]--
r 67         //Initial
--[ 2019.11.07.20.11.03.922.0 ]--
r 67         //Initiali
--[ 2019.11.07.20.11.03.948.0 ]--
r 67         //Initializ
--[ 2019.11.07.20.11.04.086.0 ]--
r 67         //Initialize
--[ 2019.11.07.20.11.04.207.0 ]--
r 67         //Initialize 
--[ 2019.11.07.20.11.04.309.0 ]--
r 67         //Initialize a
--[ 2019.11.07.20.11.04.410.0 ]--
r 67         //Initialize a 
--[ 2019.11.07.20.11.04.469.0 ]--
r 67         //Initialize a c
--[ 2019.11.07.20.11.04.568.0 ]--
r 67         //Initialize a co
--[ 2019.11.07.20.11.04.637.0 ]--
r 67         //Initialize a coo
--[ 2019.11.07.20.11.04.764.0 ]--
r 67         //Initialize a coor
--[ 2019.11.07.20.11.04.904.0 ]--
r 67         //Initialize a coord
--[ 2019.11.07.20.11.05.023.0 ]--
r 67         //Initialize a coordi
--[ 2019.11.07.20.11.05.079.0 ]--
r 67         //Initialize a coordin
--[ 2019.11.07.20.11.05.257.0 ]--
r 67         //Initialize a coordina
--[ 2019.11.07.20.11.05.368.0 ]--
r 67         //Initialize a coordinat
--[ 2019.11.07.20.11.05.841.0 ]--
r 67         //Initialize a coordinate
--[ 2019.11.07.20.11.06.423.0 ]--
r 67         //Initialize a 
--[ 2019.11.07.20.11.08.858.0 ]--
r 68         PFNode[][] oard = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.11.08.934.0 ]--
r 68         PFNode[][] board = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.11.09.829.0 ]--
r 68         PFNode[][] b oard = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.11.09.877.0 ]--
r 68         PFNode[][] board = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.11.12.029.0 ]--
r 67         //Initialize a  
--[ 2019.11.07.20.11.13.810.0 ]--
r 67         //Initialize a b 
--[ 2019.11.07.20.11.13.883.0 ]--
r 67         //Initialize a bo 
--[ 2019.11.07.20.11.13.933.0 ]--
r 67         //Initialize a boa 
--[ 2019.11.07.20.11.14.081.0 ]--
r 67         //Initialize a boar 
--[ 2019.11.07.20.11.14.212.0 ]--
r 67         //Initialize a board 
--[ 2019.11.07.20.11.14.518.0 ]--
r 67         //Initialize a board  
--[ 2019.11.07.20.11.14.734.0 ]--
r 67         //Initialize a board o 
--[ 2019.11.07.20.11.14.813.0 ]--
r 67         //Initialize a board of 
--[ 2019.11.07.20.11.14.951.0 ]--
r 67         //Initialize a board of  
--[ 2019.11.07.20.11.16.157.0 ]--
r 67         //Initialize a board of n 
--[ 2019.11.07.20.11.16.506.0 ]--
r 67         //Initialize a board of  
--[ 2019.11.07.20.11.16.689.0 ]--
r 67         //Initialize a board of n 
--[ 2019.11.07.20.11.16.750.0 ]--
r 67         //Initialize a board of ndo 
--[ 2019.11.07.20.11.16.825.0 ]--
r 67         //Initialize a board of ndoe 
--[ 2019.11.07.20.11.16.967.0 ]--
r 67         //Initialize a board of ndoes 
--[ 2019.11.07.20.11.17.170.0 ]--
r 67         //Initialize a board of ndoes, 
--[ 2019.11.07.20.11.17.415.0 ]--
r 67         //Initialize a board of ndoes 
--[ 2019.11.07.20.11.17.526.0 ]--
r 67         //Initialize a board of ndoe 
--[ 2019.11.07.20.11.17.618.0 ]--
r 67         //Initialize a board of ndo 
--[ 2019.11.07.20.11.17.726.0 ]--
r 67         //Initialize a board of nd 
--[ 2019.11.07.20.11.17.847.0 ]--
r 67         //Initialize a board of n 
--[ 2019.11.07.20.11.17.991.0 ]--
r 67         //Initialize a board of no 
--[ 2019.11.07.20.11.18.066.0 ]--
r 67         //Initialize a board of nod 
--[ 2019.11.07.20.11.18.128.0 ]--
r 67         //Initialize a board of node 
--[ 2019.11.07.20.11.18.260.0 ]--
r 67         //Initialize a board of nodes 
--[ 2019.11.07.20.11.20.178.0 ]--
r 67         //Initialize a board of nodes  
--[ 2019.11.07.20.11.21.444.0 ]--
r 67         //Initialize a board of nodes 
--[ 2019.11.07.20.11.21.688.0 ]--
r 67         //Initialize a board of nodes  
--[ 2019.11.07.20.11.37.483.0 ]--
r 66 
r 100 
--[ 2019.11.07.20.14.34.739.0 ]--
r 67         //Initialize a board  
--[ 2019.11.07.20.14.35.618.0 ]--
r 67         //Initialize a board,  
--[ 2019.11.07.20.14.35.713.0 ]--
r 67         //Initialize a board,   
--[ 2019.11.07.20.14.35.783.0 ]--
r 67         //Initialize a board, n  
--[ 2019.11.07.20.14.36.007.0 ]--
r 67         //Initialize a board,   
--[ 2019.11.07.20.14.36.152.0 ]--
r 67         //Initialize a board, m  
--[ 2019.11.07.20.14.36.204.0 ]--
r 67         //Initialize a board, ma  
--[ 2019.11.07.20.14.36.278.0 ]--
r 67         //Initialize a board, mad  
--[ 2019.11.07.20.14.36.341.0 ]--
r 67         //Initialize a board, made  
--[ 2019.11.07.20.14.36.413.0 ]--
r 67         //Initialize a board, made   
--[ 2019.11.07.20.14.36.469.0 ]--
r 67         //Initialize a board, made t  
--[ 2019.11.07.20.14.36.575.0 ]--
r 67         //Initialize a board, made to  
--[ 2019.11.07.20.14.36.634.0 ]--
r 67         //Initialize a board, made to   
--[ 2019.11.07.20.14.36.686.0 ]--
r 67         //Initialize a board, made to s  
--[ 2019.11.07.20.14.36.996.0 ]--
r 67         //Initialize a board, made to st  
--[ 2019.11.07.20.14.37.859.0 ]--
r 67         //Initialize a board, made to   
--[ 2019.11.07.20.14.37.991.0 ]--
r 67         //Initialize a board, made   
--[ 2019.11.07.20.14.39.059.0 ]--
r 67         //Initialize a board, made t  
--[ 2019.11.07.20.14.39.167.0 ]--
r 67         //Initialize a board, made to  
--[ 2019.11.07.20.14.39.452.0 ]--
r 67         //Initialize a board, made   
--[ 2019.11.07.20.14.39.583.0 ]--
r 67         //Initialize a board,   
--[ 2019.11.07.20.14.39.950.0 ]--
r 67         //Initialize a board,  
--[ 2019.11.07.20.14.40.062.0 ]--
r 67         //Initialize a board  
--[ 2019.11.07.20.14.40.174.0 ]--
r 67         //Initialize a board   
--[ 2019.11.07.20.14.40.244.0 ]--
r 67         //Initialize a board m  
--[ 2019.11.07.20.14.40.333.0 ]--
r 67         //Initialize a board ma  
--[ 2019.11.07.20.14.40.406.0 ]--
r 67         //Initialize a board mad  
--[ 2019.11.07.20.14.40.460.0 ]--
r 67         //Initialize a board made  
--[ 2019.11.07.20.14.40.549.0 ]--
r 67         //Initialize a board made   
--[ 2019.11.07.20.14.40.663.0 ]--
r 67         //Initialize a board made t  
--[ 2019.11.07.20.14.40.705.0 ]--
r 67         //Initialize a board made to  
--[ 2019.11.07.20.14.40.775.0 ]--
r 67         //Initialize a board made to   
--[ 2019.11.07.20.14.40.799.0 ]--
r 67         //Initialize a board made to s  
--[ 2019.11.07.20.14.40.951.0 ]--
r 67         //Initialize a board made to st  
--[ 2019.11.07.20.14.41.053.0 ]--
r 67         //Initialize a board made to sto  
--[ 2019.11.07.20.14.41.092.0 ]--
r 67         //Initialize a board made to stor  
--[ 2019.11.07.20.14.41.157.0 ]--
r 67         //Initialize a board made to store  
--[ 2019.11.07.20.14.41.233.0 ]--
r 67         //Initialize a board made to store   
--[ 2019.11.07.20.14.41.289.0 ]--
r 67         //Initialize a board made to store n  
--[ 2019.11.07.20.14.41.336.0 ]--
r 67         //Initialize a board made to store no  
--[ 2019.11.07.20.14.41.588.0 ]--
r 67         //Initialize a board made to store n  
--[ 2019.11.07.20.14.41.877.0 ]--
r 67         //Initialize a board made to store no  
--[ 2019.11.07.20.14.41.919.0 ]--
r 67         //Initialize a board made to store nod  
--[ 2019.11.07.20.14.42.005.0 ]--
r 67         //Initialize a board made to store node  
--[ 2019.11.07.20.14.42.126.0 ]--
r 67         //Initialize a board made to store nodes  
--[ 2019.11.07.20.14.42.282.0 ]--
r 67         //Initialize a board made to store nodes.  
--[ 2019.11.07.20.14.43.490.0 ]--
r 67         //Initialize a board made to store nodes.   
--[ 2019.11.07.20.14.43.655.0 ]--
r 67         //Initialize a board made to store nodes.  
--[ 2019.11.07.20.14.43.853.0 ]--
r 67         //Initialize a board made to store nodes  
--[ 2019.11.07.20.15.40.035.0 ]--
r 67         //Initialize a board made to store nodes
--[ 2019.11.07.20.15.41.302.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.20.15.50.451.0 ]--
r 104 
--[ 2019.11.07.20.15.50.704.0 ]--
- 102
r 103         
--[ 2019.11.07.20.15.51.052.0 ]--
- 102
--[ 2019.11.07.20.15.51.337.0 ]--
r 102          
--[ 2019.11.07.20.15.51.376.0 ]--
r 102         
--[ 2019.11.07.20.15.53.108.0 ]--
- 103
- 103
- 104
- 104
r 104         
--[ 2019.11.07.20.15.53.257.0 ]--
- 103
--[ 2019.11.07.20.15.53.371.0 ]--
- 102
--[ 2019.11.07.20.15.53.919.0 ]--
+ 102         
--[ 2019.11.07.20.15.54.366.0 ]--
+ 102         
--[ 2019.11.07.20.18.28.423.0 ]--
r 103         b
--[ 2019.11.07.20.18.28.513.0 ]--
r 103         bo
--[ 2019.11.07.20.18.28.550.0 ]--
r 103         boa
--[ 2019.11.07.20.18.28.638.0 ]--
r 103         boar
--[ 2019.11.07.20.18.28.789.0 ]--
r 103         board
--[ 2019.11.07.20.18.29.134.0 ]--
r 103         board 
--[ 2019.11.07.20.18.29.197.0 ]--
r 103         board
--[ 2019.11.07.20.18.31.181.0 ]--
r 103         board[]
--[ 2019.11.07.20.18.38.381.0 ]--
r 103         
--[ 2019.11.07.20.18.44.770.0 ]--
r 68         PFNode[][] board =  new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.18.44.835.0 ]--
r 68         PFNode[][] board = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.18.47.866.0 ]--
r 68         PFNode[][] board =  new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.24.44.534.0 ]--
+ 67         
--[ 2019.11.07.20.24.55.103.0 ]--
r 67         .
--[ 2019.11.07.20.24.55.186.0 ]--
r 67         .g
--[ 2019.11.07.20.24.55.247.0 ]--
r 67         .ge
--[ 2019.11.07.20.24.55.349.0 ]--
r 67         .get
--[ 2019.11.07.20.24.55.602.0 ]--
r 67         .getI
--[ 2019.11.07.20.24.55.785.0 ]--
r 67         .get
--[ 2019.11.07.20.24.55.898.0 ]--
r 67         .ge
--[ 2019.11.07.20.24.56.010.0 ]--
r 67         .g
--[ 2019.11.07.20.24.56.127.0 ]--
r 67         .
--[ 2019.11.07.20.24.56.392.0 ]--
r 67         
--[ 2019.11.07.20.24.57.029.0 ]--
r 67          
--[ 2019.11.07.20.24.57.124.0 ]--
r 67         
--[ 2019.11.07.20.24.57.845.0 ]--
r 67         p
--[ 2019.11.07.20.24.58.214.0 ]--
r 67         
--[ 2019.11.07.20.24.58.400.0 ]--
r 67         P
--[ 2019.11.07.20.24.58.456.0 ]--
r 67         PF
--[ 2019.11.07.20.24.58.616.0 ]--
r 67         PFn
--[ 2019.11.07.20.24.58.928.0 ]--
r 67         PFno
--[ 2019.11.07.20.24.59.124.0 ]--
r 67         PFn
--[ 2019.11.07.20.24.59.225.0 ]--
r 67         PF
--[ 2019.11.07.20.24.59.397.0 ]--
r 67         PFN
--[ 2019.11.07.20.24.59.504.0 ]--
r 67         PFNo
--[ 2019.11.07.20.24.59.579.0 ]--
r 67         PFNod
--[ 2019.11.07.20.24.59.616.0 ]--
r 67         PFNode
--[ 2019.11.07.20.24.59.708.0 ]--
r 67         PFNode.
--[ 2019.11.07.20.24.59.827.0 ]--
r 67         PFNode.g
--[ 2019.11.07.20.24.59.913.0 ]--
r 67         PFNode.ge
--[ 2019.11.07.20.25.00.030.0 ]--
r 67         PFNode.get
--[ 2019.11.07.20.25.00.835.0 ]--
r 67         PFNode.ge
--[ 2019.11.07.20.25.00.967.0 ]--
r 67         PFNode.g
--[ 2019.11.07.20.25.01.070.0 ]--
r 67         PFNode.
--[ 2019.11.07.20.25.01.369.0 ]--
r 67         PFNode
--[ 2019.11.07.20.25.01.838.0 ]--
r 67         
--[ 2019.11.07.20.25.02.796.0 ]--
r 67         b
--[ 2019.11.07.20.25.02.897.0 ]--
r 67         bo
--[ 2019.11.07.20.25.02.935.0 ]--
r 67         boa
--[ 2019.11.07.20.25.03.032.0 ]--
r 67         boar
--[ 2019.11.07.20.25.03.194.0 ]--
r 67         board
--[ 2019.11.07.20.25.03.466.0 ]--
r 67         
--[ 2019.11.07.20.25.05.701.0 ]--
- 66
--[ 2019.11.07.20.25.05.831.0 ]--
- 66
--[ 2019.11.07.20.25.08.277.0 ]--
+ 101         
--[ 2019.11.07.20.25.09.537.0 ]--
r 102         P
--[ 2019.11.07.20.25.09.654.0 ]--
r 102         PF
--[ 2019.11.07.20.25.09.792.0 ]--
r 102         PFN
--[ 2019.11.07.20.25.09.986.0 ]--
r 102         PFNo
--[ 2019.11.07.20.25.10.118.0 ]--
r 102         PFNod
--[ 2019.11.07.20.25.10.165.0 ]--
r 102         PFNode
--[ 2019.11.07.20.25.10.449.0 ]--
r 102         PFNode 
--[ 2019.11.07.20.25.10.826.0 ]--
r 102         PFNode ()
--[ 2019.11.07.20.25.11.262.0 ]--
r 102         PFNode 
--[ 2019.11.07.20.25.11.392.0 ]--
r 102         PFNode
--[ 2019.11.07.20.25.11.862.0 ]--
r 102         PFNode 
--[ 2019.11.07.20.25.13.767.0 ]--
r 102         PFNode s
--[ 2019.11.07.20.25.14.056.0 ]--
r 102         PFNode 
--[ 2019.11.07.20.25.15.049.0 ]--
r 102         PFNode b
--[ 2019.11.07.20.25.15.112.0 ]--
r 102         PFNode be
--[ 2019.11.07.20.25.15.264.0 ]--
r 102         PFNode beg
--[ 2019.11.07.20.25.15.331.0 ]--
r 102         PFNode begi
--[ 2019.11.07.20.25.15.366.0 ]--
r 102         PFNode begin
--[ 2019.11.07.20.25.15.491.0 ]--
r 102         PFNode begin 
--[ 2019.11.07.20.25.15.592.0 ]--
r 102         PFNode begin =
--[ 2019.11.07.20.25.15.682.0 ]--
r 102         PFNode begin = 
--[ 2019.11.07.20.25.16.352.0 ]--
r 102         PFNode begin 
--[ 2019.11.07.20.25.16.477.0 ]--
r 102         PFNode 
--[ 2019.11.07.20.25.17.981.0 ]--
r 102         PFNode b
--[ 2019.11.07.20.25.18.030.0 ]--
r 102         PFNode be
--[ 2019.11.07.20.25.18.201.0 ]--
r 102         PFNode beg
--[ 2019.11.07.20.25.18.243.0 ]--
r 102         PFNode begi
--[ 2019.11.07.20.25.18.316.0 ]--
r 102         PFNode begin
--[ 2019.11.07.20.25.18.547.0 ]--
r 102         PFNode begin=
--[ 2019.11.07.20.25.18.798.0 ]--
r 102         PFNode begin
--[ 2019.11.07.20.25.18.992.0 ]--
r 102         PFNode begin=
--[ 2019.11.07.20.25.19.230.0 ]--
r 102         PFNode begin
--[ 2019.11.07.20.25.19.522.0 ]--
r 102         PFNode begin 
--[ 2019.11.07.20.25.19.623.0 ]--
r 102         PFNode begin =
--[ 2019.11.07.20.25.19.694.0 ]--
r 102         PFNode begin = 
--[ 2019.11.07.20.25.19.828.0 ]--
r 102         PFNode begin = n
--[ 2019.11.07.20.25.19.883.0 ]--
r 102         PFNode begin = ne
--[ 2019.11.07.20.25.20.033.0 ]--
r 102         PFNode begin = new
--[ 2019.11.07.20.25.20.136.0 ]--
r 102         PFNode begin = new 
--[ 2019.11.07.20.25.20.370.0 ]--
r 102         PFNode begin = new P
--[ 2019.11.07.20.25.20.438.0 ]--
r 102         PFNode begin = new PF
--[ 2019.11.07.20.25.20.737.0 ]--
r 102         PFNode begin = new PFN
--[ 2019.11.07.20.25.20.903.0 ]--
r 102         PFNode begin = new PFNo
--[ 2019.11.07.20.25.20.959.0 ]--
r 102         PFNode begin = new PFNod
--[ 2019.11.07.20.25.20.983.0 ]--
r 102         PFNode begin = new PFNode
--[ 2019.11.07.20.25.21.379.0 ]--
r 102         PFNode begin = new PFNode()
--[ 2019.11.07.20.25.23.862.0 ]--
r 102         PFNode begin = new PFNode(t)
--[ 2019.11.07.20.25.24.133.0 ]--
r 102         PFNode begin = new PFNode()
--[ 2019.11.07.20.25.24.186.0 ]--
r 102         PFNode begin = new PFNode(s)
--[ 2019.11.07.20.25.24.276.0 ]--
r 102         PFNode begin = new PFNode(st)
--[ 2019.11.07.20.25.24.327.0 ]--
r 102         PFNode begin = new PFNode(sta)
--[ 2019.11.07.20.25.24.453.0 ]--
r 102         PFNode begin = new PFNode(star)
--[ 2019.11.07.20.25.24.606.0 ]--
r 102         PFNode begin = new PFNode(start)
--[ 2019.11.07.20.25.26.013.0 ]--
r 102         PFNode begin = new PFNode(start,)
--[ 2019.11.07.20.25.26.118.0 ]--
r 102         PFNode begin = new PFNode(start, )
--[ 2019.11.07.20.25.26.521.0 ]--
r 102         PFNode begin = new PFNode(start, n)
--[ 2019.11.07.20.25.26.635.0 ]--
r 102         PFNode begin = new PFNode(start, nu)
--[ 2019.11.07.20.25.26.893.0 ]--
r 102         PFNode begin = new PFNode(start, nul)
--[ 2019.11.07.20.25.27.000.0 ]--
r 102         PFNode begin = new PFNode(start, null)
--[ 2019.11.07.20.25.27.640.0 ]--
r 102         PFNode begin = new PFNode(start, null);
--[ 2019.11.07.20.25.28.990.0 ]--
r 102         PFNode begin = new PFNode(start, null); 
--[ 2019.11.07.20.25.29.006.0 ]--
r 102         PFNode begin = new PFNode(start, null);
--[ 2019.11.07.20.25.29.190.0 ]--
+ 103         
--[ 2019.11.07.20.25.29.749.0 ]--
r 103         b
--[ 2019.11.07.20.25.30.018.0 ]--
r 103         be
--[ 2019.11.07.20.25.30.196.0 ]--
r 103         beg
--[ 2019.11.07.20.25.30.262.0 ]--
r 103         begi
--[ 2019.11.07.20.25.30.295.0 ]--
r 103         begin
--[ 2019.11.07.20.25.30.541.0 ]--
r 103         begin.
--[ 2019.11.07.20.25.31.111.0 ]--
r 103         begin.g
--[ 2019.11.07.20.25.31.181.0 ]--
r 103         begin.ge
--[ 2019.11.07.20.25.31.317.0 ]--
r 103         begin.get
--[ 2019.11.07.20.25.32.044.0 ]--
r 103         begin.
--[ 2019.11.07.20.25.32.406.0 ]--
r 103         begin
--[ 2019.11.07.20.25.32.820.0 ]--
r 103         begi
--[ 2019.11.07.20.25.32.968.0 ]--
r 103         beg
--[ 2019.11.07.20.25.33.080.0 ]--
r 103         be
--[ 2019.11.07.20.25.33.190.0 ]--
r 103         b
--[ 2019.11.07.20.25.33.464.0 ]--
r 103         
--[ 2019.11.07.20.25.33.749.0 ]--
- 103
--[ 2019.11.07.20.27.21.844.0 ]--
+ 66         
--[ 2019.11.07.20.27.22.460.0 ]--
+ 66         
--[ 2019.11.07.20.27.23.389.0 ]--
r 67          
--[ 2019.11.07.20.27.23.440.0 ]--
r 67         
--[ 2019.11.07.20.32.21.248.0 ]--
r 105            
--[ 2019.11.07.20.32.22.505.0 ]--
r 105         m   
--[ 2019.11.07.20.32.22.862.0 ]--
r 105            
--[ 2019.11.07.20.32.23.045.0 ]--
+ 105         
r 106         
--[ 2019.11.07.20.32.24.357.0 ]--
- 105
--[ 2019.11.07.20.32.24.764.0 ]--
r 105         m
--[ 2019.11.07.20.32.24.824.0 ]--
r 105         mi
--[ 2019.11.07.20.32.24.908.0 ]--
r 105         min
--[ 2019.11.07.20.32.25.315.0 ]--
r 105         mi
--[ 2019.11.07.20.32.25.407.0 ]--
r 105         m
--[ 2019.11.07.20.32.25.536.0 ]--
r 105         
--[ 2019.11.07.20.32.25.953.0 ]--
r 105         p
--[ 2019.11.07.20.32.26.064.0 ]--
r 105         pf
--[ 2019.11.07.20.32.26.338.0 ]--
r 105         pfQ
--[ 2019.11.07.20.32.26.487.0 ]--
r 105         pfQu
--[ 2019.11.07.20.32.26.554.0 ]--
r 105         pfQue
--[ 2019.11.07.20.32.26.694.0 ]--
r 105         pfQuee
--[ 2019.11.07.20.32.26.777.0 ]--
r 105         pfQuee.
--[ 2019.11.07.20.32.27.181.0 ]--
r 105         pfQuee
--[ 2019.11.07.20.32.27.289.0 ]--
r 105         pfQue
--[ 2019.11.07.20.32.27.408.0 ]--
r 105         pfQu
--[ 2019.11.07.20.32.27.543.0 ]--
r 105         pfQuu
--[ 2019.11.07.20.32.27.932.0 ]--
r 105         pfQu
--[ 2019.11.07.20.32.28.070.0 ]--
r 105         pfQue
--[ 2019.11.07.20.32.28.134.0 ]--
r 105         pfQueu
--[ 2019.11.07.20.32.28.222.0 ]--
r 105         pfQueue
--[ 2019.11.07.20.32.28.376.0 ]--
r 105         pfQueue.
--[ 2019.11.07.20.32.28.623.0 ]--
r 105         pfQueue.i
--[ 2019.11.07.20.32.28.669.0 ]--
r 105         pfQueue.in
--[ 2019.11.07.20.32.28.790.0 ]--
r 105         pfQueue.ins
--[ 2019.11.07.20.32.28.928.0 ]--
r 105         pfQueue.inse
--[ 2019.11.07.20.32.28.973.0 ]--
r 105         pfQueue.inser
--[ 2019.11.07.20.32.29.151.0 ]--
r 105         pfQueue.insert
--[ 2019.11.07.20.32.29.403.0 ]--
r 105         pfQueue.insert()
--[ 2019.11.07.20.32.29.992.0 ]--
r 105         pfQueue.insert( )
--[ 2019.11.07.20.32.30.034.0 ]--
r 105         pfQueue.insert()
--[ 2019.11.07.20.32.31.267.0 ]--
r 105         pfQueue.insert(b)
--[ 2019.11.07.20.32.31.448.0 ]--
r 105         pfQueue.insert(be)
--[ 2019.11.07.20.32.31.535.0 ]--
r 105         pfQueue.insert(beg)
--[ 2019.11.07.20.32.31.661.0 ]--
r 105         pfQueue.insert(begi)
--[ 2019.11.07.20.32.31.690.0 ]--
r 105         pfQueue.insert(begin)
--[ 2019.11.07.20.32.32.289.0 ]--
r 105         pfQueue.insert(begin);
--[ 2019.11.07.20.32.32.493.0 ]--
r 105         pfQueue.insert(begin); 
--[ 2019.11.07.20.32.32.616.0 ]--
r 105         pfQueue.insert(begin);
--[ 2019.11.07.20.39.52.111.0 ]--
+ 105         
--[ 2019.11.07.20.39.52.251.0 ]--
+ 105         
--[ 2019.11.07.20.39.54.098.0 ]--
r 105         b
--[ 2019.11.07.20.39.54.178.0 ]--
r 105         bo
--[ 2019.11.07.20.39.54.289.0 ]--
r 105         boa
--[ 2019.11.07.20.39.54.376.0 ]--
r 105         boar
--[ 2019.11.07.20.39.54.520.0 ]--
r 105         board
--[ 2019.11.07.20.39.54.621.0 ]--
r 105         board[]
--[ 2019.11.07.20.39.55.960.0 ]--
r 105         board[][]
--[ 2019.11.07.20.39.56.665.0 ]--
r 105         board[][] 
--[ 2019.11.07.20.39.56.759.0 ]--
r 105         board[][]
--[ 2019.11.07.20.39.57.061.0 ]--
r 105         board[][
--[ 2019.11.07.20.39.57.462.0 ]--
r 105         board[]
--[ 2019.11.07.20.39.57.806.0 ]--
r 105         board[
--[ 2019.11.07.20.39.58.106.0 ]--
r 105         board[][] 
--[ 2019.11.07.20.39.58.613.0 ]--
r 105         
--[ 2019.11.07.20.39.58.674.0 ]--
- 105
--[ 2019.11.07.20.39.58.696.0 ]--
- 105
--[ 2019.11.07.20.39.58.750.0 ]--
r 105         pfQueue.insert(begin); 
--[ 2019.11.07.20.39.58.780.0 ]--
r 105         pfQueue.insert()
--[ 2019.11.07.20.39.58.809.0 ]--
r 105         pfQueue.insert( )
--[ 2019.11.07.20.39.58.843.0 ]--
r 105         pfQu
--[ 2019.11.07.20.39.58.871.0 ]--
r 105         pfQuu
--[ 2019.11.07.20.39.58.899.0 ]--
r 105         pfQu
--[ 2019.11.07.20.39.58.931.0 ]--
r 105         pfQuee.
--[ 2019.11.07.20.39.58.960.0 ]--
r 105         
--[ 2019.11.07.20.39.58.990.0 ]--
r 105         min
--[ 2019.11.07.20.39.59.021.0 ]--
r 105         
--[ 2019.11.07.20.39.59.227.0 ]--
+ 105         
--[ 2019.11.07.20.39.59.730.0 ]--
- 105
r 105            
--[ 2019.11.07.20.39.59.752.0 ]--
r 105         m   
--[ 2019.11.07.20.39.59.768.0 ]--
r 105            
--[ 2019.11.07.20.39.59.798.0 ]--
r 105         
--[ 2019.11.07.20.39.59.856.0 ]--
r 67          
--[ 2019.11.07.20.39.59.889.0 ]--
r 67         
--[ 2019.11.07.20.39.59.925.0 ]--
- 66
--[ 2019.11.07.20.39.59.958.0 ]--
- 66
--[ 2019.11.07.20.40.00.021.0 ]--
+ 103         begin.get
--[ 2019.11.07.20.40.00.045.0 ]--
r 103         
--[ 2019.11.07.20.40.00.076.0 ]--
- 103
--[ 2019.11.07.20.40.00.098.0 ]--
r 102         PFNode begin = new PFNode(start, null); 
--[ 2019.11.07.20.40.00.130.0 ]--
r 102         PFNode begin = new PFNode()
--[ 2019.11.07.20.40.00.159.0 ]--
r 102         PFNode begin = new PFNode(t)
--[ 2019.11.07.20.40.00.193.0 ]--
r 102         PFNode begin
--[ 2019.11.07.20.40.00.711.0 ]--
r 102         PFNode begin=
--[ 2019.11.07.20.40.01.212.0 ]--
r 102         PFNode begin
--[ 2019.11.07.20.40.01.240.0 ]--
r 102         PFNode begin=
--[ 2019.11.07.20.40.01.265.0 ]--
r 102         PFNode 
--[ 2019.11.07.20.40.01.294.0 ]--
r 102         PFNode begin = 
--[ 2019.11.07.20.40.01.324.0 ]--
r 102         PFNode 
--[ 2019.11.07.20.40.01.361.0 ]--
r 102         PFNode s
--[ 2019.11.07.20.40.01.391.0 ]--
r 102         PFNode
--[ 2019.11.07.20.40.01.416.0 ]--
r 102         PFNode ()
--[ 2019.11.07.20.40.01.449.0 ]--
r 102         
--[ 2019.11.07.20.40.01.481.0 ]--
- 101
--[ 2019.11.07.20.40.01.549.0 ]--
+ 66 
+ 67         board
--[ 2019.11.07.20.40.01.566.0 ]--
r 67         
--[ 2019.11.07.20.40.01.593.0 ]--
r 67         PFNode.get
--[ 2019.11.07.20.40.01.625.0 ]--
r 67         PF
--[ 2019.11.07.20.40.01.655.0 ]--
r 67         PFno
--[ 2019.11.07.20.40.01.686.0 ]--
r 67         
--[ 2019.11.07.20.40.01.722.0 ]--
r 67         p
--[ 2019.11.07.20.40.01.745.0 ]--
r 67         
--[ 2019.11.07.20.40.01.777.0 ]--
r 67          
--[ 2019.11.07.20.40.01.807.0 ]--
r 67         
--[ 2019.11.07.20.40.01.838.0 ]--
r 67         .getI
--[ 2019.11.07.20.40.02.613.0 ]--
r 67         
--[ 2019.11.07.20.40.02.933.0 ]--
- 67
--[ 2019.11.07.20.40.03.219.0 ]--
r 68         PFNode[][] board = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.40.03.521.0 ]--
r 68         PFNode[][] board =  new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.40.03.649.0 ]--
r 68         PFNode[][] board = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.40.03.898.0 ]--
r 103         board[]
--[ 2019.11.07.20.40.04.149.0 ]--
r 103         board
--[ 2019.11.07.20.40.04.282.0 ]--
r 103         board 
--[ 2019.11.07.20.40.04.443.0 ]--
r 103         
--[ 2019.11.07.20.40.04.798.0 ]--
- 102
--[ 2019.11.07.20.40.04.968.0 ]--
- 102
--[ 2019.11.07.20.40.05.125.0 ]--
+ 103 
+ 104         s = new Stack<>();
+ 105 
+ 106         s.push(getPathStart());
+ 107         s.push(getPathEnd());
+ 108 
--[ 2019.11.07.20.40.05.382.0 ]--
r 102          
--[ 2019.11.07.20.40.05.536.0 ]--
r 102         
--[ 2019.11.07.20.40.05.706.0 ]--
+ 102 
--[ 2019.11.07.20.40.05.979.0 ]--
+ 102 
r 104 
--[ 2019.11.07.20.40.06.112.0 ]--
r 104         PFNode begin = new PFNode(getPathStart(), null);
--[ 2019.11.07.20.40.06.753.0 ]--
r 67         //Initialize a board made to store nodes.   
--[ 2019.11.07.20.40.06.980.0 ]--
r 67         //Initialize a board made to store n  
--[ 2019.11.07.20.40.07.155.0 ]--
r 67         //Initialize a board made to store no  
--[ 2019.11.07.20.40.07.319.0 ]--
r 67         //Initialize a board  
--[ 2019.11.07.20.40.07.458.0 ]--
r 67         //Initialize a board, made to  
--[ 2019.11.07.20.40.07.608.0 ]--
r 67         //Initialize a board, made   
--[ 2019.11.07.20.40.07.727.0 ]--
r 67         //Initialize a board, made to st  
--[ 2019.11.07.20.40.07.877.0 ]--
r 67         //Initialize a board,   
--[ 2019.11.07.20.40.08.016.0 ]--
r 67         //Initialize a board, n  
--[ 2019.11.07.20.40.08.159.0 ]--
r 67         //Initialize a board  
--[ 2019.11.07.20.40.08.266.0 ]--
r 67         //Initialize a board of nodes  
--[ 2019.11.07.20.40.08.405.0 ]--
r 66         
r 100         
--[ 2019.11.07.20.40.08.494.0 ]--
r 67         //Initialize a board of nodes 
--[ 2019.11.07.20.40.08.640.0 ]--
r 67         //Initialize a board of nodes  
--[ 2019.11.07.20.40.08.755.0 ]--
r 67         //Initialize a board of n 
--[ 2019.11.07.20.40.08.861.0 ]--
r 67         //Initialize a board of ndoes, 
--[ 2019.11.07.20.40.09.002.0 ]--
r 67         //Initialize a board of  
--[ 2019.11.07.20.40.09.104.0 ]--
r 67         //Initialize a board of n 
--[ 2019.11.07.20.40.09.231.0 ]--
r 67         //Initialize a 
--[ 2019.11.07.20.40.09.506.0 ]--
r 68         PFNode[][] b oard = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.40.09.637.0 ]--
r 68         PFNode[][] oard = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.40.09.745.0 ]--
r 68         PFNode[][] coordBoard = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.40.10.013.0 ]--
r 67         //Initialize a coordinate
--[ 2019.11.07.20.40.10.187.0 ]--
r 67         //Ini
--[ 2019.11.07.20.40.10.583.0 ]--
r 67         //Inizi
--[ 2019.11.07.20.40.10.738.0 ]--
r 67         /
--[ 2019.11.07.20.40.10.881.0 ]--
r 67         /Ini
--[ 2019.11.07.20.40.11.016.0 ]--
r 67         
--[ 2019.11.07.20.40.11.160.0 ]--
- 66
--[ 2019.11.07.20.40.11.308.0 ]--
+ 66         /
--[ 2019.11.07.20.40.11.427.0 ]--
- 67
--[ 2019.11.07.20.40.13.041.0 ]--
- 66
--[ 2019.11.07.20.40.13.259.0 ]--
- 66
--[ 2019.11.07.20.40.15.050.0 ]--
+ 66         /
+ 67         PFNode[][] coordBoard = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.40.16.216.0 ]--
r 66         
--[ 2019.11.07.20.40.19.108.0 ]--
r 102     
--[ 2019.11.07.20.40.19.297.0 ]--
r 102         
--[ 2019.11.07.20.40.19.977.0 ]--
r 102         c
--[ 2019.11.07.20.40.20.158.0 ]--
r 102         co
--[ 2019.11.07.20.40.20.258.0 ]--
r 102         coo
--[ 2019.11.07.20.40.20.367.0 ]--
r 102         coor
--[ 2019.11.07.20.40.20.730.0 ]--
r 102         coord
--[ 2019.11.07.20.40.21.071.0 ]--
r 102         coordB
--[ 2019.11.07.20.40.21.199.0 ]--
r 102         coordBo
--[ 2019.11.07.20.40.21.295.0 ]--
r 102         coordBoa
--[ 2019.11.07.20.40.21.373.0 ]--
r 102         coordBoar
--[ 2019.11.07.20.40.21.538.0 ]--
r 102         coordBoard
--[ 2019.11.07.20.40.21.932.0 ]--
r 102         
--[ 2019.11.07.20.40.22.192.0 ]--
r 102 
--[ 2019.11.07.20.40.23.461.0 ]--
- 101
r 101         
--[ 2019.11.07.20.40.24.083.0 ]--
+ 101 
r 102 
--[ 2019.11.07.20.40.24.851.0 ]--
- 101
--[ 2019.11.07.20.40.25.354.0 ]--
- 102
--[ 2019.11.07.20.40.25.384.0 ]--
- 101
--[ 2019.11.07.20.40.25.411.0 ]--
- 102
--[ 2019.11.07.20.40.25.439.0 ]--
- 101
--[ 2019.11.07.20.40.25.798.0 ]--
- 102
--[ 2019.11.07.20.40.26.161.0 ]--
+ 101 
+ 102 
+ 103         PFNode begin = new PFNode(getPathStart(), null);
+ 104 
+ 105         s = new Stack<>();
+ 107         s.push(getPathStart());
--[ 2019.11.07.20.40.30.732.0 ]--
r 67         PFNode[][] b = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.40.30.829.0 ]--
r 67         PFNode[][] bo = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.40.30.923.0 ]--
r 67         PFNode[][] boa = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.40.31.007.0 ]--
r 67         PFNode[][] boar = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.40.31.171.0 ]--
r 67         PFNode[][] board = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.40.31.860.0 ]--
r 67         PFNode[][] board  = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.40.31.898.0 ]--
r 67         PFNode[][] board = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.40.35.061.0 ]--
- 104
- 104
- 105
- 105
r 105         s = new Stack<>(
--[ 2019.11.07.20.40.37.272.0 ]--
r 105         s 
--[ 2019.11.07.20.40.37.400.0 ]--
r 105         s
--[ 2019.11.07.20.40.37.504.0 ]--
r 105         
--[ 2019.11.07.20.40.37.761.0 ]--
- 104
--[ 2019.11.07.20.40.42.452.0 ]--
r 103         PFNode begin = new PFNode(s, null);
--[ 2019.11.07.20.40.42.724.0 ]--
r 103         PFNode begin = new PFNode(st, null);
--[ 2019.11.07.20.40.42.774.0 ]--
r 103         PFNode begin = new PFNode(sta, null);
--[ 2019.11.07.20.40.42.936.0 ]--
r 103         PFNode begin = new PFNode(star, null);
--[ 2019.11.07.20.40.43.087.0 ]--
r 103         PFNode begin = new PFNode(start, null);
--[ 2019.11.07.20.40.45.985.0 ]--
r 103         PFNode begin = new PFNode(start , null);
--[ 2019.11.07.20.40.46.031.0 ]--
r 103         PFNode begin = new PFNode(start, null);
--[ 2019.11.07.20.40.52.628.0 ]--
+ 18     
--[ 2019.11.07.20.40.53.040.0 ]--
r 18     p
--[ 2019.11.07.20.40.53.097.0 ]--
r 18     pr
--[ 2019.11.07.20.40.53.239.0 ]--
r 18     pri
--[ 2019.11.07.20.40.53.319.0 ]--
r 18     priv
--[ 2019.11.07.20.40.53.415.0 ]--
r 18     priva
--[ 2019.11.07.20.40.53.604.0 ]--
r 18     privat
--[ 2019.11.07.20.40.53.673.0 ]--
r 18     private
--[ 2019.11.07.20.40.54.175.0 ]--
r 18     private 
--[ 2019.11.07.20.40.54.370.0 ]--
r 18     private b
--[ 2019.11.07.20.40.54.677.0 ]--
r 18     private 
--[ 2019.11.07.20.40.59.497.0 ]--
r 18     private P
--[ 2019.11.07.20.40.59.558.0 ]--
r 18     private PF
--[ 2019.11.07.20.40.59.674.0 ]--
r 18     private PFN
--[ 2019.11.07.20.40.59.852.0 ]--
r 18     private PFNo
--[ 2019.11.07.20.40.59.919.0 ]--
r 18     private PFNod
--[ 2019.11.07.20.40.59.977.0 ]--
r 18     private PFNode
--[ 2019.11.07.20.41.00.115.0 ]--
r 18     private PFNode[]
--[ 2019.11.07.20.41.00.362.0 ]--
r 18     private PFNode[][]
--[ 2019.11.07.20.41.01.311.0 ]--
r 18     private PFNode[][];
--[ 2019.11.07.20.41.01.806.0 ]--
r 18     private PFNode[][]
--[ 2019.11.07.20.41.01.994.0 ]--
r 18     private PFNode[][] 
--[ 2019.11.07.20.41.02.104.0 ]--
r 18     private PFNode[][] b
--[ 2019.11.07.20.41.02.203.0 ]--
r 18     private PFNode[][] bo
--[ 2019.11.07.20.41.02.261.0 ]--
r 18     private PFNode[][] boa
--[ 2019.11.07.20.41.02.352.0 ]--
r 18     private PFNode[][] boar
--[ 2019.11.07.20.41.02.512.0 ]--
r 18     private PFNode[][] board
--[ 2019.11.07.20.41.02.647.0 ]--
r 18     private PFNode[][] board;
--[ 2019.11.07.20.41.04.159.0 ]--
r 18     private PFNode[][] board; 
--[ 2019.11.07.20.41.04.199.0 ]--
r 18     private PFNode[][] board;
--[ 2019.11.07.20.41.12.435.0 ]--
r 68         board = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.41.15.998.0 ]--
+ 105         
--[ 2019.11.07.20.41.18.999.0 ]--
+ 103         
--[ 2019.11.07.20.43.28.616.0 ]--
r 103         b
--[ 2019.11.07.20.43.28.742.0 ]--
r 103         bp
--[ 2019.11.07.20.43.28.799.0 ]--
r 103         bpa
--[ 2019.11.07.20.43.29.040.0 ]--
r 103         bp
--[ 2019.11.07.20.43.29.167.0 ]--
r 103         b
--[ 2019.11.07.20.43.29.381.0 ]--
r 103         bo
--[ 2019.11.07.20.43.29.442.0 ]--
r 103         boa
--[ 2019.11.07.20.43.29.543.0 ]--
r 103         boar
--[ 2019.11.07.20.43.29.657.0 ]--
r 103         board
--[ 2019.11.07.20.43.29.748.0 ]--
r 103         board[]
--[ 2019.11.07.20.43.29.944.0 ]--
r 103         board[][]
--[ 2019.11.07.20.43.30.441.0 ]--
r 103         board[][] 
--[ 2019.11.07.20.43.30.561.0 ]--
r 103         board[][] =
--[ 2019.11.07.20.43.30.713.0 ]--
r 103         board[][] = 
--[ 2019.11.07.20.43.31.274.0 ]--
r 103         board[][] 
--[ 2019.11.07.20.43.31.394.0 ]--
r 103         board[][
--[ 2019.11.07.20.43.31.685.0 ]--
r 103         board[]
--[ 2019.11.07.20.43.32.039.0 ]--
r 103         board[
--[ 2019.11.07.20.43.32.344.0 ]--
r 103         board
--[ 2019.11.07.20.43.32.617.0 ]--
r 103         
--[ 2019.11.07.20.43.32.840.0 ]--
r 103 
--[ 2019.11.07.20.43.33.132.0 ]--
- 102
r 102         
--[ 2019.11.07.20.43.33.373.0 ]--
- 102
--[ 2019.11.07.20.43.34.723.0 ]--
- 102
--[ 2019.11.07.20.43.36.301.0 ]--
+ 103         
--[ 2019.11.07.20.43.36.757.0 ]--
+ 103         
--[ 2019.11.07.20.43.37.567.0 ]--
r 104         p
--[ 2019.11.07.20.43.37.627.0 ]--
r 104         pf
--[ 2019.11.07.20.43.37.873.0 ]--
r 104         pfQ
--[ 2019.11.07.20.43.38.012.0 ]--
r 104         pfQu
--[ 2019.11.07.20.43.38.103.0 ]--
r 104         pfQue
--[ 2019.11.07.20.43.38.205.0 ]--
r 104         pfQueu
--[ 2019.11.07.20.43.38.255.0 ]--
r 104         pfQueue
--[ 2019.11.07.20.43.38.515.0 ]--
r 104         pfQueue.
--[ 2019.11.07.20.43.39.006.0 ]--
r 104         pfQueue.i
--[ 2019.11.07.20.43.39.037.0 ]--
r 104         pfQueue.in
--[ 2019.11.07.20.43.39.177.0 ]--
r 104         pfQueue.ins
--[ 2019.11.07.20.43.39.327.0 ]--
r 104         pfQueue.inse
--[ 2019.11.07.20.43.39.385.0 ]--
r 104         pfQueue.inser
--[ 2019.11.07.20.43.39.535.0 ]--
r 104         pfQueue.insert
--[ 2019.11.07.20.43.39.731.0 ]--
r 104         pfQueue.insert()
--[ 2019.11.07.20.43.41.208.0 ]--
r 104         pfQueue.insert(b)
--[ 2019.11.07.20.43.41.359.0 ]--
r 104         pfQueue.insert(be)
--[ 2019.11.07.20.43.41.416.0 ]--
r 104         pfQueue.insert(beg)
--[ 2019.11.07.20.43.41.524.0 ]--
r 104         pfQueue.insert(begi)
--[ 2019.11.07.20.43.41.602.0 ]--
r 104         pfQueue.insert(begin)
--[ 2019.11.07.20.43.41.893.0 ]--
r 104         pfQueue.insert(begin);
--[ 2019.11.07.20.43.42.657.0 ]--
r 104         pfQueue.insert(begin); 
--[ 2019.11.07.20.43.42.702.0 ]--
r 104         pfQueue.insert(begin);
--[ 2019.11.07.20.43.42.862.0 ]--
+ 105         
--[ 2019.11.07.20.43.43.660.0 ]--
r 105         b
--[ 2019.11.07.20.43.43.761.0 ]--
r 105         bo
--[ 2019.11.07.20.43.43.789.0 ]--
r 105         boa
--[ 2019.11.07.20.43.43.875.0 ]--
r 105         boar
--[ 2019.11.07.20.43.44.014.0 ]--
r 105         board
--[ 2019.11.07.20.43.44.128.0 ]--
r 105         board[]
--[ 2019.11.07.20.43.44.360.0 ]--
r 105         board[][]
--[ 2019.11.07.20.43.44.496.0 ]--
r 105         board[][] 
--[ 2019.11.07.20.43.44.564.0 ]--
r 105         board[][] =
--[ 2019.11.07.20.43.44.693.0 ]--
r 105         board[][] = 
--[ 2019.11.07.20.43.45.281.0 ]--
r 105         board[][] = b
--[ 2019.11.07.20.43.45.405.0 ]--
r 105         board[][] = be
--[ 2019.11.07.20.43.45.488.0 ]--
r 105         board[][] = beg
--[ 2019.11.07.20.43.45.576.0 ]--
r 105         board[][] = begi
--[ 2019.11.07.20.43.45.602.0 ]--
r 105         board[][] = begin
--[ 2019.11.07.20.43.46.106.0 ]--
r 105         board[][] = begin 
--[ 2019.11.07.20.43.46.173.0 ]--
r 105         board[][] = begin
--[ 2019.11.07.20.43.46.326.0 ]--
r 105         board[][] = begin;
--[ 2019.11.07.20.44.15.523.0 ]--
r 68 board = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.44.16.056.0 ]--
r 68         board = new PFNode[terrain.getN()][terrain.getN()];
--[ 2019.11.07.20.44.20.994.0 ]--
r 105         
--[ 2019.11.07.20.48.49.569.0 ]--
+ 100         
--[ 2019.11.07.20.48.51.607.0 ]--
r 101         C
--[ 2019.11.07.20.48.51.779.0 ]--
r 101         Co
--[ 2019.11.07.20.48.52.117.0 ]--
r 101         Coo
--[ 2019.11.07.20.48.52.145.0 ]--
r 101         Coor
--[ 2019.11.07.20.48.52.175.0 ]--
r 101         Coord
--[ 2019.11.07.20.48.52.429.0 ]--
r 101         Coor
--[ 2019.11.07.20.48.52.536.0 ]--
r 101         Coo
--[ 2019.11.07.20.48.53.485.0 ]--
r 101         Coor
--[ 2019.11.07.20.48.53.636.0 ]--
r 101         Coord
--[ 2019.11.07.20.48.54.030.0 ]--
r 101         Coord 
--[ 2019.11.07.20.48.54.087.0 ]--
r 101         Coord p
--[ 2019.11.07.20.48.54.249.0 ]--
r 101         Coord po
--[ 2019.11.07.20.48.54.388.0 ]--
r 101         Coord poi
--[ 2019.11.07.20.48.54.415.0 ]--
r 101         Coord poin
--[ 2019.11.07.20.48.54.517.0 ]--
r 101         Coord point
--[ 2019.11.07.20.48.54.583.0 ]--
r 101         Coord pointe
--[ 2019.11.07.20.48.54.672.0 ]--
r 101         Coord pointer
--[ 2019.11.07.20.48.54.775.0 ]--
r 101         Coord pointer 
--[ 2019.11.07.20.48.54.922.0 ]--
r 101         Coord pointer =
--[ 2019.11.07.20.48.55.064.0 ]--
r 101         Coord pointer = 
--[ 2019.11.07.20.48.55.794.0 ]--
r 101         Coord pointer =  
--[ 2019.11.07.20.48.55.860.0 ]--
r 101         Coord pointer = 
--[ 2019.11.07.20.48.58.294.0 ]--
r 101         Coord pointer =  
--[ 2019.11.07.20.48.58.354.0 ]--
r 101         Coord pointer = 
--[ 2019.11.07.20.49.03.180.0 ]--
r 101         Coord pointer = s
--[ 2019.11.07.20.49.03.354.0 ]--
r 101         Coord pointer = st
--[ 2019.11.07.20.49.03.408.0 ]--
r 101         Coord pointer = sta
--[ 2019.11.07.20.49.03.496.0 ]--
r 101         Coord pointer = star
--[ 2019.11.07.20.49.03.663.0 ]--
r 101         Coord pointer = start
--[ 2019.11.07.20.49.03.727.0 ]--
r 101         Coord pointer = start;
--[ 2019.11.07.20.49.06.516.0 ]--
r 101         Coord pointer = start; 
--[ 2019.11.07.20.49.06.590.0 ]--
r 101         Coord pointer = start;
--[ 2019.11.07.20.49.08.005.0 ]--
+ 104         
--[ 2019.11.07.20.49.08.100.0 ]--
+ 104         
--[ 2019.11.07.20.49.08.206.0 ]--
+ 104         
--[ 2019.11.07.20.49.12.325.0 ]--
- 104
--[ 2019.11.07.20.49.13.022.0 ]--
+ 104         
--[ 2019.11.07.20.49.13.250.0 ]--
+ 104         
--[ 2019.11.07.20.49.15.654.0 ]--
r 105         p
--[ 2019.11.07.20.49.16.254.0 ]--
r 105         
--[ 2019.11.07.20.49.18.223.0 ]--
r 105         b
--[ 2019.11.07.20.49.18.299.0 ]--
r 105         bo
--[ 2019.11.07.20.49.18.362.0 ]--
r 105         boa
--[ 2019.11.07.20.49.18.432.0 ]--
r 105         boar
--[ 2019.11.07.20.49.18.582.0 ]--
r 105         board
--[ 2019.11.07.20.49.18.697.0 ]--
r 105         board[]
--[ 2019.11.07.20.49.19.773.0 ]--
r 105         board[p]
--[ 2019.11.07.20.49.19.936.0 ]--
r 105         board[po]
--[ 2019.11.07.20.49.20.068.0 ]--
r 105         board[poi]
--[ 2019.11.07.20.49.20.110.0 ]--
r 105         board[poin]
--[ 2019.11.07.20.49.20.194.0 ]--
r 105         board[point]
--[ 2019.11.07.20.49.20.246.0 ]--
r 105         board[pointe]
--[ 2019.11.07.20.49.20.341.0 ]--
r 105         board[pointer]
--[ 2019.11.07.20.49.20.410.0 ]--
r 105         board[pointer.]
--[ 2019.11.07.20.49.20.593.0 ]--
r 105         board[pointer.g]
--[ 2019.11.07.20.49.20.645.0 ]--
r 105         board[pointer.ge]
--[ 2019.11.07.20.49.20.759.0 ]--
r 105         board[pointer.get]
--[ 2019.11.07.20.49.23.054.0 ]--
r 105         board[pointer.getJ]
--[ 2019.11.07.20.49.23.412.0 ]--
r 105         board[pointer.getJ()]
--[ 2019.11.07.20.49.25.250.0 ]--
r 105         board[pointer.getJ()][]
--[ 2019.11.07.20.49.25.465.0 ]--
r 105         board[pointer.getJ()][p]
--[ 2019.11.07.20.49.25.656.0 ]--
r 105         board[pointer.getJ()][po]
--[ 2019.11.07.20.49.26.309.0 ]--
r 105         board[pointer.getJ()][pointer]
--[ 2019.11.07.20.49.26.505.0 ]--
r 105         board[pointer.getJ()][pointer.]
--[ 2019.11.07.20.49.26.693.0 ]--
r 105         board[pointer.getJ()][pointer.g]
--[ 2019.11.07.20.49.26.754.0 ]--
r 105         board[pointer.getJ()][pointer.ge]
--[ 2019.11.07.20.49.26.827.0 ]--
r 105         board[pointer.getJ()][pointer.get]
--[ 2019.11.07.20.49.27.184.0 ]--
r 105         board[pointer.getJ()][pointer.getI]
--[ 2019.11.07.20.49.27.389.0 ]--
r 105         board[pointer.getJ()][pointer.getI()]
--[ 2019.11.07.20.49.28.641.0 ]--
r 105         board[pointer.getJ()][pointer.getI()]=
--[ 2019.11.07.20.49.28.902.0 ]--
r 105         board[pointer.getJ()][pointer.getI()]
--[ 2019.11.07.20.49.29.065.0 ]--
r 105         board[pointer.getJ()][pointer.getI()] 
--[ 2019.11.07.20.49.29.222.0 ]--
r 105         board[pointer.getJ()][pointer.getI()] =
--[ 2019.11.07.20.49.29.575.0 ]--
r 105         board[pointer.getJ()][pointer.getI()] = 
--[ 2019.11.07.20.49.32.878.0 ]--
r 105         board[pointer.getJ()][pointer.getI()] =  
--[ 2019.11.07.20.49.32.965.0 ]--
r 105         board[pointer.getJ()][pointer.getI()] = 
--[ 2019.11.07.20.49.33.303.0 ]--
r 105         board[pointer.getJ()][pointer.getI()] =  
--[ 2019.11.07.20.49.33.409.0 ]--
r 105         board[pointer.getJ()][pointer.getI()] = 
--[ 2019.11.07.20.49.33.471.0 ]--
r 105         board[pointer.getJ()][pointer.getI()] = b
--[ 2019.11.07.20.49.33.664.0 ]--
r 105         board[pointer.getJ()][pointer.getI()] = be
--[ 2019.11.07.20.49.33.883.0 ]--
r 105         board[pointer.getJ()][pointer.getI()] = beg
--[ 2019.11.07.20.49.33.985.0 ]--
r 105         board[pointer.getJ()][pointer.getI()] = begi
--[ 2019.11.07.20.49.34.016.0 ]--
r 105         board[pointer.getJ()][pointer.getI()] = begin
--[ 2019.11.07.20.49.34.351.0 ]--
r 105         board[pointer.getJ()][pointer.getI()] = begin;
--[ 2019.11.07.20.49.35.613.0 ]--
r 105         board[pointer.getJ()][pointer.getI()] = begin; 
--[ 2019.11.07.20.49.35.690.0 ]--
r 105         board[pointer.getJ()][pointer.getI()] = begin;
--[ 2019.11.07.20.49.38.726.0 ]--
+ 100         
--[ 2019.11.07.20.49.39.153.0 ]--
r 101         /
--[ 2019.11.07.20.49.39.242.0 ]--
r 101         //
--[ 2019.11.07.20.49.39.713.0 ]--
r 101         //C
--[ 2019.11.07.20.49.39.890.0 ]--
r 101         //Cr
--[ 2019.11.07.20.49.40.009.0 ]--
r 101         //Cre
--[ 2019.11.07.20.49.40.190.0 ]--
r 101         //Crea
--[ 2019.11.07.20.49.40.303.0 ]--
r 101         //Creat
--[ 2019.11.07.20.49.40.381.0 ]--
r 101         //Create
--[ 2019.11.07.20.49.40.444.0 ]--
r 101         //Create 
--[ 2019.11.07.20.49.40.521.0 ]--
r 101         //Create a
--[ 2019.11.07.20.49.40.606.0 ]--
r 101         //Create a 
--[ 2019.11.07.20.49.40.675.0 ]--
r 101         //Create a p
--[ 2019.11.07.20.49.40.817.0 ]--
r 101         //Create a po
--[ 2019.11.07.20.49.40.942.0 ]--
r 101         //Create a poi
--[ 2019.11.07.20.49.41.001.0 ]--
r 101         //Create a poin
--[ 2019.11.07.20.49.41.049.0 ]--
r 101         //Create a point
--[ 2019.11.07.20.49.41.125.0 ]--
r 101         //Create a pointe
--[ 2019.11.07.20.49.41.221.0 ]--
r 101         //Create a pointer
--[ 2019.11.07.20.49.41.303.0 ]--
r 101         //Create a pointer 
--[ 2019.11.07.20.49.41.398.0 ]--
r 101         //Create a pointer t
--[ 2019.11.07.20.49.41.447.0 ]--
r 101         //Create a pointer th
--[ 2019.11.07.20.49.41.502.0 ]--
r 101         //Create a pointer tha
--[ 2019.11.07.20.49.41.590.0 ]--
r 101         //Create a pointer that
--[ 2019.11.07.20.49.41.666.0 ]--
r 101         //Create a pointer that 
--[ 2019.11.07.20.49.41.704.0 ]--
r 101         //Create a pointer that t
--[ 2019.11.07.20.49.41.758.0 ]--
r 101         //Create a pointer that te
--[ 2019.11.07.20.49.41.854.0 ]--
r 101         //Create a pointer that tel
--[ 2019.11.07.20.49.41.978.0 ]--
r 101         //Create a pointer that tell
--[ 2019.11.07.20.49.42.047.0 ]--
r 101         //Create a pointer that tells
--[ 2019.11.07.20.49.42.146.0 ]--
r 101         //Create a pointer that tells 
--[ 2019.11.07.20.49.42.544.0 ]--
r 101         //Create a pointer that 
--[ 2019.11.07.20.49.43.933.0 ]--
r 101         //Create a pointer that s
--[ 2019.11.07.20.49.44.408.0 ]--
r 101         //Create a pointer that 
--[ 2019.11.07.20.49.44.601.0 ]--
r 101         //Create a pointer that f
--[ 2019.11.07.20.49.44.992.0 ]--
r 101         //Create a pointer that 
--[ 2019.11.07.20.49.45.083.0 ]--
r 101         //Create a pointer that b
--[ 2019.11.07.20.49.45.238.0 ]--
r 101         //Create a pointer that be
--[ 2019.11.07.20.49.45.334.0 ]--
r 101         //Create a pointer that beg
--[ 2019.11.07.20.49.45.422.0 ]--
r 101         //Create a pointer that begi
--[ 2019.11.07.20.49.45.446.0 ]--
r 101         //Create a pointer that begin
--[ 2019.11.07.20.49.45.527.0 ]--
r 101         //Create a pointer that begins
--[ 2019.11.07.20.49.45.692.0 ]--
r 101         //Create a pointer that begins 
--[ 2019.11.07.20.49.45.881.0 ]--
r 101         //Create a pointer that begins a
--[ 2019.11.07.20.49.46.109.0 ]--
r 101         //Create a pointer that begins at
--[ 2019.11.07.20.49.46.272.0 ]--
r 101         //Create a pointer that begins at 
--[ 2019.11.07.20.49.46.358.0 ]--
r 101         //Create a pointer that begins at s
--[ 2019.11.07.20.49.46.504.0 ]--
r 101         //Create a pointer that begins at st
--[ 2019.11.07.20.49.46.565.0 ]--
r 101         //Create a pointer that begins at sta
--[ 2019.11.07.20.49.46.670.0 ]--
r 101         //Create a pointer that begins at star
--[ 2019.11.07.20.49.46.840.0 ]--
r 101         //Create a pointer that begins at start
--[ 2019.11.07.20.49.47.147.0 ]--
r 101         //Create a pointer that begins at 
--[ 2019.11.07.20.49.47.407.0 ]--
r 101         //Create a pointer that begins 
--[ 2019.11.07.20.49.47.506.0 ]--
r 101         //Create a pointer that 
--[ 2019.11.07.20.49.47.636.0 ]--
r 101         //Create a pointer 
--[ 2019.11.07.20.49.48.147.0 ]--
r 101         //Create a pointer t
--[ 2019.11.07.20.49.48.215.0 ]--
r 101         //Create a pointer th
--[ 2019.11.07.20.49.48.256.0 ]--
r 101         //Create a pointer tha
--[ 2019.11.07.20.49.48.338.0 ]--
r 101         //Create a pointer that
--[ 2019.11.07.20.49.48.581.0 ]--
r 101         //Create a pointer thatw
--[ 2019.11.07.20.49.48.864.0 ]--
r 101         //Create a pointer that
--[ 2019.11.07.20.49.48.939.0 ]--
r 101         //Create a pointer that 
--[ 2019.11.07.20.49.48.976.0 ]--
r 101         //Create a pointer that w
--[ 2019.11.07.20.49.49.073.0 ]--
r 101         //Create a pointer that wi
--[ 2019.11.07.20.49.49.283.0 ]--
r 101         //Create a pointer that wil
--[ 2019.11.07.20.49.49.410.0 ]--
r 101         //Create a pointer that will
--[ 2019.11.07.20.49.49.585.0 ]--
r 101         //Create a pointer that will 
--[ 2019.11.07.20.49.50.514.0 ]--
r 101         //Create a pointer that will s
--[ 2019.11.07.20.49.51.782.0 ]--
r 101         //Create a pointer that will 
--[ 2019.11.07.20.49.52.025.0 ]--
r 101         //Create a pointer that will t
--[ 2019.11.07.20.49.52.101.0 ]--
r 101         //Create a pointer that will te
--[ 2019.11.07.20.49.52.322.0 ]--
r 101         //Create a pointer that will t
--[ 2019.11.07.20.49.52.454.0 ]--
r 101         //Create a pointer that will 
--[ 2019.11.07.20.49.52.816.0 ]--
r 101         //Create a pointer that will  
--[ 2019.11.07.20.49.52.869.0 ]--
r 101         //Create a pointer that will 
--[ 2019.11.07.20.49.53.943.0 ]--
r 101         //Create a pointer that will i
--[ 2019.11.07.20.49.53.985.0 ]--
r 101         //Create a pointer that will in
--[ 2019.11.07.20.49.54.814.0 ]--
r 101         //Create a pointer that will ini
--[ 2019.11.07.20.49.54.921.0 ]--
r 101         //Create a pointer that will init
--[ 2019.11.07.20.49.54.976.0 ]--
r 101         //Create a pointer that will initi
--[ 2019.11.07.20.49.55.072.0 ]--
r 101         //Create a pointer that will initia
--[ 2019.11.07.20.49.55.149.0 ]--
r 101         //Create a pointer that will initial
--[ 2019.11.07.20.49.55.238.0 ]--
r 101         //Create a pointer that will initiall
--[ 2019.11.07.20.49.55.331.0 ]--
r 101         //Create a pointer that will initially
--[ 2019.11.07.20.49.55.428.0 ]--
r 101         //Create a pointer that will initially 
--[ 2019.11.07.20.49.55.777.0 ]--
r 101         //Create a pointer that will initially b
--[ 2019.11.07.20.49.56.027.0 ]--
r 101         //Create a pointer that will initially be
--[ 2019.11.07.20.49.56.150.0 ]--
r 101         //Create a pointer that will initially beg
--[ 2019.11.07.20.49.56.265.0 ]--
r 101         //Create a pointer that will initially begi
--[ 2019.11.07.20.49.56.304.0 ]--
r 101         //Create a pointer that will initially begin
--[ 2019.11.07.20.49.56.454.0 ]--
r 101         //Create a pointer that will initially begin a
--[ 2019.11.07.20.49.56.743.0 ]--
r 101         //Create a pointer that will initially begin at
--[ 2019.11.07.20.49.56.921.0 ]--
r 101         //Create a pointer that will initially begin at 
--[ 2019.11.07.20.49.56.994.0 ]--
r 101         //Create a pointer that will initially begin at s
--[ 2019.11.07.20.49.57.237.0 ]--
r 101         //Create a pointer that will initially begin at sa
--[ 2019.11.07.20.49.57.480.0 ]--
r 101         //Create a pointer that will initially begin at s
--[ 2019.11.07.20.49.57.550.0 ]--
r 101         //Create a pointer that will initially begin at st
--[ 2019.11.07.20.49.57.625.0 ]--
r 101         //Create a pointer that will initially begin at sta
--[ 2019.11.07.20.49.57.730.0 ]--
r 101         //Create a pointer that will initially begin at star
--[ 2019.11.07.20.49.57.909.0 ]--
r 101         //Create a pointer that will initially begin at start
--[ 2019.11.07.20.49.58.112.0 ]--
r 101         //Create a pointer that will initially begin at 
--[ 2019.11.07.20.49.58.364.0 ]--
r 101         //Create a pointer that will initially begin at t
--[ 2019.11.07.20.49.58.448.0 ]--
r 101         //Create a pointer that will initially begin at th
--[ 2019.11.07.20.49.58.504.0 ]--
r 101         //Create a pointer that will initially begin at the
--[ 2019.11.07.20.49.58.616.0 ]--
r 101         //Create a pointer that will initially begin at the 
--[ 2019.11.07.20.49.58.649.0 ]--
r 101         //Create a pointer that will initially begin at the s
--[ 2019.11.07.20.49.58.758.0 ]--
r 101         //Create a pointer that will initially begin at the st
--[ 2019.11.07.20.49.58.816.0 ]--
r 101         //Create a pointer that will initially begin at the sta
--[ 2019.11.07.20.49.58.945.0 ]--
r 101         //Create a pointer that will initially begin at the star
--[ 2019.11.07.20.49.59.091.0 ]--
r 101         //Create a pointer that will initially begin at the start
--[ 2019.11.07.20.49.59.145.0 ]--
r 101         //Create a pointer that will initially begin at the start 
--[ 2019.11.07.20.49.59.226.0 ]--
r 101         //Create a pointer that will initially begin at the start n
--[ 2019.11.07.20.49.59.278.0 ]--
r 101         //Create a pointer that will initially begin at the start no
--[ 2019.11.07.20.49.59.309.0 ]--
r 101         //Create a pointer that will initially begin at the start nod
--[ 2019.11.07.20.49.59.352.0 ]--
r 101         //Create a pointer that will initially begin at the start node
--[ 2019.11.07.20.49.59.477.0 ]--
r 101         //Create a pointer that will initially begin at the start node,
--[ 2019.11.07.20.49.59.652.0 ]--
r 101         //Create a pointer that will initially begin at the start node, 
--[ 2019.11.07.20.49.59.694.0 ]--
r 101         //Create a pointer that will initially begin at the start node, a
--[ 2019.11.07.20.49.59.819.0 ]--
r 101         //Create a pointer that will initially begin at the start node, an
--[ 2019.11.07.20.49.59.848.0 ]--
r 101         //Create a pointer that will initially begin at the start node, and
--[ 2019.11.07.20.49.59.998.0 ]--
r 101         //Create a pointer that will initially begin at the start node, and 
--[ 2019.11.07.20.50.00.486.0 ]--
r 101         //Create a pointer that will initially begin at the start node, 
--[ 2019.11.07.20.50.00.753.0 ]--
r 101         //Create a pointer that will initially begin at the start node,
--[ 2019.11.07.20.50.00.997.0 ]--
r 101         //Create a pointer that will initially begin at the start node
--[ 2019.11.07.20.50.01.214.0 ]--
r 101         //Create a pointer that will initially begin at the start node.
--[ 2019.11.07.20.50.01.421.0 ]--
r 101         //Create a pointer that will initially begin at the start node. 
--[ 2019.11.07.20.50.01.519.0 ]--
r 101         //Create a pointer that will initially begin at the start node. k
--[ 2019.11.07.20.50.01.588.0 ]--
r 101         //Create a pointer that will initially begin at the start node. ke
--[ 2019.11.07.20.50.01.735.0 ]--
r 101         //Create a pointer that will initially begin at the start node. kee
--[ 2019.11.07.20.50.01.792.0 ]--
r 101         //Create a pointer that will initially begin at the start node. keep
--[ 2019.11.07.20.50.02.058.0 ]--
r 101         //Create a pointer that will initially begin at the start node. kee
--[ 2019.11.07.20.50.02.184.0 ]--
r 101         //Create a pointer that will initially begin at the start node. ke
--[ 2019.11.07.20.50.02.273.0 ]--
r 101         //Create a pointer that will initially begin at the start node. k
--[ 2019.11.07.20.50.02.609.0 ]--
r 101         //Create a pointer that will initially begin at the start node. 
--[ 2019.11.07.20.50.02.815.0 ]--
r 101         //Create a pointer that will initially begin at the start node. K
--[ 2019.11.07.20.50.02.920.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Ke
--[ 2019.11.07.20.50.03.031.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Kee
--[ 2019.11.07.20.50.03.107.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keep
--[ 2019.11.07.20.50.03.199.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps
--[ 2019.11.07.20.50.03.570.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps 
--[ 2019.11.07.20.50.03.737.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps t
--[ 2019.11.07.20.50.03.847.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps tr
--[ 2019.11.07.20.50.03.920.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps tra
--[ 2019.11.07.20.50.04.032.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps trac
--[ 2019.11.07.20.50.04.157.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track
--[ 2019.11.07.20.50.04.239.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track 
--[ 2019.11.07.20.50.04.368.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track o
--[ 2019.11.07.20.50.04.420.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of
--[ 2019.11.07.20.50.04.458.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of 
--[ 2019.11.07.20.50.04.510.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of w
--[ 2019.11.07.20.50.04.553.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of wh
--[ 2019.11.07.20.50.04.591.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of whi
--[ 2019.11.07.20.50.04.665.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of whic
--[ 2019.11.07.20.50.04.751.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which
--[ 2019.11.07.20.50.04.835.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which 
--[ 2019.11.07.20.50.04.942.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which n
--[ 2019.11.07.20.50.05.005.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which no
--[ 2019.11.07.20.50.05.245.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which nod
--[ 2019.11.07.20.50.05.292.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node
--[ 2019.11.07.20.50.05.367.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node 
--[ 2019.11.07.20.50.05.440.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node y
--[ 2019.11.07.20.50.05.498.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node yo
--[ 2019.11.07.20.50.05.521.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node you
--[ 2019.11.07.20.50.05.677.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node you'
--[ 2019.11.07.20.50.05.725.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node you'r
--[ 2019.11.07.20.50.05.790.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node you're
--[ 2019.11.07.20.50.05.851.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node you're 
--[ 2019.11.07.20.50.06.027.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node you're c
--[ 2019.11.07.20.50.06.101.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node you're cu
--[ 2019.11.07.20.50.06.198.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node you're cur
--[ 2019.11.07.20.50.06.407.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node you're curr
--[ 2019.11.07.20.50.06.437.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node you're curre
--[ 2019.11.07.20.50.06.506.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node you're curren
--[ 2019.11.07.20.50.06.571.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node you're current
--[ 2019.11.07.20.50.06.688.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node you're currentl
--[ 2019.11.07.20.50.06.746.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node you're currently
--[ 2019.11.07.20.50.06.768.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node you're currently 
--[ 2019.11.07.20.50.06.832.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node you're currently o
--[ 2019.11.07.20.50.06.876.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node you're currently on
--[ 2019.11.07.20.50.07.063.0 ]--
r 101         //Create a pointer that will initially begin at the start node. Keeps track of which node you're currently on.
--[ 2019.11.07.20.50.14.364.0 ]--
+ 105         
--[ 2019.11.07.20.50.14.644.0 ]--
- 105
--[ 2019.11.07.20.50.15.998.0 ]--
+ 105         
--[ 2019.11.07.20.50.17.294.0 ]--
r 106         M
--[ 2019.11.07.20.50.17.922.0 ]--
r 106         M 
--[ 2019.11.07.20.50.18.172.0 ]--
r 106         M
--[ 2019.11.07.20.50.18.516.0 ]--
r 106         
--[ 2019.11.07.20.50.20.709.0 ]--
- 108
--[ 2019.11.07.20.50.20.811.0 ]--
- 108
--[ 2019.11.07.20.50.21.044.0 ]--
- 108
--[ 2019.11.07.20.50.23.878.0 ]--
+ 105         
--[ 2019.11.07.20.50.37.086.0 ]--
- 105
--[ 2019.11.07.20.54.30.813.0 ]--
r 67 
r 100 
r 105 
r 109 
r 110 
r 111 
--[ 2019.11.07.20.54.32.103.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.20.54.49.925.0 ]--
+ 111         
--[ 2019.11.07.20.54.50.070.0 ]--
+ 111         
--[ 2019.11.07.20.54.52.078.0 ]--
r 112          
--[ 2019.11.07.20.54.52.160.0 ]--
r 112         
--[ 2019.11.07.20.54.58.509.0 ]--
r 112         s
--[ 2019.11.07.20.54.58.986.0 ]--
r 112         s 
--[ 2019.11.07.20.54.59.084.0 ]--
r 112         s =
--[ 2019.11.07.20.54.59.375.0 ]--
r 112         s = 
--[ 2019.11.07.20.54.59.506.0 ]--
r 112         s = n
--[ 2019.11.07.20.54.59.619.0 ]--
r 112         s = ne
--[ 2019.11.07.20.54.59.771.0 ]--
r 112         s = new
--[ 2019.11.07.20.55.00.862.0 ]--
r 112         s = new 
--[ 2019.11.07.20.55.01.060.0 ]--
r 112         s = new S
--[ 2019.11.07.20.55.01.190.0 ]--
r 112         s = new St
--[ 2019.11.07.20.55.01.278.0 ]--
r 112         s = new Sta
--[ 2019.11.07.20.55.01.382.0 ]--
r 112         s = new Stac
--[ 2019.11.07.20.55.01.514.0 ]--
r 112         s = new Stack
--[ 2019.11.07.20.55.01.693.0 ]--
r 112         s = new Stack<>
--[ 2019.11.07.20.55.01.934.0 ]--
r 112         s = new Stack<C>
--[ 2019.11.07.20.55.02.202.0 ]--
r 112         s = new Stack<Co>
--[ 2019.11.07.20.55.02.338.0 ]--
r 112         s = new Stack<Coo>
--[ 2019.11.07.20.55.02.408.0 ]--
r 112         s = new Stack<Coor>
--[ 2019.11.07.20.55.02.554.0 ]--
r 112         s = new Stack<Coord>
--[ 2019.11.07.20.55.06.169.0 ]--
r 112         s = new Stack<>
--[ 2019.11.07.20.55.06.746.0 ]--
r 112         s = new Stack<>''
--[ 2019.11.07.20.55.07.522.0 ]--
r 112         s = new Stack<>
--[ 2019.11.07.20.55.07.658.0 ]--
r 112         s = new Stack<>;
--[ 2019.11.07.20.55.07.930.0 ]--
+ 113         
--[ 2019.11.07.20.55.24.667.0 ]--
r 112         s 
--[ 2019.11.07.20.55.24.777.0 ]--
r 112         s
--[ 2019.11.07.20.55.26.030.0 ]--
r 112         s 
--[ 2019.11.07.20.55.26.091.0 ]--
r 112         s
--[ 2019.11.07.20.55.26.201.0 ]--
r 112         
--[ 2019.11.07.20.55.29.029.0 ]--
r 112         S
--[ 2019.11.07.20.55.29.235.0 ]--
r 112         St
--[ 2019.11.07.20.55.29.326.0 ]--
r 112         Sta
--[ 2019.11.07.20.55.29.602.0 ]--
r 112         Stack
--[ 2019.11.07.20.55.29.699.0 ]--
r 112         Stack<>
--[ 2019.11.07.20.55.30.201.0 ]--
r 112         Stack<C>
--[ 2019.11.07.20.55.30.278.0 ]--
r 112         Stack<Co>
--[ 2019.11.07.20.55.30.382.0 ]--
r 112         Stack<Coo>
--[ 2019.11.07.20.55.30.478.0 ]--
r 112         Stack<Coor>
--[ 2019.11.07.20.55.30.602.0 ]--
r 112         Stack<Coord>
--[ 2019.11.07.20.55.31.033.0 ]--
r 112         Stack<Coord)>
--[ 2019.11.07.20.55.31.585.0 ]--
r 112         Stack<Coord>
--[ 2019.11.07.20.55.32.096.0 ]--
r 112         Stack<Coord> 
--[ 2019.11.07.20.55.32.153.0 ]--
r 112         Stack<Coord> s
--[ 2019.11.07.20.55.32.363.0 ]--
r 112         Stack<Coord> s 
--[ 2019.11.07.20.55.33.902.0 ]--
r 112         Stack<Coord> s =
--[ 2019.11.07.20.55.33.984.0 ]--
r 112         Stack<Coord> s = 
--[ 2019.11.07.20.55.34.092.0 ]--
r 112         Stack<Coord> s = n
--[ 2019.11.07.20.55.34.170.0 ]--
r 112         Stack<Coord> s = ne
--[ 2019.11.07.20.55.34.311.0 ]--
r 112         Stack<Coord> s = new
--[ 2019.11.07.20.55.34.450.0 ]--
r 112         Stack<Coord> s = new 
--[ 2019.11.07.20.55.34.743.0 ]--
r 112         Stack<Coord> s = new S
--[ 2019.11.07.20.55.34.998.0 ]--
r 112         Stack<Coord> s = new St
--[ 2019.11.07.20.55.35.051.0 ]--
r 112         Stack<Coord> s = new Sta
--[ 2019.11.07.20.55.35.191.0 ]--
r 112         Stack<Coord> s = new Stac
--[ 2019.11.07.20.55.35.338.0 ]--
r 112         Stack<Coord> s = new Stack
--[ 2019.11.07.20.55.35.852.0 ]--
r 112         Stack<Coord> s = new Stack<>
--[ 2019.11.07.20.55.36.182.0 ]--
r 112         Stack<Coord> s = new Stack<>)
--[ 2019.11.07.20.55.36.512.0 ]--
r 112         Stack<Coord> s = new Stack<>
--[ 2019.11.07.20.55.36.758.0 ]--
r 112         Stack<Coord> s = new Stack<
--[ 2019.11.07.20.55.36.863.0 ]--
r 112         Stack<Coord> s = new Stack
--[ 2019.11.07.20.55.36.942.0 ]--
r 112         Stack<Coord> s = new 
--[ 2019.11.07.20.55.37.064.0 ]--
r 112         Stack<Coord> s = 
--[ 2019.11.07.20.55.37.150.0 ]--
r 112         Stack<Coord> s 
--[ 2019.11.07.20.55.37.288.0 ]--
r 112         Stack<Coord> 
--[ 2019.11.07.20.55.37.363.0 ]--
r 112         Stack<Coord
--[ 2019.11.07.20.55.37.512.0 ]--
r 112         Stack<
--[ 2019.11.07.20.55.37.777.0 ]--
r 112         Stack
--[ 2019.11.07.20.55.38.214.0 ]--
r 112         
--[ 2019.11.07.20.55.38.562.0 ]--
r 112         s
--[ 2019.11.07.20.55.38.823.0 ]--
r 112         s 
--[ 2019.11.07.20.55.38.990.0 ]--
r 112         s =
--[ 2019.11.07.20.55.39.134.0 ]--
r 112         s = 
--[ 2019.11.07.20.55.39.206.0 ]--
r 112         s = n
--[ 2019.11.07.20.55.39.412.0 ]--
r 112         s = ne
--[ 2019.11.07.20.55.39.584.0 ]--
r 112         s = new
--[ 2019.11.07.20.55.40.364.0 ]--
r 112         s = new 
--[ 2019.11.07.20.55.40.607.0 ]--
r 112         s = new  
--[ 2019.11.07.20.55.40.912.0 ]--
r 112         s = new 
--[ 2019.11.07.20.55.41.522.0 ]--
r 112         s = new S
--[ 2019.11.07.20.55.41.646.0 ]--
r 112         s = new St
--[ 2019.11.07.20.55.41.703.0 ]--
r 112         s = new Sta
--[ 2019.11.07.20.55.41.822.0 ]--
r 112         s = new Stac
--[ 2019.11.07.20.55.42.454.0 ]--
r 112         s = new Stack
--[ 2019.11.07.20.55.42.660.0 ]--
r 112         s = new Stack<>
--[ 2019.11.07.20.55.43.106.0 ]--
r 112         s = new Stack<>)
--[ 2019.11.07.20.55.43.384.0 ]--
r 112         s = new Stack<>
--[ 2019.11.07.20.55.43.511.0 ]--
r 112         s = new Stack<>()
--[ 2019.11.07.20.55.43.769.0 ]--
r 112         s = new Stack<>();
--[ 2019.11.07.20.55.45.450.0 ]--
r 112         s = new Stack<>(); 
--[ 2019.11.07.20.55.45.489.0 ]--
r 112         s = new Stack<>();
--[ 2019.11.07.20.55.45.670.0 ]--
+ 113         
--[ 2019.11.07.20.55.45.849.0 ]--
+ 113         
--[ 2019.11.07.20.55.46.122.0 ]--
r 114         s
--[ 2019.11.07.20.55.46.208.0 ]--
r 114         s.
--[ 2019.11.07.20.55.47.021.0 ]--
r 114         s.u
--[ 2019.11.07.20.55.47.245.0 ]--
r 114         s.
--[ 2019.11.07.20.55.48.268.0 ]--
r 114         s.p
--[ 2019.11.07.20.55.48.345.0 ]--
r 114         s.pu
--[ 2019.11.07.20.55.48.446.0 ]--
r 114         s.pus
--[ 2019.11.07.20.55.48.560.0 ]--
r 114         s.push
--[ 2019.11.07.20.55.48.741.0 ]--
r 114         s.push()
--[ 2019.11.07.20.55.48.990.0 ]--
r 114         s.push(b)
--[ 2019.11.07.20.55.49.121.0 ]--
r 114         s.push(be)
--[ 2019.11.07.20.55.49.271.0 ]--
r 114         s.push(beg)
--[ 2019.11.07.20.55.49.330.0 ]--
r 114         s.push(begi)
--[ 2019.11.07.20.55.49.348.0 ]--
r 114         s.push(begin)
--[ 2019.11.07.20.55.50.453.0 ]--
r 114         s.push(begin
--[ 2019.11.07.20.55.50.773.0 ]--
r 114         s.push(begi
--[ 2019.11.07.20.55.50.895.0 ]--
r 114         s.push(beg
--[ 2019.11.07.20.55.51.000.0 ]--
r 114         s.push(be
--[ 2019.11.07.20.55.51.228.0 ]--
r 114         s.push(b
--[ 2019.11.07.20.55.51.352.0 ]--
r 114         s.push(
--[ 2019.11.07.20.55.51.447.0 ]--
r 114         s.push(s
--[ 2019.11.07.20.55.51.520.0 ]--
r 114         s.push(st
--[ 2019.11.07.20.55.51.595.0 ]--
r 114         s.push(sta
--[ 2019.11.07.20.55.51.700.0 ]--
r 114         s.push(star
--[ 2019.11.07.20.55.51.862.0 ]--
r 114         s.push(start
--[ 2019.11.07.20.55.52.004.0 ]--
r 114         s.push(start()
--[ 2019.11.07.20.55.52.193.0 ]--
+ 114         s.push(start(
r 115         )
--[ 2019.11.07.20.55.52.205.0 ]--
r 115                 )
--[ 2019.11.07.20.55.52.223.0 ]--
+ 115                 
--[ 2019.11.07.20.55.52.693.0 ]--
- 115
--[ 2019.11.07.20.55.53.126.0 ]--
r 114         s.push(start
--[ 2019.11.07.20.55.53.922.0 ]--
r 115                 
--[ 2019.11.07.20.55.54.305.0 ]--
- 115
--[ 2019.11.07.20.55.54.830.0 ]--
r 114         s.push(start)
--[ 2019.11.07.20.55.55.361.0 ]--
r 114         s.push(start);
--[ 2019.11.07.20.55.55.509.0 ]--
+ 115         
--[ 2019.11.07.20.55.55.839.0 ]--
r 115         s
--[ 2019.11.07.20.55.55.949.0 ]--
r 115         s.
--[ 2019.11.07.20.55.56.401.0 ]--
r 115         s.p
--[ 2019.11.07.20.55.56.475.0 ]--
r 115         s.pu
--[ 2019.11.07.20.55.56.528.0 ]--
r 115         s.put
--[ 2019.11.07.20.55.56.648.0 ]--
r 115         s.puth
--[ 2019.11.07.20.55.56.822.0 ]--
r 115         s.puth()
--[ 2019.11.07.20.55.57.271.0 ]--
r 115         s.puth
--[ 2019.11.07.20.55.57.358.0 ]--
r 115         s.put
--[ 2019.11.07.20.55.57.504.0 ]--
r 115         s.pu
--[ 2019.11.07.20.55.57.680.0 ]--
r 115         s.pus
--[ 2019.11.07.20.55.57.814.0 ]--
r 115         s.push
--[ 2019.11.07.20.55.58.326.0 ]--
r 115         s.push()
--[ 2019.11.07.20.55.58.571.0 ]--
r 115         s.push(e)
--[ 2019.11.07.20.55.58.647.0 ]--
r 115         s.push(en)
--[ 2019.11.07.20.55.58.738.0 ]--
r 115         s.push(end)
--[ 2019.11.07.20.55.59.240.0 ]--
r 115         s.push(end);
--[ 2019.11.07.20.55.59.940.0 ]--
+ 113         
--[ 2019.11.07.20.56.00.065.0 ]--
+ 113         
--[ 2019.11.07.20.56.00.972.0 ]--
- 113
--[ 2019.11.07.20.56.01.136.0 ]--
- 113
--[ 2019.11.07.20.56.01.620.0 ]--
- 113
--[ 2019.11.07.20.56.03.419.0 ]--
r 111         /
--[ 2019.11.07.20.56.03.509.0 ]--
r 111         //
--[ 2019.11.07.20.56.03.905.0 ]--
r 111         //C
--[ 2019.11.07.20.56.04.049.0 ]--
r 111         //Cu
--[ 2019.11.07.20.56.04.154.0 ]--
r 111         //Cur
--[ 2019.11.07.20.56.04.256.0 ]--
r 111         //Curr
--[ 2019.11.07.20.56.04.319.0 ]--
r 111         //Curre
--[ 2019.11.07.20.56.04.438.0 ]--
r 111         //Curren
--[ 2019.11.07.20.56.04.541.0 ]--
r 111         //Current
--[ 2019.11.07.20.56.06.365.0 ]--
r 111         //
--[ 2019.11.07.20.56.07.727.0 ]--
r 111         //T
--[ 2019.11.07.20.56.07.852.0 ]--
r 111         //Te
--[ 2019.11.07.20.56.07.936.0 ]--
r 111         //Tem
--[ 2019.11.07.20.56.08.080.0 ]--
r 111         //Temp
--[ 2019.11.07.20.56.08.209.0 ]--
r 111         //Tempo
--[ 2019.11.07.20.56.08.261.0 ]--
r 111         //Tempor
--[ 2019.11.07.20.56.08.861.0 ]--
r 111         //Tempora
--[ 2019.11.07.20.56.09.045.0 ]--
r 111         //Temporar
--[ 2019.11.07.20.56.09.206.0 ]--
r 111         //Temporary
--[ 2019.11.07.20.56.09.487.0 ]--
r 111         //Temporary 
--[ 2019.11.07.20.56.09.874.0 ]--
r 111         //Temporary s
--[ 2019.11.07.20.56.10.017.0 ]--
r 111         //Temporary st
--[ 2019.11.07.20.56.10.118.0 ]--
r 111         //Temporary sta
--[ 2019.11.07.20.56.10.225.0 ]--
r 111         //Temporary stac
--[ 2019.11.07.20.56.10.345.0 ]--
r 111         //Temporary stack
--[ 2019.11.07.20.56.10.560.0 ]--
r 111         //Temporary stack 
--[ 2019.11.07.20.56.11.798.0 ]--
r 111         //Temporary stack j
--[ 2019.11.07.20.56.11.862.0 ]--
r 111         //Temporary stack ju
--[ 2019.11.07.20.56.11.916.0 ]--
r 111         //Temporary stack jus
--[ 2019.11.07.20.56.11.979.0 ]--
r 111         //Temporary stack just
--[ 2019.11.07.20.56.12.096.0 ]--
r 111         //Temporary stack just 
--[ 2019.11.07.20.56.12.456.0 ]--
r 111         //Temporary stack just s
--[ 2019.11.07.20.56.12.538.0 ]--
r 111         //Temporary stack just so
--[ 2019.11.07.20.56.12.640.0 ]--
r 111         //Temporary stack just so 
--[ 2019.11.07.20.56.12.721.0 ]--
r 111         //Temporary stack just so  
--[ 2019.11.07.20.56.12.830.0 ]--
r 111         //Temporary stack just so  t
--[ 2019.11.07.20.56.12.888.0 ]--
r 111         //Temporary stack just so  th
--[ 2019.11.07.20.56.12.968.0 ]--
r 111         //Temporary stack just so  tha
--[ 2019.11.07.20.56.13.266.0 ]--
r 111         //Temporary stack just so  th
--[ 2019.11.07.20.56.13.384.0 ]--
r 111         //Temporary stack just so  t
--[ 2019.11.07.20.56.13.483.0 ]--
r 111         //Temporary stack just so  
--[ 2019.11.07.20.56.13.587.0 ]--
r 111         //Temporary stack just so 
--[ 2019.11.07.20.56.13.687.0 ]--
r 111         //Temporary stack just so t
--[ 2019.11.07.20.56.13.749.0 ]--
r 111         //Temporary stack just so th
--[ 2019.11.07.20.56.13.790.0 ]--
r 111         //Temporary stack just so tha
--[ 2019.11.07.20.56.13.887.0 ]--
r 111         //Temporary stack just so that
--[ 2019.11.07.20.56.13.981.0 ]--
r 111         //Temporary stack just so that 
--[ 2019.11.07.20.56.14.007.0 ]--
r 111         //Temporary stack just so that w
--[ 2019.11.07.20.56.14.209.0 ]--
r 111         //Temporary stack just so that we
--[ 2019.11.07.20.56.14.749.0 ]--
r 111         //Temporary stack just so that 
--[ 2019.11.07.20.56.15.157.0 ]--
r 111         //Temporary stack just so that s
--[ 2019.11.07.20.56.15.222.0 ]--
r 111         //Temporary stack just so that so
--[ 2019.11.07.20.56.15.257.0 ]--
r 111         //Temporary stack just so that som
--[ 2019.11.07.20.56.15.311.0 ]--
r 111         //Temporary stack just so that some
--[ 2019.11.07.20.56.15.418.0 ]--
r 111         //Temporary stack just so that somet
--[ 2019.11.07.20.56.15.552.0 ]--
r 111         //Temporary stack just so that someth
--[ 2019.11.07.20.56.15.659.0 ]--
r 111         //Temporary stack just so that somethi
--[ 2019.11.07.20.56.15.730.0 ]--
r 111         //Temporary stack just so that somethin
--[ 2019.11.07.20.56.15.782.0 ]--
r 111         //Temporary stack just so that something
--[ 2019.11.07.20.56.15.992.0 ]--
r 111         //Temporary stack just so that somethings
--[ 2019.11.07.20.56.16.129.0 ]--
r 111         //Temporary stack just so that somethingsh
--[ 2019.11.07.20.56.16.336.0 ]--
r 111         //Temporary stack just so that somethings
--[ 2019.11.07.20.56.16.430.0 ]--
r 111         //Temporary stack just so that something
--[ 2019.11.07.20.56.16.521.0 ]--
r 111         //Temporary stack just so that something 
--[ 2019.11.07.20.56.16.561.0 ]--
r 111         //Temporary stack just so that something s
--[ 2019.11.07.20.56.16.614.0 ]--
r 111         //Temporary stack just so that something sh
--[ 2019.11.07.20.56.16.660.0 ]--
r 111         //Temporary stack just so that something sho
--[ 2019.11.07.20.56.16.718.0 ]--
r 111         //Temporary stack just so that something show
--[ 2019.11.07.20.56.16.846.0 ]--
r 111         //Temporary stack just so that something shows
--[ 2019.11.07.20.56.16.927.0 ]--
r 111         //Temporary stack just so that something shows 
--[ 2019.11.07.20.56.16.999.0 ]--
r 111         //Temporary stack just so that something shows u
--[ 2019.11.07.20.56.17.037.0 ]--
r 111         //Temporary stack just so that something shows up
--[ 2019.11.07.20.56.17.112.0 ]--
r 111         //Temporary stack just so that something shows up 
--[ 2019.11.07.20.56.17.198.0 ]--
r 111         //Temporary stack just so that something shows up w
--[ 2019.11.07.20.56.17.263.0 ]--
r 111         //Temporary stack just so that something shows up wh
--[ 2019.11.07.20.56.17.344.0 ]--
r 111         //Temporary stack just so that something shows up whe
--[ 2019.11.07.20.56.17.415.0 ]--
r 111         //Temporary stack just so that something shows up when
--[ 2019.11.07.20.56.17.471.0 ]--
r 111         //Temporary stack just so that something shows up when 
--[ 2019.11.07.20.56.17.549.0 ]--
r 111         //Temporary stack just so that something shows up when w
--[ 2019.11.07.20.56.17.681.0 ]--
r 111         //Temporary stack just so that something shows up when we
--[ 2019.11.07.20.56.17.801.0 ]--
r 111         //Temporary stack just so that something shows up when we 
--[ 2019.11.07.20.56.18.639.0 ]--
r 111         //Temporary stack just so that something shows up when we  
--[ 2019.11.07.20.56.18.768.0 ]--
r 111         //Temporary stack just so that something shows up when we 
--[ 2019.11.07.20.56.19.796.0 ]--
r 111         //Temporary stack just so that something shows up when 
--[ 2019.11.07.20.56.20.266.0 ]--
r 111         //Temporary stack just so that something shows up when t
--[ 2019.11.07.20.56.20.356.0 ]--
r 111         //Temporary stack just so that something shows up when th
--[ 2019.11.07.20.56.20.399.0 ]--
r 111         //Temporary stack just so that something shows up when the
--[ 2019.11.07.20.56.20.464.0 ]--
r 111         //Temporary stack just so that something shows up when the 
--[ 2019.11.07.20.56.20.604.0 ]--
r 111         //Temporary stack just so that something shows up when the p
--[ 2019.11.07.20.56.20.678.0 ]--
r 111         //Temporary stack just so that something shows up when the pr
--[ 2019.11.07.20.56.20.741.0 ]--
r 111         //Temporary stack just so that something shows up when the pro
--[ 2019.11.07.20.56.20.864.0 ]--
r 111         //Temporary stack just so that something shows up when the prog
--[ 2019.11.07.20.56.21.110.0 ]--
r 111         //Temporary stack just so that something shows up when the progr
--[ 2019.11.07.20.56.21.145.0 ]--
r 111         //Temporary stack just so that something shows up when the progra
--[ 2019.11.07.20.56.21.264.0 ]--
r 111         //Temporary stack just so that something shows up when the program
--[ 2019.11.07.20.56.21.391.0 ]--
r 111         //Temporary stack just so that something shows up when the program 
--[ 2019.11.07.20.56.21.652.0 ]--
r 111         //Temporary stack just so that something shows up when the program g
--[ 2019.11.07.20.56.21.713.0 ]--
r 111         //Temporary stack just so that something shows up when the program ge
--[ 2019.11.07.20.56.21.816.0 ]--
r 111         //Temporary stack just so that something shows up when the program get
--[ 2019.11.07.20.56.21.987.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets
--[ 2019.11.07.20.56.22.006.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets 
--[ 2019.11.07.20.56.22.305.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets r
--[ 2019.11.07.20.56.22.417.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets ru
--[ 2019.11.07.20.56.22.473.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run
--[ 2019.11.07.20.56.24.138.0 ]--
r 106 
r 115 
--[ 2019.11.07.20.56.25.362.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.20.56.29.150.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run 
--[ 2019.11.07.20.56.29.234.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run a
--[ 2019.11.07.20.56.29.298.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run an
--[ 2019.11.07.20.56.29.385.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and
--[ 2019.11.07.20.56.29.472.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and 
--[ 2019.11.07.20.56.29.511.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and w
--[ 2019.11.07.20.56.29.727.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and w 
--[ 2019.11.07.20.56.30.064.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and w
--[ 2019.11.07.20.56.30.151.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we
--[ 2019.11.07.20.56.30.270.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we 
--[ 2019.11.07.20.56.30.348.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we d
--[ 2019.11.07.20.56.30.446.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we do
--[ 2019.11.07.20.56.30.479.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don
--[ 2019.11.07.20.56.30.632.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don'
--[ 2019.11.07.20.56.30.697.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't
--[ 2019.11.07.20.56.30.762.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't 
--[ 2019.11.07.20.56.30.832.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't g
--[ 2019.11.07.20.56.30.908.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't ge
--[ 2019.11.07.20.56.31.006.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get
--[ 2019.11.07.20.56.31.057.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get 
--[ 2019.11.07.20.56.31.114.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a
--[ 2019.11.07.20.56.31.207.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a 
--[ 2019.11.07.20.56.31.265.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a n
--[ 2019.11.07.20.56.31.324.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a nu
--[ 2019.11.07.20.56.31.785.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a n
--[ 2019.11.07.20.56.31.854.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a 
--[ 2019.11.07.20.56.32.053.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a N
--[ 2019.11.07.20.56.32.127.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a Nu
--[ 2019.11.07.20.56.32.313.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a Nul
--[ 2019.11.07.20.56.32.425.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a Null
--[ 2019.11.07.20.56.32.679.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullP
--[ 2019.11.07.20.56.33.129.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPo
--[ 2019.11.07.20.56.33.313.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPoi
--[ 2019.11.07.20.56.33.418.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPoin
--[ 2019.11.07.20.56.33.467.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPoint
--[ 2019.11.07.20.56.33.503.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointe
--[ 2019.11.07.20.56.33.618.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointer
--[ 2019.11.07.20.56.33.729.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointer 
--[ 2019.11.07.20.56.33.819.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointer E
--[ 2019.11.07.20.56.34.161.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointer 
--[ 2019.11.07.20.56.34.230.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointer
--[ 2019.11.07.20.56.34.353.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerE
--[ 2019.11.07.20.56.34.507.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerEx
--[ 2019.11.07.20.56.34.657.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerExc
--[ 2019.11.07.20.56.34.777.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerExce
--[ 2019.11.07.20.56.34.887.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerExcep
--[ 2019.11.07.20.56.34.949.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerExcept
--[ 2019.11.07.20.56.35.046.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerExcepti
--[ 2019.11.07.20.56.35.113.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerExceptio
--[ 2019.11.07.20.56.35.211.0 ]--
r 111         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerException
--[ 2019.11.07.20.56.40.071.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.20.59.07.793.0 ]--
NewLogger: P04_Pathfinding
Version: 1.3
--[ 2019.11.07.20.59.07.852.0 ]--
InitTree:
/out/production/P04_Pathfinding/.donotlog
/out/production/P04_Pathfinding/algs4.jar
/out/production/P04_Pathfinding/stdlib.jar
/out/production/P04_Pathfinding/Coord.class
/out/production/P04_Pathfinding/png2emap.py
/out/production/P04_Pathfinding/Walker.class
/out/production/P04_Pathfinding/Terrain.class
/out/production/P04_Pathfinding/ramp.png.emap
/out/production/P04_Pathfinding/ramp2.png.emap
/out/production/P04_Pathfinding/ramp3.png.emap
/out/production/P04_Pathfinding/mazeAB.png.emap
/out/production/P04_Pathfinding/usa128.png.emap
/out/production/P04_Pathfinding/usa256.png.emap
/out/production/P04_Pathfinding/Pathfinder.class
/out/production/P04_Pathfinding/usa1024.png.emap
/out/production/P04_Pathfinding/maze32_0.png.emap
/out/production/P04_Pathfinding/maze32_1.png.emap
/out/production/P04_Pathfinding/maze232_0.png.emap
/out/production/P04_Pathfinding/maze320_0.png.emap
/out/production/P04_Pathfinding/mazeBrain.png.emap
/out/production/P04_Pathfinding/TerrainEditor.class
/out/production/P04_Pathfinding/Pathfinder$PFNode.class
/out/production/P04_Pathfinding/PathfinderVisualizer.class
/out/production/P04_Pathfinding/InteractivePathfinderVisualizer.class
/src/algs4.jar
/src/Coord.java
/src/stdlib.jar
/src/Walker.java
/src/Terrain.java
/src/Pathfinder.java
/src/TerrainEditor.java
/src/PathfinderVisualizer.java
/src/InteractivePathfinderVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/heightmaps/.donotlog
/heightmaps/png2emap.py
/heightmaps/ramp.png.emap
/heightmaps/ramp2.png.emap
/heightmaps/ramp3.png.emap
/heightmaps/mazeAB.png.emap
/heightmaps/usa128.png.emap
/heightmaps/usa256.png.emap
/heightmaps/usa1024.png.emap
/heightmaps/maze32_0.png.emap
/heightmaps/maze32_1.png.emap
/heightmaps/maze232_0.png.emap
/heightmaps/maze320_0.png.emap
/heightmaps/mazeBrain.png.emap
/.cos265
/readme.html
/P04_Pathfinding.iml

--[ 2019.11.07.20.59.07.852.1 ]--
InitFile: /src/InteractivePathfinderVisualizer.java
import java.awt.event.KeyEvent;

/**
 * InteractivePathfinderVisualizer visualizes the terrain and the computed
 * path and allows the user to change parameters of the Pathfinder.  Below
 * is a list of commands and what they do.  Note: some of the commands
 * modify the properties of the path finder and some modify the terrain.
 *
 * Command        Action                                      Terrain
 * C              clear path
 * space          recompute path
 * S/E            set start/end location to mouse
 * left/right     halve/double path search heuristic value
 * 0/1            set path search heuristic to 0 or 1
 * W              start a walker to show the path
 * R              randomly generate a new terrain                *
 * M              smooths terrain under mouse                    *
 * shift+M        smooths all terrain                            *
 * up/down        increase/decrease terrain under mouse          *
 */

public class InteractivePathfinderVisualizer {
    private final static int DELAY = 10;

    // sets how many redraws it should take for the walker to reach its destination
    private final static float STEPS_TO_WALK = 100.0f;

    // for convenience, here are the emap files that are located under heightmaps/ folder
    // the python script in that folder converts png files to emap. \
    // you can use it to create your own maps to test your code
    private final static String[] emaps = {
            "maze32_0.png.emap",    // 0   (32x32 maze)
            "maze32_1.png.emap",    // 1   (another 32x32 maze)
            "maze232_0.png.emap",   // 2   (232x232 maze)
            "maze320_0.png.emap",   // 3   (same as maze32_0, only scaled up by 10x)
            "mazeAB.png.emap",      // 4   (a maze from a site no longer online :( )
            "mazeBrain.png.emap",   // 5   (...)
            "ramp.png.emap",        // 6   (some tests)
            "ramp2.png.emap",       // 7   (...)
            "ramp3.png.emap",       // 8   (...)
            "usa128.png.emap",      // 9   (elevation map of USA from https://bananas.openttd.org/en/heightmap/)
            "usa256.png.emap",      // 10  (same as usa128, only higher resolution)
            "usa1024.png.emap",     // 11  (same as usa128, only higher resolution
    };

    private final static String emapFilename = emaps[0];        // change index to load a different elevation map



    public static void main(String[] args) {
        Terrain terrain = new Terrain(emapFilename);
        Pathfinder pf = new Pathfinder(terrain);
        int N = terrain.getN();

        StdDraw.show(0);

        // set default starting and ending locations
        pf.setPathStart(new Coord(1, 1));
        pf.setPathEnd(new Coord(N-3, N-3));

        // find a path
        pf.computePath();

        PathfinderVisualizer.draw(terrain, pf, null, N);
        StdDraw.show(DELAY);

        // prevent repeated applications
        boolean keyboardR = false;
        boolean keyboardM = false;

        Walker walker = null;

        while(true) {
            boolean recompute = false;
            boolean redraw = false;

            // mouse location on map
            int mouseI = (int) ((StdDraw.mouseX()-24) / 464 * N);
            int mouseJ = (int) ((464 - (StdDraw.mouseY()-36)) / 464 * N);
            boolean isMouseOnMap = (mouseI >=0 && mouseI < N && mouseJ >= 0 && mouseJ < N);

            if(StdDraw.isKeyPressed(KeyEvent.VK_LEFT) || StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
                boolean keyboardLeft = StdDraw.isKeyPressed(KeyEvent.VK_LEFT);
                float m = keyboardLeft ? 0.5f : 2.0f;
                float h = pf.getHeuristic() * m;
                h = Math.max(1.0f/1024.0f, Math.min(1048576.0f, h));
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_0) || StdDraw.isKeyPressed(KeyEvent.VK_1)) {
                boolean keyboard0 = StdDraw.isKeyPressed(KeyEvent.VK_0);
                float h = keyboard0 ? 0 : 1;
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_C)) {
                pf.resetPath();
                walker = null;
                redraw = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_R) && !keyboardR) {
                TerrainEditor.setFractalHeights(terrain);
                TerrainEditor.clampHeights(terrain);
                recompute = true;
            }
            keyboardR = StdDraw.isKeyPressed(KeyEvent.VK_R);

            if(StdDraw.isKeyPressed(KeyEvent.VK_M)) {
                if(StdDraw.isKeyPressed(KeyEvent.VK_SHIFT)) {
                    if(!keyboardM) {
                        TerrainEditor.smoothHeights(terrain);
                        recompute = true;
                    }
                } else {
                    TerrainEditor.smoothHeights(mouseI, mouseJ, N / 20, true, terrain);
                    recompute = true;
                }
            }
            keyboardM = StdDraw.isKeyPressed(KeyEvent.VK_M);

            if(StdDraw.isKeyPressed(KeyEvent.VK_SPACE)) {
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_UP) || StdDraw.isKeyPressed(KeyEvent.VK_DOWN)) {
                boolean keyboardUp = StdDraw.isKeyPressed(KeyEvent.VK_UP);
                float add = keyboardUp ? 8.0f : -8.0f;
                TerrainEditor.addHeight(mouseI, mouseJ, N / 20, add, terrain);
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_S)) {
                pf.setPathStart(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_E)) {
                pf.setPathEnd(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_W)) {
                Iterable<Coord> path = pf.getPathSolution();
                if(path != null) {
                    walker = new Walker(terrain, pf.getPathSolution());
                }
            }

            if(walker != null) {
                if(walker.doneWalking()) {
                    walker = null;
                } else {
                    walker.advance(pf.getPathCost() / STEPS_TO_WALK);
                }
                redraw = true;
            }

            if(recompute) {
                walker = null;
                pf.resetPath();
                if(pf.getPathStart() != null && pf.getPathEnd() != null) {
                    pf.computePath();
                }
                redraw = true;
            }

            if(redraw) {
                PathfinderVisualizer.draw(terrain, pf, walker, N);
                StdDraw.show(DELAY);
            } else {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    /* do nothing */
                }
            }
        }
    }
}

--[ 2019.11.07.20.59.07.853.0 ]--
InitFile: /src/PathfinderVisualizer.java
/**
 * PathfinderVisualizer visualizes the terrain and found path.
 */

import java.awt.Color;
import java.awt.Font;

public class PathfinderVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // color for different elevations.  must be in ascending order!
    private final static int[][] elevationColors = {
            // h    r   g   b   where h=height, r=red, g=green, b=blue
            {  0,   0,  0,  0},
            {  2,   0,  0,160},
            {  4,   0,224,224},
            { 16, 192,192,  0},
            { 64,  16,255, 16},
            {128,  32,224, 32},
            {192, 128,128,  8},
            {224, 164,164,164},
            {255, 255,255,255}
    };

    private final static Color cStart    = new Color(128, 128, 255);
    private final static Color cEnd      = new Color(255, 128, 128);
    private final static Color cSolution = new Color(255, 128, 255);
    private final static Color cSearched = new Color(128,   0, 128);

    // linearly interpolating between the corresponding rgb values
    private static Color colorLERP(float v1, int r0, int g0, int b0, int r1, int g1, int b1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * r0 + v1 * r1);
        int g = (int)(v0 * g0 + v1 * g1);
        int b = (int)(v0 * b0 + v1 * b1);
        return new Color(r, g, b);
    }
    private static Color colorLERP(float v1, Color c0, Color c1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * c0.getRed()   + v1 * c1.getRed());
        int g = (int)(v0 * c0.getGreen() + v1 * c1.getGreen());
        int b = (int)(v0 * c0.getBlue()  + v1 * c1.getBlue());
        int a = (int)(v0 * c0.getAlpha() + v1 * c1.getAlpha());
        return new Color(r, g, b, a);
    }

    // returns color for given height
    private static Color height2Color(int h) {
        h = Math.max(0, Math.min(255, h));

        int[] ec0 = elevationColors[0];  // default lower bound
        int[] ec1 = elevationColors[1];  // default upper bound

        // find upper bound while updating lower bound
        for(int i = 1; i < elevationColors.length; i++) {
            ec1 = elevationColors[i];
            if(h >= ec0[0] && h <= ec1[0]) break;
            ec0 = ec1;
        }

        int h0=ec0[0], r0=ec0[1], g0=ec0[2], b0=ec0[3];
        int h1=ec1[0], r1=ec1[1], g1=ec1[2], b1=ec1[3];
        float v1 = ((float)(h - h0)) / ((float)(h1 - h0));

        return colorLERP(v1, r0, g0, b0, r1, g1, b1);
    }

    private static void drawCircle(int i, int j, int N, double rad) {
        int c = (int)((i+0.5f) * 464.0f / N);
        int r = (int)((j+0.5f) * 464.0f / N);
        StdDraw.circle(c + 24, 464 - r + 36, rad);
    }
    public static void drawCircle(Coord loc, int N, double rad) {
        drawCircle(loc.getI(), loc.getJ(), N, rad);
    }

    private static void drawPath(Iterable<Coord> path, int N) {
        boolean first = true;
        int c0 = 0, r0 = 0;
        for (Coord loc : path) {
            int c1 = (int)((loc.getI()+0.5f) * 464.0f / N);
            int r1 = (int)((loc.getJ()+0.5f) * 464.0f / N);
            if(!first) {
                StdDraw.line(c0 + 24, 464 - r0 + 36, c1 + 24, 464 - r1 + 36);
            }
            first = false;
            c0 = c1; r0 = r1;
        }
    }

    // draw N-by-N pathfinding map
    public static void draw(Terrain terrain, Pathfinder pf, Walker walker, int N) {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.filledSquare(256, 256 + 12, 464 / 2);

        // draw terrain
        for(int row = 0; row < 464; row++) {
            int j = (int)((float)row/464.0f * N);
            for(int col = 0; col < 464; col++) {
                int i = (int)((float)col/464.0f * N);
                Coord loc = new Coord(i,j);
                Color c = height2Color(terrain.getHeight(loc));
                if(pf.wasSearched(loc)) {
                    c = colorLERP(0.50f, c, cSearched);
                }
                StdDraw.setPenColor(c);
                StdDraw.filledSquare(col + 24, 464 - row + 36, 1);
            }
        }

        // draw path start
        if(pf.getPathStart() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathStart(), N, 4.0);

            StdDraw.setPenColor(cStart);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathStart(), N, 4.0);
        }

        // draw path end
        if(pf.getPathEnd() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathEnd(), N, 4.0);

            StdDraw.setPenColor(cEnd);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathEnd(), N, 4.0);
        }

        // draw found path
        if(pf.foundPath()) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawPath(pf.getPathSolution(), N);

            StdDraw.setPenColor(cSolution);
            StdDraw.setPenRadius(0.002);
            drawPath(pf.getPathSolution(), N);
        }

        // draw walker
        if(walker != null) {
            Coord loc = walker.getLocation();
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);

            StdDraw.setPenColor(StdDraw.WHITE);
            StdDraw.setPenRadius(0.002);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);
        }

        // write status text
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.text(96, 12, "heuristic: " + pf.getHeuristic());
        if(pf.foundPath()) StdDraw.text(256, 12, "path: " + pf.getPathCost());
        else               StdDraw.text(256, 12, "no path found");
        StdDraw.text(512-96, 12, "searched: " + pf.getSearchSize() + " (" + (int)(100.0f * pf.getSearchSize() / (N*N)) + "%)");
    }
}

--[ 2019.11.07.20.59.07.853.1 ]--
InitFile: /src/Terrain.java
import java.lang.IndexOutOfBoundsException;

/**
 * Terrain stores elevations for map and computes distance and
 * cost in traversing the terrain.
 */

public class Terrain {
    private int N;
    private int[][] heights;

    public Terrain(int N) {
        this.N = N;
        this.heights = new int[N][N];
    }

    public Terrain(int[][] heights) {
        this.N = heights.length;
        this.heights = heights;
    }

    public Terrain(String emapfile) {
        In in = new In(emapfile);
        this.N = in.readInt();
        this.heights = new int[N][N];
        for (int j = 0; j < N; j++) {
            for (int i = 0; i < N; i++) {
                this.heights[i][j] = in.readInt();
            }
        }
    }

    public int getN() {
        return N;
    }

    public void setHeight(int i, int j, int h) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        heights[i][j] = h;
    }
    public void setHeight(int i, int j, float h) {
        setHeight(i, j, (int) h);
    }
    public void setHeight(Coord loc, int h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }
    public void setHeight(Coord loc, float h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }

    public int getHeight(int i, int j) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        return heights[i][j];
    }
    public int getHeight(Coord loc) {
        return getHeight(loc.getI(), loc.getJ());
    }

    // computes distance between (i0,j0) and (i1,j1) as the crow flies
    public float computeDistance(int i0, int j0, int i1, int j1) {
        return (float)Math.sqrt((i0 - i1) * (i0 - i1) + (j0 - j1) * (j0 - j1));
    }
    public float computeDistance(Coord c0, Coord c1) {
        return computeDistance(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }

    public float computeTravelCost(int i0, int j0, int i1, int j1) {
        float h0 = getHeight(i0, j0), h1 = getHeight(i1, j1);
        float climb = (float)Math.pow(Math.abs(h0 - h1) * 1000.0, 1.5);
        float dist = computeDistance(i0,j0, i1,j1);
        return (1.0f + climb) * dist;
    }
    public float computeTravelCost(Coord c0, Coord c1) {
        return computeTravelCost(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }
    public float computeTravelCost(Iterable<Coord> cs) {
        Coord c0 = null;
        float cost = 0.0f;
        for(Coord c1 : cs) {
            if(c0 != null) cost += computeTravelCost(c0, c1);
            c0 = c1;
        }
        return cost;
    }
}

--[ 2019.11.07.20.59.07.853.2 ]--
InitFile: /src/Walker.java
import java.util.Iterator;

/**
 * Walker takes an Iterable of Coords and simulates an individual
 * walking along the path over the given Terrain
 */
public class Walker {

    // terrain: the Terrain the Walker traverses
    // path: the sequence of Coords the Walker follows
    public Walker(Terrain terrain, Iterable<Coord> path) {
    }

    // returns the Walker's current location
    public Coord getLocation() {
        return null;
    }

    // returns true if Walker has reached the end Coord (last in path)
    public boolean doneWalking() {
        return true;
    }

    // advances the Walker along path
    // byTime: how long the Walker should traverse (may be any non-negative value)
    public void advance(float byTime) {
    }

}

--[ 2019.11.07.20.59.07.854.0 ]--
InitFile: /src/Coord.java
/**
 * Coordinates is an immutable type that store the tuple (i, j)
 */
public final class Coord {
    private final int i;
    private final int j;

    public Coord(int i, int j) {
        this.i = i;
        this.j = j;
    }

    public int getI() { return i; }
    public int getJ() { return j; }

    public boolean isInBounds(int minI, int minJ, int maxI, int maxJ) {
        return i >= minI && j >= minJ && i <= maxI && j <= maxJ;
    }
    public boolean isInBounds(Coord min, Coord max) {
        return i >= min.i && i <= max.i && j >= min.j && j <= max.j;
    }

    public Coord add(int addI, int addJ) {
        return new Coord(i + addI, j + addJ);
    }
    public Coord add(Coord that) { return new Coord(i + that.i, j + that.j); }

    public String toString() { return "(" + i + "," + j + ")"; }

    public boolean equals(Object o) {
        if(this == o) return true;
        if(o == null) return false;
        if(o.getClass() != this.getClass()) return false;
        Coord that = (Coord) o;
        if(this.i != that.i) return false;
        if(this.j != that.j) return false;
        return true;
    }
}

--[ 2019.11.07.20.59.07.854.1 ]--
InitFile: /src/Pathfinder.java
import java.lang.IndexOutOfBoundsException;
import java.lang.IllegalArgumentException;
import java.util.Iterator;

/**
 * Pathfinder uses A* search to find a near optimal path
 * between to locations with given terrain.
 */

public class Pathfinder {

    private Coord start;
    private Coord end;
    private float heuristic;
    private boolean pathFound;
    private Stack<Coord> s;
    private Terrain terrain;
    private PFNode[][] board;

    /**
     * PFNode will be the key for MinPQ (used in computePath())
     */
    private class PFNode implements Comparable<PFNode> {
        // loc: the location of the PFNode
        // fromNode: how did we get here? (linked list back to start)
        public PFNode(Coord loc, PFNode fromNode) {

        }

        // compares this with that, used to find minimum cost PFNode
        public int compareTo(PFNode that) {
            return 0;
        }

        // returns the cost to travel from starting point to this
        // via the fromNode chain
        public float getCost(float heuristic) { return 0; }

        // returns if this PFNode is not marked invalid
        public boolean isValid() {
            return false;
        }

        // marks the PFNode as invalid
        public void invalidate() {
        }

        // returns if the PFNode is marked as used
        public boolean isUsed() {
            return true;
        }

        // marks the PFNode as used
        public void use() { }

        // returns an Iterable of PFNodes that surround this
        public Iterable<PFNode> neighbors() {
            Stack<PFNode> s = new Stack<>();
            s.push(new PFNode(null, null));
            return s;
        }

    }

    public Pathfinder(Terrain terrain) {
        this.terrain = terrain;

        board = new PFNode[terrain.getN()][terrain.getN()];
    }

    public void setPathStart(Coord loc) {
        start = loc;
    }

    public Coord getPathStart() {
        return start;
    }

    public void setPathEnd(Coord loc) {
        end = loc;
    }

    public Coord getPathEnd() {
        return end;
    }

    public void setHeuristic(float v)
    {
        heuristic = v;
    }

    public float getHeuristic() {
        return heuristic;
    }

    public void resetPath() {
    }

    public void computePath() {

        //Create a pointer that will initially begin at the start node. Keeps track of which node you're currently on.
        Coord pointer = start;
        MinPQ<PFNode> pfQueue = new MinPQ<>();
        PFNode begin = new PFNode(start, null);


        board[pointer.getJ()][pointer.getI()] = begin;
        pfQueue.insert(begin);


        //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerException
        s = new Stack<>();
        s.push(start);
        s.push(end);


        pathFound = true;
    }

    public boolean foundPath() {
        return pathFound;
    }

    public float getPathCost() {
        return 0;
    }

    public int getSearchSize() {
        return 0;
    }

    public Iterable<Coord> getPathSolution() {

        /*
        Stack<Coord> s = new Stack<>();
        s.push(start);
        s.push(end);
        */

        //Return a stack of coordinates for the visualizer
        return s;
    }

    public boolean wasSearched(Coord loc) {
        return false;
    }
}

--[ 2019.11.07.20.59.07.854.2 ]--
InitFile: /src/TerrainEditor.java
/**
 * The following class provides some simple terrain editing functions.
 */
public class TerrainEditor {
    private static float rndRadius(float d) {
        return (float)StdRandom.uniform(-d,d);
    }

    private static float getFractalHeight(int i, int j, float dh, Terrain terrain, boolean[] isset) {
        int N = terrain.getN();
        dh = Math.max(-64, Math.min(255+64, dh));   // allow the height to go just a bit out of range
        if(!isset[i + j * N]) {
            isset[i + j * N] = true;
            terrain.setHeight(i, j, dh);
        }
        return terrain.getHeight(i,j);
    }

    private static void setFractalHeights(int i0, int j0, int i1, int j1, Terrain terrain, boolean[] isset) {
        int id = i1-i0;
        int jd = j1-j0;
        int i01 = (i0+i1)/2;
        int j01 = (j0+j1)/2;

        if(id <= 1 && jd <= 1) return;

        float h00 = getFractalHeight(i0,j0,32,terrain,isset);
        float h01 = getFractalHeight(i0,j1,32,terrain,isset);
        float h10 = getFractalHeight(i1,j0,32,terrain,isset);
        float h11 = getFractalHeight(i1,j1,32,terrain,isset);

        float d = (float)(Math.sqrt((i1-i0)*(i1-i0) + (j1-j0)*(j1-j0)) * 0.5);

        float d0001 = (h00 + h01) / 2 + rndRadius(d);
        float d0010 = (h00 + h10) / 2 + rndRadius(d);
        float d1101 = (h11 + h01) / 2 + rndRadius(d);
        float d1110 = (h11 + h10) / 2 + rndRadius(d);

        float h0001 = getFractalHeight(i0, j01, d0001, terrain,isset);
        float h0010 = getFractalHeight(i01, j0, d0010, terrain,isset);
        float h1101 = getFractalHeight(i01, j1, d1101, terrain,isset);
        float h1110 = getFractalHeight(i1, j01, d1110, terrain,isset);

        float dm = (float)((h0001 + h0010 + h1101 + h1110) / 4.0);
        float hm = getFractalHeight(i01, j01, dm, terrain,isset);

        if(id > 1 && jd > 1) {
            setFractalHeights(i0, j0, i01, j01, terrain, isset);
            setFractalHeights(i01, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i01, j1, terrain, isset);
            setFractalHeights(i01, j01, i1, j1, terrain, isset);
        } else if(jd > 1) {
            setFractalHeights(i0, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i1, j1, terrain, isset);
        } else {
            setFractalHeights(i0, j0, i01, j1, terrain, isset);
            setFractalHeights(i01, j0, i1, j1, terrain, isset);
        }
    }

    public static void setFractalHeights(Terrain terrain) {
        int N = terrain.getN();
        boolean[] isset = new boolean[N*N];
        setFractalHeights(0, 0, N - 1, N - 1, terrain, isset);
    }

    public static void smoothHeights(Terrain terrain) {
        int N = terrain.getN();
        int radius = (int)Math.ceil(Math.sqrt(N*N/2.0f));
        smoothHeights(N/2, N/2, radius, false, terrain);
    }

    public static void smoothHeights(int ic, int jc, int radius, boolean fallOff, Terrain terrain) {
        final int N = terrain.getN();
        final int w = 2*radius+1;
        float[] s = new float[w*w];
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;

                float m = computeEffect(i, j, ic, jc, radius, fallOff, N);
                if(m <= 0.0000001) {
                    s[sidx] = terrain.getHeight(i,j);
                    continue;
                }
                float h = 0;
                int c = 0;
                if(i > 0 && j > 0) {
                    h += terrain.getHeight(i-1,j-1);
                    c += 1;
                }
                if(i < N-1 && j > 0) {
                    h += terrain.getHeight(i+1,j-1);
                    c += 1;
                }
                if(i > 0 && j < N-1) {
                    h += terrain.getHeight(i-1,j+1);
                    c += 1;
                }
                if(i < N-1 && j < N-1) {
                    h += terrain.getHeight(i+1,j+1);
                    c += 1;
                }
                if(i > 0) {
                    h += terrain.getHeight(i-1,j);
                    c += 1;
                }
                if(j > 0) {
                    h += terrain.getHeight(i,j-1);
                    c += 1;
                }
                if(i < N-1) {
                    h += terrain.getHeight(i+1,j);
                    c += 1;
                }
                if(j < N-1) {
                    h += terrain.getHeight(i,j+1);
                    c += 1;
                }
                s[sidx] = (1-m) * terrain.getHeight(i,j) + m * h / c;
            }
        }
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;
                terrain.setHeight(i, j, s[sidx]);
            }
        }
    }

    public static void clampHeights(Terrain terrain) {
        int N = terrain.getN();
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                terrain.setHeight(i, j, Math.max(0, Math.min(255, terrain.getHeight(i, j))));
            }
        }
    }

    private static float computeEffect(int i, int j, int ic, int jc, int radius, boolean fallOff, int N) {
        if(i < 0 || j < 0 || i >= N || j >= N) return 0;
        if(!fallOff) return 1;
        int d2 = (ic-i)*(ic-i)+(jc-j)*(jc-j);
        if(d2 > radius*radius) return 0;
        return ((float)radius - (float)Math.sqrt(d2)) / (float)radius;
    }

    public static void addHeight(int i, int j, int radius, float add, Terrain terrain) {
        final int N = terrain.getN();
        for(int ja = -radius; ja <= radius; ja++) {
            int r = j + ja;
            if(r < 0 || r >= N) continue;
            for(int ia = -radius; ia <= radius; ia++) {
                int c = i + ia;
                if(c < 0 || c >= N) continue;
                float v = add * computeEffect(c, r, i, j, radius, true, N);
                float h = terrain.getHeight(c, r) + v;
                h = Math.max(0, Math.min(255, h));
                terrain.setHeight(c, r, h);
            }
        }
    }
}

--[ 2019.11.07.20.59.07.854.3 ]--
InitFile: /.cos265


--[ 2019.11.07.20.59.07.855.0 ]--
InitFile: /P04_Pathfinding.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/heightmaps" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.11.07.20.59.32.456.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.07.20.59.40.460.0 ]--
DisposeComponent
--[ 2019.11.07.22.08.28.870.0 ]--
NewLogger: P04_Pathfinding
Version: 1.3
--[ 2019.11.07.22.08.28.934.0 ]--
InitTree:
/out/production/P04_Pathfinding/.donotlog
/out/production/P04_Pathfinding/algs4.jar
/out/production/P04_Pathfinding/stdlib.jar
/out/production/P04_Pathfinding/Coord.class
/out/production/P04_Pathfinding/png2emap.py
/out/production/P04_Pathfinding/Walker.class
/out/production/P04_Pathfinding/Terrain.class
/out/production/P04_Pathfinding/ramp.png.emap
/out/production/P04_Pathfinding/ramp2.png.emap
/out/production/P04_Pathfinding/ramp3.png.emap
/out/production/P04_Pathfinding/mazeAB.png.emap
/out/production/P04_Pathfinding/usa128.png.emap
/out/production/P04_Pathfinding/usa256.png.emap
/out/production/P04_Pathfinding/Pathfinder.class
/out/production/P04_Pathfinding/usa1024.png.emap
/out/production/P04_Pathfinding/maze32_0.png.emap
/out/production/P04_Pathfinding/maze32_1.png.emap
/out/production/P04_Pathfinding/maze232_0.png.emap
/out/production/P04_Pathfinding/maze320_0.png.emap
/out/production/P04_Pathfinding/mazeBrain.png.emap
/out/production/P04_Pathfinding/TerrainEditor.class
/out/production/P04_Pathfinding/Pathfinder$PFNode.class
/out/production/P04_Pathfinding/PathfinderVisualizer.class
/out/production/P04_Pathfinding/InteractivePathfinderVisualizer.class
/src/algs4.jar
/src/Coord.java
/src/stdlib.jar
/src/Walker.java
/src/Terrain.java
/src/Pathfinder.java
/src/TerrainEditor.java
/src/PathfinderVisualizer.java
/src/InteractivePathfinderVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/heightmaps/.donotlog
/heightmaps/png2emap.py
/heightmaps/ramp.png.emap
/heightmaps/ramp2.png.emap
/heightmaps/ramp3.png.emap
/heightmaps/mazeAB.png.emap
/heightmaps/usa128.png.emap
/heightmaps/usa256.png.emap
/heightmaps/usa1024.png.emap
/heightmaps/maze32_0.png.emap
/heightmaps/maze32_1.png.emap
/heightmaps/maze232_0.png.emap
/heightmaps/maze320_0.png.emap
/heightmaps/mazeBrain.png.emap
/.cos265
/readme.html
/P04_Pathfinding.iml

--[ 2019.11.07.22.08.28.940.0 ]--
InitFile: /src/InteractivePathfinderVisualizer.java
import java.awt.event.KeyEvent;

/**
 * InteractivePathfinderVisualizer visualizes the terrain and the computed
 * path and allows the user to change parameters of the Pathfinder.  Below
 * is a list of commands and what they do.  Note: some of the commands
 * modify the properties of the path finder and some modify the terrain.
 *
 * Command        Action                                      Terrain
 * C              clear path
 * space          recompute path
 * S/E            set start/end location to mouse
 * left/right     halve/double path search heuristic value
 * 0/1            set path search heuristic to 0 or 1
 * W              start a walker to show the path
 * R              randomly generate a new terrain                *
 * M              smooths terrain under mouse                    *
 * shift+M        smooths all terrain                            *
 * up/down        increase/decrease terrain under mouse          *
 */

public class InteractivePathfinderVisualizer {
    private final static int DELAY = 10;

    // sets how many redraws it should take for the walker to reach its destination
    private final static float STEPS_TO_WALK = 100.0f;

    // for convenience, here are the emap files that are located under heightmaps/ folder
    // the python script in that folder converts png files to emap. \
    // you can use it to create your own maps to test your code
    private final static String[] emaps = {
            "maze32_0.png.emap",    // 0   (32x32 maze)
            "maze32_1.png.emap",    // 1   (another 32x32 maze)
            "maze232_0.png.emap",   // 2   (232x232 maze)
            "maze320_0.png.emap",   // 3   (same as maze32_0, only scaled up by 10x)
            "mazeAB.png.emap",      // 4   (a maze from a site no longer online :( )
            "mazeBrain.png.emap",   // 5   (...)
            "ramp.png.emap",        // 6   (some tests)
            "ramp2.png.emap",       // 7   (...)
            "ramp3.png.emap",       // 8   (...)
            "usa128.png.emap",      // 9   (elevation map of USA from https://bananas.openttd.org/en/heightmap/)
            "usa256.png.emap",      // 10  (same as usa128, only higher resolution)
            "usa1024.png.emap",     // 11  (same as usa128, only higher resolution
    };

    private final static String emapFilename = emaps[0];        // change index to load a different elevation map



    public static void main(String[] args) {
        Terrain terrain = new Terrain(emapFilename);
        Pathfinder pf = new Pathfinder(terrain);
        int N = terrain.getN();

        StdDraw.show(0);

        // set default starting and ending locations
        pf.setPathStart(new Coord(1, 1));
        pf.setPathEnd(new Coord(N-3, N-3));

        // find a path
        pf.computePath();

        PathfinderVisualizer.draw(terrain, pf, null, N);
        StdDraw.show(DELAY);

        // prevent repeated applications
        boolean keyboardR = false;
        boolean keyboardM = false;

        Walker walker = null;

        while(true) {
            boolean recompute = false;
            boolean redraw = false;

            // mouse location on map
            int mouseI = (int) ((StdDraw.mouseX()-24) / 464 * N);
            int mouseJ = (int) ((464 - (StdDraw.mouseY()-36)) / 464 * N);
            boolean isMouseOnMap = (mouseI >=0 && mouseI < N && mouseJ >= 0 && mouseJ < N);

            if(StdDraw.isKeyPressed(KeyEvent.VK_LEFT) || StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
                boolean keyboardLeft = StdDraw.isKeyPressed(KeyEvent.VK_LEFT);
                float m = keyboardLeft ? 0.5f : 2.0f;
                float h = pf.getHeuristic() * m;
                h = Math.max(1.0f/1024.0f, Math.min(1048576.0f, h));
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_0) || StdDraw.isKeyPressed(KeyEvent.VK_1)) {
                boolean keyboard0 = StdDraw.isKeyPressed(KeyEvent.VK_0);
                float h = keyboard0 ? 0 : 1;
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_C)) {
                pf.resetPath();
                walker = null;
                redraw = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_R) && !keyboardR) {
                TerrainEditor.setFractalHeights(terrain);
                TerrainEditor.clampHeights(terrain);
                recompute = true;
            }
            keyboardR = StdDraw.isKeyPressed(KeyEvent.VK_R);

            if(StdDraw.isKeyPressed(KeyEvent.VK_M)) {
                if(StdDraw.isKeyPressed(KeyEvent.VK_SHIFT)) {
                    if(!keyboardM) {
                        TerrainEditor.smoothHeights(terrain);
                        recompute = true;
                    }
                } else {
                    TerrainEditor.smoothHeights(mouseI, mouseJ, N / 20, true, terrain);
                    recompute = true;
                }
            }
            keyboardM = StdDraw.isKeyPressed(KeyEvent.VK_M);

            if(StdDraw.isKeyPressed(KeyEvent.VK_SPACE)) {
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_UP) || StdDraw.isKeyPressed(KeyEvent.VK_DOWN)) {
                boolean keyboardUp = StdDraw.isKeyPressed(KeyEvent.VK_UP);
                float add = keyboardUp ? 8.0f : -8.0f;
                TerrainEditor.addHeight(mouseI, mouseJ, N / 20, add, terrain);
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_S)) {
                pf.setPathStart(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_E)) {
                pf.setPathEnd(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_W)) {
                Iterable<Coord> path = pf.getPathSolution();
                if(path != null) {
                    walker = new Walker(terrain, pf.getPathSolution());
                }
            }

            if(walker != null) {
                if(walker.doneWalking()) {
                    walker = null;
                } else {
                    walker.advance(pf.getPathCost() / STEPS_TO_WALK);
                }
                redraw = true;
            }

            if(recompute) {
                walker = null;
                pf.resetPath();
                if(pf.getPathStart() != null && pf.getPathEnd() != null) {
                    pf.computePath();
                }
                redraw = true;
            }

            if(redraw) {
                PathfinderVisualizer.draw(terrain, pf, walker, N);
                StdDraw.show(DELAY);
            } else {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    /* do nothing */
                }
            }
        }
    }
}

--[ 2019.11.07.22.08.28.941.0 ]--
InitFile: /src/PathfinderVisualizer.java
/**
 * PathfinderVisualizer visualizes the terrain and found path.
 */

import java.awt.Color;
import java.awt.Font;

public class PathfinderVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // color for different elevations.  must be in ascending order!
    private final static int[][] elevationColors = {
            // h    r   g   b   where h=height, r=red, g=green, b=blue
            {  0,   0,  0,  0},
            {  2,   0,  0,160},
            {  4,   0,224,224},
            { 16, 192,192,  0},
            { 64,  16,255, 16},
            {128,  32,224, 32},
            {192, 128,128,  8},
            {224, 164,164,164},
            {255, 255,255,255}
    };

    private final static Color cStart    = new Color(128, 128, 255);
    private final static Color cEnd      = new Color(255, 128, 128);
    private final static Color cSolution = new Color(255, 128, 255);
    private final static Color cSearched = new Color(128,   0, 128);

    // linearly interpolating between the corresponding rgb values
    private static Color colorLERP(float v1, int r0, int g0, int b0, int r1, int g1, int b1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * r0 + v1 * r1);
        int g = (int)(v0 * g0 + v1 * g1);
        int b = (int)(v0 * b0 + v1 * b1);
        return new Color(r, g, b);
    }
    private static Color colorLERP(float v1, Color c0, Color c1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * c0.getRed()   + v1 * c1.getRed());
        int g = (int)(v0 * c0.getGreen() + v1 * c1.getGreen());
        int b = (int)(v0 * c0.getBlue()  + v1 * c1.getBlue());
        int a = (int)(v0 * c0.getAlpha() + v1 * c1.getAlpha());
        return new Color(r, g, b, a);
    }

    // returns color for given height
    private static Color height2Color(int h) {
        h = Math.max(0, Math.min(255, h));

        int[] ec0 = elevationColors[0];  // default lower bound
        int[] ec1 = elevationColors[1];  // default upper bound

        // find upper bound while updating lower bound
        for(int i = 1; i < elevationColors.length; i++) {
            ec1 = elevationColors[i];
            if(h >= ec0[0] && h <= ec1[0]) break;
            ec0 = ec1;
        }

        int h0=ec0[0], r0=ec0[1], g0=ec0[2], b0=ec0[3];
        int h1=ec1[0], r1=ec1[1], g1=ec1[2], b1=ec1[3];
        float v1 = ((float)(h - h0)) / ((float)(h1 - h0));

        return colorLERP(v1, r0, g0, b0, r1, g1, b1);
    }

    private static void drawCircle(int i, int j, int N, double rad) {
        int c = (int)((i+0.5f) * 464.0f / N);
        int r = (int)((j+0.5f) * 464.0f / N);
        StdDraw.circle(c + 24, 464 - r + 36, rad);
    }
    public static void drawCircle(Coord loc, int N, double rad) {
        drawCircle(loc.getI(), loc.getJ(), N, rad);
    }

    private static void drawPath(Iterable<Coord> path, int N) {
        boolean first = true;
        int c0 = 0, r0 = 0;
        for (Coord loc : path) {
            int c1 = (int)((loc.getI()+0.5f) * 464.0f / N);
            int r1 = (int)((loc.getJ()+0.5f) * 464.0f / N);
            if(!first) {
                StdDraw.line(c0 + 24, 464 - r0 + 36, c1 + 24, 464 - r1 + 36);
            }
            first = false;
            c0 = c1; r0 = r1;
        }
    }

    // draw N-by-N pathfinding map
    public static void draw(Terrain terrain, Pathfinder pf, Walker walker, int N) {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.filledSquare(256, 256 + 12, 464 / 2);

        // draw terrain
        for(int row = 0; row < 464; row++) {
            int j = (int)((float)row/464.0f * N);
            for(int col = 0; col < 464; col++) {
                int i = (int)((float)col/464.0f * N);
                Coord loc = new Coord(i,j);
                Color c = height2Color(terrain.getHeight(loc));
                if(pf.wasSearched(loc)) {
                    c = colorLERP(0.50f, c, cSearched);
                }
                StdDraw.setPenColor(c);
                StdDraw.filledSquare(col + 24, 464 - row + 36, 1);
            }
        }

        // draw path start
        if(pf.getPathStart() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathStart(), N, 4.0);

            StdDraw.setPenColor(cStart);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathStart(), N, 4.0);
        }

        // draw path end
        if(pf.getPathEnd() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathEnd(), N, 4.0);

            StdDraw.setPenColor(cEnd);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathEnd(), N, 4.0);
        }

        // draw found path
        if(pf.foundPath()) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawPath(pf.getPathSolution(), N);

            StdDraw.setPenColor(cSolution);
            StdDraw.setPenRadius(0.002);
            drawPath(pf.getPathSolution(), N);
        }

        // draw walker
        if(walker != null) {
            Coord loc = walker.getLocation();
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);

            StdDraw.setPenColor(StdDraw.WHITE);
            StdDraw.setPenRadius(0.002);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);
        }

        // write status text
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.text(96, 12, "heuristic: " + pf.getHeuristic());
        if(pf.foundPath()) StdDraw.text(256, 12, "path: " + pf.getPathCost());
        else               StdDraw.text(256, 12, "no path found");
        StdDraw.text(512-96, 12, "searched: " + pf.getSearchSize() + " (" + (int)(100.0f * pf.getSearchSize() / (N*N)) + "%)");
    }
}

--[ 2019.11.07.22.08.28.941.1 ]--
InitFile: /src/Terrain.java
import java.lang.IndexOutOfBoundsException;

/**
 * Terrain stores elevations for map and computes distance and
 * cost in traversing the terrain.
 */

public class Terrain {
    private int N;
    private int[][] heights;

    public Terrain(int N) {
        this.N = N;
        this.heights = new int[N][N];
    }

    public Terrain(int[][] heights) {
        this.N = heights.length;
        this.heights = heights;
    }

    public Terrain(String emapfile) {
        In in = new In(emapfile);
        this.N = in.readInt();
        this.heights = new int[N][N];
        for (int j = 0; j < N; j++) {
            for (int i = 0; i < N; i++) {
                this.heights[i][j] = in.readInt();
            }
        }
    }

    public int getN() {
        return N;
    }

    public void setHeight(int i, int j, int h) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        heights[i][j] = h;
    }
    public void setHeight(int i, int j, float h) {
        setHeight(i, j, (int) h);
    }
    public void setHeight(Coord loc, int h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }
    public void setHeight(Coord loc, float h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }

    public int getHeight(int i, int j) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        return heights[i][j];
    }
    public int getHeight(Coord loc) {
        return getHeight(loc.getI(), loc.getJ());
    }

    // computes distance between (i0,j0) and (i1,j1) as the crow flies
    public float computeDistance(int i0, int j0, int i1, int j1) {
        return (float)Math.sqrt((i0 - i1) * (i0 - i1) + (j0 - j1) * (j0 - j1));
    }
    public float computeDistance(Coord c0, Coord c1) {
        return computeDistance(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }

    public float computeTravelCost(int i0, int j0, int i1, int j1) {
        float h0 = getHeight(i0, j0), h1 = getHeight(i1, j1);
        float climb = (float)Math.pow(Math.abs(h0 - h1) * 1000.0, 1.5);
        float dist = computeDistance(i0,j0, i1,j1);
        return (1.0f + climb) * dist;
    }
    public float computeTravelCost(Coord c0, Coord c1) {
        return computeTravelCost(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }
    public float computeTravelCost(Iterable<Coord> cs) {
        Coord c0 = null;
        float cost = 0.0f;
        for(Coord c1 : cs) {
            if(c0 != null) cost += computeTravelCost(c0, c1);
            c0 = c1;
        }
        return cost;
    }
}

--[ 2019.11.07.22.08.28.942.0 ]--
InitFile: /src/Walker.java
import java.util.Iterator;

/**
 * Walker takes an Iterable of Coords and simulates an individual
 * walking along the path over the given Terrain
 */
public class Walker {

    // terrain: the Terrain the Walker traverses
    // path: the sequence of Coords the Walker follows
    public Walker(Terrain terrain, Iterable<Coord> path) {
    }

    // returns the Walker's current location
    public Coord getLocation() {
        return null;
    }

    // returns true if Walker has reached the end Coord (last in path)
    public boolean doneWalking() {
        return true;
    }

    // advances the Walker along path
    // byTime: how long the Walker should traverse (may be any non-negative value)
    public void advance(float byTime) {
    }

}

--[ 2019.11.07.22.08.28.943.0 ]--
InitFile: /src/Coord.java
/**
 * Coordinates is an immutable type that store the tuple (i, j)
 */
public final class Coord {
    private final int i;
    private final int j;

    public Coord(int i, int j) {
        this.i = i;
        this.j = j;
    }

    public int getI() { return i; }
    public int getJ() { return j; }

    public boolean isInBounds(int minI, int minJ, int maxI, int maxJ) {
        return i >= minI && j >= minJ && i <= maxI && j <= maxJ;
    }
    public boolean isInBounds(Coord min, Coord max) {
        return i >= min.i && i <= max.i && j >= min.j && j <= max.j;
    }

    public Coord add(int addI, int addJ) {
        return new Coord(i + addI, j + addJ);
    }
    public Coord add(Coord that) { return new Coord(i + that.i, j + that.j); }

    public String toString() { return "(" + i + "," + j + ")"; }

    public boolean equals(Object o) {
        if(this == o) return true;
        if(o == null) return false;
        if(o.getClass() != this.getClass()) return false;
        Coord that = (Coord) o;
        if(this.i != that.i) return false;
        if(this.j != that.j) return false;
        return true;
    }
}

--[ 2019.11.07.22.08.28.943.1 ]--
InitFile: /src/Pathfinder.java
import java.lang.IndexOutOfBoundsException;
import java.lang.IllegalArgumentException;
import java.util.Iterator;

/**
 * Pathfinder uses A* search to find a near optimal path
 * between to locations with given terrain.
 */

public class Pathfinder {

    private Coord start;
    private Coord end;
    private float heuristic;
    private boolean pathFound;
    private Stack<Coord> s;
    private Terrain terrain;
    private PFNode[][] board;

    /**
     * PFNode will be the key for MinPQ (used in computePath())
     */
    private class PFNode implements Comparable<PFNode> {
        // loc: the location of the PFNode
        // fromNode: how did we get here? (linked list back to start)
        public PFNode(Coord loc, PFNode fromNode) {

        }

        // compares this with that, used to find minimum cost PFNode
        public int compareTo(PFNode that) {
            return 0;
        }

        // returns the cost to travel from starting point to this
        // via the fromNode chain
        public float getCost(float heuristic) { return 0; }

        // returns if this PFNode is not marked invalid
        public boolean isValid() {
            return false;
        }

        // marks the PFNode as invalid
        public void invalidate() {
        }

        // returns if the PFNode is marked as used
        public boolean isUsed() {
            return true;
        }

        // marks the PFNode as used
        public void use() { }

        // returns an Iterable of PFNodes that surround this
        public Iterable<PFNode> neighbors() {
            Stack<PFNode> s = new Stack<>();
            s.push(new PFNode(null, null));
            return s;
        }

    }

    public Pathfinder(Terrain terrain) {
        this.terrain = terrain;

        board = new PFNode[terrain.getN()][terrain.getN()];
    }

    public void setPathStart(Coord loc) {
        start = loc;
    }

    public Coord getPathStart() {
        return start;
    }

    public void setPathEnd(Coord loc) {
        end = loc;
    }

    public Coord getPathEnd() {
        return end;
    }

    public void setHeuristic(float v)
    {
        heuristic = v;
    }

    public float getHeuristic() {
        return heuristic;
    }

    public void resetPath() {
    }

    public void computePath() {

        //Create a pointer that will initially begin at the start node. Keeps track of which node you're currently on.
        Coord pointer = start;
        MinPQ<PFNode> pfQueue = new MinPQ<>();
        PFNode begin = new PFNode(start, null);


        board[pointer.getJ()][pointer.getI()] = begin;
        pfQueue.insert(begin);


        //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerException
        s = new Stack<>();
        s.push(start);
        s.push(end);


        pathFound = true;
    }

    public boolean foundPath() {
        return pathFound;
    }

    public float getPathCost() {
        return 0;
    }

    public int getSearchSize() {
        return 0;
    }

    public Iterable<Coord> getPathSolution() {

        /*
        Stack<Coord> s = new Stack<>();
        s.push(start);
        s.push(end);
        */

        //Return a stack of coordinates for the visualizer
        return s;
    }

    public boolean wasSearched(Coord loc) {
        return false;
    }
}

--[ 2019.11.07.22.08.28.944.0 ]--
InitFile: /src/TerrainEditor.java
/**
 * The following class provides some simple terrain editing functions.
 */
public class TerrainEditor {
    private static float rndRadius(float d) {
        return (float)StdRandom.uniform(-d,d);
    }

    private static float getFractalHeight(int i, int j, float dh, Terrain terrain, boolean[] isset) {
        int N = terrain.getN();
        dh = Math.max(-64, Math.min(255+64, dh));   // allow the height to go just a bit out of range
        if(!isset[i + j * N]) {
            isset[i + j * N] = true;
            terrain.setHeight(i, j, dh);
        }
        return terrain.getHeight(i,j);
    }

    private static void setFractalHeights(int i0, int j0, int i1, int j1, Terrain terrain, boolean[] isset) {
        int id = i1-i0;
        int jd = j1-j0;
        int i01 = (i0+i1)/2;
        int j01 = (j0+j1)/2;

        if(id <= 1 && jd <= 1) return;

        float h00 = getFractalHeight(i0,j0,32,terrain,isset);
        float h01 = getFractalHeight(i0,j1,32,terrain,isset);
        float h10 = getFractalHeight(i1,j0,32,terrain,isset);
        float h11 = getFractalHeight(i1,j1,32,terrain,isset);

        float d = (float)(Math.sqrt((i1-i0)*(i1-i0) + (j1-j0)*(j1-j0)) * 0.5);

        float d0001 = (h00 + h01) / 2 + rndRadius(d);
        float d0010 = (h00 + h10) / 2 + rndRadius(d);
        float d1101 = (h11 + h01) / 2 + rndRadius(d);
        float d1110 = (h11 + h10) / 2 + rndRadius(d);

        float h0001 = getFractalHeight(i0, j01, d0001, terrain,isset);
        float h0010 = getFractalHeight(i01, j0, d0010, terrain,isset);
        float h1101 = getFractalHeight(i01, j1, d1101, terrain,isset);
        float h1110 = getFractalHeight(i1, j01, d1110, terrain,isset);

        float dm = (float)((h0001 + h0010 + h1101 + h1110) / 4.0);
        float hm = getFractalHeight(i01, j01, dm, terrain,isset);

        if(id > 1 && jd > 1) {
            setFractalHeights(i0, j0, i01, j01, terrain, isset);
            setFractalHeights(i01, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i01, j1, terrain, isset);
            setFractalHeights(i01, j01, i1, j1, terrain, isset);
        } else if(jd > 1) {
            setFractalHeights(i0, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i1, j1, terrain, isset);
        } else {
            setFractalHeights(i0, j0, i01, j1, terrain, isset);
            setFractalHeights(i01, j0, i1, j1, terrain, isset);
        }
    }

    public static void setFractalHeights(Terrain terrain) {
        int N = terrain.getN();
        boolean[] isset = new boolean[N*N];
        setFractalHeights(0, 0, N - 1, N - 1, terrain, isset);
    }

    public static void smoothHeights(Terrain terrain) {
        int N = terrain.getN();
        int radius = (int)Math.ceil(Math.sqrt(N*N/2.0f));
        smoothHeights(N/2, N/2, radius, false, terrain);
    }

    public static void smoothHeights(int ic, int jc, int radius, boolean fallOff, Terrain terrain) {
        final int N = terrain.getN();
        final int w = 2*radius+1;
        float[] s = new float[w*w];
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;

                float m = computeEffect(i, j, ic, jc, radius, fallOff, N);
                if(m <= 0.0000001) {
                    s[sidx] = terrain.getHeight(i,j);
                    continue;
                }
                float h = 0;
                int c = 0;
                if(i > 0 && j > 0) {
                    h += terrain.getHeight(i-1,j-1);
                    c += 1;
                }
                if(i < N-1 && j > 0) {
                    h += terrain.getHeight(i+1,j-1);
                    c += 1;
                }
                if(i > 0 && j < N-1) {
                    h += terrain.getHeight(i-1,j+1);
                    c += 1;
                }
                if(i < N-1 && j < N-1) {
                    h += terrain.getHeight(i+1,j+1);
                    c += 1;
                }
                if(i > 0) {
                    h += terrain.getHeight(i-1,j);
                    c += 1;
                }
                if(j > 0) {
                    h += terrain.getHeight(i,j-1);
                    c += 1;
                }
                if(i < N-1) {
                    h += terrain.getHeight(i+1,j);
                    c += 1;
                }
                if(j < N-1) {
                    h += terrain.getHeight(i,j+1);
                    c += 1;
                }
                s[sidx] = (1-m) * terrain.getHeight(i,j) + m * h / c;
            }
        }
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;
                terrain.setHeight(i, j, s[sidx]);
            }
        }
    }

    public static void clampHeights(Terrain terrain) {
        int N = terrain.getN();
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                terrain.setHeight(i, j, Math.max(0, Math.min(255, terrain.getHeight(i, j))));
            }
        }
    }

    private static float computeEffect(int i, int j, int ic, int jc, int radius, boolean fallOff, int N) {
        if(i < 0 || j < 0 || i >= N || j >= N) return 0;
        if(!fallOff) return 1;
        int d2 = (ic-i)*(ic-i)+(jc-j)*(jc-j);
        if(d2 > radius*radius) return 0;
        return ((float)radius - (float)Math.sqrt(d2)) / (float)radius;
    }

    public static void addHeight(int i, int j, int radius, float add, Terrain terrain) {
        final int N = terrain.getN();
        for(int ja = -radius; ja <= radius; ja++) {
            int r = j + ja;
            if(r < 0 || r >= N) continue;
            for(int ia = -radius; ia <= radius; ia++) {
                int c = i + ia;
                if(c < 0 || c >= N) continue;
                float v = add * computeEffect(c, r, i, j, radius, true, N);
                float h = terrain.getHeight(c, r) + v;
                h = Math.max(0, Math.min(255, h));
                terrain.setHeight(c, r, h);
            }
        }
    }
}

--[ 2019.11.07.22.08.28.944.1 ]--
InitFile: /.cos265


--[ 2019.11.07.22.08.28.945.0 ]--
InitFile: /P04_Pathfinding.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/heightmaps" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.11.07.22.08.55.353.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.08.00.58.57.285.0 ]--
DisposeComponent
--[ 2019.11.08.12.54.31.993.0 ]--
NewLogger: P04_Pathfinding
Version: 1.3
--[ 2019.11.08.12.54.32.223.0 ]--
InitTree:
/out/production/P04_Pathfinding/.donotlog
/out/production/P04_Pathfinding/algs4.jar
/out/production/P04_Pathfinding/stdlib.jar
/out/production/P04_Pathfinding/Coord.class
/out/production/P04_Pathfinding/png2emap.py
/out/production/P04_Pathfinding/Walker.class
/out/production/P04_Pathfinding/Terrain.class
/out/production/P04_Pathfinding/ramp.png.emap
/out/production/P04_Pathfinding/ramp2.png.emap
/out/production/P04_Pathfinding/ramp3.png.emap
/out/production/P04_Pathfinding/mazeAB.png.emap
/out/production/P04_Pathfinding/usa128.png.emap
/out/production/P04_Pathfinding/usa256.png.emap
/out/production/P04_Pathfinding/Pathfinder.class
/out/production/P04_Pathfinding/usa1024.png.emap
/out/production/P04_Pathfinding/maze32_0.png.emap
/out/production/P04_Pathfinding/maze32_1.png.emap
/out/production/P04_Pathfinding/maze232_0.png.emap
/out/production/P04_Pathfinding/maze320_0.png.emap
/out/production/P04_Pathfinding/mazeBrain.png.emap
/out/production/P04_Pathfinding/TerrainEditor.class
/out/production/P04_Pathfinding/Pathfinder$PFNode.class
/out/production/P04_Pathfinding/PathfinderVisualizer.class
/out/production/P04_Pathfinding/InteractivePathfinderVisualizer.class
/src/algs4.jar
/src/Coord.java
/src/stdlib.jar
/src/Walker.java
/src/Terrain.java
/src/Pathfinder.java
/src/TerrainEditor.java
/src/PathfinderVisualizer.java
/src/InteractivePathfinderVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/heightmaps/.donotlog
/heightmaps/png2emap.py
/heightmaps/ramp.png.emap
/heightmaps/ramp2.png.emap
/heightmaps/ramp3.png.emap
/heightmaps/mazeAB.png.emap
/heightmaps/usa128.png.emap
/heightmaps/usa256.png.emap
/heightmaps/usa1024.png.emap
/heightmaps/maze32_0.png.emap
/heightmaps/maze32_1.png.emap
/heightmaps/maze232_0.png.emap
/heightmaps/maze320_0.png.emap
/heightmaps/mazeBrain.png.emap
/.cos265
/readme.html
/P04_Pathfinding.iml

--[ 2019.11.08.12.54.32.223.1 ]--
InitFile: /src/InteractivePathfinderVisualizer.java
import java.awt.event.KeyEvent;

/**
 * InteractivePathfinderVisualizer visualizes the terrain and the computed
 * path and allows the user to change parameters of the Pathfinder.  Below
 * is a list of commands and what they do.  Note: some of the commands
 * modify the properties of the path finder and some modify the terrain.
 *
 * Command        Action                                      Terrain
 * C              clear path
 * space          recompute path
 * S/E            set start/end location to mouse
 * left/right     halve/double path search heuristic value
 * 0/1            set path search heuristic to 0 or 1
 * W              start a walker to show the path
 * R              randomly generate a new terrain                *
 * M              smooths terrain under mouse                    *
 * shift+M        smooths all terrain                            *
 * up/down        increase/decrease terrain under mouse          *
 */

public class InteractivePathfinderVisualizer {
    private final static int DELAY = 10;

    // sets how many redraws it should take for the walker to reach its destination
    private final static float STEPS_TO_WALK = 100.0f;

    // for convenience, here are the emap files that are located under heightmaps/ folder
    // the python script in that folder converts png files to emap. \
    // you can use it to create your own maps to test your code
    private final static String[] emaps = {
            "maze32_0.png.emap",    // 0   (32x32 maze)
            "maze32_1.png.emap",    // 1   (another 32x32 maze)
            "maze232_0.png.emap",   // 2   (232x232 maze)
            "maze320_0.png.emap",   // 3   (same as maze32_0, only scaled up by 10x)
            "mazeAB.png.emap",      // 4   (a maze from a site no longer online :( )
            "mazeBrain.png.emap",   // 5   (...)
            "ramp.png.emap",        // 6   (some tests)
            "ramp2.png.emap",       // 7   (...)
            "ramp3.png.emap",       // 8   (...)
            "usa128.png.emap",      // 9   (elevation map of USA from https://bananas.openttd.org/en/heightmap/)
            "usa256.png.emap",      // 10  (same as usa128, only higher resolution)
            "usa1024.png.emap",     // 11  (same as usa128, only higher resolution
    };

    private final static String emapFilename = emaps[0];        // change index to load a different elevation map



    public static void main(String[] args) {
        Terrain terrain = new Terrain(emapFilename);
        Pathfinder pf = new Pathfinder(terrain);
        int N = terrain.getN();

        StdDraw.show(0);

        // set default starting and ending locations
        pf.setPathStart(new Coord(1, 1));
        pf.setPathEnd(new Coord(N-3, N-3));

        // find a path
        pf.computePath();

        PathfinderVisualizer.draw(terrain, pf, null, N);
        StdDraw.show(DELAY);

        // prevent repeated applications
        boolean keyboardR = false;
        boolean keyboardM = false;

        Walker walker = null;

        while(true) {
            boolean recompute = false;
            boolean redraw = false;

            // mouse location on map
            int mouseI = (int) ((StdDraw.mouseX()-24) / 464 * N);
            int mouseJ = (int) ((464 - (StdDraw.mouseY()-36)) / 464 * N);
            boolean isMouseOnMap = (mouseI >=0 && mouseI < N && mouseJ >= 0 && mouseJ < N);

            if(StdDraw.isKeyPressed(KeyEvent.VK_LEFT) || StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
                boolean keyboardLeft = StdDraw.isKeyPressed(KeyEvent.VK_LEFT);
                float m = keyboardLeft ? 0.5f : 2.0f;
                float h = pf.getHeuristic() * m;
                h = Math.max(1.0f/1024.0f, Math.min(1048576.0f, h));
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_0) || StdDraw.isKeyPressed(KeyEvent.VK_1)) {
                boolean keyboard0 = StdDraw.isKeyPressed(KeyEvent.VK_0);
                float h = keyboard0 ? 0 : 1;
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_C)) {
                pf.resetPath();
                walker = null;
                redraw = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_R) && !keyboardR) {
                TerrainEditor.setFractalHeights(terrain);
                TerrainEditor.clampHeights(terrain);
                recompute = true;
            }
            keyboardR = StdDraw.isKeyPressed(KeyEvent.VK_R);

            if(StdDraw.isKeyPressed(KeyEvent.VK_M)) {
                if(StdDraw.isKeyPressed(KeyEvent.VK_SHIFT)) {
                    if(!keyboardM) {
                        TerrainEditor.smoothHeights(terrain);
                        recompute = true;
                    }
                } else {
                    TerrainEditor.smoothHeights(mouseI, mouseJ, N / 20, true, terrain);
                    recompute = true;
                }
            }
            keyboardM = StdDraw.isKeyPressed(KeyEvent.VK_M);

            if(StdDraw.isKeyPressed(KeyEvent.VK_SPACE)) {
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_UP) || StdDraw.isKeyPressed(KeyEvent.VK_DOWN)) {
                boolean keyboardUp = StdDraw.isKeyPressed(KeyEvent.VK_UP);
                float add = keyboardUp ? 8.0f : -8.0f;
                TerrainEditor.addHeight(mouseI, mouseJ, N / 20, add, terrain);
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_S)) {
                pf.setPathStart(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_E)) {
                pf.setPathEnd(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_W)) {
                Iterable<Coord> path = pf.getPathSolution();
                if(path != null) {
                    walker = new Walker(terrain, pf.getPathSolution());
                }
            }

            if(walker != null) {
                if(walker.doneWalking()) {
                    walker = null;
                } else {
                    walker.advance(pf.getPathCost() / STEPS_TO_WALK);
                }
                redraw = true;
            }

            if(recompute) {
                walker = null;
                pf.resetPath();
                if(pf.getPathStart() != null && pf.getPathEnd() != null) {
                    pf.computePath();
                }
                redraw = true;
            }

            if(redraw) {
                PathfinderVisualizer.draw(terrain, pf, walker, N);
                StdDraw.show(DELAY);
            } else {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    /* do nothing */
                }
            }
        }
    }
}

--[ 2019.11.08.12.54.32.223.2 ]--
InitFile: /src/PathfinderVisualizer.java
/**
 * PathfinderVisualizer visualizes the terrain and found path.
 */

import java.awt.Color;
import java.awt.Font;

public class PathfinderVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // color for different elevations.  must be in ascending order!
    private final static int[][] elevationColors = {
            // h    r   g   b   where h=height, r=red, g=green, b=blue
            {  0,   0,  0,  0},
            {  2,   0,  0,160},
            {  4,   0,224,224},
            { 16, 192,192,  0},
            { 64,  16,255, 16},
            {128,  32,224, 32},
            {192, 128,128,  8},
            {224, 164,164,164},
            {255, 255,255,255}
    };

    private final static Color cStart    = new Color(128, 128, 255);
    private final static Color cEnd      = new Color(255, 128, 128);
    private final static Color cSolution = new Color(255, 128, 255);
    private final static Color cSearched = new Color(128,   0, 128);

    // linearly interpolating between the corresponding rgb values
    private static Color colorLERP(float v1, int r0, int g0, int b0, int r1, int g1, int b1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * r0 + v1 * r1);
        int g = (int)(v0 * g0 + v1 * g1);
        int b = (int)(v0 * b0 + v1 * b1);
        return new Color(r, g, b);
    }
    private static Color colorLERP(float v1, Color c0, Color c1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * c0.getRed()   + v1 * c1.getRed());
        int g = (int)(v0 * c0.getGreen() + v1 * c1.getGreen());
        int b = (int)(v0 * c0.getBlue()  + v1 * c1.getBlue());
        int a = (int)(v0 * c0.getAlpha() + v1 * c1.getAlpha());
        return new Color(r, g, b, a);
    }

    // returns color for given height
    private static Color height2Color(int h) {
        h = Math.max(0, Math.min(255, h));

        int[] ec0 = elevationColors[0];  // default lower bound
        int[] ec1 = elevationColors[1];  // default upper bound

        // find upper bound while updating lower bound
        for(int i = 1; i < elevationColors.length; i++) {
            ec1 = elevationColors[i];
            if(h >= ec0[0] && h <= ec1[0]) break;
            ec0 = ec1;
        }

        int h0=ec0[0], r0=ec0[1], g0=ec0[2], b0=ec0[3];
        int h1=ec1[0], r1=ec1[1], g1=ec1[2], b1=ec1[3];
        float v1 = ((float)(h - h0)) / ((float)(h1 - h0));

        return colorLERP(v1, r0, g0, b0, r1, g1, b1);
    }

    private static void drawCircle(int i, int j, int N, double rad) {
        int c = (int)((i+0.5f) * 464.0f / N);
        int r = (int)((j+0.5f) * 464.0f / N);
        StdDraw.circle(c + 24, 464 - r + 36, rad);
    }
    public static void drawCircle(Coord loc, int N, double rad) {
        drawCircle(loc.getI(), loc.getJ(), N, rad);
    }

    private static void drawPath(Iterable<Coord> path, int N) {
        boolean first = true;
        int c0 = 0, r0 = 0;
        for (Coord loc : path) {
            int c1 = (int)((loc.getI()+0.5f) * 464.0f / N);
            int r1 = (int)((loc.getJ()+0.5f) * 464.0f / N);
            if(!first) {
                StdDraw.line(c0 + 24, 464 - r0 + 36, c1 + 24, 464 - r1 + 36);
            }
            first = false;
            c0 = c1; r0 = r1;
        }
    }

    // draw N-by-N pathfinding map
    public static void draw(Terrain terrain, Pathfinder pf, Walker walker, int N) {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.filledSquare(256, 256 + 12, 464 / 2);

        // draw terrain
        for(int row = 0; row < 464; row++) {
            int j = (int)((float)row/464.0f * N);
            for(int col = 0; col < 464; col++) {
                int i = (int)((float)col/464.0f * N);
                Coord loc = new Coord(i,j);
                Color c = height2Color(terrain.getHeight(loc));
                if(pf.wasSearched(loc)) {
                    c = colorLERP(0.50f, c, cSearched);
                }
                StdDraw.setPenColor(c);
                StdDraw.filledSquare(col + 24, 464 - row + 36, 1);
            }
        }

        // draw path start
        if(pf.getPathStart() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathStart(), N, 4.0);

            StdDraw.setPenColor(cStart);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathStart(), N, 4.0);
        }

        // draw path end
        if(pf.getPathEnd() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathEnd(), N, 4.0);

            StdDraw.setPenColor(cEnd);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathEnd(), N, 4.0);
        }

        // draw found path
        if(pf.foundPath()) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawPath(pf.getPathSolution(), N);

            StdDraw.setPenColor(cSolution);
            StdDraw.setPenRadius(0.002);
            drawPath(pf.getPathSolution(), N);
        }

        // draw walker
        if(walker != null) {
            Coord loc = walker.getLocation();
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);

            StdDraw.setPenColor(StdDraw.WHITE);
            StdDraw.setPenRadius(0.002);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);
        }

        // write status text
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.text(96, 12, "heuristic: " + pf.getHeuristic());
        if(pf.foundPath()) StdDraw.text(256, 12, "path: " + pf.getPathCost());
        else               StdDraw.text(256, 12, "no path found");
        StdDraw.text(512-96, 12, "searched: " + pf.getSearchSize() + " (" + (int)(100.0f * pf.getSearchSize() / (N*N)) + "%)");
    }
}

--[ 2019.11.08.12.54.32.224.0 ]--
InitFile: /src/Terrain.java
import java.lang.IndexOutOfBoundsException;

/**
 * Terrain stores elevations for map and computes distance and
 * cost in traversing the terrain.
 */

public class Terrain {
    private int N;
    private int[][] heights;

    public Terrain(int N) {
        this.N = N;
        this.heights = new int[N][N];
    }

    public Terrain(int[][] heights) {
        this.N = heights.length;
        this.heights = heights;
    }

    public Terrain(String emapfile) {
        In in = new In(emapfile);
        this.N = in.readInt();
        this.heights = new int[N][N];
        for (int j = 0; j < N; j++) {
            for (int i = 0; i < N; i++) {
                this.heights[i][j] = in.readInt();
            }
        }
    }

    public int getN() {
        return N;
    }

    public void setHeight(int i, int j, int h) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        heights[i][j] = h;
    }
    public void setHeight(int i, int j, float h) {
        setHeight(i, j, (int) h);
    }
    public void setHeight(Coord loc, int h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }
    public void setHeight(Coord loc, float h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }

    public int getHeight(int i, int j) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        return heights[i][j];
    }
    public int getHeight(Coord loc) {
        return getHeight(loc.getI(), loc.getJ());
    }

    // computes distance between (i0,j0) and (i1,j1) as the crow flies
    public float computeDistance(int i0, int j0, int i1, int j1) {
        return (float)Math.sqrt((i0 - i1) * (i0 - i1) + (j0 - j1) * (j0 - j1));
    }
    public float computeDistance(Coord c0, Coord c1) {
        return computeDistance(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }

    public float computeTravelCost(int i0, int j0, int i1, int j1) {
        float h0 = getHeight(i0, j0), h1 = getHeight(i1, j1);
        float climb = (float)Math.pow(Math.abs(h0 - h1) * 1000.0, 1.5);
        float dist = computeDistance(i0,j0, i1,j1);
        return (1.0f + climb) * dist;
    }
    public float computeTravelCost(Coord c0, Coord c1) {
        return computeTravelCost(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }
    public float computeTravelCost(Iterable<Coord> cs) {
        Coord c0 = null;
        float cost = 0.0f;
        for(Coord c1 : cs) {
            if(c0 != null) cost += computeTravelCost(c0, c1);
            c0 = c1;
        }
        return cost;
    }
}

--[ 2019.11.08.12.54.32.224.1 ]--
InitFile: /src/Walker.java
import java.util.Iterator;

/**
 * Walker takes an Iterable of Coords and simulates an individual
 * walking along the path over the given Terrain
 */
public class Walker {

    // terrain: the Terrain the Walker traverses
    // path: the sequence of Coords the Walker follows
    public Walker(Terrain terrain, Iterable<Coord> path) {
    }

    // returns the Walker's current location
    public Coord getLocation() {
        return null;
    }

    // returns true if Walker has reached the end Coord (last in path)
    public boolean doneWalking() {
        return true;
    }

    // advances the Walker along path
    // byTime: how long the Walker should traverse (may be any non-negative value)
    public void advance(float byTime) {
    }

}

--[ 2019.11.08.12.54.32.224.2 ]--
InitFile: /src/Coord.java
/**
 * Coordinates is an immutable type that store the tuple (i, j)
 */
public final class Coord {
    private final int i;
    private final int j;

    public Coord(int i, int j) {
        this.i = i;
        this.j = j;
    }

    public int getI() { return i; }
    public int getJ() { return j; }

    public boolean isInBounds(int minI, int minJ, int maxI, int maxJ) {
        return i >= minI && j >= minJ && i <= maxI && j <= maxJ;
    }
    public boolean isInBounds(Coord min, Coord max) {
        return i >= min.i && i <= max.i && j >= min.j && j <= max.j;
    }

    public Coord add(int addI, int addJ) {
        return new Coord(i + addI, j + addJ);
    }
    public Coord add(Coord that) { return new Coord(i + that.i, j + that.j); }

    public String toString() { return "(" + i + "," + j + ")"; }

    public boolean equals(Object o) {
        if(this == o) return true;
        if(o == null) return false;
        if(o.getClass() != this.getClass()) return false;
        Coord that = (Coord) o;
        if(this.i != that.i) return false;
        if(this.j != that.j) return false;
        return true;
    }
}

--[ 2019.11.08.12.54.32.224.3 ]--
InitFile: /src/Pathfinder.java
import java.lang.IndexOutOfBoundsException;
import java.lang.IllegalArgumentException;
import java.util.Iterator;

/**
 * Pathfinder uses A* search to find a near optimal path
 * between to locations with given terrain.
 */

public class Pathfinder {

    private Coord start;
    private Coord end;
    private float heuristic;
    private boolean pathFound;
    private Stack<Coord> s;
    private Terrain terrain;
    private PFNode[][] board;

    /**
     * PFNode will be the key for MinPQ (used in computePath())
     */
    private class PFNode implements Comparable<PFNode> {
        // loc: the location of the PFNode
        // fromNode: how did we get here? (linked list back to start)
        public PFNode(Coord loc, PFNode fromNode) {

        }

        // compares this with that, used to find minimum cost PFNode
        public int compareTo(PFNode that) {
            return 0;
        }

        // returns the cost to travel from starting point to this
        // via the fromNode chain
        public float getCost(float heuristic) { return 0; }

        // returns if this PFNode is not marked invalid
        public boolean isValid() {
            return false;
        }

        // marks the PFNode as invalid
        public void invalidate() {
        }

        // returns if the PFNode is marked as used
        public boolean isUsed() {
            return true;
        }

        // marks the PFNode as used
        public void use() { }

        // returns an Iterable of PFNodes that surround this
        public Iterable<PFNode> neighbors() {
            Stack<PFNode> s = new Stack<>();
            s.push(new PFNode(null, null));
            return s;
        }

    }

    public Pathfinder(Terrain terrain) {
        this.terrain = terrain;

        board = new PFNode[terrain.getN()][terrain.getN()];
    }

    public void setPathStart(Coord loc) {
        start = loc;
    }

    public Coord getPathStart() {
        return start;
    }

    public void setPathEnd(Coord loc) {
        end = loc;
    }

    public Coord getPathEnd() {
        return end;
    }

    public void setHeuristic(float v)
    {
        heuristic = v;
    }

    public float getHeuristic() {
        return heuristic;
    }

    public void resetPath() {
    }

    public void computePath() {

        //Create a pointer that will initially begin at the start node. Keeps track of which node you're currently on.
        Coord pointer = start;
        MinPQ<PFNode> pfQueue = new MinPQ<>();
        PFNode begin = new PFNode(start, null);


        board[pointer.getJ()][pointer.getI()] = begin;
        pfQueue.insert(begin);


        //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerException
        s = new Stack<>();
        s.push(start);
        s.push(end);


        pathFound = true;
    }

    public boolean foundPath() {
        return pathFound;
    }

    public float getPathCost() {
        return 0;
    }

    public int getSearchSize() {
        return 0;
    }

    public Iterable<Coord> getPathSolution() {

        /*
        Stack<Coord> s = new Stack<>();
        s.push(start);
        s.push(end);
        */

        //Return a stack of coordinates for the visualizer
        return s;
    }

    public boolean wasSearched(Coord loc) {
        return false;
    }
}

--[ 2019.11.08.12.54.32.225.0 ]--
InitFile: /src/TerrainEditor.java
/**
 * The following class provides some simple terrain editing functions.
 */
public class TerrainEditor {
    private static float rndRadius(float d) {
        return (float)StdRandom.uniform(-d,d);
    }

    private static float getFractalHeight(int i, int j, float dh, Terrain terrain, boolean[] isset) {
        int N = terrain.getN();
        dh = Math.max(-64, Math.min(255+64, dh));   // allow the height to go just a bit out of range
        if(!isset[i + j * N]) {
            isset[i + j * N] = true;
            terrain.setHeight(i, j, dh);
        }
        return terrain.getHeight(i,j);
    }

    private static void setFractalHeights(int i0, int j0, int i1, int j1, Terrain terrain, boolean[] isset) {
        int id = i1-i0;
        int jd = j1-j0;
        int i01 = (i0+i1)/2;
        int j01 = (j0+j1)/2;

        if(id <= 1 && jd <= 1) return;

        float h00 = getFractalHeight(i0,j0,32,terrain,isset);
        float h01 = getFractalHeight(i0,j1,32,terrain,isset);
        float h10 = getFractalHeight(i1,j0,32,terrain,isset);
        float h11 = getFractalHeight(i1,j1,32,terrain,isset);

        float d = (float)(Math.sqrt((i1-i0)*(i1-i0) + (j1-j0)*(j1-j0)) * 0.5);

        float d0001 = (h00 + h01) / 2 + rndRadius(d);
        float d0010 = (h00 + h10) / 2 + rndRadius(d);
        float d1101 = (h11 + h01) / 2 + rndRadius(d);
        float d1110 = (h11 + h10) / 2 + rndRadius(d);

        float h0001 = getFractalHeight(i0, j01, d0001, terrain,isset);
        float h0010 = getFractalHeight(i01, j0, d0010, terrain,isset);
        float h1101 = getFractalHeight(i01, j1, d1101, terrain,isset);
        float h1110 = getFractalHeight(i1, j01, d1110, terrain,isset);

        float dm = (float)((h0001 + h0010 + h1101 + h1110) / 4.0);
        float hm = getFractalHeight(i01, j01, dm, terrain,isset);

        if(id > 1 && jd > 1) {
            setFractalHeights(i0, j0, i01, j01, terrain, isset);
            setFractalHeights(i01, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i01, j1, terrain, isset);
            setFractalHeights(i01, j01, i1, j1, terrain, isset);
        } else if(jd > 1) {
            setFractalHeights(i0, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i1, j1, terrain, isset);
        } else {
            setFractalHeights(i0, j0, i01, j1, terrain, isset);
            setFractalHeights(i01, j0, i1, j1, terrain, isset);
        }
    }

    public static void setFractalHeights(Terrain terrain) {
        int N = terrain.getN();
        boolean[] isset = new boolean[N*N];
        setFractalHeights(0, 0, N - 1, N - 1, terrain, isset);
    }

    public static void smoothHeights(Terrain terrain) {
        int N = terrain.getN();
        int radius = (int)Math.ceil(Math.sqrt(N*N/2.0f));
        smoothHeights(N/2, N/2, radius, false, terrain);
    }

    public static void smoothHeights(int ic, int jc, int radius, boolean fallOff, Terrain terrain) {
        final int N = terrain.getN();
        final int w = 2*radius+1;
        float[] s = new float[w*w];
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;

                float m = computeEffect(i, j, ic, jc, radius, fallOff, N);
                if(m <= 0.0000001) {
                    s[sidx] = terrain.getHeight(i,j);
                    continue;
                }
                float h = 0;
                int c = 0;
                if(i > 0 && j > 0) {
                    h += terrain.getHeight(i-1,j-1);
                    c += 1;
                }
                if(i < N-1 && j > 0) {
                    h += terrain.getHeight(i+1,j-1);
                    c += 1;
                }
                if(i > 0 && j < N-1) {
                    h += terrain.getHeight(i-1,j+1);
                    c += 1;
                }
                if(i < N-1 && j < N-1) {
                    h += terrain.getHeight(i+1,j+1);
                    c += 1;
                }
                if(i > 0) {
                    h += terrain.getHeight(i-1,j);
                    c += 1;
                }
                if(j > 0) {
                    h += terrain.getHeight(i,j-1);
                    c += 1;
                }
                if(i < N-1) {
                    h += terrain.getHeight(i+1,j);
                    c += 1;
                }
                if(j < N-1) {
                    h += terrain.getHeight(i,j+1);
                    c += 1;
                }
                s[sidx] = (1-m) * terrain.getHeight(i,j) + m * h / c;
            }
        }
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;
                terrain.setHeight(i, j, s[sidx]);
            }
        }
    }

    public static void clampHeights(Terrain terrain) {
        int N = terrain.getN();
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                terrain.setHeight(i, j, Math.max(0, Math.min(255, terrain.getHeight(i, j))));
            }
        }
    }

    private static float computeEffect(int i, int j, int ic, int jc, int radius, boolean fallOff, int N) {
        if(i < 0 || j < 0 || i >= N || j >= N) return 0;
        if(!fallOff) return 1;
        int d2 = (ic-i)*(ic-i)+(jc-j)*(jc-j);
        if(d2 > radius*radius) return 0;
        return ((float)radius - (float)Math.sqrt(d2)) / (float)radius;
    }

    public static void addHeight(int i, int j, int radius, float add, Terrain terrain) {
        final int N = terrain.getN();
        for(int ja = -radius; ja <= radius; ja++) {
            int r = j + ja;
            if(r < 0 || r >= N) continue;
            for(int ia = -radius; ia <= radius; ia++) {
                int c = i + ia;
                if(c < 0 || c >= N) continue;
                float v = add * computeEffect(c, r, i, j, radius, true, N);
                float h = terrain.getHeight(c, r) + v;
                h = Math.max(0, Math.min(255, h));
                terrain.setHeight(c, r, h);
            }
        }
    }
}

--[ 2019.11.08.12.54.32.225.1 ]--
InitFile: /.cos265


--[ 2019.11.08.12.54.32.225.2 ]--
InitFile: /P04_Pathfinding.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/heightmaps" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.11.08.12.55.23.501.0 ]--
:/src/Pathfinder.java
+ 109         
--[ 2019.11.08.12.55.23.563.0 ]--
+ 109         
--[ 2019.11.08.12.55.24.906.0 ]--
r 110         for
--[ 2019.11.08.12.55.25.179.0 ]--
r 110         for()
--[ 2019.11.08.12.55.25.309.0 ]--
r 110         for(i)
--[ 2019.11.08.12.55.26.331.0 ]--
r 110         for(int)
--[ 2019.11.08.12.55.26.488.0 ]--
r 110         for(int )
--[ 2019.11.08.12.55.26.527.0 ]--
r 110         for(int i )
--[ 2019.11.08.12.55.26.582.0 ]--
r 110         for(int i -)
--[ 2019.11.08.12.55.26.654.0 ]--
r 110         for(int i - )
--[ 2019.11.08.12.55.26.787.0 ]--
r 110         for(int i - 0)
--[ 2019.11.08.12.55.27.080.0 ]--
r 110         for(int i - )
--[ 2019.11.08.12.55.27.123.0 ]--
r 110         for(int i -)
--[ 2019.11.08.12.55.27.228.0 ]--
r 110         for(int i )
--[ 2019.11.08.12.55.27.332.0 ]--
r 110         for(int i =)
--[ 2019.11.08.12.55.27.505.0 ]--
r 110         for(int i = )
--[ 2019.11.08.12.55.27.560.0 ]--
r 110         for(int i = 0)
--[ 2019.11.08.12.55.27.756.0 ]--
r 110         for(int i = 0;)
--[ 2019.11.08.12.55.28.370.0 ]--
r 110         for(int i = 0; )
--[ 2019.11.08.12.55.28.539.0 ]--
r 110         for(int i = 0; i)
--[ 2019.11.08.12.55.28.718.0 ]--
r 110         for(int i = 0; i )
--[ 2019.11.08.12.55.28.978.0 ]--
r 110         for(int i = 0; i <)
--[ 2019.11.08.12.55.29.078.0 ]--
r 110         for(int i = 0; i < )
--[ 2019.11.08.12.55.31.121.0 ]--
r 110         for(int i = 0; i < t)
--[ 2019.11.08.12.55.31.231.0 ]--
r 110         for(int i = 0; i < te)
--[ 2019.11.08.12.55.31.352.0 ]--
r 110         for(int i = 0; i < ter)
--[ 2019.11.08.12.55.31.434.0 ]--
r 110         for(int i = 0; i < terr)
--[ 2019.11.08.12.55.31.527.0 ]--
r 110         for(int i = 0; i < terra)
--[ 2019.11.08.12.55.31.590.0 ]--
r 110         for(int i = 0; i < terrai)
--[ 2019.11.08.12.55.31.624.0 ]--
r 110         for(int i = 0; i < terrain)
--[ 2019.11.08.12.55.31.823.0 ]--
r 110         for(int i = 0; i < terrain.)
--[ 2019.11.08.12.55.32.087.0 ]--
r 110         for(int i = 0; i < terrain.N)
--[ 2019.11.08.12.55.32.747.0 ]--
r 110         for(int i = 0; i < terrain.)
--[ 2019.11.08.12.55.32.816.0 ]--
r 110         for(int i = 0; i < terrain.g)
--[ 2019.11.08.12.55.32.879.0 ]--
r 110         for(int i = 0; i < terrain.ge)
--[ 2019.11.08.12.55.33.000.0 ]--
r 110         for(int i = 0; i < terrain.get)
--[ 2019.11.08.12.55.34.209.0 ]--
r 110         for(int i = 0; i < terrain.getN)
--[ 2019.11.08.12.55.34.234.0 ]--
r 110         for(int i = 0; i < terrain.getN())
--[ 2019.11.08.12.55.34.353.0 ]--
r 110         for(int i = 0; i < terrain.getN();)
--[ 2019.11.08.12.55.34.514.0 ]--
r 110         for(int i = 0; i < terrain.getN(); )
--[ 2019.11.08.12.55.34.657.0 ]--
r 110         for(int i = 0; i < terrain.getN(); i)
--[ 2019.11.08.12.55.34.904.0 ]--
r 110         for(int i = 0; i < terrain.getN(); i_)
--[ 2019.11.08.12.55.35.011.0 ]--
r 110         for(int i = 0; i < terrain.getN(); i__)
--[ 2019.11.08.12.55.35.414.0 ]--
r 110         for(int i = 0; i < terrain.getN(); i_)
--[ 2019.11.08.12.55.35.487.0 ]--
r 110         for(int i = 0; i < terrain.getN(); i)
--[ 2019.11.08.12.55.36.061.0 ]--
r 110         for(int i = 0; i < terrain.getN(); i+)
--[ 2019.11.08.12.55.36.088.0 ]--
r 110         for(int i = 0; i < terrain.getN(); i++)
--[ 2019.11.08.12.55.36.823.0 ]--
r 110         for(int i = 0; i < terrain.getN(); i++){
--[ 2019.11.08.12.55.37.023.0 ]--
+ 111 
+ 112 }
--[ 2019.11.08.12.55.37.231.0 ]--
r 112         }
--[ 2019.11.08.12.55.37.264.0 ]--
r 111             
--[ 2019.11.08.12.55.37.724.0 ]--
r 111             f
--[ 2019.11.08.12.55.37.793.0 ]--
r 111             fo
--[ 2019.11.08.12.55.37.866.0 ]--
r 111             for
--[ 2019.11.08.12.55.37.972.0 ]--
r 111             for 
--[ 2019.11.08.12.55.38.654.0 ]--
r 111             for
--[ 2019.11.08.12.55.39.026.0 ]--
r 111             for()
--[ 2019.11.08.12.55.39.178.0 ]--
r 111             for(i)
--[ 2019.11.08.12.55.39.228.0 ]--
r 111             for(in)
--[ 2019.11.08.12.55.39.332.0 ]--
r 111             for(int)
--[ 2019.11.08.12.55.39.396.0 ]--
r 111             for(int )
--[ 2019.11.08.12.55.39.466.0 ]--
r 111             for(int j)
--[ 2019.11.08.12.55.39.981.0 ]--
r 111             for(int j )
--[ 2019.11.08.12.55.40.066.0 ]--
r 111             for(int j =)
--[ 2019.11.08.12.55.40.161.0 ]--
r 111             for(int j = )
--[ 2019.11.08.12.55.40.647.0 ]--
r 111             for(int j =)
--[ 2019.11.08.12.55.40.966.0 ]--
r 111             for(int j = )
--[ 2019.11.08.12.55.41.100.0 ]--
r 111             for(int j = 0)
--[ 2019.11.08.12.55.41.193.0 ]--
r 111             for(int j = 0 )
--[ 2019.11.08.12.55.41.690.0 ]--
r 111             for(int j = 0)
--[ 2019.11.08.12.55.41.839.0 ]--
r 111             for(int j = 0;)
--[ 2019.11.08.12.55.41.939.0 ]--
r 111             for(int j = 0; )
--[ 2019.11.08.12.55.42.881.0 ]--
r 111             for(int j = 0; j)
--[ 2019.11.08.12.55.42.982.0 ]--
r 111             for(int j = 0; j )
--[ 2019.11.08.12.55.43.073.0 ]--
r 111             for(int j = 0; j <)
--[ 2019.11.08.12.55.43.127.0 ]--
r 111             for(int j = 0; j < )
--[ 2019.11.08.12.55.43.275.0 ]--
r 111             for(int j = 0; j < t)
--[ 2019.11.08.12.55.43.349.0 ]--
r 111             for(int j = 0; j < te)
--[ 2019.11.08.12.55.43.592.0 ]--
r 111             for(int j = 0; j < ter)
--[ 2019.11.08.12.55.43.694.0 ]--
r 111             for(int j = 0; j < terr)
--[ 2019.11.08.12.55.43.769.0 ]--
r 111             for(int j = 0; j < terra)
--[ 2019.11.08.12.55.43.855.0 ]--
r 111             for(int j = 0; j < terrai)
--[ 2019.11.08.12.55.43.895.0 ]--
r 111             for(int j = 0; j < terrain)
--[ 2019.11.08.12.55.44.060.0 ]--
r 111             for(int j = 0; j < terrain.)
--[ 2019.11.08.12.55.44.173.0 ]--
r 111             for(int j = 0; j < terrain.g)
--[ 2019.11.08.12.55.44.203.0 ]--
r 111             for(int j = 0; j < terrain.ge)
--[ 2019.11.08.12.55.44.295.0 ]--
r 111             for(int j = 0; j < terrain.get)
--[ 2019.11.08.12.55.44.654.0 ]--
r 111             for(int j = 0; j < terrain.getN)
--[ 2019.11.08.12.55.44.993.0 ]--
r 111             for(int j = 0; j < terrain.getN*)
--[ 2019.11.08.12.55.45.242.0 ]--
r 111             for(int j = 0; j < terrain.getN*
--[ 2019.11.08.12.55.45.411.0 ]--
r 111             for(int j = 0; j < terrain.getN
--[ 2019.11.08.12.55.45.855.0 ]--
r 111             for(int j = 0; j < terrain.getN()
--[ 2019.11.08.12.55.45.899.0 ]--
r 111             for(int j = 0; j < terrain.getN())
--[ 2019.11.08.12.55.47.294.0 ]--
r 111             for(int j = 0; j < terrain.getN();)
--[ 2019.11.08.12.55.47.369.0 ]--
r 111             for(int j = 0; j < terrain.getN(); )
--[ 2019.11.08.12.55.47.433.0 ]--
r 111             for(int j = 0; j < terrain.getN(); j)
--[ 2019.11.08.12.55.47.536.0 ]--
r 111             for(int j = 0; j < terrain.getN(); j )
--[ 2019.11.08.12.55.47.637.0 ]--
r 111             for(int j = 0; j < terrain.getN(); j +)
--[ 2019.11.08.12.55.47.738.0 ]--
r 111             for(int j = 0; j < terrain.getN(); j ++)
--[ 2019.11.08.12.55.48.641.0 ]--
r 111             for(int j = 0; j < terrain.getN(); j +)
--[ 2019.11.08.12.55.48.713.0 ]--
r 111             for(int j = 0; j < terrain.getN(); j )
--[ 2019.11.08.12.55.48.814.0 ]--
r 111             for(int j = 0; j < terrain.getN(); j)
--[ 2019.11.08.12.55.49.031.0 ]--
r 111             for(int j = 0; j < terrain.getN(); j+)
--[ 2019.11.08.12.55.49.104.0 ]--
r 111             for(int j = 0; j < terrain.getN(); j++)
--[ 2019.11.08.12.55.52.439.0 ]--
r 111             for(int j = 0; j < terrain.getN(); j++){
--[ 2019.11.08.12.55.52.635.0 ]--
+ 112 
+ 113 }
--[ 2019.11.08.12.55.52.699.0 ]--
r 113             }
--[ 2019.11.08.12.55.52.728.0 ]--
r 112                 
--[ 2019.11.08.12.55.55.928.0 ]--
r 112                 S
--[ 2019.11.08.12.55.56.130.0 ]--
r 112                 Ss
--[ 2019.11.08.12.55.56.435.0 ]--
r 112                 Sy
--[ 2019.11.08.12.55.56.516.0 ]--
r 112                 Sys
--[ 2019.11.08.12.55.56.644.0 ]--
r 112                 Syst
--[ 2019.11.08.12.55.56.701.0 ]--
r 112                 Syste
--[ 2019.11.08.12.55.56.774.0 ]--
r 112                 System
--[ 2019.11.08.12.55.56.977.0 ]--
r 112                 System.
--[ 2019.11.08.12.55.57.645.0 ]--
r 112                 System.o
--[ 2019.11.08.12.55.57.687.0 ]--
r 112                 System.ou
--[ 2019.11.08.12.55.57.751.0 ]--
r 112                 System.out
--[ 2019.11.08.12.55.57.875.0 ]--
r 112                 System.out.
--[ 2019.11.08.12.55.58.071.0 ]--
r 112                 System.out.p
--[ 2019.11.08.12.55.58.127.0 ]--
r 112                 System.out.pr
--[ 2019.11.08.12.55.58.186.0 ]--
r 112                 System.out.pri
--[ 2019.11.08.12.55.58.234.0 ]--
r 112                 System.out.prin
--[ 2019.11.08.12.55.58.300.0 ]--
r 112                 System.out.print
--[ 2019.11.08.12.55.58.423.0 ]--
r 112                 System.out.print()
--[ 2019.11.08.12.55.58.933.0 ]--
r 112                 System.out.print(b)
--[ 2019.11.08.12.55.59.009.0 ]--
r 112                 System.out.print(bo)
--[ 2019.11.08.12.55.59.032.0 ]--
r 112                 System.out.print(boa)
--[ 2019.11.08.12.55.59.130.0 ]--
r 112                 System.out.print(boar)
--[ 2019.11.08.12.55.59.247.0 ]--
r 112                 System.out.print(board)
--[ 2019.11.08.12.55.59.336.0 ]--
r 112                 System.out.print(board[])
--[ 2019.11.08.12.55.59.464.0 ]--
r 112                 System.out.print(board[i])
--[ 2019.11.08.12.56.00.079.0 ]--
r 112                 System.out.print(board[i][])
--[ 2019.11.08.12.56.00.374.0 ]--
r 112                 System.out.print(board[i][j])
--[ 2019.11.08.12.56.01.767.0 ]--
r 112                 System.out.print(board[i][j]);
--[ 2019.11.08.12.56.02.650.0 ]--
+ 114             
--[ 2019.11.08.12.56.03.311.0 ]--
r 114             S
--[ 2019.11.08.12.56.03.497.0 ]--
r 114             Sy
--[ 2019.11.08.12.56.03.544.0 ]--
r 114             Sys
--[ 2019.11.08.12.56.03.673.0 ]--
r 114             Syst
--[ 2019.11.08.12.56.03.714.0 ]--
r 114             Syste
--[ 2019.11.08.12.56.03.780.0 ]--
r 114             System
--[ 2019.11.08.12.56.03.937.0 ]--
r 114             System.
--[ 2019.11.08.12.56.04.398.0 ]--
r 114             System.o
--[ 2019.11.08.12.56.04.433.0 ]--
r 114             System.ou
--[ 2019.11.08.12.56.04.533.0 ]--
r 114             System.out
--[ 2019.11.08.12.56.04.631.0 ]--
r 114             System.out.
--[ 2019.11.08.12.56.04.841.0 ]--
r 114             System.out.p
--[ 2019.11.08.12.56.04.950.0 ]--
r 114             System.out.pr
--[ 2019.11.08.12.56.05.030.0 ]--
r 114             System.out.pri
--[ 2019.11.08.12.56.05.076.0 ]--
r 114             System.out.prin
--[ 2019.11.08.12.56.05.147.0 ]--
r 114             System.out.print
--[ 2019.11.08.12.56.05.295.0 ]--
r 114             System.out.printl
--[ 2019.11.08.12.56.05.374.0 ]--
r 114             System.out.println
--[ 2019.11.08.12.56.06.586.0 ]--
r 114             System.out.println()
--[ 2019.11.08.12.56.06.595.0 ]--
r 114             System.out.println();
--[ 2019.11.08.12.56.11.955.0 ]--
r 109 
--[ 2019.11.08.12.56.15.379.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.08.12.56.33.308.0 ]--
r 114             System.out.println();s
--[ 2019.11.08.12.56.34.574.0 ]--
r 114             System.out.println();
--[ 2019.11.08.12.56.41.597.0 ]--
r 114             System.out.println();e
--[ 2019.11.08.12.56.42.789.0 ]--
r 114             System.out.println();
--[ 2019.11.08.12.56.42.881.0 ]--
r 114             System.out.println()
--[ 2019.11.08.12.56.43.916.0 ]--
r 114             System.out.println();e
--[ 2019.11.08.12.56.44.673.0 ]--
r 114             System.out.println();
--[ 2019.11.08.12.56.52.578.0 ]--
r 114             System.out.println();e
--[ 2019.11.08.12.56.53.652.0 ]--
r 114             System.out.println();
--[ 2019.11.08.12.58.08.608.0 ]--
r 114             System.out.println("");
--[ 2019.11.08.12.58.08.653.0 ]--
r 114             System.out.println(" ");
--[ 2019.11.08.12.58.12.522.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.08.12.58.34.208.0 ]--
r 114             System.out.println(" );
--[ 2019.11.08.12.58.34.309.0 ]--
r 114             System.out.println(");
--[ 2019.11.08.12.58.34.421.0 ]--
r 114             System.out.println();
--[ 2019.11.08.12.58.37.466.0 ]--
r 112                 System.out.print(board[i][j] );
--[ 2019.11.08.12.58.37.596.0 ]--
r 112                 System.out.print(board[i][j] +);
--[ 2019.11.08.12.58.37.681.0 ]--
r 112                 System.out.print(board[i][j] + );
--[ 2019.11.08.12.58.37.767.0 ]--
r 112                 System.out.print(board[i][j] + "");
--[ 2019.11.08.12.58.37.977.0 ]--
r 112                 System.out.print(board[i][j] + " ");
--[ 2019.11.08.12.58.38.055.0 ]--
r 112                 System.out.print(board[i][j] + " '");
--[ 2019.11.08.12.58.38.657.0 ]--
r 112                 System.out.print(board[i][j] + " ');
--[ 2019.11.08.12.58.39.869.0 ]--
r 112                 System.out.print(board[i][j] + " );
--[ 2019.11.08.12.58.40.191.0 ]--
r 112                 System.out.print(board[i][j] + " ");
--[ 2019.11.08.12.58.44.500.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.08.13.22.36.543.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.08.13.23.03.949.0 ]--
+ 108         
--[ 2019.11.08.13.23.05.411.0 ]--
r 108         b
--[ 2019.11.08.13.23.05.514.0 ]--
r 108         bo
--[ 2019.11.08.13.23.05.570.0 ]--
r 108         boa
--[ 2019.11.08.13.23.05.903.0 ]--
r 108         boar
--[ 2019.11.08.13.23.06.019.0 ]--
r 108         board
--[ 2019.11.08.13.23.06.125.0 ]--
r 108         board[]
--[ 2019.11.08.13.23.06.399.0 ]--
r 108         board[p]
--[ 2019.11.08.13.23.06.614.0 ]--
r 108         board[po]
--[ 2019.11.08.13.23.07.428.0 ]--
r 108         board[pointer]
--[ 2019.11.08.13.23.07.590.0 ]--
r 108         board[pointer.]
--[ 2019.11.08.13.23.07.974.0 ]--
r 108         board[pointer.g]
--[ 2019.11.08.13.23.08.031.0 ]--
r 108         board[pointer.ge]
--[ 2019.11.08.13.23.08.141.0 ]--
r 108         board[pointer.get]
--[ 2019.11.08.13.23.08.370.0 ]--
r 108         board[pointer.getJ]
--[ 2019.11.08.13.23.08.904.0 ]--
r 108         board[pointer.getJ()]
--[ 2019.11.08.13.23.10.174.0 ]--
r 108         board[pointer.getJ()][]
--[ 2019.11.08.13.23.10.528.0 ]--
r 108         board[pointer.getJ()][g]
--[ 2019.11.08.13.23.10.609.0 ]--
r 108         board[pointer.getJ()][ge]
--[ 2019.11.08.13.23.10.700.0 ]--
r 108         board[pointer.getJ()][get]
--[ 2019.11.08.13.23.11.195.0 ]--
r 108         board[pointer.getJ()][ge]
--[ 2019.11.08.13.23.11.288.0 ]--
r 108         board[pointer.getJ()][g]
--[ 2019.11.08.13.23.11.529.0 ]--
r 108         board[pointer.getJ()][]
--[ 2019.11.08.13.23.11.676.0 ]--
r 108         board[pointer.getJ()][p]
--[ 2019.11.08.13.23.12.391.0 ]--
r 108         board[pointer.getJ()][po]
--[ 2019.11.08.13.23.12.511.0 ]--
r 108         board[pointer.getJ()][poi]
--[ 2019.11.08.13.23.12.577.0 ]--
r 108         board[pointer.getJ()][poin]
--[ 2019.11.08.13.23.12.641.0 ]--
r 108         board[pointer.getJ()][point]
--[ 2019.11.08.13.23.13.094.0 ]--
r 108         board[pointer.getJ()][]
--[ 2019.11.08.13.23.16.130.0 ]--
r 108         
--[ 2019.11.08.13.23.16.493.0 ]--
- 108
--[ 2019.11.08.13.23.17.192.0 ]--
r 107         board[pointer.getJ()][pointer.getI()] = begin; 
--[ 2019.11.08.13.23.17.256.0 ]--
r 107         board[pointer.getJ()][pointer.getI()] = begin;
--[ 2019.11.08.13.23.20.077.0 ]--
+ 103         
--[ 2019.11.08.13.23.20.426.0 ]--
r 103         C
--[ 2019.11.08.13.23.20.555.0 ]--
r 103         Co
--[ 2019.11.08.13.23.20.655.0 ]--
r 103         Coo
--[ 2019.11.08.13.23.20.720.0 ]--
r 103         Coor
--[ 2019.11.08.13.23.20.868.0 ]--
r 103         Coord
--[ 2019.11.08.13.23.21.204.0 ]--
r 103         Coord 
--[ 2019.11.08.13.23.21.466.0 ]--
r 103         Coord
--[ 2019.11.08.13.23.21.790.0 ]--
r 103         Coord 
--[ 2019.11.08.13.23.23.386.0 ]--
r 103         Coord e
--[ 2019.11.08.13.23.23.465.0 ]--
r 103         Coord en
--[ 2019.11.08.13.23.24.307.0 ]--
r 103         Coord e
--[ 2019.11.08.13.23.24.430.0 ]--
r 103         Coord 
--[ 2019.11.08.13.23.25.335.0 ]--
r 103         Coord e
--[ 2019.11.08.13.23.25.455.0 ]--
r 103         Coord en
--[ 2019.11.08.13.23.25.470.0 ]--
r 103         Coord end
--[ 2019.11.08.13.23.25.594.0 ]--
r 103         Coord endP
--[ 2019.11.08.13.23.26.023.0 ]--
r 103         Coord endPo
--[ 2019.11.08.13.23.26.325.0 ]--
r 103         Coord endPoi
--[ 2019.11.08.13.23.26.378.0 ]--
r 103         Coord endPoin
--[ 2019.11.08.13.23.26.445.0 ]--
r 103         Coord endPoint
--[ 2019.11.08.13.23.26.500.0 ]--
r 103         Coord endPointe
--[ 2019.11.08.13.23.26.593.0 ]--
r 103         Coord endPointer
--[ 2019.11.08.13.23.26.732.0 ]--
r 103         Coord endPointer 
--[ 2019.11.08.13.23.26.895.0 ]--
r 103         Coord endPointer  
--[ 2019.11.08.13.23.27.099.0 ]--
r 103         Coord endPointer 
--[ 2019.11.08.13.23.27.213.0 ]--
r 103         Coord endPointer =
--[ 2019.11.08.13.23.27.304.0 ]--
r 103         Coord endPointer = 
--[ 2019.11.08.13.23.27.449.0 ]--
r 103         Coord endPointer = e
--[ 2019.11.08.13.23.27.481.0 ]--
r 103         Coord endPointer = en
--[ 2019.11.08.13.23.27.563.0 ]--
r 103         Coord endPointer = end
--[ 2019.11.08.13.23.28.306.0 ]--
r 103         Coord endPointer = end;
--[ 2019.11.08.13.23.32.513.0 ]--
+ 109         
--[ 2019.11.08.13.23.33.872.0 ]--
r 109         b
--[ 2019.11.08.13.23.33.952.0 ]--
r 109         bo
--[ 2019.11.08.13.23.34.118.0 ]--
r 109         boa
--[ 2019.11.08.13.23.34.221.0 ]--
r 109         boar
--[ 2019.11.08.13.23.34.864.0 ]--
r 109         
--[ 2019.11.08.13.23.35.709.0 ]--
- 109
--[ 2019.11.08.13.23.40.463.0 ]--
r 103         
--[ 2019.11.08.13.23.40.591.0 ]--
- 103
--[ 2019.11.08.13.23.46.382.0 ]--
r 107         board[pointer.getJ][pointer.getI()] = begin;
--[ 2019.11.08.13.23.47.399.0 ]--
r 107         board[pointer.getJ()][pointer.getI()] = begin;
--[ 2019.11.08.13.23.48.159.0 ]--
r 107         board[pointer.get()][pointer.getI()] = begin;
--[ 2019.11.08.13.23.48.300.0 ]--
r 107         board[pointer.getI()][pointer.getI()] = begin;
--[ 2019.11.08.13.23.49.993.0 ]--
r 107         board[pointer.getI()][pointer.get()] = begin;
--[ 2019.11.08.13.23.50.164.0 ]--
r 107         board[pointer.getI()][pointer.getJ()] = begin;
--[ 2019.11.08.13.23.54.249.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.08.13.24.06.450.0 ]--
r 107         board[pointer.getI()][pointer.getJs()] = begin;
--[ 2019.11.08.13.24.07.872.0 ]--
r 107         board[pointer.getI()][pointer.getJ()] = begin;
--[ 2019.11.08.13.24.17.144.0 ]--
r 107         board[pointer.get()][pointer.getJ()] = begin;
--[ 2019.11.08.13.24.17.303.0 ]--
r 107         board[pointer.getJ()][pointer.getJ()] = begin;
--[ 2019.11.08.13.24.19.311.0 ]--
r 107         board[pointer.getJ()][pointer.get()] = begin;
--[ 2019.11.08.13.24.19.468.0 ]--
r 107         board[pointer.getJ()][pointer.getI()] = begin;
--[ 2019.11.08.13.24.23.056.0 ]--
r 106     
--[ 2019.11.08.13.24.23.140.0 ]--
r 106         
--[ 2019.11.08.13.24.23.288.0 ]--
r 106             
--[ 2019.11.08.13.24.24.085.0 ]--
+ 107         
--[ 2019.11.08.13.24.24.606.0 ]--
r 107         /
--[ 2019.11.08.13.24.24.708.0 ]--
r 107         //
--[ 2019.11.08.13.24.25.330.0 ]--
r 107         //J
--[ 2019.11.08.13.24.25.599.0 ]--
r 107         //J 
--[ 2019.11.08.13.24.25.693.0 ]--
r 107         //J a
--[ 2019.11.08.13.24.25.814.0 ]--
r 107         //J an
--[ 2019.11.08.13.24.25.878.0 ]--
r 107         //J and
--[ 2019.11.08.13.24.25.941.0 ]--
r 107         //J and 
--[ 2019.11.08.13.24.26.079.0 ]--
r 107         //J and I
--[ 2019.11.08.13.24.26.202.0 ]--
r 107         //J and I 
--[ 2019.11.08.13.24.26.358.0 ]--
r 107         //J and I a
--[ 2019.11.08.13.24.26.465.0 ]--
r 107         //J and I ar
--[ 2019.11.08.13.24.26.534.0 ]--
r 107         //J and I are
--[ 2019.11.08.13.24.26.604.0 ]--
r 107         //J and I are 
--[ 2019.11.08.13.24.26.842.0 ]--
r 107         //J and I are s
--[ 2019.11.08.13.24.27.168.0 ]--
r 107         //J and I are sw
--[ 2019.11.08.13.24.27.222.0 ]--
r 107         //J and I are swa
--[ 2019.11.08.13.24.27.312.0 ]--
r 107         //J and I are swap
--[ 2019.11.08.13.24.27.421.0 ]--
r 107         //J and I are swapp
--[ 2019.11.08.13.24.27.511.0 ]--
r 107         //J and I are swappe
--[ 2019.11.08.13.24.27.610.0 ]--
r 107         //J and I are swapped
--[ 2019.11.08.13.24.28.838.0 ]--
r 107         //J and I are swapped,
--[ 2019.11.08.13.24.28.926.0 ]--
r 107         //J and I are swapped, 
--[ 2019.11.08.13.24.29.006.0 ]--
r 107         //J and I are swapped, s
--[ 2019.11.08.13.24.29.094.0 ]--
r 107         //J and I are swapped, so
--[ 2019.11.08.13.24.29.188.0 ]--
r 107         //J and I are swapped, so 
--[ 2019.11.08.13.24.30.591.0 ]--
r 107         //J and I are swapped, so J
--[ 2019.11.08.13.24.30.839.0 ]--
r 107         //J and I are swapped, so J 
--[ 2019.11.08.13.24.30.946.0 ]--
r 107         //J and I are swapped, so J i
--[ 2019.11.08.13.24.31.024.0 ]--
r 107         //J and I are swapped, so J is
--[ 2019.11.08.13.24.31.093.0 ]--
r 107         //J and I are swapped, so J is 
--[ 2019.11.08.13.24.31.363.0 ]--
r 107         //J and I are swapped, so J is x
--[ 2019.11.08.13.24.31.534.0 ]--
r 107         //J and I are swapped, so J is x 
--[ 2019.11.08.13.24.31.654.0 ]--
r 107         //J and I are swapped, so J is x a
--[ 2019.11.08.13.24.31.765.0 ]--
r 107         //J and I are swapped, so J is x an
--[ 2019.11.08.13.24.31.851.0 ]--
r 107         //J and I are swapped, so J is x and
--[ 2019.11.08.13.24.32.132.0 ]--
r 107         //J and I are swapped, so J is x and 
--[ 2019.11.08.13.24.32.268.0 ]--
r 107         //J and I are swapped, so J is x and I
--[ 2019.11.08.13.24.32.365.0 ]--
r 107         //J and I are swapped, so J is x and I 
--[ 2019.11.08.13.24.32.508.0 ]--
r 107         //J and I are swapped, so J is x and I i
--[ 2019.11.08.13.24.32.755.0 ]--
r 107         //J and I are swapped, so J is x and I is
--[ 2019.11.08.13.24.32.962.0 ]--
r 107         //J and I are swapped, so J is x and I is 
--[ 2019.11.08.13.24.33.129.0 ]--
r 107         //J and I are swapped, so J is x and I is y
--[ 2019.11.08.13.24.34.493.0 ]--
r 107         //J and I are swapped, so J is x and I is y 
--[ 2019.11.08.13.24.34.544.0 ]--
r 107         //J and I are swapped, so J is x and I is y
--[ 2019.11.08.13.24.37.964.0 ]--
r 107         //J and I are swapped, so J is x and I is y 
--[ 2019.11.08.13.24.38.022.0 ]--
r 107         //J and I are swapped, so J is x and I is y
--[ 2019.11.08.13.24.41.618.0 ]--
r 106 
--[ 2019.11.08.13.24.43.229.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.08.13.28.06.884.0 ]--
+ 111         
--[ 2019.11.08.13.28.08.912.0 ]--
r 111         *
--[ 2019.11.08.13.28.09.602.0 ]--
r 111         */
--[ 2019.11.08.13.28.11.306.0 ]--
r 111         *
--[ 2019.11.08.13.28.11.815.0 ]--
r 111         
--[ 2019.11.08.13.28.14.803.0 ]--
r 118     
--[ 2019.11.08.13.28.14.983.0 ]--
r 118         
--[ 2019.11.08.13.28.15.561.0 ]--
r 118         *
--[ 2019.11.08.13.28.15.677.0 ]--
r 118         */
--[ 2019.11.08.13.28.18.085.0 ]--
r 111         /
--[ 2019.11.08.13.28.18.159.0 ]--
r 111         /*
--[ 2019.11.08.13.28.19.869.0 ]--
+ 112         
--[ 2019.11.08.13.28.20.735.0 ]--
r 112        
--[ 2019.11.08.13.28.21.441.0 ]--
r 112       
--[ 2019.11.08.13.28.21.632.0 ]--
r 112      
--[ 2019.11.08.13.28.21.943.0 ]--
r 112     
--[ 2019.11.08.13.28.22.138.0 ]--
r 112    
--[ 2019.11.08.13.28.22.415.0 ]--
r 112   
--[ 2019.11.08.13.28.22.786.0 ]--
r 112  
--[ 2019.11.08.13.28.23.108.0 ]--
r 112 
--[ 2019.11.08.13.28.23.601.0 ]--
- 112
--[ 2019.11.08.13.28.24.753.0 ]--
+ 111         
--[ 2019.11.08.13.28.24.811.0 ]--
+ 111         
--[ 2019.11.08.13.28.25.665.0 ]--
r 112         /
--[ 2019.11.08.13.28.25.752.0 ]--
r 112         //
--[ 2019.11.08.13.28.26.398.0 ]--
r 112         /
--[ 2019.11.08.13.28.27.099.0 ]--
r 112         //
--[ 2019.11.08.13.28.27.356.0 ]--
r 112         //P
--[ 2019.11.08.13.28.27.467.0 ]--
r 112         //Pr
--[ 2019.11.08.13.28.27.528.0 ]--
r 112         //Pri
--[ 2019.11.08.13.28.27.590.0 ]--
r 112         //Prin
--[ 2019.11.08.13.28.27.720.0 ]--
r 112         //Print
--[ 2019.11.08.13.28.27.764.0 ]--
r 112         //Print 
--[ 2019.11.08.13.28.27.839.0 ]--
r 112         //Print t
--[ 2019.11.08.13.28.27.943.0 ]--
r 112         //Print th
--[ 2019.11.08.13.28.27.997.0 ]--
r 112         //Print the
--[ 2019.11.08.13.28.28.199.0 ]--
r 112         //Print the 
--[ 2019.11.08.13.28.28.775.0 ]--
r 112         //Print the c
--[ 2019.11.08.13.28.28.882.0 ]--
r 112         //Print the cu
--[ 2019.11.08.13.28.28.972.0 ]--
r 112         //Print the cur
--[ 2019.11.08.13.28.29.115.0 ]--
r 112         //Print the curr
--[ 2019.11.08.13.28.29.137.0 ]--
r 112         //Print the curre
--[ 2019.11.08.13.28.29.213.0 ]--
r 112         //Print the curren
--[ 2019.11.08.13.28.29.323.0 ]--
r 112         //Print the current
--[ 2019.11.08.13.28.29.419.0 ]--
r 112         //Print the current 
--[ 2019.11.08.13.28.29.496.0 ]--
r 112         //Print the current s
--[ 2019.11.08.13.28.29.556.0 ]--
r 112         //Print the current st
--[ 2019.11.08.13.28.29.651.0 ]--
r 112         //Print the current sta
--[ 2019.11.08.13.28.29.742.0 ]--
r 112         //Print the current stat
--[ 2019.11.08.13.28.29.823.0 ]--
r 112         //Print the current state
--[ 2019.11.08.13.28.29.910.0 ]--
r 112         //Print the current state 
--[ 2019.11.08.13.28.30.088.0 ]--
r 112         //Print the current state o
--[ 2019.11.08.13.28.30.178.0 ]--
r 112         //Print the current state of
--[ 2019.11.08.13.28.30.224.0 ]--
r 112         //Print the current state of 
--[ 2019.11.08.13.28.30.297.0 ]--
r 112         //Print the current state of t
--[ 2019.11.08.13.28.30.395.0 ]--
r 112         //Print the current state of th
--[ 2019.11.08.13.28.30.440.0 ]--
r 112         //Print the current state of the 
--[ 2019.11.08.13.28.30.572.0 ]--
r 112         //Print the current state of the b
--[ 2019.11.08.13.28.30.628.0 ]--
r 112         //Print the current state of the bo
--[ 2019.11.08.13.28.30.722.0 ]--
r 112         //Print the current state of the boa
--[ 2019.11.08.13.28.31.185.0 ]--
r 112         //Print the current state of the boar
--[ 2019.11.08.13.28.31.358.0 ]--
r 112         //Print the current state of the board
--[ 2019.11.08.13.28.32.191.0 ]--
r 112         //Print the current state of the board 
--[ 2019.11.08.13.28.32.229.0 ]--
r 112         //Print the current state of the board
--[ 2019.11.08.13.28.48.086.0 ]--
- 145
- 145
- 145
- 145
- 145
--[ 2019.11.08.13.28.49.734.0 ]--
- 144
--[ 2019.11.08.13.28.56.200.0 ]--
r 111 
--[ 2019.11.08.13.28.57.896.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.08.14.47.03.213.0 ]--
- 27
--[ 2019.11.08.14.47.03.394.0 ]--
+ 27             
--[ 2019.11.08.14.47.03.916.0 ]--
r 27             t
--[ 2019.11.08.14.47.04.001.0 ]--
r 27             th
--[ 2019.11.08.14.47.04.019.0 ]--
r 27             thi
--[ 2019.11.08.14.47.04.095.0 ]--
r 27             this
--[ 2019.11.08.14.47.04.276.0 ]--
r 27             this.
--[ 2019.11.08.14.47.04.418.0 ]--
r 27             this.l
--[ 2019.11.08.14.47.04.611.0 ]--
r 27             this.lo
--[ 2019.11.08.14.47.04.710.0 ]--
r 27             this.loc
--[ 2019.11.08.14.47.05.335.0 ]--
r 27             this.loc 
--[ 2019.11.08.14.47.05.510.0 ]--
r 27             this.loc =
--[ 2019.11.08.14.47.05.629.0 ]--
r 27             this.loc = 
--[ 2019.11.08.14.47.05.774.0 ]--
r 27             this.loc = l
--[ 2019.11.08.14.47.05.933.0 ]--
r 27             this.loc = lo
--[ 2019.11.08.14.47.05.998.0 ]--
r 27             this.loc = loc
--[ 2019.11.08.14.47.06.141.0 ]--
r 27             this.loc = loca
--[ 2019.11.08.14.47.06.225.0 ]--
r 27             this.loc = locat
--[ 2019.11.08.14.47.06.286.0 ]--
r 27             this.loc = locati
--[ 2019.11.08.14.47.06.337.0 ]--
r 27             this.loc = locatio
--[ 2019.11.08.14.47.06.414.0 ]--
r 27             this.loc = location
--[ 2019.11.08.14.47.06.594.0 ]--
r 27             this.loc = location;
--[ 2019.11.08.14.47.06.906.0 ]--
r 27             this.loc = location; 
--[ 2019.11.08.14.47.06.981.0 ]--
r 27             this.loc = location;
--[ 2019.11.08.14.47.09.526.0 ]--
r 27             this.loc = l;
--[ 2019.11.08.14.47.09.684.0 ]--
r 27             this.loc = lo;
--[ 2019.11.08.14.47.09.776.0 ]--
r 27             this.loc = loc;
--[ 2019.11.08.14.47.19.317.0 ]--
r 27             Cthis.loc = loc;
--[ 2019.11.08.14.47.19.586.0 ]--
r 27             Cothis.loc = loc;
--[ 2019.11.08.14.47.19.700.0 ]--
r 27             Coothis.loc = loc;
--[ 2019.11.08.14.47.19.799.0 ]--
r 27             Coorthis.loc = loc;
--[ 2019.11.08.14.47.19.953.0 ]--
r 27             Coordthis.loc = loc;
--[ 2019.11.08.14.47.20.120.0 ]--
r 27             Coord this.loc = loc;
--[ 2019.11.08.14.47.27.533.0 ]--
r 27             
--[ 2019.11.08.14.47.29.684.0 ]--
+ 20     
--[ 2019.11.08.14.47.30.791.0 ]--
r 19     
--[ 2019.11.08.14.47.31.477.0 ]--
r 19     p
--[ 2019.11.08.14.47.31.563.0 ]--
r 19     pr
--[ 2019.11.08.14.47.31.627.0 ]--
r 19     pri
--[ 2019.11.08.14.47.31.862.0 ]--
r 19     priv
--[ 2019.11.08.14.47.31.960.0 ]--
r 19     privat
--[ 2019.11.08.14.47.32.128.0 ]--
r 19     private
--[ 2019.11.08.14.47.32.148.0 ]--
r 19     private 
--[ 2019.11.08.14.47.32.165.0 ]--
r 19     private l
--[ 2019.11.08.14.47.32.278.0 ]--
r 19     private lo
--[ 2019.11.08.14.47.32.433.0 ]--
r 19     private loc
--[ 2019.11.08.14.47.32.544.0 ]--
r 19     private loca
--[ 2019.11.08.14.47.32.643.0 ]--
r 19     private locat
--[ 2019.11.08.14.47.32.720.0 ]--
r 19     private locati
--[ 2019.11.08.14.47.32.791.0 ]--
r 19     private locatio
--[ 2019.11.08.14.47.32.868.0 ]--
r 19     private location
--[ 2019.11.08.14.47.33.015.0 ]--
r 19     private location 
--[ 2019.11.08.14.47.33.099.0 ]--
r 19     private location -
--[ 2019.11.08.14.47.33.166.0 ]--
r 19     private location - 
--[ 2019.11.08.14.47.33.731.0 ]--
r 19     private location -
--[ 2019.11.08.14.47.33.848.0 ]--
r 19     private location 
--[ 2019.11.08.14.47.34.645.0 ]--
r 19     private location =
--[ 2019.11.08.14.47.34.749.0 ]--
r 19     private location = 
--[ 2019.11.08.14.47.36.260.0 ]--
r 19     private location 
--[ 2019.11.08.14.47.36.338.0 ]--
r 19     private 
--[ 2019.11.08.14.47.36.814.0 ]--
r 19     private C
--[ 2019.11.08.14.47.36.925.0 ]--
r 19     private Co
--[ 2019.11.08.14.47.37.024.0 ]--
r 19     private Coo
--[ 2019.11.08.14.47.37.096.0 ]--
r 19     private Coor
--[ 2019.11.08.14.47.37.248.0 ]--
r 19     private Coord
--[ 2019.11.08.14.47.37.341.0 ]--
r 19     private Coord 
--[ 2019.11.08.14.47.37.652.0 ]--
r 19     private Coord L
--[ 2019.11.08.14.47.37.692.0 ]--
r 19     private Coord Lo
--[ 2019.11.08.14.47.37.758.0 ]--
r 19     private Coord Loc
--[ 2019.11.08.14.47.37.888.0 ]--
r 19     private Coord Loca
--[ 2019.11.08.14.47.37.977.0 ]--
r 19     private Coord Locat
--[ 2019.11.08.14.47.38.019.0 ]--
r 19     private Coord Locati
--[ 2019.11.08.14.47.38.065.0 ]--
r 19     private Coord Locatio
--[ 2019.11.08.14.47.38.242.0 ]--
r 19     private Coord Locati
--[ 2019.11.08.14.47.38.445.0 ]--
r 19     private Coord Locat
--[ 2019.11.08.14.47.38.548.0 ]--
r 19     private Coord Loca
--[ 2019.11.08.14.47.38.682.0 ]--
r 19     private Coord Loc
--[ 2019.11.08.14.47.38.867.0 ]--
r 19     private Coord Lo
--[ 2019.11.08.14.47.39.042.0 ]--
r 19     private Coord L
--[ 2019.11.08.14.47.39.449.0 ]--
r 19     private Coord 
--[ 2019.11.08.14.47.39.587.0 ]--
r 19     private Coord l
--[ 2019.11.08.14.47.39.827.0 ]--
r 19     private Coord lc
--[ 2019.11.08.14.47.39.899.0 ]--
r 19     private Coord lca
--[ 2019.11.08.14.47.39.989.0 ]--
r 19     private Coord lcat
--[ 2019.11.08.14.47.40.036.0 ]--
r 19     private Coord lcati
--[ 2019.11.08.14.47.40.096.0 ]--
r 19     private Coord lcatio
--[ 2019.11.08.14.47.40.203.0 ]--
r 19     private Coord lcation
--[ 2019.11.08.14.47.40.283.0 ]--
r 19     private Coord lcation 
--[ 2019.11.08.14.47.40.405.0 ]--
r 19     private Coord lcation =
--[ 2019.11.08.14.47.40.527.0 ]--
r 19     private Coord lcation = 
--[ 2019.11.08.14.47.40.842.0 ]--
r 19     private Coord lcation 
--[ 2019.11.08.14.47.40.927.0 ]--
r 19     private Coord 
--[ 2019.11.08.14.47.41.051.0 ]--
r 19     private 
--[ 2019.11.08.14.47.41.555.0 ]--
r 19     private Coord lcation = 
--[ 2019.11.08.14.47.41.933.0 ]--
r 19     private Coord lcation = l
--[ 2019.11.08.14.47.42.045.0 ]--
r 19     private Coord lcation = 
--[ 2019.11.08.14.47.42.337.0 ]--
r 19     private Coord lcation 
--[ 2019.11.08.14.47.42.791.0 ]--
r 19     private Coord lcation
--[ 2019.11.08.14.47.42.878.0 ]--
r 19     private Coord lcatio
--[ 2019.11.08.14.47.42.989.0 ]--
r 19     private Coord lcati
--[ 2019.11.08.14.47.43.134.0 ]--
r 19     private Coord lcat
--[ 2019.11.08.14.47.43.216.0 ]--
r 19     private Coord lca
--[ 2019.11.08.14.47.43.359.0 ]--
r 19     private Coord lc
--[ 2019.11.08.14.47.43.507.0 ]--
r 19     private Coord l
--[ 2019.11.08.14.47.44.038.0 ]--
r 19     private Coord lo
--[ 2019.11.08.14.47.44.225.0 ]--
r 19     private Coord loc
--[ 2019.11.08.14.47.44.413.0 ]--
r 19     private Coord loca
--[ 2019.11.08.14.47.44.456.0 ]--
r 19     private Coord locat
--[ 2019.11.08.14.47.44.518.0 ]--
r 19     private Coord locati
--[ 2019.11.08.14.47.44.572.0 ]--
r 19     private Coord locatio
--[ 2019.11.08.14.47.44.641.0 ]--
r 19     private Coord location
--[ 2019.11.08.14.47.45.409.0 ]--
r 19     private Coord locationl
--[ 2019.11.08.14.47.45.988.0 ]--
r 19     private Coord location
--[ 2019.11.08.14.47.46.210.0 ]--
r 19     private Coord location;
--[ 2019.11.08.14.47.48.716.0 ]--
r 28             l
--[ 2019.11.08.14.47.48.851.0 ]--
r 28             lo
--[ 2019.11.08.14.47.48.931.0 ]--
r 28             loc
--[ 2019.11.08.14.47.49.006.0 ]--
r 28             loca
--[ 2019.11.08.14.47.49.088.0 ]--
r 28             locat
--[ 2019.11.08.14.47.49.152.0 ]--
r 28             locati
--[ 2019.11.08.14.47.49.199.0 ]--
r 28             locatio
--[ 2019.11.08.14.47.49.278.0 ]--
r 28             location
--[ 2019.11.08.14.47.49.404.0 ]--
r 28             location 
--[ 2019.11.08.14.47.49.457.0 ]--
r 28             location =
--[ 2019.11.08.14.47.49.524.0 ]--
r 28             location = 
--[ 2019.11.08.14.47.49.835.0 ]--
r 28             location = n
--[ 2019.11.08.14.47.49.858.0 ]--
r 28             location = ne
--[ 2019.11.08.14.47.49.942.0 ]--
r 28             location = new
--[ 2019.11.08.14.47.50.745.0 ]--
r 28             location = ne
--[ 2019.11.08.14.47.50.951.0 ]--
r 28             location = n
--[ 2019.11.08.14.47.51.121.0 ]--
r 28             location = 
--[ 2019.11.08.14.47.51.779.0 ]--
r 28             location = l
--[ 2019.11.08.14.47.51.943.0 ]--
r 28             location = lo
--[ 2019.11.08.14.47.52.034.0 ]--
r 28             location = loc
--[ 2019.11.08.14.47.52.584.0 ]--
r 28             location = loc;
--[ 2019.11.08.14.47.53.123.0 ]--
+ 29             
--[ 2019.11.08.14.47.57.541.0 ]--
+ 61             
--[ 2019.11.08.14.47.57.712.0 ]--
r 61             l
--[ 2019.11.08.14.47.57.906.0 ]--
r 61             lo
--[ 2019.11.08.14.47.58.008.0 ]--
r 61             loc
--[ 2019.11.08.14.47.58.176.0 ]--
r 61             loca
--[ 2019.11.08.14.47.58.274.0 ]--
r 61             locat
--[ 2019.11.08.14.47.58.307.0 ]--
r 61             locati
--[ 2019.11.08.14.47.58.372.0 ]--
r 61             locatio
--[ 2019.11.08.14.47.58.457.0 ]--
r 61             location
--[ 2019.11.08.14.47.58.561.0 ]--
r 61             location 
--[ 2019.11.08.14.47.58.636.0 ]--
r 61             location =
--[ 2019.11.08.14.47.58.704.0 ]--
r 61             location = 
--[ 2019.11.08.14.47.59.460.0 ]--
r 61             location 
--[ 2019.11.08.14.47.59.602.0 ]--
r 61             
--[ 2019.11.08.14.48.00.054.0 ]--
r 61 
--[ 2019.11.08.14.48.00.727.0 ]--
r 61             location = 
--[ 2019.11.08.14.48.01.222.0 ]--
r 61             location =
--[ 2019.11.08.14.48.01.492.0 ]--
r 61             location 
--[ 2019.11.08.14.48.02.027.0 ]--
r 61             
--[ 2019.11.08.14.48.02.422.0 ]--
- 61
--[ 2019.11.08.14.48.09.895.0 ]--
r 28             tlocation = loc;
--[ 2019.11.08.14.48.09.957.0 ]--
r 28             thlocation = loc;
--[ 2019.11.08.14.48.10.008.0 ]--
r 28             thilocation = loc;
--[ 2019.11.08.14.48.10.097.0 ]--
r 28             thislocation = loc;
--[ 2019.11.08.14.48.10.254.0 ]--
r 28             this.location = loc;
--[ 2019.11.08.14.48.14.459.0 ]--
r 28             
--[ 2019.11.08.14.48.14.868.0 ]--
- 28
--[ 2019.11.08.14.48.18.720.0 ]--
r 19 
--[ 2019.11.08.14.48.18.888.0 ]--
- 19
--[ 2019.11.08.14.48.24.756.0 ]--
r 27             C
--[ 2019.11.08.14.48.24.850.0 ]--
r 27             Co
--[ 2019.11.08.14.48.24.965.0 ]--
r 27             Coo
--[ 2019.11.08.14.48.25.086.0 ]--
r 27             Coor
--[ 2019.11.08.14.48.25.202.0 ]--
r 27             Coord
--[ 2019.11.08.14.48.25.364.0 ]--
r 27             Coord 
--[ 2019.11.08.14.48.25.473.0 ]--
r 27             Coord l
--[ 2019.11.08.14.48.25.577.0 ]--
r 27             Coord lo
--[ 2019.11.08.14.48.25.610.0 ]--
r 27             Coord loc
--[ 2019.11.08.14.48.25.720.0 ]--
r 27             Coord loca
--[ 2019.11.08.14.48.25.809.0 ]--
r 27             Coord locat
--[ 2019.11.08.14.48.25.868.0 ]--
r 27             Coord locati
--[ 2019.11.08.14.48.25.933.0 ]--
r 27             Coord locatio
--[ 2019.11.08.14.48.26.003.0 ]--
r 27             Coord location
--[ 2019.11.08.14.48.26.952.0 ]--
r 27             Coord location 
--[ 2019.11.08.14.48.27.082.0 ]--
r 27             Coord location =
--[ 2019.11.08.14.48.27.150.0 ]--
r 27             Coord location = 
--[ 2019.11.08.14.48.27.633.0 ]--
r 27             Coord location = l
--[ 2019.11.08.14.48.27.759.0 ]--
r 27             Coord location = lo
--[ 2019.11.08.14.48.27.830.0 ]--
r 27             Coord location = loc
--[ 2019.11.08.14.48.27.962.0 ]--
r 27             Coord location = loc;
--[ 2019.11.08.14.48.30.366.0 ]--
r 27             Coord location = loc; 
--[ 2019.11.08.14.48.30.454.0 ]--
r 27             Coord location = loc;
--[ 2019.11.08.14.48.32.138.0 ]--
r 27             Coord location = loc; 
--[ 2019.11.08.14.48.32.399.0 ]--
r 27             Coord location = loc;
--[ 2019.11.08.14.48.34.376.0 ]--
r 27             Coord location = loc; 
--[ 2019.11.08.14.48.34.436.0 ]--
r 27             Coord location = loc;
--[ 2019.11.08.14.48.34.648.0 ]--
+ 28             
--[ 2019.11.08.14.48.36.858.0 ]--
r 28             f
--[ 2019.11.08.14.48.37.002.0 ]--
r 28             fr
--[ 2019.11.08.14.48.37.087.0 ]--
r 28             fro
--[ 2019.11.08.14.48.37.134.0 ]--
r 28             from
--[ 2019.11.08.14.48.37.564.0 ]--
r 28             fro
--[ 2019.11.08.14.48.37.817.0 ]--
r 28             fr
--[ 2019.11.08.14.48.37.984.0 ]--
r 28             f
--[ 2019.11.08.14.48.38.202.0 ]--
r 28             
--[ 2019.11.08.14.48.38.649.0 ]--
r 28             P
--[ 2019.11.08.14.48.38.744.0 ]--
r 28             PF
--[ 2019.11.08.14.48.38.895.0 ]--
r 28             PFN
--[ 2019.11.08.14.48.39.057.0 ]--
r 28             PFNo
--[ 2019.11.08.14.48.39.113.0 ]--
r 28             PFNod
--[ 2019.11.08.14.48.39.171.0 ]--
r 28             PFNode
--[ 2019.11.08.14.48.39.250.0 ]--
r 28             PFNode 
--[ 2019.11.08.14.48.39.469.0 ]--
r 28             PFNode f
--[ 2019.11.08.14.48.39.561.0 ]--
r 28             PFNode fr
--[ 2019.11.08.14.48.39.670.0 ]--
r 28             PFNode fro
--[ 2019.11.08.14.48.39.724.0 ]--
r 28             PFNode from
--[ 2019.11.08.14.48.40.622.0 ]--
r 28             PFNode from 
--[ 2019.11.08.14.48.40.733.0 ]--
r 28             PFNode from =
--[ 2019.11.08.14.48.40.798.0 ]--
r 28             PFNode from = 
--[ 2019.11.08.14.48.41.435.0 ]--
r 28             PFNode from = r
--[ 2019.11.08.14.48.41.643.0 ]--
r 28             PFNode from = 
--[ 2019.11.08.14.48.41.680.0 ]--
r 28             PFNode from = f
--[ 2019.11.08.14.48.41.810.0 ]--
r 28             PFNode from = fr
--[ 2019.11.08.14.48.41.901.0 ]--
r 28             PFNode from = fro
--[ 2019.11.08.14.48.41.939.0 ]--
r 28             PFNode from = from
--[ 2019.11.08.14.48.42.100.0 ]--
r 28             PFNode from = fromN
--[ 2019.11.08.14.48.42.206.0 ]--
r 28             PFNode from = fromNo
--[ 2019.11.08.14.48.42.256.0 ]--
r 28             PFNode from = fromNod
--[ 2019.11.08.14.48.42.318.0 ]--
r 28             PFNode from = fromNode
--[ 2019.11.08.14.48.42.409.0 ]--
r 28             PFNode from = fromNode;
--[ 2019.11.08.14.48.46.417.0 ]--
r 27             Coord tlocation = loc;
--[ 2019.11.08.14.48.46.484.0 ]--
r 27             Coord thlocation = loc;
--[ 2019.11.08.14.48.46.533.0 ]--
r 27             Coord thilocation = loc;
--[ 2019.11.08.14.48.46.596.0 ]--
r 27             Coord thislocation = loc;
--[ 2019.11.08.14.48.46.758.0 ]--
r 27             Coord this.location = loc;
--[ 2019.11.08.14.48.50.060.0 ]--
r 27             Coord location = loc;
--[ 2019.11.08.14.48.53.087.0 ]--
r 59             Stack<PFNode> s = new Stack<>(); 
--[ 2019.11.08.14.48.53.113.0 ]--
r 59             Stack<PFNode> s = new Stack<>();
--[ 2019.11.08.14.48.54.339.0 ]--
+ 60             
--[ 2019.11.08.14.48.54.513.0 ]--
r 60             l
--[ 2019.11.08.14.48.54.846.0 ]--
r 60             lc
--[ 2019.11.08.14.48.55.113.0 ]--
r 60             l
--[ 2019.11.08.14.48.55.223.0 ]--
r 60             lo
--[ 2019.11.08.14.48.55.264.0 ]--
r 60             loc
--[ 2019.11.08.14.48.55.374.0 ]--
r 60             loca
--[ 2019.11.08.14.48.55.426.0 ]--
r 60             locat
--[ 2019.11.08.14.48.55.476.0 ]--
r 60             locati
--[ 2019.11.08.14.48.55.549.0 ]--
r 60             locatio
--[ 2019.11.08.14.48.55.635.0 ]--
r 60             location
--[ 2019.11.08.14.48.55.810.0 ]--
r 60             
--[ 2019.11.08.14.48.55.963.0 ]--
r 60             t
--[ 2019.11.08.14.48.56.001.0 ]--
r 60             th
--[ 2019.11.08.14.48.56.049.0 ]--
r 60             thi
--[ 2019.11.08.14.48.56.122.0 ]--
r 60             this
--[ 2019.11.08.14.48.56.234.0 ]--
r 60             this.
--[ 2019.11.08.14.48.56.401.0 ]--
r 60             this.l
--[ 2019.11.08.14.48.56.542.0 ]--
r 60             this.lo
--[ 2019.11.08.14.48.56.635.0 ]--
r 60             this.loc
--[ 2019.11.08.14.48.56.736.0 ]--
r 60             this.loca
--[ 2019.11.08.14.48.56.833.0 ]--
r 60             this.locat
--[ 2019.11.08.14.48.56.912.0 ]--
r 60             this.locati
--[ 2019.11.08.14.48.56.983.0 ]--
r 60             this.locatio
--[ 2019.11.08.14.48.57.063.0 ]--
r 60             this.location
--[ 2019.11.08.14.48.57.173.0 ]--
r 60             this.location 
--[ 2019.11.08.14.48.57.295.0 ]--
r 60             this.location
--[ 2019.11.08.14.48.58.351.0 ]--
r 60             
--[ 2019.11.08.14.48.58.481.0 ]--
- 60
--[ 2019.11.08.14.49.08.695.0 ]--
- 27
r 27             
--[ 2019.11.08.14.53.57.594.0 ]--
r 19 
r 27 
--[ 2019.11.08.14.56.11.572.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.08.15.43.58.680.0 ]--
- 27
--[ 2019.11.08.15.43.58.837.0 ]--
+ 27             
--[ 2019.11.08.15.44.17.322.0 ]--
r 27                 
--[ 2019.11.08.15.49.02.341.0 ]--
+ 59             
--[ 2019.11.08.15.49.02.998.0 ]--
r 59             f
--[ 2019.11.08.15.49.03.083.0 ]--
r 59             fo
--[ 2019.11.08.15.49.03.170.0 ]--
r 59             for
--[ 2019.11.08.15.49.03.662.0 ]--
r 59             for()
--[ 2019.11.08.15.49.04.727.0 ]--
r 59             for(i)
--[ 2019.11.08.15.49.04.806.0 ]--
r 59             for(in)
--[ 2019.11.08.15.49.04.855.0 ]--
r 59             for(int)
--[ 2019.11.08.15.49.04.890.0 ]--
r 59             for(int )
--[ 2019.11.08.15.49.04.972.0 ]--
r 59             for(int i)
--[ 2019.11.08.15.49.05.065.0 ]--
r 59             for(int i )
--[ 2019.11.08.15.49.05.154.0 ]--
r 59             for(int i =)
--[ 2019.11.08.15.49.05.221.0 ]--
r 59             for(int i = )
--[ 2019.11.08.15.49.05.325.0 ]--
r 59             for(int i = 0)
--[ 2019.11.08.15.49.05.732.0 ]--
r 59             for(int i = 0;)
--[ 2019.11.08.15.49.05.819.0 ]--
r 59             for(int i = 0; )
--[ 2019.11.08.15.49.06.443.0 ]--
r 59             for(int i = 0;)
--[ 2019.11.08.15.49.06.539.0 ]--
r 59             for(int i = 0)
--[ 2019.11.08.15.49.06.635.0 ]--
r 59             for(int i = )
--[ 2019.11.08.15.49.06.875.0 ]--
r 59             for(int i = 1)
--[ 2019.11.08.15.49.07.461.0 ]--
r 59             for(int i = 1;)
--[ 2019.11.08.15.49.07.923.0 ]--
r 59             for(int i = 1)
--[ 2019.11.08.15.49.08.010.0 ]--
r 59             for(int i = )
--[ 2019.11.08.15.49.08.166.0 ]--
r 59             for(int i = 0)
--[ 2019.11.08.15.49.08.316.0 ]--
r 59             for(int i = 0;)
--[ 2019.11.08.15.49.08.466.0 ]--
r 59             for(int i = 0; )
--[ 2019.11.08.15.49.16.326.0 ]--
r 59             
--[ 2019.11.08.15.49.16.603.0 ]--
- 59
--[ 2019.11.08.15.49.18.733.0 ]--
r 58             Stack<PFNode> s = new Stack<>(); 
--[ 2019.11.08.15.49.18.787.0 ]--
r 58             Stack<PFNode> s = new Stack<>();
--[ 2019.11.08.15.50.30.447.0 ]--
+ 19     
--[ 2019.11.08.15.50.33.772.0 ]--
- 19
--[ 2019.11.08.15.53.42.439.0 ]--
+ 27             
--[ 2019.11.08.15.53.42.968.0 ]--
r 27             l
--[ 2019.11.08.15.53.43.086.0 ]--
r 27             lo
--[ 2019.11.08.15.53.43.670.0 ]--
r 27             loc
--[ 2019.11.08.15.53.43.764.0 ]--
r 27             loca
--[ 2019.11.08.15.53.43.832.0 ]--
r 27             locat
--[ 2019.11.08.15.53.43.898.0 ]--
r 27             locati
--[ 2019.11.08.15.53.43.968.0 ]--
r 27             locatio
--[ 2019.11.08.15.53.44.036.0 ]--
r 27             location
--[ 2019.11.08.15.53.44.131.0 ]--
r 27             location 
--[ 2019.11.08.15.53.44.219.0 ]--
r 27             location =
--[ 2019.11.08.15.53.44.343.0 ]--
r 27             location = 
--[ 2019.11.08.15.53.44.413.0 ]--
r 27             location = n
--[ 2019.11.08.15.53.45.119.0 ]--
r 27             location = 
--[ 2019.11.08.15.53.45.323.0 ]--
r 27             location = l
--[ 2019.11.08.15.53.45.543.0 ]--
r 27             location = lc
--[ 2019.11.08.15.53.45.946.0 ]--
r 27             location = l
--[ 2019.11.08.15.53.46.063.0 ]--
r 27             location = lo
--[ 2019.11.08.15.53.46.144.0 ]--
r 27             location = loc
--[ 2019.11.08.15.53.46.289.0 ]--
r 27             location = loc;
--[ 2019.11.08.15.53.46.413.0 ]--
r 27             location = loc; 
--[ 2019.11.08.15.53.46.504.0 ]--
r 27             location = loc;
--[ 2019.11.08.15.53.47.753.0 ]--
r 27             Clocation = loc;
--[ 2019.11.08.15.53.47.856.0 ]--
r 27             Colocation = loc;
--[ 2019.11.08.15.53.47.971.0 ]--
r 27             Coolocation = loc;
--[ 2019.11.08.15.53.48.033.0 ]--
r 27             Coorlocation = loc;
--[ 2019.11.08.15.53.48.157.0 ]--
r 27             Coordlocation = loc;
--[ 2019.11.08.15.53.48.249.0 ]--
r 27             Coord location = loc;
--[ 2019.11.08.15.53.53.246.0 ]--
+ 60             
--[ 2019.11.08.15.53.53.735.0 ]--
r 60             l
--[ 2019.11.08.15.53.53.882.0 ]--
r 60             lo
--[ 2019.11.08.15.53.53.941.0 ]--
r 60             loc
--[ 2019.11.08.15.53.54.087.0 ]--
r 60             loca
--[ 2019.11.08.15.53.54.199.0 ]--
r 60             locat
--[ 2019.11.08.15.53.54.254.0 ]--
r 60             locati
--[ 2019.11.08.15.53.54.336.0 ]--
r 60             locatio
--[ 2019.11.08.15.53.54.411.0 ]--
r 60             location
--[ 2019.11.08.15.53.55.152.0 ]--
r 60             
--[ 2019.11.08.15.53.55.836.0 ]--
- 60
--[ 2019.11.08.15.53.58.158.0 ]--
r 19     
--[ 2019.11.08.15.53.58.553.0 ]--
r 19     p
--[ 2019.11.08.15.53.58.634.0 ]--
r 19     pr
--[ 2019.11.08.15.53.58.727.0 ]--
r 19     pri
--[ 2019.11.08.15.53.58.819.0 ]--
r 19     priv
--[ 2019.11.08.15.53.58.916.0 ]--
r 19     priva
--[ 2019.11.08.15.53.59.001.0 ]--
r 19     privat
--[ 2019.11.08.15.53.59.075.0 ]--
r 19     private
--[ 2019.11.08.15.53.59.159.0 ]--
r 19     private 
--[ 2019.11.08.15.53.59.358.0 ]--
r 19     private C
--[ 2019.11.08.15.53.59.392.0 ]--
r 19     private Co
--[ 2019.11.08.15.53.59.483.0 ]--
r 19     private Coo
--[ 2019.11.08.15.53.59.532.0 ]--
r 19     private Coor
--[ 2019.11.08.15.53.59.689.0 ]--
r 19     private Coord
--[ 2019.11.08.15.53.59.835.0 ]--
r 19     private Coord 
--[ 2019.11.08.15.54.00.643.0 ]--
r 19     private Coord l
--[ 2019.11.08.15.54.00.764.0 ]--
r 19     private Coord lo
--[ 2019.11.08.15.54.00.816.0 ]--
r 19     private Coord loc
--[ 2019.11.08.15.54.00.944.0 ]--
r 19     private Coord loca
--[ 2019.11.08.15.54.01.004.0 ]--
r 19     private Coord locat
--[ 2019.11.08.15.54.01.088.0 ]--
r 19     private Coord locati
--[ 2019.11.08.15.54.01.290.0 ]--
r 19     private Coord locatio
--[ 2019.11.08.15.54.01.455.0 ]--
r 19     private Coord location
--[ 2019.11.08.15.54.01.667.0 ]--
r 19     private Coord location;
--[ 2019.11.08.15.54.02.815.0 ]--
+ 20     
--[ 2019.11.08.15.54.05.759.0 ]--
r 28             location = loc;
--[ 2019.11.08.15.54.42.561.0 ]--
r 61             s.push(new PFNode(null, l));
--[ 2019.11.08.15.54.42.726.0 ]--
r 61             s.push(new PFNode(null, lo));
--[ 2019.11.08.15.54.42.792.0 ]--
r 61             s.push(new PFNode(null, loc));
--[ 2019.11.08.15.54.42.865.0 ]--
r 61             s.push(new PFNode(null, loca));
--[ 2019.11.08.15.54.42.959.0 ]--
r 61             s.push(new PFNode(null, locat));
--[ 2019.11.08.15.54.42.996.0 ]--
r 61             s.push(new PFNode(null, locati));
--[ 2019.11.08.15.54.43.091.0 ]--
r 61             s.push(new PFNode(null, locatio));
--[ 2019.11.08.15.54.43.160.0 ]--
r 61             s.push(new PFNode(null, location));
--[ 2019.11.08.15.54.43.277.0 ]--
r 61             s.push(new PFNode(null, location ));
--[ 2019.11.08.15.54.43.323.0 ]--
r 61             s.push(new PFNode(null, location));
--[ 2019.11.08.15.54.50.376.0 ]--
r 61             s.push(new PFNode(null, location ));
--[ 2019.11.08.15.54.50.787.0 ]--
r 61             s.push(new PFNode(null, null));
--[ 2019.11.08.15.54.58.866.0 ]--
r 28             
--[ 2019.11.08.15.54.59.162.0 ]--
- 28
--[ 2019.11.08.16.00.02.039.0 ]--
r 60             s.push(new PFNode(l, null));
--[ 2019.11.08.16.00.02.191.0 ]--
r 60             s.push(new PFNode(lo, null));
--[ 2019.11.08.16.00.02.270.0 ]--
r 60             s.push(new PFNode(loc, null));
--[ 2019.11.08.16.00.02.982.0 ]--
r 60             s.push(new PFNode(loc , null));
--[ 2019.11.08.16.00.03.018.0 ]--
r 60             s.push(new PFNode(loc, null));
--[ 2019.11.08.16.00.04.687.0 ]--
r 60             s.push(new PFNode(loca, null));
--[ 2019.11.08.16.00.05.546.0 ]--
r 60             s.push(new PFNode(locat, null));
--[ 2019.11.08.16.00.05.569.0 ]--
r 60             s.push(new PFNode(locati, null));
--[ 2019.11.08.16.00.05.637.0 ]--
r 60             s.push(new PFNode(locatio, null));
--[ 2019.11.08.16.00.05.758.0 ]--
r 60             s.push(new PFNode(location, null));
--[ 2019.11.08.16.00.05.949.0 ]--
r 60             s.push(new PFNode(location , null));
--[ 2019.11.08.16.00.05.956.0 ]--
r 60             s.push(new PFNode(location, null));
--[ 2019.11.08.16.00.06.707.0 ]--
r 60             s.push(new PFNode(location , null));
--[ 2019.11.08.16.00.07.157.0 ]--
r 60             s.push(new PFNode(loc, null));
--[ 2019.11.08.16.00.07.621.0 ]--
r 60             s.push(new PFNode(loc , null));
--[ 2019.11.08.16.00.08.067.0 ]--
r 60             s.push(new PFNode(null, null));
--[ 2019.11.08.16.00.09.370.0 ]--
- 27
--[ 2019.11.08.16.00.11.474.0 ]--
+ 27         public PFNode(Coord loc, PFNode fromNode) {
--[ 2019.11.08.16.01.59.760.0 ]--
r 19     
--[ 2019.11.08.16.01.59.958.0 ]--
- 19
--[ 2019.11.08.16.02.04.684.0 ]--
r 19 
r 27 
--[ 2019.11.08.16.02.06.365.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.08.16.11.33.696.0 ]--
r 59             s.push(new PFNode(null, t));
--[ 2019.11.08.16.11.33.910.0 ]--
r 59             s.push(new PFNode(null, th));
--[ 2019.11.08.16.11.33.965.0 ]--
r 59             s.push(new PFNode(null, thi));
--[ 2019.11.08.16.11.34.044.0 ]--
r 59             s.push(new PFNode(null, this));
--[ 2019.11.08.16.11.35.838.0 ]--
r 59             s.push(new PFNode(null, this ));
--[ 2019.11.08.16.11.35.945.0 ]--
r 59             s.push(new PFNode(null, this));
--[ 2019.11.08.16.11.52.770.0 ]--
r 59             s.push(new PFNode(null, n));
--[ 2019.11.08.16.11.52.808.0 ]--
r 59             s.push(new PFNode(null, nu));
--[ 2019.11.08.16.11.52.971.0 ]--
r 59             s.push(new PFNode(null, nul));
--[ 2019.11.08.16.11.53.086.0 ]--
r 59             s.push(new PFNode(null, null));
--[ 2019.11.08.16.15.00.587.0 ]--
+ 59             
--[ 2019.11.08.16.15.01.173.0 ]--
r 59             t
--[ 2019.11.08.16.15.01.225.0 ]--
r 59             th
--[ 2019.11.08.16.15.01.301.0 ]--
r 59             thi
--[ 2019.11.08.16.15.01.352.0 ]--
r 59             this
--[ 2019.11.08.16.15.01.516.0 ]--
r 59             this.
--[ 2019.11.08.16.15.01.609.0 ]--
r 59             this.g
--[ 2019.11.08.16.15.01.655.0 ]--
r 59             this.ge
--[ 2019.11.08.16.15.01.804.0 ]--
r 59             this.get
--[ 2019.11.08.16.15.03.054.0 ]--
r 59             this.get 
--[ 2019.11.08.16.15.03.092.0 ]--
r 59             this.get
--[ 2019.11.08.16.15.03.564.0 ]--
r 59             this.getI
--[ 2019.11.08.16.15.04.359.0 ]--
r 59             this.
--[ 2019.11.08.16.15.05.235.0 ]--
r 59             this
--[ 2019.11.08.16.15.05.630.0 ]--
r 59             
--[ 2019.11.08.16.15.06.213.0 ]--
- 59
--[ 2019.11.08.16.17.56.405.0 ]--
+ 130     
--[ 2019.11.08.16.17.57.748.0 ]--
+ 130     
--[ 2019.11.08.16.17.57.828.0 ]--
r 131     b
--[ 2019.11.08.16.17.57.927.0 ]--
r 131     bo
--[ 2019.11.08.16.17.57.961.0 ]--
r 131     boa
--[ 2019.11.08.16.17.58.066.0 ]--
r 131     boar
--[ 2019.11.08.16.17.58.208.0 ]--
r 131     board
--[ 2019.11.08.16.17.58.334.0 ]--
r 131     board[]
--[ 2019.11.08.16.17.58.777.0 ]--
r 131     board[ ]
--[ 2019.11.08.16.17.58.896.0 ]--
r 131     board[]
--[ 2019.11.08.16.18.01.417.0 ]--
r 131     p
--[ 2019.11.08.16.18.01.561.0 ]--
r 131     pu
--[ 2019.11.08.16.18.01.634.0 ]--
r 131     pub
--[ 2019.11.08.16.18.01.711.0 ]--
r 131     publ
--[ 2019.11.08.16.18.01.839.0 ]--
r 131     publi
--[ 2019.11.08.16.18.01.917.0 ]--
r 131     public
--[ 2019.11.08.16.18.02.029.0 ]--
r 131     public 
--[ 2019.11.08.16.18.02.115.0 ]--
r 131     public p
--[ 2019.11.08.16.18.02.180.0 ]--
r 131     public pr
--[ 2019.11.08.16.18.02.245.0 ]--
r 131     public pri
--[ 2019.11.08.16.18.02.296.0 ]--
r 131     public prin
--[ 2019.11.08.16.18.02.370.0 ]--
r 131     public print
--[ 2019.11.08.16.18.02.843.0 ]--
r 131     public printB
--[ 2019.11.08.16.18.02.952.0 ]--
r 131     public printBo
--[ 2019.11.08.16.18.02.989.0 ]--
r 131     public printBoa
--[ 2019.11.08.16.18.03.069.0 ]--
r 131     public printBoar
--[ 2019.11.08.16.18.03.205.0 ]--
r 131     public printBoard
--[ 2019.11.08.16.18.03.325.0 ]--
r 131     public printBoard()
--[ 2019.11.08.16.18.03.660.0 ]--
r 131     public printBoard(){}
--[ 2019.11.08.16.18.03.846.0 ]--
+ 131     public printBoard(){
r 132     }
--[ 2019.11.08.16.18.03.880.0 ]--
+ 132         
--[ 2019.11.08.16.18.07.076.0 ]--
r 131     public  printBoard(){
--[ 2019.11.08.16.18.08.563.0 ]--
r 131     public v printBoard(){
--[ 2019.11.08.16.18.08.602.0 ]--
r 131     public vo printBoard(){
--[ 2019.11.08.16.18.08.840.0 ]--
r 131     public voo printBoard(){
--[ 2019.11.08.16.18.08.879.0 ]--
r 131     public vooi printBoard(){
--[ 2019.11.08.16.18.08.923.0 ]--
r 131     public vooid printBoard(){
--[ 2019.11.08.16.18.09.525.0 ]--
r 131     public vooi printBoard(){
--[ 2019.11.08.16.18.09.766.0 ]--
r 131     public voo printBoard(){
--[ 2019.11.08.16.18.09.905.0 ]--
r 131     public vo printBoard(){
--[ 2019.11.08.16.18.10.023.0 ]--
r 131     public voi printBoard(){
--[ 2019.11.08.16.18.10.109.0 ]--
r 131     public void printBoard(){
--[ 2019.11.08.16.18.10.477.0 ]--
r 131     public void  printBoard(){
--[ 2019.11.08.16.18.10.512.0 ]--
r 131     public void printBoard(){
--[ 2019.11.08.16.18.21.061.0 ]--
+ 132         for(int i = 0; i < terrain.getN(); i++){
+ 133             for(int j = 0; j < terrain.getN(); j++){
+ 134                 System.out.print(board[i][j] + " ");
+ 135             }
+ 136             System.out.println();
r 137         }
--[ 2019.11.08.16.18.24.890.0 ]--
+ 111         
--[ 2019.11.08.16.18.25.553.0 ]--
r 111         p
--[ 2019.11.08.16.18.25.719.0 ]--
r 111         pr
--[ 2019.11.08.16.18.25.794.0 ]--
r 111         pri
--[ 2019.11.08.16.18.25.841.0 ]--
r 111         prin
--[ 2019.11.08.16.18.25.907.0 ]--
r 111         print
--[ 2019.11.08.16.18.26.133.0 ]--
r 111         printB
--[ 2019.11.08.16.18.26.252.0 ]--
r 111         printBo
--[ 2019.11.08.16.18.26.278.0 ]--
r 111         printBoa
--[ 2019.11.08.16.18.26.338.0 ]--
r 111         printBoar
--[ 2019.11.08.16.18.26.466.0 ]--
r 111         printBoard
--[ 2019.11.08.16.18.26.584.0 ]--
r 111         printBoard()
--[ 2019.11.08.16.18.29.046.0 ]--
r 131 
--[ 2019.11.08.16.18.30.419.0 ]--
UpdateTree (AD): 0 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class

--[ 2019.11.08.16.18.30.419.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@794b63ff
--[ 2019.11.08.16.18.30.867.0 ]--
r 111         printBoard();
--[ 2019.11.08.16.18.30.867.1 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.08.16.18.30.878.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.08.16.18.35.069.0 ]--
UpdateTree (AD): 2 0
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.08.16.18.35.069.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.08.16.19.44.197.0 ]--
- 132
- 132
- 132
- 132
- 132
- 132
- 132
r 132     p
--[ 2019.11.08.16.19.44.328.0 ]--
r 132     
--[ 2019.11.08.16.19.44.551.0 ]--
- 131
--[ 2019.11.08.16.19.45.048.0 ]--
- 131
--[ 2019.11.08.16.19.45.326.0 ]--
r 130     } 
--[ 2019.11.08.16.19.45.439.0 ]--
r 130     }
--[ 2019.11.08.16.19.52.108.0 ]--
r 111 
--[ 2019.11.08.16.19.52.447.0 ]--
- 110
r 110         
--[ 2019.11.08.16.19.52.844.0 ]--
- 110
--[ 2019.11.08.16.19.53.423.0 ]--
+ 110         
--[ 2019.11.08.16.20.20.894.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.08.16.27.36.767.0 ]--
+ 105         
--[ 2019.11.08.16.29.42.044.0 ]--
r 105         x
--[ 2019.11.08.16.29.42.306.0 ]--
r 105         xc
--[ 2019.11.08.16.29.42.470.0 ]--
r 105         xcx
--[ 2019.11.08.16.29.42.655.0 ]--
r 105         xcxc
--[ 2019.11.08.16.29.42.963.0 ]--
r 105         xcxcc
--[ 2019.11.08.16.29.43.082.0 ]--
r 105         xcxccx
--[ 2019.11.08.16.29.43.263.0 ]--
r 105         xcxccxc
--[ 2019.11.08.16.29.43.408.0 ]--
r 105         xcxccxcx
--[ 2019.11.08.16.29.43.579.0 ]--
r 105         xcxccxcxc
--[ 2019.11.08.16.29.43.717.0 ]--
r 105         xcxccxcxcx
--[ 2019.11.08.16.29.45.043.0 ]--
r 105         xcxccxcxcxx
--[ 2019.11.08.16.29.45.228.0 ]--
r 105         xcxccxcxcxxc
--[ 2019.11.08.16.29.45.414.0 ]--
r 105         xcxccxcxcxxcx
--[ 2019.11.08.16.29.45.639.0 ]--
r 105         xcxccxcxcxxcxc
--[ 2019.11.08.16.29.45.733.0 ]--
r 105         xcxccxcxcxxcxcx
--[ 2019.11.08.16.29.45.894.0 ]--
r 105         xcxccxcxcxxcxcxc
--[ 2019.11.08.16.29.46.032.0 ]--
r 105         xcxccxcxcxxcxcxcx
--[ 2019.11.08.16.29.46.235.0 ]--
r 105         xcxccxcxcxxcxcxcxc
--[ 2019.11.08.16.29.46.359.0 ]--
r 105         xcxccxcxcxxcxcxcxcx
--[ 2019.11.08.16.29.46.613.0 ]--
r 105         xcxccxcxcxxcxcxcxcxc
--[ 2019.11.08.16.29.46.695.0 ]--
r 105         xcxccxcxcxxcxcxcxcxcx
--[ 2019.11.08.16.29.48.247.0 ]--
r 105         xcxccxcxcxxcxcxcxcxc
--[ 2019.11.08.16.29.48.722.0 ]--
r 105         xcxccxcxcxxcxcxcxcx
--[ 2019.11.08.16.29.48.749.0 ]--
r 105         xcxccxcxcxxcxcxcxc
--[ 2019.11.08.16.29.48.790.0 ]--
r 105         xcxccxcxcxxcxcxcx
--[ 2019.11.08.16.29.48.816.0 ]--
r 105         xcxccxcxcxxcxcxc
--[ 2019.11.08.16.29.48.845.0 ]--
r 105         xcxccxcxcxxcxcx
--[ 2019.11.08.16.29.48.876.0 ]--
r 105         xcxccxcxcxxcxc
--[ 2019.11.08.16.29.48.904.0 ]--
r 105         xcxccxcxcxxcx
--[ 2019.11.08.16.29.48.932.0 ]--
r 105         xcxccxcxcxxc
--[ 2019.11.08.16.29.48.967.0 ]--
r 105         xcxccxcxcxx
--[ 2019.11.08.16.29.48.994.0 ]--
r 105         xcxccxcxcx
--[ 2019.11.08.16.29.49.148.0 ]--
r 105         xcxccxcxc
--[ 2019.11.08.16.29.49.272.0 ]--
r 105         xcxccxcx
--[ 2019.11.08.16.29.49.357.0 ]--
r 105         xcxccxc
--[ 2019.11.08.16.29.49.463.0 ]--
r 105         xcxccx
--[ 2019.11.08.16.29.49.532.0 ]--
r 105         xcxcc
--[ 2019.11.08.16.29.49.626.0 ]--
r 105         xcxc
--[ 2019.11.08.16.29.49.716.0 ]--
r 105         xcx
--[ 2019.11.08.16.29.49.944.0 ]--
r 105         xc
--[ 2019.11.08.16.29.50.163.0 ]--
r 105         x
--[ 2019.11.08.16.29.50.332.0 ]--
r 105         
--[ 2019.11.08.16.31.15.293.0 ]--
r 111 
--[ 2019.11.08.16.31.17.011.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.08.16.48.38.947.0 ]--
+ 27             
--[ 2019.11.08.16.48.47.857.0 ]--
r 27             t
--[ 2019.11.08.16.48.47.996.0 ]--
r 27             th
--[ 2019.11.08.16.48.48.058.0 ]--
r 27             thi
--[ 2019.11.08.16.48.48.094.0 ]--
r 27             this
--[ 2019.11.08.16.48.48.284.0 ]--
r 27             this.
--[ 2019.11.08.16.48.48.719.0 ]--
r 27             this.l
--[ 2019.11.08.16.48.48.861.0 ]--
r 27             this.lo
--[ 2019.11.08.16.48.48.926.0 ]--
r 27             this.loc
--[ 2019.11.08.16.48.49.077.0 ]--
r 27             this.loca
--[ 2019.11.08.16.48.49.222.0 ]--
r 27             this.locai
--[ 2019.11.08.16.48.49.535.0 ]--
r 27             this.loca
--[ 2019.11.08.16.48.49.677.0 ]--
r 27             this.loc
--[ 2019.11.08.16.48.50.990.0 ]--
r 27             this.loc 
--[ 2019.11.08.16.48.51.113.0 ]--
r 27             this.loc =
--[ 2019.11.08.16.48.51.200.0 ]--
r 27             this.loc = 
--[ 2019.11.08.16.48.51.654.0 ]--
r 27             this.loc = l
--[ 2019.11.08.16.48.51.808.0 ]--
r 27             this.loc = lo
--[ 2019.11.08.16.48.51.896.0 ]--
r 27             this.loc = loc
--[ 2019.11.08.16.48.53.039.0 ]--
r 27             this.loc = loc;
--[ 2019.11.08.16.48.58.126.0 ]--
+ 24         
--[ 2019.11.08.16.48.58.360.0 ]--
r 24         t
--[ 2019.11.08.16.48.58.841.0 ]--
r 24         
--[ 2019.11.08.16.48.59.236.0 ]--
r 24         t
--[ 2019.11.08.16.48.59.261.0 ]--
r 24         th
--[ 2019.11.08.16.48.59.291.0 ]--
r 24         thi
--[ 2019.11.08.16.48.59.339.0 ]--
r 24         this
--[ 2019.11.08.16.48.59.524.0 ]--
r 24         this,
--[ 2019.11.08.16.49.00.062.0 ]--
r 24         this,l
--[ 2019.11.08.16.49.00.448.0 ]--
r 24         this,
--[ 2019.11.08.16.49.00.535.0 ]--
r 24         this
--[ 2019.11.08.16.49.00.616.0 ]--
r 24         thi
--[ 2019.11.08.16.49.00.810.0 ]--
r 24         th
--[ 2019.11.08.16.49.00.850.0 ]--
r 24         t
--[ 2019.11.08.16.49.01.275.0 ]--
r 24         
--[ 2019.11.08.16.49.01.434.0 ]--
r 24         C
--[ 2019.11.08.16.49.01.548.0 ]--
r 24         Co
--[ 2019.11.08.16.49.01.633.0 ]--
r 24         Coo
--[ 2019.11.08.16.49.01.690.0 ]--
r 24         Coor
--[ 2019.11.08.16.49.01.853.0 ]--
r 24         Coord
--[ 2019.11.08.16.49.01.936.0 ]--
r 24         Coord 
--[ 2019.11.08.16.49.02.024.0 ]--
r 24         Coord l
--[ 2019.11.08.16.49.02.164.0 ]--
r 24         Coord lc
--[ 2019.11.08.16.49.02.296.0 ]--
r 24         Coord lc;
--[ 2019.11.08.16.49.02.752.0 ]--
r 24         Coord lc
--[ 2019.11.08.16.49.02.858.0 ]--
r 24         Coord l
--[ 2019.11.08.16.49.03.014.0 ]--
r 24         Coord lo
--[ 2019.11.08.16.49.03.135.0 ]--
r 24         Coord loc
--[ 2019.11.08.16.49.03.163.0 ]--
r 24         Coord loc;
--[ 2019.11.08.16.55.07.272.0 ]--
r 106 
--[ 2019.11.08.16.55.07.492.0 ]--
- 106
--[ 2019.11.08.16.55.11.421.0 ]--
+ 106 
--[ 2019.11.08.16.55.11.814.0 ]--
r 106         PFNode begin = new PFNode(start, null);
--[ 2019.11.08.16.55.15.960.0 ]--
r 111 
--[ 2019.11.08.16.55.25.045.0 ]--
r 18     private B[][] board;
--[ 2019.11.08.16.55.25.172.0 ]--
r 18     private Bo[][] board;
--[ 2019.11.08.16.55.25.284.0 ]--
r 18     private Boo[][] board;
--[ 2019.11.08.16.55.25.940.0 ]--
r 18     private Bool[][] board;
--[ 2019.11.08.16.55.26.020.0 ]--
r 18     private Boole[][] board;
--[ 2019.11.08.16.55.26.111.0 ]--
r 18     private Boolea[][] board;
--[ 2019.11.08.16.55.26.234.0 ]--
r 18     private Boolean[][] board;
--[ 2019.11.08.16.55.26.519.0 ]--
r 18     private Boolean [][] board;
--[ 2019.11.08.16.55.26.636.0 ]--
r 18     private Boolean[][] board;
--[ 2019.11.08.16.55.39.267.0 ]--
r 70         
--[ 2019.11.08.16.55.39.613.0 ]--
- 69
--[ 2019.11.08.16.55.39.765.0 ]--
- 69
--[ 2019.11.08.16.55.40.467.0 ]--
r 68         this.terrain = terrain; 
--[ 2019.11.08.16.55.40.496.0 ]--
r 68         this.terrain = terrain;
--[ 2019.11.08.17.05.08.189.0 ]--
r 105 
--[ 2019.11.08.20.37.33.786.0 ]--
DisposeComponent
--[ 2019.11.09.16.26.15.806.0 ]--
NewLogger: P04_Pathfinding
Version: 1.3
--[ 2019.11.09.16.26.16.129.0 ]--
InitTree:
/out/production/P04_Pathfinding/.donotlog
/out/production/P04_Pathfinding/algs4.jar
/out/production/P04_Pathfinding/stdlib.jar
/out/production/P04_Pathfinding/Coord.class
/out/production/P04_Pathfinding/png2emap.py
/out/production/P04_Pathfinding/Walker.class
/out/production/P04_Pathfinding/Terrain.class
/out/production/P04_Pathfinding/ramp.png.emap
/out/production/P04_Pathfinding/ramp2.png.emap
/out/production/P04_Pathfinding/ramp3.png.emap
/out/production/P04_Pathfinding/mazeAB.png.emap
/out/production/P04_Pathfinding/usa128.png.emap
/out/production/P04_Pathfinding/usa256.png.emap
/out/production/P04_Pathfinding/Pathfinder.class
/out/production/P04_Pathfinding/usa1024.png.emap
/out/production/P04_Pathfinding/maze32_0.png.emap
/out/production/P04_Pathfinding/maze32_1.png.emap
/out/production/P04_Pathfinding/maze232_0.png.emap
/out/production/P04_Pathfinding/maze320_0.png.emap
/out/production/P04_Pathfinding/mazeBrain.png.emap
/out/production/P04_Pathfinding/TerrainEditor.class
/out/production/P04_Pathfinding/Pathfinder$PFNode.class
/out/production/P04_Pathfinding/PathfinderVisualizer.class
/out/production/P04_Pathfinding/InteractivePathfinderVisualizer.class
/src/algs4.jar
/src/Coord.java
/src/stdlib.jar
/src/Walker.java
/src/Terrain.java
/src/Pathfinder.java
/src/TerrainEditor.java
/src/PathfinderVisualizer.java
/src/InteractivePathfinderVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/heightmaps/.donotlog
/heightmaps/png2emap.py
/heightmaps/ramp.png.emap
/heightmaps/ramp2.png.emap
/heightmaps/ramp3.png.emap
/heightmaps/mazeAB.png.emap
/heightmaps/usa128.png.emap
/heightmaps/usa256.png.emap
/heightmaps/usa1024.png.emap
/heightmaps/maze32_0.png.emap
/heightmaps/maze32_1.png.emap
/heightmaps/maze232_0.png.emap
/heightmaps/maze320_0.png.emap
/heightmaps/mazeBrain.png.emap
/.cos265
/readme.html
/P04_Pathfinding.iml

--[ 2019.11.09.16.26.16.130.0 ]--
InitFile: /src/InteractivePathfinderVisualizer.java
import java.awt.event.KeyEvent;

/**
 * InteractivePathfinderVisualizer visualizes the terrain and the computed
 * path and allows the user to change parameters of the Pathfinder.  Below
 * is a list of commands and what they do.  Note: some of the commands
 * modify the properties of the path finder and some modify the terrain.
 *
 * Command        Action                                      Terrain
 * C              clear path
 * space          recompute path
 * S/E            set start/end location to mouse
 * left/right     halve/double path search heuristic value
 * 0/1            set path search heuristic to 0 or 1
 * W              start a walker to show the path
 * R              randomly generate a new terrain                *
 * M              smooths terrain under mouse                    *
 * shift+M        smooths all terrain                            *
 * up/down        increase/decrease terrain under mouse          *
 */

public class InteractivePathfinderVisualizer {
    private final static int DELAY = 10;

    // sets how many redraws it should take for the walker to reach its destination
    private final static float STEPS_TO_WALK = 100.0f;

    // for convenience, here are the emap files that are located under heightmaps/ folder
    // the python script in that folder converts png files to emap. \
    // you can use it to create your own maps to test your code
    private final static String[] emaps = {
            "maze32_0.png.emap",    // 0   (32x32 maze)
            "maze32_1.png.emap",    // 1   (another 32x32 maze)
            "maze232_0.png.emap",   // 2   (232x232 maze)
            "maze320_0.png.emap",   // 3   (same as maze32_0, only scaled up by 10x)
            "mazeAB.png.emap",      // 4   (a maze from a site no longer online :( )
            "mazeBrain.png.emap",   // 5   (...)
            "ramp.png.emap",        // 6   (some tests)
            "ramp2.png.emap",       // 7   (...)
            "ramp3.png.emap",       // 8   (...)
            "usa128.png.emap",      // 9   (elevation map of USA from https://bananas.openttd.org/en/heightmap/)
            "usa256.png.emap",      // 10  (same as usa128, only higher resolution)
            "usa1024.png.emap",     // 11  (same as usa128, only higher resolution
    };

    private final static String emapFilename = emaps[0];        // change index to load a different elevation map



    public static void main(String[] args) {
        Terrain terrain = new Terrain(emapFilename);
        Pathfinder pf = new Pathfinder(terrain);
        int N = terrain.getN();

        StdDraw.show(0);

        // set default starting and ending locations
        pf.setPathStart(new Coord(1, 1));
        pf.setPathEnd(new Coord(N-3, N-3));

        // find a path
        pf.computePath();

        PathfinderVisualizer.draw(terrain, pf, null, N);
        StdDraw.show(DELAY);

        // prevent repeated applications
        boolean keyboardR = false;
        boolean keyboardM = false;

        Walker walker = null;

        while(true) {
            boolean recompute = false;
            boolean redraw = false;

            // mouse location on map
            int mouseI = (int) ((StdDraw.mouseX()-24) / 464 * N);
            int mouseJ = (int) ((464 - (StdDraw.mouseY()-36)) / 464 * N);
            boolean isMouseOnMap = (mouseI >=0 && mouseI < N && mouseJ >= 0 && mouseJ < N);

            if(StdDraw.isKeyPressed(KeyEvent.VK_LEFT) || StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
                boolean keyboardLeft = StdDraw.isKeyPressed(KeyEvent.VK_LEFT);
                float m = keyboardLeft ? 0.5f : 2.0f;
                float h = pf.getHeuristic() * m;
                h = Math.max(1.0f/1024.0f, Math.min(1048576.0f, h));
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_0) || StdDraw.isKeyPressed(KeyEvent.VK_1)) {
                boolean keyboard0 = StdDraw.isKeyPressed(KeyEvent.VK_0);
                float h = keyboard0 ? 0 : 1;
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_C)) {
                pf.resetPath();
                walker = null;
                redraw = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_R) && !keyboardR) {
                TerrainEditor.setFractalHeights(terrain);
                TerrainEditor.clampHeights(terrain);
                recompute = true;
            }
            keyboardR = StdDraw.isKeyPressed(KeyEvent.VK_R);

            if(StdDraw.isKeyPressed(KeyEvent.VK_M)) {
                if(StdDraw.isKeyPressed(KeyEvent.VK_SHIFT)) {
                    if(!keyboardM) {
                        TerrainEditor.smoothHeights(terrain);
                        recompute = true;
                    }
                } else {
                    TerrainEditor.smoothHeights(mouseI, mouseJ, N / 20, true, terrain);
                    recompute = true;
                }
            }
            keyboardM = StdDraw.isKeyPressed(KeyEvent.VK_M);

            if(StdDraw.isKeyPressed(KeyEvent.VK_SPACE)) {
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_UP) || StdDraw.isKeyPressed(KeyEvent.VK_DOWN)) {
                boolean keyboardUp = StdDraw.isKeyPressed(KeyEvent.VK_UP);
                float add = keyboardUp ? 8.0f : -8.0f;
                TerrainEditor.addHeight(mouseI, mouseJ, N / 20, add, terrain);
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_S)) {
                pf.setPathStart(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_E)) {
                pf.setPathEnd(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_W)) {
                Iterable<Coord> path = pf.getPathSolution();
                if(path != null) {
                    walker = new Walker(terrain, pf.getPathSolution());
                }
            }

            if(walker != null) {
                if(walker.doneWalking()) {
                    walker = null;
                } else {
                    walker.advance(pf.getPathCost() / STEPS_TO_WALK);
                }
                redraw = true;
            }

            if(recompute) {
                walker = null;
                pf.resetPath();
                if(pf.getPathStart() != null && pf.getPathEnd() != null) {
                    pf.computePath();
                }
                redraw = true;
            }

            if(redraw) {
                PathfinderVisualizer.draw(terrain, pf, walker, N);
                StdDraw.show(DELAY);
            } else {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    /* do nothing */
                }
            }
        }
    }
}

--[ 2019.11.09.16.26.16.130.1 ]--
InitFile: /src/PathfinderVisualizer.java
/**
 * PathfinderVisualizer visualizes the terrain and found path.
 */

import java.awt.Color;
import java.awt.Font;

public class PathfinderVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // color for different elevations.  must be in ascending order!
    private final static int[][] elevationColors = {
            // h    r   g   b   where h=height, r=red, g=green, b=blue
            {  0,   0,  0,  0},
            {  2,   0,  0,160},
            {  4,   0,224,224},
            { 16, 192,192,  0},
            { 64,  16,255, 16},
            {128,  32,224, 32},
            {192, 128,128,  8},
            {224, 164,164,164},
            {255, 255,255,255}
    };

    private final static Color cStart    = new Color(128, 128, 255);
    private final static Color cEnd      = new Color(255, 128, 128);
    private final static Color cSolution = new Color(255, 128, 255);
    private final static Color cSearched = new Color(128,   0, 128);

    // linearly interpolating between the corresponding rgb values
    private static Color colorLERP(float v1, int r0, int g0, int b0, int r1, int g1, int b1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * r0 + v1 * r1);
        int g = (int)(v0 * g0 + v1 * g1);
        int b = (int)(v0 * b0 + v1 * b1);
        return new Color(r, g, b);
    }
    private static Color colorLERP(float v1, Color c0, Color c1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * c0.getRed()   + v1 * c1.getRed());
        int g = (int)(v0 * c0.getGreen() + v1 * c1.getGreen());
        int b = (int)(v0 * c0.getBlue()  + v1 * c1.getBlue());
        int a = (int)(v0 * c0.getAlpha() + v1 * c1.getAlpha());
        return new Color(r, g, b, a);
    }

    // returns color for given height
    private static Color height2Color(int h) {
        h = Math.max(0, Math.min(255, h));

        int[] ec0 = elevationColors[0];  // default lower bound
        int[] ec1 = elevationColors[1];  // default upper bound

        // find upper bound while updating lower bound
        for(int i = 1; i < elevationColors.length; i++) {
            ec1 = elevationColors[i];
            if(h >= ec0[0] && h <= ec1[0]) break;
            ec0 = ec1;
        }

        int h0=ec0[0], r0=ec0[1], g0=ec0[2], b0=ec0[3];
        int h1=ec1[0], r1=ec1[1], g1=ec1[2], b1=ec1[3];
        float v1 = ((float)(h - h0)) / ((float)(h1 - h0));

        return colorLERP(v1, r0, g0, b0, r1, g1, b1);
    }

    private static void drawCircle(int i, int j, int N, double rad) {
        int c = (int)((i+0.5f) * 464.0f / N);
        int r = (int)((j+0.5f) * 464.0f / N);
        StdDraw.circle(c + 24, 464 - r + 36, rad);
    }
    public static void drawCircle(Coord loc, int N, double rad) {
        drawCircle(loc.getI(), loc.getJ(), N, rad);
    }

    private static void drawPath(Iterable<Coord> path, int N) {
        boolean first = true;
        int c0 = 0, r0 = 0;
        for (Coord loc : path) {
            int c1 = (int)((loc.getI()+0.5f) * 464.0f / N);
            int r1 = (int)((loc.getJ()+0.5f) * 464.0f / N);
            if(!first) {
                StdDraw.line(c0 + 24, 464 - r0 + 36, c1 + 24, 464 - r1 + 36);
            }
            first = false;
            c0 = c1; r0 = r1;
        }
    }

    // draw N-by-N pathfinding map
    public static void draw(Terrain terrain, Pathfinder pf, Walker walker, int N) {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.filledSquare(256, 256 + 12, 464 / 2);

        // draw terrain
        for(int row = 0; row < 464; row++) {
            int j = (int)((float)row/464.0f * N);
            for(int col = 0; col < 464; col++) {
                int i = (int)((float)col/464.0f * N);
                Coord loc = new Coord(i,j);
                Color c = height2Color(terrain.getHeight(loc));
                if(pf.wasSearched(loc)) {
                    c = colorLERP(0.50f, c, cSearched);
                }
                StdDraw.setPenColor(c);
                StdDraw.filledSquare(col + 24, 464 - row + 36, 1);
            }
        }

        // draw path start
        if(pf.getPathStart() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathStart(), N, 4.0);

            StdDraw.setPenColor(cStart);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathStart(), N, 4.0);
        }

        // draw path end
        if(pf.getPathEnd() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathEnd(), N, 4.0);

            StdDraw.setPenColor(cEnd);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathEnd(), N, 4.0);
        }

        // draw found path
        if(pf.foundPath()) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawPath(pf.getPathSolution(), N);

            StdDraw.setPenColor(cSolution);
            StdDraw.setPenRadius(0.002);
            drawPath(pf.getPathSolution(), N);
        }

        // draw walker
        if(walker != null) {
            Coord loc = walker.getLocation();
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);

            StdDraw.setPenColor(StdDraw.WHITE);
            StdDraw.setPenRadius(0.002);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);
        }

        // write status text
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.text(96, 12, "heuristic: " + pf.getHeuristic());
        if(pf.foundPath()) StdDraw.text(256, 12, "path: " + pf.getPathCost());
        else               StdDraw.text(256, 12, "no path found");
        StdDraw.text(512-96, 12, "searched: " + pf.getSearchSize() + " (" + (int)(100.0f * pf.getSearchSize() / (N*N)) + "%)");
    }
}

--[ 2019.11.09.16.26.16.130.2 ]--
InitFile: /src/Terrain.java
import java.lang.IndexOutOfBoundsException;

/**
 * Terrain stores elevations for map and computes distance and
 * cost in traversing the terrain.
 */

public class Terrain {
    private int N;
    private int[][] heights;

    public Terrain(int N) {
        this.N = N;
        this.heights = new int[N][N];
    }

    public Terrain(int[][] heights) {
        this.N = heights.length;
        this.heights = heights;
    }

    public Terrain(String emapfile) {
        In in = new In(emapfile);
        this.N = in.readInt();
        this.heights = new int[N][N];
        for (int j = 0; j < N; j++) {
            for (int i = 0; i < N; i++) {
                this.heights[i][j] = in.readInt();
            }
        }
    }

    public int getN() {
        return N;
    }

    public void setHeight(int i, int j, int h) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        heights[i][j] = h;
    }
    public void setHeight(int i, int j, float h) {
        setHeight(i, j, (int) h);
    }
    public void setHeight(Coord loc, int h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }
    public void setHeight(Coord loc, float h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }

    public int getHeight(int i, int j) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        return heights[i][j];
    }
    public int getHeight(Coord loc) {
        return getHeight(loc.getI(), loc.getJ());
    }

    // computes distance between (i0,j0) and (i1,j1) as the crow flies
    public float computeDistance(int i0, int j0, int i1, int j1) {
        return (float)Math.sqrt((i0 - i1) * (i0 - i1) + (j0 - j1) * (j0 - j1));
    }
    public float computeDistance(Coord c0, Coord c1) {
        return computeDistance(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }

    public float computeTravelCost(int i0, int j0, int i1, int j1) {
        float h0 = getHeight(i0, j0), h1 = getHeight(i1, j1);
        float climb = (float)Math.pow(Math.abs(h0 - h1) * 1000.0, 1.5);
        float dist = computeDistance(i0,j0, i1,j1);
        return (1.0f + climb) * dist;
    }
    public float computeTravelCost(Coord c0, Coord c1) {
        return computeTravelCost(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }
    public float computeTravelCost(Iterable<Coord> cs) {
        Coord c0 = null;
        float cost = 0.0f;
        for(Coord c1 : cs) {
            if(c0 != null) cost += computeTravelCost(c0, c1);
            c0 = c1;
        }
        return cost;
    }
}

--[ 2019.11.09.16.26.16.131.0 ]--
InitFile: /src/Walker.java
import java.util.Iterator;

/**
 * Walker takes an Iterable of Coords and simulates an individual
 * walking along the path over the given Terrain
 */
public class Walker {

    // terrain: the Terrain the Walker traverses
    // path: the sequence of Coords the Walker follows
    public Walker(Terrain terrain, Iterable<Coord> path) {
    }

    // returns the Walker's current location
    public Coord getLocation() {
        return null;
    }

    // returns true if Walker has reached the end Coord (last in path)
    public boolean doneWalking() {
        return true;
    }

    // advances the Walker along path
    // byTime: how long the Walker should traverse (may be any non-negative value)
    public void advance(float byTime) {
    }

}

--[ 2019.11.09.16.26.16.131.1 ]--
InitFile: /src/Coord.java
/**
 * Coordinates is an immutable type that store the tuple (i, j)
 */
public final class Coord {
    private final int i;
    private final int j;

    public Coord(int i, int j) {
        this.i = i;
        this.j = j;
    }

    public int getI() { return i; }
    public int getJ() { return j; }

    public boolean isInBounds(int minI, int minJ, int maxI, int maxJ) {
        return i >= minI && j >= minJ && i <= maxI && j <= maxJ;
    }
    public boolean isInBounds(Coord min, Coord max) {
        return i >= min.i && i <= max.i && j >= min.j && j <= max.j;
    }

    public Coord add(int addI, int addJ) {
        return new Coord(i + addI, j + addJ);
    }
    public Coord add(Coord that) { return new Coord(i + that.i, j + that.j); }

    public String toString() { return "(" + i + "," + j + ")"; }

    public boolean equals(Object o) {
        if(this == o) return true;
        if(o == null) return false;
        if(o.getClass() != this.getClass()) return false;
        Coord that = (Coord) o;
        if(this.i != that.i) return false;
        if(this.j != that.j) return false;
        return true;
    }
}

--[ 2019.11.09.16.26.16.137.0 ]--
InitFile: /src/Pathfinder.java
import java.lang.IndexOutOfBoundsException;
import java.lang.IllegalArgumentException;
import java.util.Iterator;

/**
 * Pathfinder uses A* search to find a near optimal path
 * between to locations with given terrain.
 */

public class Pathfinder {

    private Coord start;
    private Coord end;
    private float heuristic;
    private boolean pathFound;
    private Stack<Coord> s;
    private Terrain terrain;
    private Boolean[][] board;

    /**
     * PFNode will be the key for MinPQ (used in computePath())
     */
    private class PFNode implements Comparable<PFNode> {
        Coord loc;
        // loc: the location of the PFNode
        // fromNode: how did we get here? (linked list back to start)
        public PFNode(Coord loc, PFNode fromNode) {
            this.loc = loc;

        }

        // compares this with that, used to find minimum cost PFNode
        public int compareTo(PFNode that) {
            return 0;
        }

        // returns the cost to travel from starting point to this
        // via the fromNode chain
        public float getCost(float heuristic) { return 0; }

        // returns if this PFNode is not marked invalid
        public boolean isValid() {
            return false;
        }

        // marks the PFNode as invalid
        public void invalidate() {
        }

        // returns if the PFNode is marked as used
        public boolean isUsed() {
            return true;
        }

        // marks the PFNode as used
        public void use() { }

        // returns an Iterable of PFNodes that surround this
        public Iterable<PFNode> neighbors() {
            Stack<PFNode> s = new Stack<>();
            s.push(new PFNode(null, null));
            return s;
        }

    }

    public Pathfinder(Terrain terrain) {
        this.terrain = terrain;
    }

    public void setPathStart(Coord loc) {
        start = loc;
    }

    public Coord getPathStart() {
        return start;
    }

    public void setPathEnd(Coord loc) {
        end = loc;
    }

    public Coord getPathEnd() {
        return end;
    }

    public void setHeuristic(float v)
    {
        heuristic = v;
    }

    public float getHeuristic() {
        return heuristic;
    }

    public void resetPath() {
    }

    public void computePath() {

        //Create a pointer that will initially begin at the start node. Keeps track of which node you're currently on.
        Coord pointer = start;
        MinPQ<PFNode> pfQueue = new MinPQ<>();
        PFNode begin = new PFNode(start, null);



        //J and I are swapped, so J is x and I is y

        pfQueue.insert(begin);


        //Print the current state of the board
        /*
        for(int i = 0; i < terrain.getN(); i++){
            for(int j = 0; j < terrain.getN(); j++){
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
        */

        //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerException
        s = new Stack<>();
        s.push(start);
        s.push(end);


        pathFound = true;
    }

    public boolean foundPath() {
        return pathFound;
    }

    public float getPathCost() {
        return 0;
    }

    public int getSearchSize() {
        return 0;
    }

    public Iterable<Coord> getPathSolution() {

        //Return a stack of coordinates for the visualizer
        return s;
    }

    public boolean wasSearched(Coord loc) {
        return false;
    }
}

--[ 2019.11.09.16.26.16.137.1 ]--
InitFile: /src/TerrainEditor.java
/**
 * The following class provides some simple terrain editing functions.
 */
public class TerrainEditor {
    private static float rndRadius(float d) {
        return (float)StdRandom.uniform(-d,d);
    }

    private static float getFractalHeight(int i, int j, float dh, Terrain terrain, boolean[] isset) {
        int N = terrain.getN();
        dh = Math.max(-64, Math.min(255+64, dh));   // allow the height to go just a bit out of range
        if(!isset[i + j * N]) {
            isset[i + j * N] = true;
            terrain.setHeight(i, j, dh);
        }
        return terrain.getHeight(i,j);
    }

    private static void setFractalHeights(int i0, int j0, int i1, int j1, Terrain terrain, boolean[] isset) {
        int id = i1-i0;
        int jd = j1-j0;
        int i01 = (i0+i1)/2;
        int j01 = (j0+j1)/2;

        if(id <= 1 && jd <= 1) return;

        float h00 = getFractalHeight(i0,j0,32,terrain,isset);
        float h01 = getFractalHeight(i0,j1,32,terrain,isset);
        float h10 = getFractalHeight(i1,j0,32,terrain,isset);
        float h11 = getFractalHeight(i1,j1,32,terrain,isset);

        float d = (float)(Math.sqrt((i1-i0)*(i1-i0) + (j1-j0)*(j1-j0)) * 0.5);

        float d0001 = (h00 + h01) / 2 + rndRadius(d);
        float d0010 = (h00 + h10) / 2 + rndRadius(d);
        float d1101 = (h11 + h01) / 2 + rndRadius(d);
        float d1110 = (h11 + h10) / 2 + rndRadius(d);

        float h0001 = getFractalHeight(i0, j01, d0001, terrain,isset);
        float h0010 = getFractalHeight(i01, j0, d0010, terrain,isset);
        float h1101 = getFractalHeight(i01, j1, d1101, terrain,isset);
        float h1110 = getFractalHeight(i1, j01, d1110, terrain,isset);

        float dm = (float)((h0001 + h0010 + h1101 + h1110) / 4.0);
        float hm = getFractalHeight(i01, j01, dm, terrain,isset);

        if(id > 1 && jd > 1) {
            setFractalHeights(i0, j0, i01, j01, terrain, isset);
            setFractalHeights(i01, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i01, j1, terrain, isset);
            setFractalHeights(i01, j01, i1, j1, terrain, isset);
        } else if(jd > 1) {
            setFractalHeights(i0, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i1, j1, terrain, isset);
        } else {
            setFractalHeights(i0, j0, i01, j1, terrain, isset);
            setFractalHeights(i01, j0, i1, j1, terrain, isset);
        }
    }

    public static void setFractalHeights(Terrain terrain) {
        int N = terrain.getN();
        boolean[] isset = new boolean[N*N];
        setFractalHeights(0, 0, N - 1, N - 1, terrain, isset);
    }

    public static void smoothHeights(Terrain terrain) {
        int N = terrain.getN();
        int radius = (int)Math.ceil(Math.sqrt(N*N/2.0f));
        smoothHeights(N/2, N/2, radius, false, terrain);
    }

    public static void smoothHeights(int ic, int jc, int radius, boolean fallOff, Terrain terrain) {
        final int N = terrain.getN();
        final int w = 2*radius+1;
        float[] s = new float[w*w];
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;

                float m = computeEffect(i, j, ic, jc, radius, fallOff, N);
                if(m <= 0.0000001) {
                    s[sidx] = terrain.getHeight(i,j);
                    continue;
                }
                float h = 0;
                int c = 0;
                if(i > 0 && j > 0) {
                    h += terrain.getHeight(i-1,j-1);
                    c += 1;
                }
                if(i < N-1 && j > 0) {
                    h += terrain.getHeight(i+1,j-1);
                    c += 1;
                }
                if(i > 0 && j < N-1) {
                    h += terrain.getHeight(i-1,j+1);
                    c += 1;
                }
                if(i < N-1 && j < N-1) {
                    h += terrain.getHeight(i+1,j+1);
                    c += 1;
                }
                if(i > 0) {
                    h += terrain.getHeight(i-1,j);
                    c += 1;
                }
                if(j > 0) {
                    h += terrain.getHeight(i,j-1);
                    c += 1;
                }
                if(i < N-1) {
                    h += terrain.getHeight(i+1,j);
                    c += 1;
                }
                if(j < N-1) {
                    h += terrain.getHeight(i,j+1);
                    c += 1;
                }
                s[sidx] = (1-m) * terrain.getHeight(i,j) + m * h / c;
            }
        }
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;
                terrain.setHeight(i, j, s[sidx]);
            }
        }
    }

    public static void clampHeights(Terrain terrain) {
        int N = terrain.getN();
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                terrain.setHeight(i, j, Math.max(0, Math.min(255, terrain.getHeight(i, j))));
            }
        }
    }

    private static float computeEffect(int i, int j, int ic, int jc, int radius, boolean fallOff, int N) {
        if(i < 0 || j < 0 || i >= N || j >= N) return 0;
        if(!fallOff) return 1;
        int d2 = (ic-i)*(ic-i)+(jc-j)*(jc-j);
        if(d2 > radius*radius) return 0;
        return ((float)radius - (float)Math.sqrt(d2)) / (float)radius;
    }

    public static void addHeight(int i, int j, int radius, float add, Terrain terrain) {
        final int N = terrain.getN();
        for(int ja = -radius; ja <= radius; ja++) {
            int r = j + ja;
            if(r < 0 || r >= N) continue;
            for(int ia = -radius; ia <= radius; ia++) {
                int c = i + ia;
                if(c < 0 || c >= N) continue;
                float v = add * computeEffect(c, r, i, j, radius, true, N);
                float h = terrain.getHeight(c, r) + v;
                h = Math.max(0, Math.min(255, h));
                terrain.setHeight(c, r, h);
            }
        }
    }
}

--[ 2019.11.09.16.26.16.138.0 ]--
InitFile: /.cos265


--[ 2019.11.09.16.26.16.138.1 ]--
InitFile: /P04_Pathfinding.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/heightmaps" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.11.09.16.29.12.386.0 ]--
:/src/Pathfinder.java
r 61             s.push(new PFNode(null, nu));
--[ 2019.11.09.16.29.12.441.0 ]--
r 61             s.push(new PFNode(null, n));
--[ 2019.11.09.16.29.12.983.0 ]--
r 61             s.push(new PFNode(null, ));
--[ 2019.11.09.16.29.13.129.0 ]--
r 61             s.push(new PFNode(null, t));
--[ 2019.11.09.16.29.13.170.0 ]--
r 61             s.push(new PFNode(null, th));
--[ 2019.11.09.16.29.13.200.0 ]--
r 61             s.push(new PFNode(null, thi));
--[ 2019.11.09.16.29.13.359.0 ]--
r 61             s.push(new PFNode(null, this));
--[ 2019.11.09.16.29.35.342.0 ]--
+ 61             
--[ 2019.11.09.16.29.35.379.0 ]--
r 61             c
--[ 2019.11.09.16.29.35.445.0 ]--
r 61             co
--[ 2019.11.09.16.29.35.511.0 ]--
r 61             con
--[ 2019.11.09.16.29.35.573.0 ]--
r 61             cons
--[ 2019.11.09.16.29.35.656.0 ]--
r 61             conso
--[ 2019.11.09.16.29.35.791.0 ]--
r 61             consol
--[ 2019.11.09.16.29.35.902.0 ]--
r 61             console
--[ 2019.11.09.16.29.35.985.0 ]--
r 61             console.
--[ 2019.11.09.16.29.36.163.0 ]--
r 61             console.l
--[ 2019.11.09.16.29.36.344.0 ]--
r 61             console.lo
--[ 2019.11.09.16.29.36.415.0 ]--
r 61             console.log
--[ 2019.11.09.16.29.36.810.0 ]--
r 61             console.lo
--[ 2019.11.09.16.29.36.899.0 ]--
r 61             console.l
--[ 2019.11.09.16.29.37.030.0 ]--
r 61             console.
--[ 2019.11.09.16.29.37.214.0 ]--
r 61             console
--[ 2019.11.09.16.29.37.322.0 ]--
r 61             consol
--[ 2019.11.09.16.29.37.453.0 ]--
r 61             consol 
--[ 2019.11.09.16.29.37.492.0 ]--
r 61             consol
--[ 2019.11.09.16.29.37.670.0 ]--
r 61             conso
--[ 2019.11.09.16.29.37.908.0 ]--
r 61             cons
--[ 2019.11.09.16.29.38.021.0 ]--
r 61             con
--[ 2019.11.09.16.29.38.124.0 ]--
r 61             co
--[ 2019.11.09.16.29.38.247.0 ]--
r 61             c
--[ 2019.11.09.16.29.38.889.0 ]--
r 61             
--[ 2019.11.09.16.29.38.939.0 ]--
r 61             S
--[ 2019.11.09.16.29.39.197.0 ]--
r 61             St
--[ 2019.11.09.16.29.39.419.0 ]--
r 61             Std
--[ 2019.11.09.16.29.39.804.0 ]--
r 61             StdOut
--[ 2019.11.09.16.29.39.901.0 ]--
r 61             StdOut.
--[ 2019.11.09.16.29.40.079.0 ]--
r 61             StdOut.p
--[ 2019.11.09.16.29.40.150.0 ]--
r 61             StdOut.pr
--[ 2019.11.09.16.29.40.237.0 ]--
r 61             StdOut.pri
--[ 2019.11.09.16.29.40.295.0 ]--
r 61             StdOut.prin
--[ 2019.11.09.16.29.40.332.0 ]--
r 61             StdOut.print
--[ 2019.11.09.16.29.41.396.0 ]--
r 61             StdOut.printl
--[ 2019.11.09.16.29.41.448.0 ]--
r 61             StdOut.println
--[ 2019.11.09.16.29.42.365.0 ]--
r 61             StdOut.println*
--[ 2019.11.09.16.29.42.899.0 ]--
r 61             StdOut.println
--[ 2019.11.09.16.29.43.194.0 ]--
r 61             StdOut.println()
--[ 2019.11.09.16.29.44.158.0 ]--
r 61             StdOut.println(l)
--[ 2019.11.09.16.29.44.276.0 ]--
r 61             StdOut.println(lo)
--[ 2019.11.09.16.29.44.412.0 ]--
r 61             StdOut.println(loc)
--[ 2019.11.09.16.29.44.940.0 ]--
r 61             StdOut.println(loc )
--[ 2019.11.09.16.29.44.983.0 ]--
r 61             StdOut.println(loc)
--[ 2019.11.09.16.29.46.465.0 ]--
r 61             StdOut.println(loc.)
--[ 2019.11.09.16.29.46.768.0 ]--
r 61             StdOut.println(loc.g)
--[ 2019.11.09.16.29.46.858.0 ]--
r 61             StdOut.println(loc.ge)
--[ 2019.11.09.16.29.46.983.0 ]--
r 61             StdOut.println(loc.get)
--[ 2019.11.09.16.29.47.715.0 ]--
r 61             StdOut.println(loc.getI)
--[ 2019.11.09.16.29.48.517.0 ]--
r 61             StdOut.println(loc.getI())
--[ 2019.11.09.16.29.49.132.0 ]--
r 61             StdOut.println(loc.getI() )
--[ 2019.11.09.16.29.49.245.0 ]--
r 61             StdOut.println(loc.getI() +)
--[ 2019.11.09.16.29.49.350.0 ]--
r 61             StdOut.println(loc.getI() + )
--[ 2019.11.09.16.29.49.538.0 ]--
r 61             StdOut.println(loc.getI() + 1)
--[ 2019.11.09.16.29.51.893.0 ]--
r 61             StdOut.println(loc.getI() + 1,)
--[ 2019.11.09.16.29.52.018.0 ]--
r 61             StdOut.println(loc.getI() + 1, )
--[ 2019.11.09.16.29.55.087.0 ]--
r 61             StdOut.println(loc.getI() + 1 )
--[ 2019.11.09.16.29.56.012.0 ]--
r 61             StdOut.println(loc.getI() + 1)
--[ 2019.11.09.16.29.58.642.0 ]--
r 61             StdOut.println(loc.getI() + 1,)
--[ 2019.11.09.16.29.58.748.0 ]--
r 61             StdOut.println(loc.getI() + 1, )
--[ 2019.11.09.16.29.58.843.0 ]--
r 61             StdOut.println(loc.getI() + 1, l)
--[ 2019.11.09.16.29.59.010.0 ]--
r 61             StdOut.println(loc.getI() + 1, lo)
--[ 2019.11.09.16.29.59.096.0 ]--
r 61             StdOut.println(loc.getI() + 1, loc)
--[ 2019.11.09.16.29.59.203.0 ]--
r 61             StdOut.println(loc.getI() + 1, loc.)
--[ 2019.11.09.16.29.59.338.0 ]--
r 61             StdOut.println(loc.getI() + 1, loc.g)
--[ 2019.11.09.16.29.59.418.0 ]--
r 61             StdOut.println(loc.getI() + 1, loc.ge)
--[ 2019.11.09.16.29.59.527.0 ]--
r 61             StdOut.println(loc.getI() + 1, loc.get)
--[ 2019.11.09.16.30.00.183.0 ]--
r 61             StdOut.println(loc.getI() + 1, loc.getI)
--[ 2019.11.09.16.30.01.696.0 ]--
r 61             StdOut.println(loc.getI() + 1, loc.get)
--[ 2019.11.09.16.30.02.301.0 ]--
r 61             StdOut.println(loc.getI() + 1, loc.getJ)
--[ 2019.11.09.16.30.03.852.0 ]--
r 61             StdOut.println(loc.getI() + 1, loc.getJ())
--[ 2019.11.09.16.30.04.087.0 ]--
r 61             StdOut.println(loc.getI() + 1, loc.getJ() )
--[ 2019.11.09.16.30.04.194.0 ]--
r 61             StdOut.println(loc.getI() + 1, loc.getJ() +)
--[ 2019.11.09.16.30.04.275.0 ]--
r 61             StdOut.println(loc.getI() + 1, loc.getJ() + )
--[ 2019.11.09.16.30.04.430.0 ]--
r 61             StdOut.println(loc.getI() + 1, loc.getJ() + 1)
--[ 2019.11.09.16.30.07.818.0 ]--
r 61             StdOut.println(loc.getI() + 1)
--[ 2019.11.09.16.30.08.703.0 ]--
+ 62             
--[ 2019.11.09.16.30.08.834.0 ]--
r 62                     
--[ 2019.11.09.16.30.11.227.0 ]--
- 62
--[ 2019.11.09.16.30.11.431.0 ]--
r 61             StdOut.println(loc.getI() + 1
--[ 2019.11.09.16.30.12.595.0 ]--
r 61             StdOut.println(loc.getI() + 1)
--[ 2019.11.09.16.30.13.021.0 ]--
r 61             StdOut.println(loc.getI() + 1);
--[ 2019.11.09.16.30.13.413.0 ]--
+ 62             
--[ 2019.11.09.16.30.17.141.0 ]--
r 62             S
--[ 2019.11.09.16.30.18.998.0 ]--
r 62             StdOut
--[ 2019.11.09.16.30.19.258.0 ]--
r 62             StdOut.
--[ 2019.11.09.16.30.19.457.0 ]--
r 62             StdOut.p
--[ 2019.11.09.16.30.19.642.0 ]--
r 62             StdOut.println
--[ 2019.11.09.16.30.19.656.0 ]--
r 62             StdOut.println()
--[ 2019.11.09.16.30.19.663.0 ]--
r 62             StdOut.println();
--[ 2019.11.09.16.30.20.685.0 ]--
r 62             StdOut.println(L);
--[ 2019.11.09.16.30.20.872.0 ]--
r 62             StdOut.println(Lo);
--[ 2019.11.09.16.30.21.029.0 ]--
r 62             StdOut.println(Loc);
--[ 2019.11.09.16.30.21.060.0 ]--
r 62             StdOut.println(Loc.);
--[ 2019.11.09.16.30.21.167.0 ]--
r 62             StdOut.println(Loc.g);
--[ 2019.11.09.16.30.21.242.0 ]--
r 62             StdOut.println(Loc.ge);
--[ 2019.11.09.16.30.21.377.0 ]--
r 62             StdOut.println(Loc.get);
--[ 2019.11.09.16.30.21.832.0 ]--
r 62             StdOut.println(Loc.getI);
--[ 2019.11.09.16.30.22.140.0 ]--
r 62             StdOut.println(Loc.getI());
--[ 2019.11.09.16.30.23.001.0 ]--
r 62             StdOut.println(Loc.getI();
--[ 2019.11.09.16.30.23.333.0 ]--
r 62             StdOut.println(Loc.getI);
--[ 2019.11.09.16.30.23.396.0 ]--
r 62             StdOut.println(Loc.get);
--[ 2019.11.09.16.30.23.505.0 ]--
r 62             StdOut.println(Loc.ge);
--[ 2019.11.09.16.30.23.619.0 ]--
r 62             StdOut.println(Loc.g);
--[ 2019.11.09.16.30.23.739.0 ]--
r 62             StdOut.println(Loc.);
--[ 2019.11.09.16.30.23.839.0 ]--
r 62             StdOut.println(Loc);
--[ 2019.11.09.16.30.23.949.0 ]--
r 62             StdOut.println(Lo);
--[ 2019.11.09.16.30.24.096.0 ]--
r 62             StdOut.println(L);
--[ 2019.11.09.16.30.24.463.0 ]--
r 62             StdOut.println();
--[ 2019.11.09.16.30.24.568.0 ]--
r 62             StdOut.println(l);
--[ 2019.11.09.16.30.24.682.0 ]--
r 62             StdOut.println(lo);
--[ 2019.11.09.16.30.24.778.0 ]--
r 62             StdOut.println(loc);
--[ 2019.11.09.16.30.24.852.0 ]--
r 62             StdOut.println(loc.);
--[ 2019.11.09.16.30.24.984.0 ]--
r 62             StdOut.println(loc.g);
--[ 2019.11.09.16.30.25.753.0 ]--
r 62             StdOut.println(loc.getI);
--[ 2019.11.09.16.30.25.760.0 ]--
r 62             StdOut.println(loc.getI());
--[ 2019.11.09.16.30.26.104.0 ]--
r 62             StdOut.println(loc.getI() );
--[ 2019.11.09.16.30.26.232.0 ]--
r 62             StdOut.println(loc.getI() -);
--[ 2019.11.09.16.30.26.314.0 ]--
r 62             StdOut.println(loc.getI() - );
--[ 2019.11.09.16.30.26.444.0 ]--
r 62             StdOut.println(loc.getI() - 1);
--[ 2019.11.09.16.32.01.162.0 ]--
+ 63             
--[ 2019.11.09.16.32.01.726.0 ]--
r 63             S
--[ 2019.11.09.16.32.02.344.0 ]--
r 63             St
--[ 2019.11.09.16.32.03.268.0 ]--
r 63             String 
--[ 2019.11.09.16.32.03.892.0 ]--
r 63             String
--[ 2019.11.09.16.32.04.006.0 ]--
r 63             Strin
--[ 2019.11.09.16.32.04.121.0 ]--
r 63             Stri
--[ 2019.11.09.16.32.04.394.0 ]--
r 63             Str
--[ 2019.11.09.16.32.04.625.0 ]--
r 63             St
--[ 2019.11.09.16.32.04.773.0 ]--
r 63             Std
--[ 2019.11.09.16.32.05.859.0 ]--
r 63             StdOut
--[ 2019.11.09.16.32.05.970.0 ]--
r 63             StdOut.
--[ 2019.11.09.16.32.06.225.0 ]--
r 63             StdOut.p
--[ 2019.11.09.16.32.06.635.0 ]--
r 63             StdOut.println
--[ 2019.11.09.16.32.06.644.0 ]--
r 63             StdOut.println()
--[ 2019.11.09.16.32.06.650.0 ]--
r 63             StdOut.println();
--[ 2019.11.09.16.32.07.358.0 ]--
r 63             StdOut.println(l);
--[ 2019.11.09.16.32.07.631.0 ]--
r 63             StdOut.println(lc);
--[ 2019.11.09.16.32.07.718.0 ]--
r 63             StdOut.println(lc.);
--[ 2019.11.09.16.32.07.866.0 ]--
r 63             StdOut.println(lc.g);
--[ 2019.11.09.16.32.07.953.0 ]--
r 63             StdOut.println(lc.ge);
--[ 2019.11.09.16.32.08.070.0 ]--
r 63             StdOut.println(lc.get);
--[ 2019.11.09.16.32.08.357.0 ]--
r 63             StdOut.println(lc.ge);
--[ 2019.11.09.16.32.08.454.0 ]--
r 63             StdOut.println(lc.g);
--[ 2019.11.09.16.32.08.549.0 ]--
r 63             StdOut.println(lc.);
--[ 2019.11.09.16.32.08.658.0 ]--
r 63             StdOut.println(lc);
--[ 2019.11.09.16.32.09.124.0 ]--
r 63             StdOut.println(l);
--[ 2019.11.09.16.32.09.236.0 ]--
r 63             StdOut.println(lo);
--[ 2019.11.09.16.32.09.324.0 ]--
r 63             StdOut.println(loc);
--[ 2019.11.09.16.32.09.453.0 ]--
r 63             StdOut.println(loc.);
--[ 2019.11.09.16.32.09.563.0 ]--
r 63             StdOut.println(loc.g);
--[ 2019.11.09.16.32.09.636.0 ]--
r 63             StdOut.println(loc.ge);
--[ 2019.11.09.16.32.09.720.0 ]--
r 63             StdOut.println(loc.get);
--[ 2019.11.09.16.32.09.937.0 ]--
r 63             StdOut.println(loc.getJ);
--[ 2019.11.09.16.32.10.263.0 ]--
r 63             StdOut.println(loc.getJ());
--[ 2019.11.09.16.32.10.911.0 ]--
r 63             StdOut.println(loc.getJ() );
--[ 2019.11.09.16.32.11.670.0 ]--
r 63             StdOut.println(loc.getJ() +);
--[ 2019.11.09.16.32.11.802.0 ]--
r 63             StdOut.println(loc.getJ() + );
--[ 2019.11.09.16.32.11.851.0 ]--
r 63             StdOut.println(loc.getJ() + 1);
--[ 2019.11.09.16.32.12.883.0 ]--
+ 64             
--[ 2019.11.09.16.32.13.658.0 ]--
r 64             S
--[ 2019.11.09.16.32.13.849.0 ]--
r 64             St
--[ 2019.11.09.16.32.13.998.0 ]--
r 64             Std
--[ 2019.11.09.16.32.14.170.0 ]--
r 64             StdO
--[ 2019.11.09.16.32.14.327.0 ]--
r 64             StdOut
--[ 2019.11.09.16.32.14.529.0 ]--
r 64             StdOut.
--[ 2019.11.09.16.32.15.580.0 ]--
r 64             StdOut.println
--[ 2019.11.09.16.32.15.598.0 ]--
r 64             StdOut.println()
--[ 2019.11.09.16.32.15.604.0 ]--
r 64             StdOut.println();
--[ 2019.11.09.16.32.16.356.0 ]--
r 64             StdOut.println(l);
--[ 2019.11.09.16.32.16.502.0 ]--
r 64             StdOut.println(lo);
--[ 2019.11.09.16.32.16.623.0 ]--
r 64             StdOut.println(loc);
--[ 2019.11.09.16.32.16.788.0 ]--
r 64             StdOut.println(loc());
--[ 2019.11.09.16.32.17.175.0 ]--
r 64             StdOut.println(loc(.));
--[ 2019.11.09.16.32.17.283.0 ]--
r 64             StdOut.println(loc(.g));
--[ 2019.11.09.16.32.17.469.0 ]--
r 64             StdOut.println(loc(.));
--[ 2019.11.09.16.32.17.583.0 ]--
r 64             StdOut.println(loc());
--[ 2019.11.09.16.32.17.673.0 ]--
r 64             StdOut.println(loc);
--[ 2019.11.09.16.32.17.937.0 ]--
r 64             StdOut.println(loc.);
--[ 2019.11.09.16.32.18.339.0 ]--
r 64             StdOut.println(loc.g);
--[ 2019.11.09.16.32.18.390.0 ]--
r 64             StdOut.println(loc.ge);
--[ 2019.11.09.16.32.18.476.0 ]--
r 64             StdOut.println(loc.get);
--[ 2019.11.09.16.32.18.803.0 ]--
r 64             StdOut.println(loc.getJ);
--[ 2019.11.09.16.32.19.144.0 ]--
r 64             StdOut.println(loc.getJ());
--[ 2019.11.09.16.32.19.290.0 ]--
r 64             StdOut.println(loc.getJ() );
--[ 2019.11.09.16.32.19.841.0 ]--
r 64             StdOut.println(loc.getJ() -);
--[ 2019.11.09.16.32.19.908.0 ]--
r 64             StdOut.println(loc.getJ() - );
--[ 2019.11.09.16.32.20.008.0 ]--
r 64             StdOut.println(loc.getJ() - 1);
--[ 2019.11.09.16.32.20.244.0 ]--
r 64             StdOut.println(loc.getJ() - 1;);
--[ 2019.11.09.16.32.20.879.0 ]--
r 64             StdOut.println(loc.getJ() - 1);
--[ 2019.11.09.16.32.25.396.0 ]--
+ 112         
--[ 2019.11.09.16.32.28.890.0 ]--
r 112         c
--[ 2019.11.09.16.32.29.810.0 ]--
r 112         
--[ 2019.11.09.16.32.34.346.0 ]--
r 106         
--[ 2019.11.09.16.32.34.755.0 ]--
- 106
--[ 2019.11.09.16.32.36.716.0 ]--
r 109     
--[ 2019.11.09.16.32.36.905.0 ]--
r 109         
--[ 2019.11.09.16.32.37.419.0 ]--
r 109         b
--[ 2019.11.09.16.32.37.540.0 ]--
r 109         be
--[ 2019.11.09.16.32.37.739.0 ]--
r 109         bei
--[ 2019.11.09.16.32.37.783.0 ]--
r 109         bein
--[ 2019.11.09.16.32.38.022.0 ]--
r 109         bei
--[ 2019.11.09.16.32.38.097.0 ]--
r 109         be
--[ 2019.11.09.16.32.38.205.0 ]--
r 109         beg
--[ 2019.11.09.16.32.38.301.0 ]--
r 109         begi
--[ 2019.11.09.16.32.38.364.0 ]--
r 109         begin
--[ 2019.11.09.16.32.38.562.0 ]--
r 109         begin.
--[ 2019.11.09.16.32.38.786.0 ]--
r 109         begin.n
--[ 2019.11.09.16.32.39.049.0 ]--
r 109         begin.ne
--[ 2019.11.09.16.32.39.376.0 ]--
r 109         begin.neighbors
--[ 2019.11.09.16.32.39.387.0 ]--
r 109         begin.neighbors()
--[ 2019.11.09.16.32.40.372.0 ]--
r 109         begin.neighbors();
--[ 2019.11.09.16.32.43.634.0 ]--
r 111 
--[ 2019.11.09.16.32.46.862.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.16.33.25.823.0 ]--
r 61             StdOut.println(Iloc.getI() + 1);
--[ 2019.11.09.16.33.26.140.0 ]--
r 61             StdOut.println(I loc.getI() + 1);
--[ 2019.11.09.16.33.26.224.0 ]--
r 61             StdOut.println(Iloc.getI() + 1);
--[ 2019.11.09.16.33.26.416.0 ]--
r 61             StdOut.println(loc.getI() + 1);
--[ 2019.11.09.16.33.27.222.0 ]--
r 61             StdOut.println(gloc.getI() + 1);
--[ 2019.11.09.16.33.27.287.0 ]--
r 61             StdOut.println(geloc.getI() + 1);
--[ 2019.11.09.16.33.27.394.0 ]--
r 61             StdOut.println(getloc.getI() + 1);
--[ 2019.11.09.16.33.27.799.0 ]--
r 61             StdOut.println(get loc.getI() + 1);
--[ 2019.11.09.16.33.27.838.0 ]--
r 61             StdOut.println(getloc.getI() + 1);
--[ 2019.11.09.16.33.27.938.0 ]--
r 61             StdOut.println(geloc.getI() + 1);
--[ 2019.11.09.16.33.28.056.0 ]--
r 61             StdOut.println(gloc.getI() + 1);
--[ 2019.11.09.16.33.28.203.0 ]--
r 61             StdOut.println(loc.getI() + 1);
--[ 2019.11.09.16.33.28.912.0 ]--
r 61             StdOut.println("loc.getI() + 1);
--[ 2019.11.09.16.33.31.815.0 ]--
r 61             StdOut.println(loc.getI() + 1);
--[ 2019.11.09.16.33.34.490.0 ]--
r 61             StdOut.println("loc.getI() + 1);
--[ 2019.11.09.16.33.34.736.0 ]--
r 61             StdOut.println("Iloc.getI() + 1);
--[ 2019.11.09.16.33.34.851.0 ]--
r 61             StdOut.println("I loc.getI() + 1);
--[ 2019.11.09.16.33.34.950.0 ]--
r 61             StdOut.println("I +loc.getI() + 1);
--[ 2019.11.09.16.33.35.053.0 ]--
r 61             StdOut.println("I + loc.getI() + 1);
--[ 2019.11.09.16.33.35.309.0 ]--
r 61             StdOut.println("I + 1loc.getI() + 1);
--[ 2019.11.09.16.33.35.861.0 ]--
r 61             StdOut.println("I + loc.getI() + 1);
--[ 2019.11.09.16.33.35.954.0 ]--
r 61             StdOut.println("I +loc.getI() + 1);
--[ 2019.11.09.16.33.36.062.0 ]--
r 61             StdOut.println("I loc.getI() + 1);
--[ 2019.11.09.16.33.36.191.0 ]--
r 61             StdOut.println("Iloc.getI() + 1);
--[ 2019.11.09.16.33.36.603.0 ]--
r 61             StdOut.println("loc.getI() + 1);
--[ 2019.11.09.16.33.36.865.0 ]--
r 61             StdOut.println("iloc.getI() + 1);
--[ 2019.11.09.16.33.36.953.0 ]--
r 61             StdOut.println("i loc.getI() + 1);
--[ 2019.11.09.16.33.37.043.0 ]--
r 61             StdOut.println("i +loc.getI() + 1);
--[ 2019.11.09.16.33.37.114.0 ]--
r 61             StdOut.println("i + loc.getI() + 1);
--[ 2019.11.09.16.33.37.229.0 ]--
r 61             StdOut.println("i + 1loc.getI() + 1);
--[ 2019.11.09.16.33.37.538.0 ]--
r 61             StdOut.println("i + 1"loc.getI() + 1);
--[ 2019.11.09.16.33.37.807.0 ]--
r 61             StdOut.println("i + 1" loc.getI() + 1);
--[ 2019.11.09.16.33.37.951.0 ]--
r 61             StdOut.println("i + 1" +loc.getI() + 1);
--[ 2019.11.09.16.33.38.014.0 ]--
r 61             StdOut.println("i + 1" + loc.getI() + 1);
--[ 2019.11.09.16.33.40.301.0 ]--
r 62             StdOut.println("loc.getI() - 1);
--[ 2019.11.09.16.33.41.049.0 ]--
r 62             StdOut.println("iloc.getI() - 1);
--[ 2019.11.09.16.33.41.125.0 ]--
r 62             StdOut.println("i loc.getI() - 1);
--[ 2019.11.09.16.33.41.211.0 ]--
r 62             StdOut.println("i 0loc.getI() - 1);
--[ 2019.11.09.16.33.41.282.0 ]--
r 62             StdOut.println("i 0 loc.getI() - 1);
--[ 2019.11.09.16.33.41.421.0 ]--
r 62             StdOut.println("i 0 1loc.getI() - 1);
--[ 2019.11.09.16.33.41.642.0 ]--
r 62             StdOut.println("i 0 loc.getI() - 1);
--[ 2019.11.09.16.33.41.747.0 ]--
r 62             StdOut.println("i 0loc.getI() - 1);
--[ 2019.11.09.16.33.41.834.0 ]--
r 62             StdOut.println("i loc.getI() - 1);
--[ 2019.11.09.16.33.41.989.0 ]--
r 62             StdOut.println("i -loc.getI() - 1);
--[ 2019.11.09.16.33.42.101.0 ]--
r 62             StdOut.println("i -1loc.getI() - 1);
--[ 2019.11.09.16.33.42.143.0 ]--
r 62             StdOut.println("i -1 loc.getI() - 1);
--[ 2019.11.09.16.33.42.559.0 ]--
r 62             StdOut.println("i -1 "loc.getI() - 1);
--[ 2019.11.09.16.33.43.292.0 ]--
r 62             StdOut.println("i -1 " loc.getI() - 1);
--[ 2019.11.09.16.33.43.426.0 ]--
r 62             StdOut.println("i -1 " +loc.getI() - 1);
--[ 2019.11.09.16.33.43.825.0 ]--
r 62             StdOut.println("i -1 " + loc.getI() - 1);
--[ 2019.11.09.16.33.48.645.0 ]--
r 62             StdOut.println("i - 1 " + loc.getI() - 1);
--[ 2019.11.09.16.33.51.446.0 ]--
r 62             StdOut.println("i - 1" + loc.getI() - 1);
--[ 2019.11.09.16.33.51.574.0 ]--
r 62             StdOut.println("i - 1:" + loc.getI() - 1);
--[ 2019.11.09.16.33.52.334.0 ]--
r 62             StdOut.println("i - 1: " + loc.getI() - 1);
--[ 2019.11.09.16.33.53.246.0 ]--
r 61             StdOut.println("i + 1:" + loc.getI() + 1);
--[ 2019.11.09.16.33.53.345.0 ]--
r 61             StdOut.println("i + 1: " + loc.getI() + 1);
--[ 2019.11.09.16.34.03.283.0 ]--
r 62             StdOut.println("loc.getI() - 1);
--[ 2019.11.09.16.34.03.460.0 ]--
r 62             StdOut.println(loc.getI() - 1);
--[ 2019.11.09.16.34.06.764.0 ]--
r 63             StdOut.println("loc.getJ() + 1);
--[ 2019.11.09.16.34.07.460.0 ]--
r 63             StdOut.println("jloc.getJ() + 1);
--[ 2019.11.09.16.34.07.671.0 ]--
r 63             StdOut.println("j loc.getJ() + 1);
--[ 2019.11.09.16.34.07.836.0 ]--
r 63             StdOut.println("j +loc.getJ() + 1);
--[ 2019.11.09.16.34.07.898.0 ]--
r 63             StdOut.println("j + loc.getJ() + 1);
--[ 2019.11.09.16.34.08.128.0 ]--
r 63             StdOut.println("j + 1loc.getJ() + 1);
--[ 2019.11.09.16.34.08.512.0 ]--
r 63             StdOut.println("j + 1"loc.getJ() + 1);
--[ 2019.11.09.16.34.09.703.0 ]--
r 63             StdOut.println("j + 1" loc.getJ() + 1);
--[ 2019.11.09.16.34.09.853.0 ]--
r 63             StdOut.println("j + 1" +loc.getJ() + 1);
--[ 2019.11.09.16.34.09.890.0 ]--
r 63             StdOut.println("j + 1" + loc.getJ() + 1);
--[ 2019.11.09.16.34.12.586.0 ]--
r 63             StdOut.println("j + 1:" + loc.getJ() + 1);
--[ 2019.11.09.16.34.12.637.0 ]--
r 63             StdOut.println("j + 1: " + loc.getJ() + 1);
--[ 2019.11.09.16.34.17.583.0 ]--
r 62             StdOut.println("loc.getI() - 1);
--[ 2019.11.09.16.34.18.298.0 ]--
r 62             StdOut.println("iloc.getI() - 1);
--[ 2019.11.09.16.34.18.392.0 ]--
r 62             StdOut.println("i loc.getI() - 1);
--[ 2019.11.09.16.34.18.483.0 ]--
r 62             StdOut.println("i -loc.getI() - 1);
--[ 2019.11.09.16.34.18.574.0 ]--
r 62             StdOut.println("i - loc.getI() - 1);
--[ 2019.11.09.16.34.18.802.0 ]--
r 62             StdOut.println("i - 1loc.getI() - 1);
--[ 2019.11.09.16.34.20.292.0 ]--
r 62             StdOut.println("i - 1:loc.getI() - 1);
--[ 2019.11.09.16.34.20.400.0 ]--
r 62             StdOut.println("i - 1: loc.getI() - 1);
--[ 2019.11.09.16.34.20.441.0 ]--
r 62             StdOut.println("i - 1: 'loc.getI() - 1);
--[ 2019.11.09.16.34.20.866.0 ]--
r 62             StdOut.println("i - 1: loc.getI() - 1);
--[ 2019.11.09.16.34.21.079.0 ]--
r 62             StdOut.println("i - 1: "loc.getI() - 1);
--[ 2019.11.09.16.34.21.126.0 ]--
r 62             StdOut.println("i - 1: " loc.getI() - 1);
--[ 2019.11.09.16.34.21.858.0 ]--
r 62             StdOut.println("i - 1: " +loc.getI() - 1);
--[ 2019.11.09.16.34.21.928.0 ]--
r 62             StdOut.println("i - 1: " + loc.getI() - 1);
--[ 2019.11.09.16.34.24.951.0 ]--
r 62             StdOut.println("loc.getI() - 1);
--[ 2019.11.09.16.34.25.054.0 ]--
r 62             StdOut.println(loc.getI() - 1);
--[ 2019.11.09.16.34.30.150.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.16.34.39.749.0 ]--
r 61             StdOut.println(loc.getI() + 1);
--[ 2019.11.09.16.34.42.614.0 ]--
r 63             StdOut.println(loc.getJ() + 1);
--[ 2019.11.09.16.34.46.701.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.16.35.28.463.0 ]--
r 63             StdOut.println(sloc.getJ() + 1);
--[ 2019.11.09.16.35.29.765.0 ]--
r 63             StdOut.println(loc.getJ() + 1);
--[ 2019.11.09.16.36.44.368.0 ]--
- 61
- 61
- 61
r 61             
--[ 2019.11.09.16.36.44.798.0 ]--
- 61
--[ 2019.11.09.16.36.46.648.0 ]--
r 60             Stack<PFNode> s = new Stack<>(); 
--[ 2019.11.09.16.36.46.688.0 ]--
r 60             Stack<PFNode> s = new Stack<>();
--[ 2019.11.09.16.37.16.226.0 ]--
r 61             s.push(new PFNode(C, this));
--[ 2019.11.09.16.37.16.305.0 ]--
r 61             s.push(new PFNode(Co, this));
--[ 2019.11.09.16.37.16.410.0 ]--
r 61             s.push(new PFNode(Coo, this));
--[ 2019.11.09.16.37.16.488.0 ]--
r 61             s.push(new PFNode(Coor, this));
--[ 2019.11.09.16.37.16.671.0 ]--
r 61             s.push(new PFNode(Coord, this));
--[ 2019.11.09.16.37.17.330.0 ]--
r 61             s.push(new PFNode(Coord , this));
--[ 2019.11.09.16.37.17.416.0 ]--
r 61             s.push(new PFNode(Coord, this));
--[ 2019.11.09.16.37.18.021.0 ]--
r 61             s.push(new PFNode(, this));
--[ 2019.11.09.16.37.18.429.0 ]--
r 61             s.push(new PFNode(l, this));
--[ 2019.11.09.16.37.18.596.0 ]--
r 61             s.push(new PFNode(lo, this));
--[ 2019.11.09.16.37.18.739.0 ]--
r 61             s.push(new PFNode(loc, this));
--[ 2019.11.09.16.37.21.381.0 ]--
r 61             s.push(new PFNode(loc., this));
--[ 2019.11.09.16.37.22.056.0 ]--
r 61             s.push(new PFNode(loc.g, this));
--[ 2019.11.09.16.37.22.125.0 ]--
r 61             s.push(new PFNode(loc.ge, this));
--[ 2019.11.09.16.37.22.237.0 ]--
r 61             s.push(new PFNode(loc.get, this));
--[ 2019.11.09.16.37.22.794.0 ]--
r 61             s.push(new PFNode(loc.getO, this));
--[ 2019.11.09.16.37.23.333.0 ]--
r 61             s.push(new PFNode(loc.get, this));
--[ 2019.11.09.16.37.23.559.0 ]--
r 61             s.push(new PFNode(loc.getI, this));
--[ 2019.11.09.16.37.24.166.0 ]--
r 61             s.push(new PFNode(loc.getI(), this));
--[ 2019.11.09.16.37.25.388.0 ]--
r 61             s.push(new PFNode(loc.getI(, this));
--[ 2019.11.09.16.37.25.663.0 ]--
r 61             s.push(new PFNode(loc.getI, this));
--[ 2019.11.09.16.37.25.878.0 ]--
r 61             s.push(new PFNode(loc., this));
--[ 2019.11.09.16.37.26.317.0 ]--
r 61             s.push(new PFNode(loc, this));
--[ 2019.11.09.16.37.26.392.0 ]--
r 61             s.push(new PFNode(lo, this));
--[ 2019.11.09.16.37.26.510.0 ]--
r 61             s.push(new PFNode(l, this));
--[ 2019.11.09.16.37.27.181.0 ]--
r 61             s.push(new PFNode(, this));
--[ 2019.11.09.16.37.27.747.0 ]--
r 61             s.push(new PFNode(n, this));
--[ 2019.11.09.16.37.27.828.0 ]--
r 61             s.push(new PFNode(ne, this));
--[ 2019.11.09.16.37.27.953.0 ]--
r 61             s.push(new PFNode(new, this));
--[ 2019.11.09.16.37.28.226.0 ]--
r 61             s.push(new PFNode(new , this));
--[ 2019.11.09.16.37.28.362.0 ]--
r 61             s.push(new PFNode(new C, this));
--[ 2019.11.09.16.37.28.473.0 ]--
r 61             s.push(new PFNode(new Co, this));
--[ 2019.11.09.16.37.28.560.0 ]--
r 61             s.push(new PFNode(new Coo, this));
--[ 2019.11.09.16.37.28.627.0 ]--
r 61             s.push(new PFNode(new Coor, this));
--[ 2019.11.09.16.37.28.771.0 ]--
r 61             s.push(new PFNode(new Coord, this));
--[ 2019.11.09.16.37.28.931.0 ]--
r 61             s.push(new PFNode(new Coord(), this));
--[ 2019.11.09.16.37.30.005.0 ]--
r 61             s.push(new PFNode(new Coord(l), this));
--[ 2019.11.09.16.37.30.183.0 ]--
r 61             s.push(new PFNode(new Coord(lo), this));
--[ 2019.11.09.16.37.30.553.0 ]--
r 61             s.push(new PFNode(new Coord(loc), this));
--[ 2019.11.09.16.37.30.629.0 ]--
r 61             s.push(new PFNode(new Coord(loc.), this));
--[ 2019.11.09.16.37.31.725.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI), this));
--[ 2019.11.09.16.37.31.735.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI()), this));
--[ 2019.11.09.16.37.32.705.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI()+), this));
--[ 2019.11.09.16.37.33.119.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI()+1), this));
--[ 2019.11.09.16.37.33.273.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI()+1,), this));
--[ 2019.11.09.16.37.33.389.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI()+1, ), this));
--[ 2019.11.09.16.37.34.678.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI()+1, l), this));
--[ 2019.11.09.16.37.34.813.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI()+1, lo), this));
--[ 2019.11.09.16.37.34.912.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI()+1, loc), this));
--[ 2019.11.09.16.37.35.648.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI()+1, loc.), this));
--[ 2019.11.09.16.37.35.762.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI()+1, loc.g), this));
--[ 2019.11.09.16.37.36.956.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI()+1, loc.getJ), this));
--[ 2019.11.09.16.37.36.992.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI()+1, loc.getJ()), this));
--[ 2019.11.09.16.37.43.689.0 ]--
r 61             s.push(new PFNode(), this));
--[ 2019.11.09.16.37.45.554.0 ]--
r 61             s.push(new PFNode(, this));
--[ 2019.11.09.16.37.47.733.0 ]--
r 61             s.push(new PFNode(, this);
--[ 2019.11.09.16.37.50.331.0 ]--
r 61             s.push(new PFNode( this);
--[ 2019.11.09.16.37.50.801.0 ]--
r 61             s.push(new PFNode(n this);
--[ 2019.11.09.16.37.50.843.0 ]--
r 61             s.push(new PFNode(nu this);
--[ 2019.11.09.16.37.51.024.0 ]--
r 61             s.push(new PFNode(nul this);
--[ 2019.11.09.16.37.51.146.0 ]--
r 61             s.push(new PFNode(null this);
--[ 2019.11.09.16.37.51.261.0 ]--
r 61             s.push(new PFNode(null, this);
--[ 2019.11.09.16.38.00.682.0 ]--
r 61             s.push(new PFNode(null, this));
--[ 2019.11.09.16.40.04.766.0 ]--
r 61             s.push(new PFNode(n, this));
--[ 2019.11.09.16.40.04.850.0 ]--
r 61             s.push(new PFNode(ne, this));
--[ 2019.11.09.16.40.04.975.0 ]--
r 61             s.push(new PFNode(new, this));
--[ 2019.11.09.16.40.05.178.0 ]--
r 61             s.push(new PFNode(new , this));
--[ 2019.11.09.16.40.06.411.0 ]--
r 61             s.push(new PFNode(new  , this));
--[ 2019.11.09.16.40.06.507.0 ]--
r 61             s.push(new PFNode(new , this));
--[ 2019.11.09.16.40.07.000.0 ]--
r 61             s.push(new PFNode(new C, this));
--[ 2019.11.09.16.40.07.175.0 ]--
r 61             s.push(new PFNode(new Co, this));
--[ 2019.11.09.16.40.07.264.0 ]--
r 61             s.push(new PFNode(new Coo, this));
--[ 2019.11.09.16.40.07.343.0 ]--
r 61             s.push(new PFNode(new Coor, this));
--[ 2019.11.09.16.40.07.495.0 ]--
r 61             s.push(new PFNode(new Coord, this));
--[ 2019.11.09.16.40.07.862.0 ]--
r 61             s.push(new PFNode(new Coord(), this));
--[ 2019.11.09.16.40.10.198.0 ]--
r 61             s.push(new PFNode(new Coord(l), this));
--[ 2019.11.09.16.40.10.341.0 ]--
r 61             s.push(new PFNode(new Coord(lo), this));
--[ 2019.11.09.16.40.10.419.0 ]--
r 61             s.push(new PFNode(new Coord(loc), this));
--[ 2019.11.09.16.40.10.536.0 ]--
r 61             s.push(new PFNode(new Coord(loc.), this));
--[ 2019.11.09.16.40.14.035.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI), this));
--[ 2019.11.09.16.40.14.046.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI()), this));
--[ 2019.11.09.16.40.16.205.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI() ), this));
--[ 2019.11.09.16.40.16.363.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI() +), this));
--[ 2019.11.09.16.40.16.417.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI() + ), this));
--[ 2019.11.09.16.40.16.540.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI() + 1), this));
--[ 2019.11.09.16.40.16.844.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI() + 1 ), this));
--[ 2019.11.09.16.40.16.934.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI() + 1), this));
--[ 2019.11.09.16.40.18.117.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI() + 1,), this));
--[ 2019.11.09.16.40.18.167.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI() + 1, ), this));
--[ 2019.11.09.16.40.19.105.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI() + 1, l), this));
--[ 2019.11.09.16.40.19.215.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI() + 1, lo), this));
--[ 2019.11.09.16.40.19.276.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI() + 1, loc), this));
--[ 2019.11.09.16.40.19.335.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI() + 1, loc.), this));
--[ 2019.11.09.16.40.19.462.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI() + 1, loc.g), this));
--[ 2019.11.09.16.40.19.961.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI() + 1, loc.getJ), this));
--[ 2019.11.09.16.40.19.989.0 ]--
r 61             s.push(new PFNode(new Coord(loc.getI() + 1, loc.getJ()), this));
--[ 2019.11.09.16.40.26.905.0 ]--
+ 62             
--[ 2019.11.09.16.40.27.159.0 ]--
r 62             s.push(new PFNode(new Coord(loc.getI() + 1, loc.getJ()), this));
--[ 2019.11.09.16.40.27.217.0 ]--
+ 63             
--[ 2019.11.09.16.40.27.334.0 ]--
r 63             s.push(new PFNode(new Coord(loc.getI() + 1, loc.getJ()), this));
--[ 2019.11.09.16.40.28.293.0 ]--
+ 64             
--[ 2019.11.09.16.40.28.420.0 ]--
r 64             s.push(new PFNode(new Coord(loc.getI() + 1, loc.getJ()), this));
--[ 2019.11.09.16.40.39.686.0 ]--
r 62             s.push(new PFNode(new Coord(loc.getI()  1, loc.getJ()), this));
--[ 2019.11.09.16.40.39.756.0 ]--
r 62             s.push(new PFNode(new Coord(loc.getI() - 1, loc.getJ()), this));
--[ 2019.11.09.16.40.42.475.0 ]--
r 63             s.push(new PFNode(new Coord(loc.getI() + , loc.getJ()), this));
--[ 2019.11.09.16.40.42.586.0 ]--
r 63             s.push(new PFNode(new Coord(loc.getI() +, loc.getJ()), this));
--[ 2019.11.09.16.40.42.715.0 ]--
r 63             s.push(new PFNode(new Coord(loc.getI() , loc.getJ()), this));
--[ 2019.11.09.16.40.45.205.0 ]--
r 64             s.push(new PFNode(new Coord(loc.getI() + , loc.getJ()), this));
--[ 2019.11.09.16.40.45.381.0 ]--
r 64             s.push(new PFNode(new Coord(loc.getI() +, loc.getJ()), this));
--[ 2019.11.09.16.40.45.644.0 ]--
r 64             s.push(new PFNode(new Coord(loc.getI() , loc.getJ()), this));
--[ 2019.11.09.16.40.46.067.0 ]--
r 64             s.push(new PFNode(new Coord(loc.getI(), loc.getJ()), this));
--[ 2019.11.09.16.40.49.324.0 ]--
r 63             s.push(new PFNode(new Coord(loc.getI() , loc.getJ() ), this));
--[ 2019.11.09.16.40.49.406.0 ]--
r 63             s.push(new PFNode(new Coord(loc.getI() , loc.getJ() +), this));
--[ 2019.11.09.16.40.49.471.0 ]--
r 63             s.push(new PFNode(new Coord(loc.getI() , loc.getJ() + ), this));
--[ 2019.11.09.16.40.49.578.0 ]--
r 63             s.push(new PFNode(new Coord(loc.getI() , loc.getJ() + 1), this));
--[ 2019.11.09.16.40.51.691.0 ]--
r 64             s.push(new PFNode(new Coord(loc.getI(), loc.getJ() ), this));
--[ 2019.11.09.16.40.51.777.0 ]--
r 64             s.push(new PFNode(new Coord(loc.getI(), loc.getJ() -), this));
--[ 2019.11.09.16.40.51.843.0 ]--
r 64             s.push(new PFNode(new Coord(loc.getI(), loc.getJ() - ), this));
--[ 2019.11.09.16.40.51.898.0 ]--
r 64             s.push(new PFNode(new Coord(loc.getI(), loc.getJ() - 1), this));
--[ 2019.11.09.16.41.15.048.0 ]--
+ 61             
--[ 2019.11.09.16.41.17.538.0 ]--
r 61              
--[ 2019.11.09.16.41.17.602.0 ]--
r 61             
--[ 2019.11.09.16.41.18.388.0 ]--
r 61             S
--[ 2019.11.09.16.41.18.504.0 ]--
r 61             Sy
--[ 2019.11.09.16.41.18.642.0 ]--
r 61             Sys
--[ 2019.11.09.16.41.19.019.0 ]--
r 61             System
--[ 2019.11.09.16.41.19.508.0 ]--
r 61             Syste
--[ 2019.11.09.16.41.19.610.0 ]--
r 61             Syst
--[ 2019.11.09.16.41.19.724.0 ]--
r 61             Sys
--[ 2019.11.09.16.41.20.315.0 ]--
r 61             Sy
--[ 2019.11.09.16.41.20.397.0 ]--
r 61             S
--[ 2019.11.09.16.41.20.501.0 ]--
r 61             
--[ 2019.11.09.16.41.20.896.0 ]--
r 61             T
--[ 2019.11.09.16.41.21.143.0 ]--
r 61             
--[ 2019.11.09.16.41.21.229.0 ]--
r 61             S
--[ 2019.11.09.16.41.21.314.0 ]--
r 61             St
--[ 2019.11.09.16.41.21.996.0 ]--
r 61             Std
--[ 2019.11.09.16.41.22.522.0 ]--
r 61             StdOut
--[ 2019.11.09.16.41.22.654.0 ]--
r 61             StdOut.
--[ 2019.11.09.16.41.23.418.0 ]--
r 61             StdOut.println
--[ 2019.11.09.16.41.23.432.0 ]--
r 61             StdOut.println()
--[ 2019.11.09.16.41.23.436.0 ]--
r 61             StdOut.println();
--[ 2019.11.09.16.41.27.720.0 ]--
r 61             StdOut.println(n);
--[ 2019.11.09.16.41.27.817.0 ]--
r 61             StdOut.println(ne);
--[ 2019.11.09.16.41.27.954.0 ]--
r 61             StdOut.println(new);
--[ 2019.11.09.16.41.28.006.0 ]--
r 61             StdOut.println(new );
--[ 2019.11.09.16.41.28.150.0 ]--
r 61             StdOut.println(new C);
--[ 2019.11.09.16.41.28.260.0 ]--
r 61             StdOut.println(new Co);
--[ 2019.11.09.16.41.28.366.0 ]--
r 61             StdOut.println(new Coo);
--[ 2019.11.09.16.41.28.450.0 ]--
r 61             StdOut.println(new Coor);
--[ 2019.11.09.16.41.28.606.0 ]--
r 61             StdOut.println(new Coord);
--[ 2019.11.09.16.41.28.910.0 ]--
r 61             StdOut.println(new Coord());
--[ 2019.11.09.16.41.40.969.0 ]--
r 61             StdOut.println(new Coord(loc.getI() + 1, loc.getJ());
--[ 2019.11.09.16.41.46.425.0 ]--
+ 62             
--[ 2019.11.09.16.41.46.516.0 ]--
r 62             StdOut.println(new Coord(loc.getI() + 1, loc.getJ());
--[ 2019.11.09.16.41.46.618.0 ]--
+ 63             
--[ 2019.11.09.16.41.46.773.0 ]--
r 63             StdOut.println(new Coord(loc.getI() + 1, loc.getJ());
--[ 2019.11.09.16.41.46.852.0 ]--
+ 64             
--[ 2019.11.09.16.41.48.300.0 ]--
+ 64             
--[ 2019.11.09.16.41.48.350.0 ]--
r 64             StdOut.println(new Coord(loc.getI() + 1, loc.getJ());
--[ 2019.11.09.16.41.49.965.0 ]--
+ 65             
--[ 2019.11.09.16.41.56.712.0 ]--
r 62             StdOut.println(new Coord(loc.getI() +- 1, loc.getJ());
--[ 2019.11.09.16.41.58.374.0 ]--
r 62             StdOut.println(new Coord(loc.getI() - 1, loc.getJ());
--[ 2019.11.09.16.42.01.762.0 ]--
r 63             StdOut.println(new Coord(loc.getI() + 1, loc.getJ() );
--[ 2019.11.09.16.42.02.017.0 ]--
r 63             StdOut.println(new Coord(loc.getI() + 1, loc.getJ() +);
--[ 2019.11.09.16.42.02.115.0 ]--
r 63             StdOut.println(new Coord(loc.getI() + 1, loc.getJ() + );
--[ 2019.11.09.16.42.02.242.0 ]--
r 63             StdOut.println(new Coord(loc.getI() + 1, loc.getJ() + 1);
--[ 2019.11.09.16.42.04.148.0 ]--
r 64             StdOut.println(new Coord(loc.getI() + 1, loc.getJ() );
--[ 2019.11.09.16.42.04.206.0 ]--
r 64             StdOut.println(new Coord(loc.getI() + 1, loc.getJ() -);
--[ 2019.11.09.16.42.04.323.0 ]--
r 64             StdOut.println(new Coord(loc.getI() + 1, loc.getJ() - );
--[ 2019.11.09.16.42.04.497.0 ]--
r 64             StdOut.println(new Coord(loc.getI() + 1, loc.getJ() - 1);
--[ 2019.11.09.16.42.08.062.0 ]--
r 63             StdOut.println(new Coord(loc.getI() \, loc.getJ() + 1);
--[ 2019.11.09.16.42.08.428.0 ]--
r 63             StdOut.println(new Coord(loc.getI() , loc.getJ() + 1);
--[ 2019.11.09.16.42.08.713.0 ]--
r 63             StdOut.println(new Coord(loc.getI(), loc.getJ() + 1);
--[ 2019.11.09.16.42.11.312.0 ]--
r 64             StdOut.println(new Coord(loc.getI() , loc.getJ() - 1);
--[ 2019.11.09.16.42.11.432.0 ]--
r 64             StdOut.println(new Coord(loc.getI(), loc.getJ() - 1);
--[ 2019.11.09.16.42.29.851.0 ]--
r 64             StdOut.println(new Coord(loc.getI(), loc.getJ() - 1));
--[ 2019.11.09.16.42.48.640.0 ]--
r 62             StdOut.println(new Coord(loc.getI() - 1, loc.getJ()));
--[ 2019.11.09.16.42.50.453.0 ]--
r 61             StdOut.println(new Coord(loc.getI() + 1, loc.getJ()));
--[ 2019.11.09.16.42.51.786.0 ]--
r 63             StdOut.println(new Coord(loc.getI(), loc.getJ() + 1));
--[ 2019.11.09.16.43.18.195.0 ]--
r 65 
r 66 
--[ 2019.11.09.16.43.19.901.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.16.46.58.425.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.16.52.44.537.0 ]--
r 114   
--[ 2019.11.09.16.52.44.784.0 ]--
- 113
r 113         
--[ 2019.11.09.16.52.45.369.0 ]--
- 113
--[ 2019.11.09.16.52.49.317.0 ]--
r 115         
--[ 2019.11.09.16.52.49.531.0 ]--
- 113
--[ 2019.11.09.16.52.49.786.0 ]--
- 113
--[ 2019.11.09.17.04.22.589.0 ]--
- 61
- 61
- 61
r 61             
--[ 2019.11.09.17.04.22.903.0 ]--
- 61
--[ 2019.11.09.17.04.23.974.0 ]--
- 61
--[ 2019.11.09.17.04.24.594.0 ]--
- 61
--[ 2019.11.09.17.04.24.968.0 ]--
r 60             Stack<PFNode> s = new Stack<>(); 
--[ 2019.11.09.17.04.25.019.0 ]--
r 60             Stack<PFNode> s = new Stack<>();
--[ 2019.11.09.17.05.32.054.0 ]--
- 110
--[ 2019.11.09.17.05.32.373.0 ]--
+ 110         
--[ 2019.11.09.17.05.32.471.0 ]--
+ 110         
--[ 2019.11.09.17.05.33.736.0 ]--
r 111          
--[ 2019.11.09.17.05.33.794.0 ]--
r 111         
--[ 2019.11.09.17.05.34.786.0 ]--
r 111         p
--[ 2019.11.09.17.05.34.881.0 ]--
r 111         pf
--[ 2019.11.09.17.05.35.182.0 ]--
r 111         pfQ
--[ 2019.11.09.17.05.35.673.0 ]--
r 111         pfQueue
--[ 2019.11.09.17.05.36.079.0 ]--
r 111         pfQueue.
--[ 2019.11.09.17.05.36.356.0 ]--
r 111         pfQueue.d
--[ 2019.11.09.17.05.36.421.0 ]--
r 111         pfQueue.de
--[ 2019.11.09.17.05.36.487.0 ]--
r 111         pfQueue.del
--[ 2019.11.09.17.05.36.879.0 ]--
r 111         pfQueue.delMin
--[ 2019.11.09.17.05.36.901.0 ]--
r 111         pfQueue.delMin()
--[ 2019.11.09.17.05.37.528.0 ]--
r 111         pfQueue.delMin();
--[ 2019.11.09.17.05.37.738.0 ]--
+ 112         
--[ 2019.11.09.17.05.49.272.0 ]--
r 107 
r 110 
--[ 2019.11.09.17.07.30.767.0 ]--
r 112         f
--[ 2019.11.09.17.07.30.879.0 ]--
r 112         fo
--[ 2019.11.09.17.07.30.919.0 ]--
r 112         for
--[ 2019.11.09.17.07.31.120.0 ]--
r 112         for()
--[ 2019.11.09.17.07.32.187.0 ]--
r 112         for(i)
--[ 2019.11.09.17.07.33.259.0 ]--
r 112         for(in)
--[ 2019.11.09.17.07.33.301.0 ]--
r 112         for(int)
--[ 2019.11.09.17.07.33.352.0 ]--
r 112         for(int )
--[ 2019.11.09.17.07.33.394.0 ]--
r 112         for(int i)
--[ 2019.11.09.17.07.33.492.0 ]--
r 112         for(int i )
--[ 2019.11.09.17.07.34.002.0 ]--
r 112         for(int i =)
--[ 2019.11.09.17.07.34.411.0 ]--
r 112         for(int i = )
--[ 2019.11.09.17.07.34.517.0 ]--
r 112         for(int i = 0)
--[ 2019.11.09.17.07.34.815.0 ]--
r 112         for(int i = 0;)
--[ 2019.11.09.17.07.35.180.0 ]--
r 112         for(int i = 0; )
--[ 2019.11.09.17.07.35.776.0 ]--
r 112         for(int i = 0; i)
--[ 2019.11.09.17.07.35.866.0 ]--
r 112         for(int i = 0; i )
--[ 2019.11.09.17.07.36.032.0 ]--
r 112         for(int i = 0; i <)
--[ 2019.11.09.17.07.36.176.0 ]--
r 112         for(int i = 0; i < )
--[ 2019.11.09.17.07.36.597.0 ]--
r 112         for(int i = 0; i < s)
--[ 2019.11.09.17.07.36.679.0 ]--
r 112         for(int i = 0; i < s.)
--[ 2019.11.09.17.07.36.974.0 ]--
r 112         for(int i = 0; i < s.l)
--[ 2019.11.09.17.07.37.066.0 ]--
r 112         for(int i = 0; i < s.le)
--[ 2019.11.09.17.07.37.164.0 ]--
r 112         for(int i = 0; i < s.len)
--[ 2019.11.09.17.07.37.294.0 ]--
r 112         for(int i = 0; i < s.leng)
--[ 2019.11.09.17.07.37.486.0 ]--
r 112         for(int i = 0; i < s.len)
--[ 2019.11.09.17.07.37.651.0 ]--
r 112         for(int i = 0; i < s.le)
--[ 2019.11.09.17.07.37.711.0 ]--
r 112         for(int i = 0; i < s.l)
--[ 2019.11.09.17.07.37.826.0 ]--
r 112         for(int i = 0; i < s.)
--[ 2019.11.09.17.07.38.412.0 ]--
r 112         for(int i = 0; i < s)
--[ 2019.11.09.17.07.38.512.0 ]--
r 112         for(int i = 0; i < )
--[ 2019.11.09.17.07.38.912.0 ]--
r 112         for(int i = 0; i <  )
--[ 2019.11.09.17.07.38.981.0 ]--
r 112         for(int i = 0; i < )
--[ 2019.11.09.17.07.46.262.0 ]--
r 112         for(int i = 0; i <  )
--[ 2019.11.09.17.07.46.319.0 ]--
r 112         for(int i = 0; i < )
--[ 2019.11.09.17.07.54.573.0 ]--
r 112         
--[ 2019.11.09.17.07.54.797.0 ]--
- 112
--[ 2019.11.09.17.07.58.267.0 ]--
- 111
--[ 2019.11.09.17.07.58.801.0 ]--
- 110
--[ 2019.11.09.17.12.38.019.0 ]--
+ 110         
--[ 2019.11.09.17.12.39.319.0 ]--
+ 110         
--[ 2019.11.09.17.12.39.715.0 ]--
r 111         w
--[ 2019.11.09.17.12.39.863.0 ]--
r 111         wh
--[ 2019.11.09.17.12.39.896.0 ]--
r 111         whi
--[ 2019.11.09.17.12.40.083.0 ]--
r 111         whil
--[ 2019.11.09.17.12.40.183.0 ]--
r 111         while
--[ 2019.11.09.17.12.40.854.0 ]--
r 111         while()
--[ 2019.11.09.17.12.42.274.0 ]--
r 111         while(b)
--[ 2019.11.09.17.12.42.338.0 ]--
r 111         while(be)
--[ 2019.11.09.17.12.42.472.0 ]--
r 111         while(beg)
--[ 2019.11.09.17.12.42.566.0 ]--
r 111         while(begi)
--[ 2019.11.09.17.12.42.629.0 ]--
r 111         while(begin)
--[ 2019.11.09.17.12.43.160.0 ]--
r 111         while(begin.)
--[ 2019.11.09.17.12.43.732.0 ]--
r 111         while(begin.f)
--[ 2019.11.09.17.12.43.865.0 ]--
r 111         while(begin.fr)
--[ 2019.11.09.17.12.43.945.0 ]--
r 111         while(begin.fro)
--[ 2019.11.09.17.12.43.983.0 ]--
r 111         while(begin.from)
--[ 2019.11.09.17.12.44.297.0 ]--
r 111         while(begin.from )
--[ 2019.11.09.17.12.44.382.0 ]--
r 111         while(begin.from)
--[ 2019.11.09.17.12.44.520.0 ]--
r 111         while(begin.)
--[ 2019.11.09.17.12.44.659.0 ]--
r 111         while(begin)
--[ 2019.11.09.17.12.45.325.0 ]--
r 111         while()
--[ 2019.11.09.17.12.47.356.0 ]--
- 111
--[ 2019.11.09.17.12.50.561.0 ]--
r 66         } 
--[ 2019.11.09.17.12.50.598.0 ]--
r 66         }
--[ 2019.11.09.17.12.54.257.0 ]--
+ 25         
--[ 2019.11.09.17.12.55.136.0 ]--
r 25         P
--[ 2019.11.09.17.12.55.218.0 ]--
r 25         PF
--[ 2019.11.09.17.12.55.509.0 ]--
r 25         PFN
--[ 2019.11.09.17.12.55.615.0 ]--
r 25         PFNo
--[ 2019.11.09.17.12.55.634.0 ]--
r 25         PFNod
--[ 2019.11.09.17.12.55.816.0 ]--
r 25         PFNode
--[ 2019.11.09.17.12.56.298.0 ]--
r 25         PFNode 
--[ 2019.11.09.17.12.56.771.0 ]--
r 25         PFNode f
--[ 2019.11.09.17.12.56.901.0 ]--
r 25         PFNode fr
--[ 2019.11.09.17.12.57.009.0 ]--
r 25         PFNode fro
--[ 2019.11.09.17.12.57.047.0 ]--
r 25         PFNode from
--[ 2019.11.09.17.12.57.309.0 ]--
r 25         PFNode fromN
--[ 2019.11.09.17.12.57.422.0 ]--
r 25         PFNode fromNo
--[ 2019.11.09.17.12.57.443.0 ]--
r 25         PFNode fromNod
--[ 2019.11.09.17.12.57.492.0 ]--
r 25         PFNode fromNode
--[ 2019.11.09.17.12.57.840.0 ]--
r 25         PFNode fromNode;
--[ 2019.11.09.17.12.57.994.0 ]--
r 25         PFNode fromNode; 
--[ 2019.11.09.17.12.58.136.0 ]--
r 25         PFNode fromNode;
--[ 2019.11.09.17.13.01.436.0 ]--
+ 30             
--[ 2019.11.09.17.13.02.246.0 ]--
r 30             t
--[ 2019.11.09.17.13.02.326.0 ]--
r 30             th
--[ 2019.11.09.17.13.02.350.0 ]--
r 30             thi
--[ 2019.11.09.17.13.02.409.0 ]--
r 30             this
--[ 2019.11.09.17.13.02.604.0 ]--
r 30             this.
--[ 2019.11.09.17.13.03.635.0 ]--
r 30             this.F
--[ 2019.11.09.17.13.03.748.0 ]--
r 30             this.Fr
--[ 2019.11.09.17.13.03.846.0 ]--
r 30             this.Fro
--[ 2019.11.09.17.13.03.888.0 ]--
r 30             this.From
--[ 2019.11.09.17.13.04.905.0 ]--
r 30             this.Fro
--[ 2019.11.09.17.13.05.006.0 ]--
r 30             this.Fr
--[ 2019.11.09.17.13.05.093.0 ]--
r 30             this.F
--[ 2019.11.09.17.13.05.236.0 ]--
r 30             this.
--[ 2019.11.09.17.13.05.300.0 ]--
r 30             this.f
--[ 2019.11.09.17.13.05.636.0 ]--
r 30             this.fr
--[ 2019.11.09.17.13.05.721.0 ]--
r 30             this.fro
--[ 2019.11.09.17.13.05.755.0 ]--
r 30             this.from
--[ 2019.11.09.17.13.05.935.0 ]--
r 30             this.fromN
--[ 2019.11.09.17.13.06.048.0 ]--
r 30             this.fromNo
--[ 2019.11.09.17.13.06.125.0 ]--
r 30             this.fromNod
--[ 2019.11.09.17.13.06.175.0 ]--
r 30             this.fromNode
--[ 2019.11.09.17.13.06.301.0 ]--
r 30             this.fromNode 
--[ 2019.11.09.17.13.06.342.0 ]--
r 30             this.fromNode =
--[ 2019.11.09.17.13.06.458.0 ]--
r 30             this.fromNode = 
--[ 2019.11.09.17.13.06.964.0 ]--
r 30             this.fromNode = f
--[ 2019.11.09.17.13.07.088.0 ]--
r 30             this.fromNode = fr
--[ 2019.11.09.17.13.07.134.0 ]--
r 30             this.fromNode = fro
--[ 2019.11.09.17.13.07.174.0 ]--
r 30             this.fromNode = from
--[ 2019.11.09.17.13.07.348.0 ]--
r 30             this.fromNode = fromn
--[ 2019.11.09.17.13.07.409.0 ]--
r 30             this.fromNode = fromno
--[ 2019.11.09.17.13.07.466.0 ]--
r 30             this.fromNode = fromnod
--[ 2019.11.09.17.13.07.644.0 ]--
r 30             this.fromNode = fromno
--[ 2019.11.09.17.13.07.749.0 ]--
r 30             this.fromNode = fromn
--[ 2019.11.09.17.13.07.947.0 ]--
r 30             this.fromNode = fromnN
--[ 2019.11.09.17.13.08.087.0 ]--
r 30             this.fromNode = fromnNo
--[ 2019.11.09.17.13.08.123.0 ]--
r 30             this.fromNode = fromnNod
--[ 2019.11.09.17.13.08.176.0 ]--
r 30             this.fromNode = fromnNode
--[ 2019.11.09.17.13.08.585.0 ]--
r 30             this.fromNode = fromnNod
--[ 2019.11.09.17.13.08.688.0 ]--
r 30             this.fromNode = fromnNo
--[ 2019.11.09.17.13.08.795.0 ]--
r 30             this.fromNode = fromnN
--[ 2019.11.09.17.13.08.960.0 ]--
r 30             this.fromNode = fromn
--[ 2019.11.09.17.13.09.007.0 ]--
r 30             this.fromNode = from
--[ 2019.11.09.17.13.09.537.0 ]--
r 30             this.fromNode = fromN
--[ 2019.11.09.17.13.09.664.0 ]--
r 30             this.fromNode = fromNo
--[ 2019.11.09.17.13.09.737.0 ]--
r 30             this.fromNode = fromNod
--[ 2019.11.09.17.13.09.785.0 ]--
r 30             this.fromNode = fromNode
--[ 2019.11.09.17.13.09.926.0 ]--
r 30             this.fromNode = fromNode;
--[ 2019.11.09.17.13.10.125.0 ]--
r 30             this.fromNode = fromNode; 
--[ 2019.11.09.17.13.10.189.0 ]--
r 30             this.fromNode = fromNode;
--[ 2019.11.09.17.13.17.149.0 ]--
+ 69         
--[ 2019.11.09.17.13.17.473.0 ]--
+ 69         
--[ 2019.11.09.17.13.17.996.0 ]--
r 70         p
--[ 2019.11.09.17.13.18.389.0 ]--
r 70         pu
--[ 2019.11.09.17.13.18.502.0 ]--
r 70         pub
--[ 2019.11.09.17.13.18.579.0 ]--
r 70         publ
--[ 2019.11.09.17.13.18.719.0 ]--
r 70         publi
--[ 2019.11.09.17.13.18.825.0 ]--
r 70         public
--[ 2019.11.09.17.13.18.987.0 ]--
r 70         public 
--[ 2019.11.09.17.13.19.215.0 ]--
r 70         public g
--[ 2019.11.09.17.13.19.265.0 ]--
r 70         public ge
--[ 2019.11.09.17.13.19.385.0 ]--
r 70         public get
--[ 2019.11.09.17.13.21.325.0 ]--
r 70         public getL
--[ 2019.11.09.17.13.21.601.0 ]--
r 70         public getLo
--[ 2019.11.09.17.13.21.645.0 ]--
r 70         public getLoc
--[ 2019.11.09.17.13.22.063.0 ]--
r 70         public getLoc()
--[ 2019.11.09.17.13.23.224.0 ]--
r 70         public getLoc() 
--[ 2019.11.09.17.13.23.300.0 ]--
r 70         public getLoc()
--[ 2019.11.09.17.13.25.540.0 ]--
r 70         public CgetLoc()
--[ 2019.11.09.17.13.25.702.0 ]--
r 70         public CogetLoc()
--[ 2019.11.09.17.13.26.272.0 ]--
r 70         public CoogetLoc()
--[ 2019.11.09.17.13.26.374.0 ]--
r 70         public CoorgetLoc()
--[ 2019.11.09.17.13.26.497.0 ]--
r 70         public CoordgetLoc()
--[ 2019.11.09.17.13.26.559.0 ]--
r 70         public Coord getLoc()
--[ 2019.11.09.17.13.27.718.0 ]--
r 70         public Coord getLoc(){}
--[ 2019.11.09.17.13.28.327.0 ]--
+ 70         public Coord getLoc(){
r 71         }
--[ 2019.11.09.17.13.28.405.0 ]--
+ 71             
--[ 2019.11.09.17.13.30.765.0 ]--
r 71             r
--[ 2019.11.09.17.13.30.792.0 ]--
r 71             re
--[ 2019.11.09.17.13.30.921.0 ]--
r 71             ret
--[ 2019.11.09.17.13.31.011.0 ]--
r 71             retu
--[ 2019.11.09.17.13.31.078.0 ]--
r 71             retur
--[ 2019.11.09.17.13.31.423.0 ]--
r 71             return
--[ 2019.11.09.17.13.31.484.0 ]--
r 71             return 
--[ 2019.11.09.17.13.32.347.0 ]--
r 71             return l
--[ 2019.11.09.17.13.32.487.0 ]--
r 71             return lo
--[ 2019.11.09.17.13.32.572.0 ]--
r 71             return loc
--[ 2019.11.09.17.13.32.711.0 ]--
r 71             return loc;
--[ 2019.11.09.17.13.34.025.0 ]--
+ 73         
--[ 2019.11.09.17.13.34.223.0 ]--
+ 73         
--[ 2019.11.09.17.13.34.946.0 ]--
r 74         p
--[ 2019.11.09.17.13.35.015.0 ]--
r 74         pu
--[ 2019.11.09.17.13.35.065.0 ]--
r 74         pub
--[ 2019.11.09.17.13.35.123.0 ]--
r 74         publ
--[ 2019.11.09.17.13.35.277.0 ]--
r 74         publi
--[ 2019.11.09.17.13.35.404.0 ]--
r 74         public
--[ 2019.11.09.17.13.35.505.0 ]--
r 74         public 
--[ 2019.11.09.17.13.36.106.0 ]--
r 74         public
--[ 2019.11.09.17.13.36.585.0 ]--
r 74         public 
--[ 2019.11.09.17.13.37.047.0 ]--
r 74         public
--[ 2019.11.09.17.13.37.165.0 ]--
r 74         publi
--[ 2019.11.09.17.13.37.274.0 ]--
r 74         publ
--[ 2019.11.09.17.13.37.391.0 ]--
r 74         pub
--[ 2019.11.09.17.13.37.479.0 ]--
r 74         pu
--[ 2019.11.09.17.13.37.608.0 ]--
r 74         p
--[ 2019.11.09.17.13.37.882.0 ]--
r 74         
--[ 2019.11.09.17.13.38.076.0 ]--
r 74         o
--[ 2019.11.09.17.13.38.158.0 ]--
r 74         ou
--[ 2019.11.09.17.13.38.250.0 ]--
r 74         oub
--[ 2019.11.09.17.13.38.349.0 ]--
r 74         oubl
--[ 2019.11.09.17.13.38.823.0 ]--
r 74         ou
--[ 2019.11.09.17.13.38.852.0 ]--
r 74         o
--[ 2019.11.09.17.13.38.950.0 ]--
r 74         
--[ 2019.11.09.17.13.39.307.0 ]--
r 74         p
--[ 2019.11.09.17.13.39.366.0 ]--
r 74         pu
--[ 2019.11.09.17.13.39.472.0 ]--
r 74         pub
--[ 2019.11.09.17.13.39.534.0 ]--
r 74         publ
--[ 2019.11.09.17.13.39.676.0 ]--
r 74         publi
--[ 2019.11.09.17.13.39.757.0 ]--
r 74         public
--[ 2019.11.09.17.13.40.851.0 ]--
r 74         public 
--[ 2019.11.09.17.13.41.595.0 ]--
r 74         public
--[ 2019.11.09.17.13.42.056.0 ]--
r 74         publi
--[ 2019.11.09.17.13.42.339.0 ]--
r 74         public
--[ 2019.11.09.17.13.44.962.0 ]--
r 74         public PFNode getFromNode
--[ 2019.11.09.17.13.44.979.0 ]--
r 74         
--[ 2019.11.09.17.13.44.993.0 ]--
- 73
- 74
r 74         }
--[ 2019.11.09.17.13.45.010.0 ]--
+ 74         public Pathfinder.PFNode getFromNode() {
+ 75     return fromNode;
r 76 }}
--[ 2019.11.09.17.13.45.033.0 ]--
r 74         public PFNode getFromNode() {
--[ 2019.11.09.17.13.45.098.0 ]--
r 73 
+ 75             return fromNode;
r 76         }
r 77     }
--[ 2019.11.09.17.14.21.809.0 ]--
+ 119         
--[ 2019.11.09.17.14.22.127.0 ]--
r 120         w
--[ 2019.11.09.17.14.22.199.0 ]--
r 120         wh
--[ 2019.11.09.17.14.22.243.0 ]--
r 120         whi
--[ 2019.11.09.17.14.22.423.0 ]--
r 120         whil
--[ 2019.11.09.17.14.22.521.0 ]--
r 120         while
--[ 2019.11.09.17.14.22.703.0 ]--
r 120         while()
--[ 2019.11.09.17.14.23.555.0 ]--
r 120         while(b)
--[ 2019.11.09.17.14.23.607.0 ]--
r 120         while(be)
--[ 2019.11.09.17.14.23.716.0 ]--
r 120         while(beg)
--[ 2019.11.09.17.14.23.797.0 ]--
r 120         while(begi)
--[ 2019.11.09.17.14.23.836.0 ]--
r 120         while(begin)
--[ 2019.11.09.17.14.24.036.0 ]--
r 120         while(begin.)
--[ 2019.11.09.17.14.24.134.0 ]--
r 120         while(begin.g)
--[ 2019.11.09.17.14.24.185.0 ]--
r 120         while(begin.ge)
--[ 2019.11.09.17.14.24.299.0 ]--
r 120         while(begin.get)
--[ 2019.11.09.17.14.25.377.0 ]--
r 120         while(begin.getFromNode)
--[ 2019.11.09.17.14.25.390.0 ]--
r 120         while(begin.getFromNode())
--[ 2019.11.09.17.14.26.260.0 ]--
r 120         while(begin.getFromNode() )
--[ 2019.11.09.17.14.26.940.0 ]--
r 120         while(begin.getFromNode()  )
--[ 2019.11.09.17.14.27.010.0 ]--
r 120         while(begin.getFromNode() )
--[ 2019.11.09.17.14.27.297.0 ]--
r 120         while(begin.getFromNode()
--[ 2019.11.09.17.14.27.553.0 ]--
r 120         while(begin.getFromNode)
--[ 2019.11.09.17.14.27.680.0 ]--
r 120         while(begin.getFromNod)
--[ 2019.11.09.17.14.27.780.0 ]--
r 120         while(begin.getFromNo)
--[ 2019.11.09.17.14.27.890.0 ]--
r 120         while(begin.getFromN)
--[ 2019.11.09.17.14.28.020.0 ]--
r 120         while(begin.getFrom)
--[ 2019.11.09.17.14.28.125.0 ]--
r 120         while(begin.getFro)
--[ 2019.11.09.17.14.28.231.0 ]--
r 120         while(begin.getFr)
--[ 2019.11.09.17.14.28.400.0 ]--
r 120         while(begin.getF)
--[ 2019.11.09.17.14.28.473.0 ]--
r 120         while(begin.get)
--[ 2019.11.09.17.14.28.588.0 ]--
r 120         while(begin.ge)
--[ 2019.11.09.17.14.28.742.0 ]--
r 120         while(begin.g)
--[ 2019.11.09.17.14.34.682.0 ]--
r 120         while(begin.)
--[ 2019.11.09.17.14.37.613.0 ]--
r 120         while(begin. )
--[ 2019.11.09.17.14.37.691.0 ]--
r 120         while(begin.)
--[ 2019.11.09.17.14.37.778.0 ]--
r 120         while(begin.g)
--[ 2019.11.09.17.14.37.849.0 ]--
r 120         while(begin.ge)
--[ 2019.11.09.17.14.37.990.0 ]--
r 120         while(begin.get)
--[ 2019.11.09.17.14.39.591.0 ]--
r 120         while(begin.getFromNode)
--[ 2019.11.09.17.14.39.605.0 ]--
r 120         while(begin.getFromNode())
--[ 2019.11.09.17.14.40.048.0 ]--
r 120         while(begin.getFromNode().)
--[ 2019.11.09.17.14.41.607.0 ]--
r 120         while(begin.getFromNode().neighbors)
--[ 2019.11.09.17.14.41.612.0 ]--
r 120         while(begin.getFromNode().neighbors())
--[ 2019.11.09.17.14.42.080.0 ]--
r 120         while(begin.getFromNode().neighbors()
--[ 2019.11.09.17.14.42.188.0 ]--
r 120         while(begin.getFromNode().neighbors)
--[ 2019.11.09.17.14.42.301.0 ]--
r 120         while(begin.getFromNode().neighbor)
--[ 2019.11.09.17.14.42.411.0 ]--
r 120         while(begin.getFromNode().neighbo)
--[ 2019.11.09.17.14.42.521.0 ]--
r 120         while(begin.getFromNode().neighb)
--[ 2019.11.09.17.14.42.645.0 ]--
r 120         while(begin.getFromNode().neigh)
--[ 2019.11.09.17.14.42.788.0 ]--
r 120         while(begin.getFromNode().neig)
--[ 2019.11.09.17.14.42.848.0 ]--
r 120         while(begin.getFromNode().nei)
--[ 2019.11.09.17.14.42.962.0 ]--
r 120         while(begin.getFromNode().ne)
--[ 2019.11.09.17.14.43.090.0 ]--
r 120         while(begin.getFromNode().n)
--[ 2019.11.09.17.14.43.348.0 ]--
r 120         while(begin.getFromNode().)
--[ 2019.11.09.17.14.43.639.0 ]--
r 120         while(begin.getFromNode())
--[ 2019.11.09.17.14.43.815.0 ]--
r 120         while(begin.getFromNode().)
--[ 2019.11.09.17.14.47.857.0 ]--
r 120         while(begin.getFromNode().l)
--[ 2019.11.09.17.14.48.026.0 ]--
r 120         while(begin.getFromNode().lo)
--[ 2019.11.09.17.14.48.171.0 ]--
r 120         while(begin.getFromNode().loc)
--[ 2019.11.09.17.14.56.234.0 ]--
r 120         )
--[ 2019.11.09.17.14.57.476.0 ]--
r 120         
--[ 2019.11.09.17.14.59.034.0 ]--
+ 118         
--[ 2019.11.09.17.15.00.491.0 ]--
r 117     
--[ 2019.11.09.17.15.00.649.0 ]--
r 117         
--[ 2019.11.09.17.15.01.029.0 ]--
r 117         c
--[ 2019.11.09.17.15.01.148.0 ]--
r 117         co
--[ 2019.11.09.17.15.01.207.0 ]--
r 117         con
--[ 2019.11.09.17.15.01.274.0 ]--
r 117         cons
--[ 2019.11.09.17.15.01.760.0 ]--
r 117         con
--[ 2019.11.09.17.15.01.835.0 ]--
r 117         co
--[ 2019.11.09.17.15.01.938.0 ]--
r 117         c
--[ 2019.11.09.17.15.02.046.0 ]--
r 117         
--[ 2019.11.09.17.15.02.407.0 ]--
r 117         S
--[ 2019.11.09.17.15.02.523.0 ]--
r 117         St
--[ 2019.11.09.17.15.13.552.0 ]--
r 117         StdOut
--[ 2019.11.09.17.15.14.780.0 ]--
r 117         StdOut.
--[ 2019.11.09.17.15.15.016.0 ]--
r 117         StdOut.p
--[ 2019.11.09.17.15.15.698.0 ]--
r 117         StdOut.println
--[ 2019.11.09.17.15.15.705.0 ]--
r 117         StdOut.println()
--[ 2019.11.09.17.15.15.712.0 ]--
r 117         StdOut.println();
--[ 2019.11.09.17.15.18.896.0 ]--
r 117         StdOut.println( );
--[ 2019.11.09.17.15.18.977.0 ]--
r 117         StdOut.println();
--[ 2019.11.09.17.15.19.392.0 ]--
r 117         StdOut.println(s);
--[ 2019.11.09.17.15.19.764.0 ]--
r 117         StdOut.println();
--[ 2019.11.09.17.15.21.536.0 ]--
r 117         StdOut.println(b);
--[ 2019.11.09.17.15.21.621.0 ]--
r 117         StdOut.println(be);
--[ 2019.11.09.17.15.21.739.0 ]--
r 117         StdOut.println(beg);
--[ 2019.11.09.17.15.21.847.0 ]--
r 117         StdOut.println(begi);
--[ 2019.11.09.17.15.21.884.0 ]--
r 117         StdOut.println(begin);
--[ 2019.11.09.17.15.22.081.0 ]--
r 117         StdOut.println(begin.);
--[ 2019.11.09.17.15.22.366.0 ]--
r 117         StdOut.println(begin.l);
--[ 2019.11.09.17.15.22.463.0 ]--
r 117         StdOut.println(begin.lo);
--[ 2019.11.09.17.15.22.571.0 ]--
r 117         StdOut.println(begin.loc);
--[ 2019.11.09.17.15.25.941.0 ]--
r 69 
r 118 
r 120 
r 121 
--[ 2019.11.09.17.15.27.682.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.17.15.36.086.0 ]--
r 117         StdOut.println(begin.f);
--[ 2019.11.09.17.15.36.246.0 ]--
r 117         StdOut.println(begin.fr);
--[ 2019.11.09.17.15.37.086.0 ]--
r 117         StdOut.println(begin.fromNode);
--[ 2019.11.09.17.15.40.315.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.17.15.44.911.0 ]--
r 117         
--[ 2019.11.09.17.15.45.089.0 ]--
- 116
--[ 2019.11.09.17.15.46.260.0 ]--
r 120     
--[ 2019.11.09.17.15.46.389.0 ]--
r 120         
--[ 2019.11.09.17.15.47.486.0 ]--
r 120         w
--[ 2019.11.09.17.15.47.542.0 ]--
r 120         wh
--[ 2019.11.09.17.15.47.568.0 ]--
r 120         whi
--[ 2019.11.09.17.15.47.716.0 ]--
r 120         whil
--[ 2019.11.09.17.15.47.810.0 ]--
r 120         while
--[ 2019.11.09.17.15.48.167.0 ]--
r 120         while()
--[ 2019.11.09.17.15.48.356.0 ]--
r 120         while(b)
--[ 2019.11.09.17.15.48.409.0 ]--
r 120         while(be)
--[ 2019.11.09.17.15.48.526.0 ]--
r 120         while(beg)
--[ 2019.11.09.17.15.48.608.0 ]--
r 120         while(begi)
--[ 2019.11.09.17.15.48.654.0 ]--
r 120         while(begin)
--[ 2019.11.09.17.15.48.882.0 ]--
r 120         while(begin.)
--[ 2019.11.09.17.15.51.913.0 ]--
r 120         while(begin.f)
--[ 2019.11.09.17.15.52.875.0 ]--
r 120         while(begin.fromNode)
--[ 2019.11.09.17.15.53.045.0 ]--
r 120         while(begin.fromNode.)
--[ 2019.11.09.17.15.53.959.0 ]--
r 120         while(begin.fromNode.l)
--[ 2019.11.09.17.15.54.598.0 ]--
r 120         while(begin.fromNode.loc)
--[ 2019.11.09.17.15.56.138.0 ]--
r 120         while(begin.fromNode.loc )
--[ 2019.11.09.17.15.56.567.0 ]--
r 120         while(begin.fromNode.loc)
--[ 2019.11.09.17.15.58.053.0 ]--
r 120         while(begin.fromNode.loc )
--[ 2019.11.09.17.15.59.665.0 ]--
r 120         while(begin.fromNode.loc !)
--[ 2019.11.09.17.15.59.847.0 ]--
r 120         while(begin.fromNode.loc !=)
--[ 2019.11.09.17.16.00.159.0 ]--
r 120         while(begin.fromNode.loc != )
--[ 2019.11.09.17.16.06.201.0 ]--
r 120         while(begin.fromNode.loc != e)
--[ 2019.11.09.17.16.06.510.0 ]--
r 120         while(begin.fromNode.loc != en)
--[ 2019.11.09.17.16.06.532.0 ]--
r 120         while(begin.fromNode.loc != end)
--[ 2019.11.09.17.16.07.374.0 ]--
r 120         while(begin.fromNode.loc != end )
--[ 2019.11.09.17.16.07.402.0 ]--
r 120         while(begin.fromNode.loc != end)
--[ 2019.11.09.17.16.07.605.0 ]--
r 120         while(begin.fromNode.loc != end.)
--[ 2019.11.09.17.16.08.438.0 ]--
r 120         while(begin.fromNode.loc != end)
--[ 2019.11.09.17.16.17.934.0 ]--
r 120         while(begin.fromNode.loc != end){
--[ 2019.11.09.17.16.18.082.0 ]--
+ 121 
+ 122 }
--[ 2019.11.09.17.16.18.111.0 ]--
r 122         }
--[ 2019.11.09.17.16.18.135.0 ]--
r 121             
--[ 2019.11.09.17.16.19.148.0 ]--
r 121             n
--[ 2019.11.09.17.16.19.204.0 ]--
r 121             nu
--[ 2019.11.09.17.16.19.530.0 ]--
r 121             n
--[ 2019.11.09.17.16.19.552.0 ]--
r 121             
--[ 2019.11.09.17.16.19.698.0 ]--
r 121             r
--[ 2019.11.09.17.16.19.766.0 ]--
r 121             re
--[ 2019.11.09.17.16.19.875.0 ]--
r 121             ret
--[ 2019.11.09.17.16.19.956.0 ]--
r 121             retu
--[ 2019.11.09.17.16.20.021.0 ]--
r 121             retur
--[ 2019.11.09.17.16.20.143.0 ]--
r 121             return
--[ 2019.11.09.17.16.20.662.0 ]--
r 121             return 
--[ 2019.11.09.17.16.20.718.0 ]--
r 121             return
--[ 2019.11.09.17.16.21.441.0 ]--
r 121             return;
--[ 2019.11.09.17.16.31.495.0 ]--
r 123     
--[ 2019.11.09.17.16.31.638.0 ]--
r 123         
--[ 2019.11.09.17.16.31.917.0 ]--
+ 123         
--[ 2019.11.09.17.16.32.358.0 ]--
+ 123         
--[ 2019.11.09.17.16.35.310.0 ]--
r 124         /
--[ 2019.11.09.17.16.35.466.0 ]--
r 124         /*
--[ 2019.11.09.17.16.37.800.0 ]--
+ 120         
--[ 2019.11.09.17.16.38.295.0 ]--
r 120         *
--[ 2019.11.09.17.16.38.429.0 ]--
r 120         */
--[ 2019.11.09.17.16.39.872.0 ]--
- 124
--[ 2019.11.09.17.16.41.012.0 ]--
r 124         /
--[ 2019.11.09.17.16.41.114.0 ]--
r 124         
--[ 2019.11.09.17.16.41.387.0 ]--
r 124         /
--[ 2019.11.09.17.16.41.496.0 ]--
r 124         /*
--[ 2019.11.09.17.16.42.712.0 ]--
r 124         /
--[ 2019.11.09.17.16.43.134.0 ]--
r 124         
--[ 2019.11.09.17.16.43.254.0 ]--
r 124         *
--[ 2019.11.09.17.16.43.352.0 ]--
r 124         *?
--[ 2019.11.09.17.16.44.932.0 ]--
r 124         *
--[ 2019.11.09.17.16.45.063.0 ]--
r 124         */
--[ 2019.11.09.17.16.46.303.0 ]--
r 120         *
--[ 2019.11.09.17.16.46.379.0 ]--
r 120         
--[ 2019.11.09.17.16.46.693.0 ]--
r 120         /
--[ 2019.11.09.17.16.46.794.0 ]--
r 120         /*
--[ 2019.11.09.17.16.51.910.0 ]--
+ 118         
--[ 2019.11.09.17.17.05.293.0 ]--
- 117
--[ 2019.11.09.17.17.05.870.0 ]--
+ 116         
--[ 2019.11.09.17.17.06.767.0 ]--
- 116
--[ 2019.11.09.17.17.07.243.0 ]--
r 116         b
--[ 2019.11.09.17.17.07.338.0 ]--
r 116         bo
--[ 2019.11.09.17.17.07.383.0 ]--
r 116         boa
--[ 2019.11.09.17.17.07.466.0 ]--
r 116         boar
--[ 2019.11.09.17.17.08.844.0 ]--
r 116         board
--[ 2019.11.09.17.17.09.095.0 ]--
r 116         board 
--[ 2019.11.09.17.17.11.156.0 ]--
r 116         board
--[ 2019.11.09.17.17.11.268.0 ]--
r 116         boar
--[ 2019.11.09.17.17.11.397.0 ]--
r 116         boa
--[ 2019.11.09.17.17.11.522.0 ]--
r 116         bo
--[ 2019.11.09.17.17.11.704.0 ]--
r 116         b
--[ 2019.11.09.17.17.11.915.0 ]--
r 116         
--[ 2019.11.09.17.17.20.809.0 ]--
r 116         b
--[ 2019.11.09.17.17.20.918.0 ]--
r 116         bo
--[ 2019.11.09.17.17.20.988.0 ]--
r 116         boa
--[ 2019.11.09.17.17.21.332.0 ]--
r 116         boar
--[ 2019.11.09.17.17.21.498.0 ]--
r 116         board
--[ 2019.11.09.17.17.21.551.0 ]--
r 116         board 
--[ 2019.11.09.17.17.21.670.0 ]--
r 116         board =
--[ 2019.11.09.17.17.21.741.0 ]--
r 116         board = 
--[ 2019.11.09.17.17.21.881.0 ]--
r 116         board = n
--[ 2019.11.09.17.17.21.962.0 ]--
r 116         board = ne
--[ 2019.11.09.17.17.22.089.0 ]--
r 116         board = new
--[ 2019.11.09.17.17.23.534.0 ]--
r 116         board = new 
--[ 2019.11.09.17.17.28.230.0 ]--
r 116         board = new B
--[ 2019.11.09.17.17.28.337.0 ]--
r 116         board = new Bo
--[ 2019.11.09.17.17.28.446.0 ]--
r 116         board = new Boo
--[ 2019.11.09.17.17.28.598.0 ]--
r 116         board = new Bool
--[ 2019.11.09.17.17.28.759.0 ]--
r 116         board = new Boola
--[ 2019.11.09.17.17.28.859.0 ]--
r 116         board = new Boolan
--[ 2019.11.09.17.17.29.620.0 ]--
r 116         board = new Boola
--[ 2019.11.09.17.17.29.717.0 ]--
r 116         board = new Bool
--[ 2019.11.09.17.17.29.837.0 ]--
r 116         board = new Bool 
--[ 2019.11.09.17.17.30.289.0 ]--
r 116         board = new Boole
--[ 2019.11.09.17.17.31.120.0 ]--
r 116         board = new Boolean
--[ 2019.11.09.17.17.31.142.0 ]--
r 116         board = new Boolean[][]
--[ 2019.11.09.17.17.31.286.0 ]--
r 116         board = new Boolean[[]][]
--[ 2019.11.09.17.17.31.817.0 ]--
r 116         board = new Boolean[][]
--[ 2019.11.09.17.17.32.252.0 ]--
r 116         board = new Boolean[t][]
--[ 2019.11.09.17.17.32.308.0 ]--
r 116         board = new Boolean[te][]
--[ 2019.11.09.17.17.32.417.0 ]--
r 116         board = new Boolean[ter][]
--[ 2019.11.09.17.17.32.559.0 ]--
r 116         board = new Boolean[terr][]
--[ 2019.11.09.17.17.33.001.0 ]--
r 116         board = new Boolean[terrain][]
--[ 2019.11.09.17.17.33.121.0 ]--
r 116         board = new Boolean[terrain.][]
--[ 2019.11.09.17.17.33.481.0 ]--
r 116         board = new Boolean[terrain.g][]
--[ 2019.11.09.17.17.33.880.0 ]--
r 116         board = new Boolean[terrain.getN][]
--[ 2019.11.09.17.17.33.889.0 ]--
r 116         board = new Boolean[terrain.getN()][]
--[ 2019.11.09.17.17.34.922.0 ]--
r 116         board = new Boolean[terrain.getN()][t]
--[ 2019.11.09.17.17.35.049.0 ]--
r 116         board = new Boolean[terrain.getN()][te]
--[ 2019.11.09.17.17.35.225.0 ]--
r 116         board = new Boolean[terrain.getN()][ter]
--[ 2019.11.09.17.17.35.763.0 ]--
r 116         board = new Boolean[terrain.getN()][terrain]
--[ 2019.11.09.17.17.35.910.0 ]--
r 116         board = new Boolean[terrain.getN()][terrain.]
--[ 2019.11.09.17.17.36.171.0 ]--
r 116         board = new Boolean[terrain.getN()][terrain.g]
--[ 2019.11.09.17.17.36.473.0 ]--
r 116         board = new Boolean[terrain.getN()][terrain.getN]
--[ 2019.11.09.17.17.36.496.0 ]--
r 116         board = new Boolean[terrain.getN()][terrain.getN()]
--[ 2019.11.09.17.17.38.202.0 ]--
r 116         board = new Boolean[terrain.getN()][terrain.getN()];
--[ 2019.11.09.17.17.41.413.0 ]--
+ 117         
--[ 2019.11.09.17.17.41.527.0 ]--
+ 117         
--[ 2019.11.09.17.17.42.456.0 ]--
- 117
--[ 2019.11.09.17.17.42.588.0 ]--
- 117
--[ 2019.11.09.17.17.46.578.0 ]--
r 134         *
--[ 2019.11.09.17.17.46.667.0 ]--
r 134         
--[ 2019.11.09.17.17.48.278.0 ]--
+ 127         
--[ 2019.11.09.17.17.49.090.0 ]--
r 128         *
--[ 2019.11.09.17.17.49.804.0 ]--
r 128         
--[ 2019.11.09.17.17.51.335.0 ]--
r 117 
r 125 
r 127 
r 135 
--[ 2019.11.09.17.17.52.963.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.17.18.01.051.0 ]--
- 127
--[ 2019.11.09.17.18.01.583.0 ]--
- 127
--[ 2019.11.09.17.18.18.074.0 ]--
+ 129                 
--[ 2019.11.09.17.18.18.725.0 ]--
r 129                 b
--[ 2019.11.09.17.18.18.805.0 ]--
r 129                 bo
--[ 2019.11.09.17.18.18.867.0 ]--
r 129                 boa
--[ 2019.11.09.17.18.18.911.0 ]--
r 129                 boar
--[ 2019.11.09.17.18.19.072.0 ]--
r 129                 board
--[ 2019.11.09.17.18.19.932.0 ]--
r 129                 board[]
--[ 2019.11.09.17.18.20.106.0 ]--
r 129                 board[i]
--[ 2019.11.09.17.18.20.831.0 ]--
r 129                 board[]
--[ 2019.11.09.17.18.21.427.0 ]--
r 129                 board[i]
--[ 2019.11.09.17.18.21.973.0 ]--
r 129                 board[i][]
--[ 2019.11.09.17.18.22.666.0 ]--
r 129                 board[i][j]
--[ 2019.11.09.17.18.23.201.0 ]--
r 129                 board[i][j] 
--[ 2019.11.09.17.18.23.346.0 ]--
r 129                 board[i][j] =
--[ 2019.11.09.17.18.23.473.0 ]--
r 129                 board[i][j] = 
--[ 2019.11.09.17.18.23.794.0 ]--
r 129                 board[i][j] = F
--[ 2019.11.09.17.18.24.192.0 ]--
r 129                 board[i][j] = 
--[ 2019.11.09.17.18.24.295.0 ]--
r 129                 board[i][j] = f
--[ 2019.11.09.17.18.24.459.0 ]--
r 129                 board[i][j] = fa
--[ 2019.11.09.17.18.24.752.0 ]--
r 129                 board[i][j] = fas
--[ 2019.11.09.17.18.25.010.0 ]--
r 129                 board[i][j] = fa
--[ 2019.11.09.17.18.25.113.0 ]--
r 129                 board[i][j] = fal
--[ 2019.11.09.17.18.25.179.0 ]--
r 129                 board[i][j] = fals
--[ 2019.11.09.17.18.25.290.0 ]--
r 129                 board[i][j] = false
--[ 2019.11.09.17.18.25.350.0 ]--
r 129                 board[i][j] = false;
--[ 2019.11.09.17.18.26.267.0 ]--
r 129                 board[i][j] = false; 
--[ 2019.11.09.17.18.26.328.0 ]--
r 129                 board[i][j] = false;
--[ 2019.11.09.17.18.30.790.0 ]--
r 126         // Print the current state of the board
--[ 2019.11.09.17.18.31.670.0 ]--
r 126         //Print the current state of the board
--[ 2019.11.09.17.18.34.027.0 ]--
r 126         // Print the current state of the board
--[ 2019.11.09.17.18.34.904.0 ]--
r 126         //Print the current state of the board
--[ 2019.11.09.17.18.35.166.0 ]--
r 126         //IPrint the current state of the board
--[ 2019.11.09.17.18.35.358.0 ]--
r 126         //InPrint the current state of the board
--[ 2019.11.09.17.18.35.547.0 ]--
r 126         //IniPrint the current state of the board
--[ 2019.11.09.17.18.36.017.0 ]--
r 126         //InitPrint the current state of the board
--[ 2019.11.09.17.18.36.098.0 ]--
r 126         //InitiPrint the current state of the board
--[ 2019.11.09.17.18.36.152.0 ]--
r 126         //InitiaPrint the current state of the board
--[ 2019.11.09.17.18.36.235.0 ]--
r 126         //InitialPrint the current state of the board
--[ 2019.11.09.17.18.36.357.0 ]--
r 126         //InitialiPrint the current state of the board
--[ 2019.11.09.17.18.36.391.0 ]--
r 126         //InitializPrint the current state of the board
--[ 2019.11.09.17.18.36.509.0 ]--
r 126         //InitializePrint the current state of the board
--[ 2019.11.09.17.18.36.606.0 ]--
r 126         //Initialize Print the current state of the board
--[ 2019.11.09.17.18.36.704.0 ]--
r 126         //Initialize tPrint the current state of the board
--[ 2019.11.09.17.18.36.737.0 ]--
r 126         //Initialize thPrint the current state of the board
--[ 2019.11.09.17.18.36.797.0 ]--
r 126         //Initialize thePrint the current state of the board
--[ 2019.11.09.17.18.36.827.0 ]--
r 126         //Initialize the Print the current state of the board
--[ 2019.11.09.17.18.36.956.0 ]--
r 126         //Initialize the bPrint the current state of the board
--[ 2019.11.09.17.18.37.053.0 ]--
r 126         //Initialize the boPrint the current state of the board
--[ 2019.11.09.17.18.37.061.0 ]--
r 126         //Initialize the boaPrint the current state of the board
--[ 2019.11.09.17.18.37.200.0 ]--
r 126         //Initialize the boarPrint the current state of the board
--[ 2019.11.09.17.18.37.423.0 ]--
r 126         //Initialize the boardPrint the current state of the board
--[ 2019.11.09.17.18.37.572.0 ]--
r 126         //Initialize the board Print the current state of the board
--[ 2019.11.09.17.18.39.016.0 ]--
r 126         //Initialize the board wPrint the current state of the board
--[ 2019.11.09.17.18.39.178.0 ]--
r 126         //Initialize the board wtPrint the current state of the board
--[ 2019.11.09.17.18.39.431.0 ]--
r 126         //Initialize the board wPrint the current state of the board
--[ 2019.11.09.17.18.40.636.0 ]--
r 126         //Initialize the board Print the current state of the board
--[ 2019.11.09.17.18.41.683.0 ]--
r 126         //Initialize the board aPrint the current state of the board
--[ 2019.11.09.17.18.41.749.0 ]--
r 126         //Initialize the board anPrint the current state of the board
--[ 2019.11.09.17.18.41.870.0 ]--
r 126         //Initialize the board andPrint the current state of the board
--[ 2019.11.09.17.18.41.939.0 ]--
r 126         //Initialize the board and Print the current state of the board
--[ 2019.11.09.17.18.42.910.0 ]--
r 126         //Initialize the board and t the current state of the board
--[ 2019.11.09.17.18.43.018.0 ]--
r 126         //Initialize the board and th the current state of the board
--[ 2019.11.09.17.18.43.061.0 ]--
r 126         //Initialize the board and the the current state of the board
--[ 2019.11.09.17.18.43.157.0 ]--
r 126         //Initialize the board and then the current state of the board
--[ 2019.11.09.17.18.43.231.0 ]--
r 126         //Initialize the board and then  the current state of the board
--[ 2019.11.09.17.18.43.511.0 ]--
r 126         //Initialize the board and then p the current state of the board
--[ 2019.11.09.17.18.43.631.0 ]--
r 126         //Initialize the board and then pr the current state of the board
--[ 2019.11.09.17.18.43.718.0 ]--
r 126         //Initialize the board and then pri the current state of the board
--[ 2019.11.09.17.18.44.345.0 ]--
r 126         //Initialize the board and then prin the current state of the board
--[ 2019.11.09.17.18.44.428.0 ]--
r 126         //Initialize the board and then print the current state of the board
--[ 2019.11.09.17.18.44.934.0 ]--
r 126         //Initialize the board and then print  the current state of the board
--[ 2019.11.09.17.18.45.009.0 ]--
r 126         //Initialize the board and then print the current state of the board
--[ 2019.11.09.17.18.48.640.0 ]--
r 126         //Initialize the board and then print the current state ofi
--[ 2019.11.09.17.18.48.751.0 ]--
r 126         //Initialize the board and then print the current state ofit
--[ 2019.11.09.17.18.49.802.0 ]--
r 126         //Initialize the board and then print the current state ofi
--[ 2019.11.09.17.18.49.999.0 ]--
r 126         //Initialize the board and then print the current state of
--[ 2019.11.09.17.18.50.229.0 ]--
r 126         //Initialize the board and then print the current state of 
--[ 2019.11.09.17.18.50.303.0 ]--
r 126         //Initialize the board and then print the current state of i
--[ 2019.11.09.17.18.50.402.0 ]--
r 126         //Initialize the board and then print the current state of it
--[ 2019.11.09.17.18.54.180.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.17.19.38.810.0 ]--
:/src/InteractivePathfinderVisualizer.java
r 46     private final static String emapFilename = emaps[];        // change index to load a different elevation map
--[ 2019.11.09.17.19.39.162.0 ]--
r 46     private final static String emapFilename = emaps[11];        // change index to load a different elevation map
--[ 2019.11.09.17.19.43.150.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.17.20.17.137.0 ]--
:/src/Pathfinder.java
r 130                 /System.out.print(board[i][j] + " ");
--[ 2019.11.09.17.20.17.250.0 ]--
r 130                 //System.out.print(board[i][j] + " ");
--[ 2019.11.09.17.20.18.880.0 ]--
r 132             /System.out.println();
--[ 2019.11.09.17.20.18.986.0 ]--
r 132             //System.out.println();
--[ 2019.11.09.17.20.22.686.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.17.20.43.349.0 ]--
r 130                 /System.out.print(board[i][j] + " ");
--[ 2019.11.09.17.20.43.443.0 ]--
r 130                 System.out.print(board[i][j] + " ");
--[ 2019.11.09.17.20.45.494.0 ]--
r 132             System.out.println();
--[ 2019.11.09.17.20.49.113.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.17.21.02.705.0 ]--
:/src/InteractivePathfinderVisualizer.java
r 46     private final static String emapFilename = emaps[1];        // change index to load a different elevation map
--[ 2019.11.09.17.21.02.761.0 ]--
r 46     private final static String emapFilename = emaps[];        // change index to load a different elevation map
--[ 2019.11.09.17.21.02.932.0 ]--
r 46     private final static String emapFilename = emaps[0];        // change index to load a different elevation map
--[ 2019.11.09.17.21.06.907.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.17.28.57.294.0 ]--
:/src/Pathfinder.java
+ 36             
--[ 2019.11.09.17.28.57.433.0 ]--
+ 36             
--[ 2019.11.09.17.28.58.692.0 ]--
r 36             i
--[ 2019.11.09.17.28.58.754.0 ]--
r 36             if
--[ 2019.11.09.17.28.59.465.0 ]--
r 36             if()
--[ 2019.11.09.17.28.59.653.0 ]--
r 36             if(t)
--[ 2019.11.09.17.28.59.722.0 ]--
r 36             if(th)
--[ 2019.11.09.17.28.59.796.0 ]--
r 36             if(thi)
--[ 2019.11.09.17.28.59.853.0 ]--
r 36             if(this)
--[ 2019.11.09.17.28.59.990.0 ]--
r 36             if(this.)
--[ 2019.11.09.17.29.00.103.0 ]--
r 36             if(this.g)
--[ 2019.11.09.17.29.00.143.0 ]--
r 36             if(this.ge)
--[ 2019.11.09.17.29.00.265.0 ]--
r 36             if(this.get)
--[ 2019.11.09.17.29.00.472.0 ]--
r 36             if(this.get )
--[ 2019.11.09.17.29.00.617.0 ]--
r 36             if(this.get)
--[ 2019.11.09.17.29.01.002.0 ]--
r 36             if(this.ge)
--[ 2019.11.09.17.29.01.130.0 ]--
r 36             if(this.g)
--[ 2019.11.09.17.29.01.458.0 ]--
r 36             if(this.)
--[ 2019.11.09.17.29.07.144.0 ]--
r 36             if(this.g)
--[ 2019.11.09.17.29.07.238.0 ]--
r 36             if(this.ge)
--[ 2019.11.09.17.29.07.313.0 ]--
r 36             if(this.get)
--[ 2019.11.09.17.29.07.561.0 ]--
r 36             if(this.getC)
--[ 2019.11.09.17.29.07.683.0 ]--
r 36             if(this.getCo)
--[ 2019.11.09.17.29.07.809.0 ]--
r 36             if(this.getCos)
--[ 2019.11.09.17.29.07.974.0 ]--
r 36             if(this.getCost)
--[ 2019.11.09.17.29.10.439.0 ]--
r 36             if(this.getCost())
--[ 2019.11.09.17.29.12.334.0 ]--
r 36             if(this.getCost(0))
--[ 2019.11.09.17.29.12.573.0 ]--
r 36             if(this.getCost(0.))
--[ 2019.11.09.17.29.12.705.0 ]--
r 36             if(this.getCost(0.0))
--[ 2019.11.09.17.29.14.430.0 ]--
r 36             if(this.getCost(0.0),)
--[ 2019.11.09.17.29.14.834.0 ]--
r 36             if(this.getCost(0.0), )
--[ 2019.11.09.17.29.15.034.0 ]--
r 36             if(this.getCost(0.0),)
--[ 2019.11.09.17.29.15.573.0 ]--
r 36             if(this.getCost(0.0))
--[ 2019.11.09.17.29.15.986.0 ]--
r 36             if(this.getCost(0.0) )
--[ 2019.11.09.17.29.18.264.0 ]--
r 36             if(this.getCost(0.0) <)
--[ 2019.11.09.17.29.18.387.0 ]--
r 36             if(this.getCost(0.0) < )
--[ 2019.11.09.17.29.19.625.0 ]--
r 36             if(this.getCost(0.0) < t)
--[ 2019.11.09.17.29.19.682.0 ]--
r 36             if(this.getCost(0.0) < th)
--[ 2019.11.09.17.29.19.771.0 ]--
r 36             if(this.getCost(0.0) < tha)
--[ 2019.11.09.17.29.19.798.0 ]--
r 36             if(this.getCost(0.0) < that)
--[ 2019.11.09.17.29.20.007.0 ]--
r 36             if(this.getCost(0.0) < that.)
--[ 2019.11.09.17.29.20.065.0 ]--
r 36             if(this.getCost(0.0) < that.g)
--[ 2019.11.09.17.29.20.137.0 ]--
r 36             if(this.getCost(0.0) < that.ge)
--[ 2019.11.09.17.29.21.029.0 ]--
r 36             if(this.getCost(0.0) < that.get)
--[ 2019.11.09.17.29.21.468.0 ]--
r 36             if(this.getCost(0.0) < that.getC)
--[ 2019.11.09.17.29.22.158.0 ]--
r 36             if(this.getCost(0.0) < that.getCost)
--[ 2019.11.09.17.29.22.165.0 ]--
r 36             if(this.getCost(0.0) < that.getCost())
--[ 2019.11.09.17.29.22.993.0 ]--
r 36             if(this.getCost(0.0) < that.getCost(0))
--[ 2019.11.09.17.29.23.092.0 ]--
r 36             if(this.getCost(0.0) < that.getCost(0.))
--[ 2019.11.09.17.29.23.197.0 ]--
r 36             if(this.getCost(0.0) < that.getCost(0.0))
--[ 2019.11.09.17.29.33.104.0 ]--
r 36             if(this.getCost(0.) < that.getCost(0.0))
--[ 2019.11.09.17.29.33.111.0 ]--
r 36             if(this.getCost(0.\) < that.getCost(0.0))
--[ 2019.11.09.17.29.33.260.0 ]--
r 36             if(this.getCost(0.) < that.getCost(0.0))
--[ 2019.11.09.17.29.33.602.0 ]--
r 36             if(this.getCost(0) < that.getCost(0.0))
--[ 2019.11.09.17.29.36.635.0 ]--
r 36             if(this.getCost(0) < that.getCost(0.))
--[ 2019.11.09.17.29.36.745.0 ]--
r 36             if(this.getCost(0) < that.getCost(0))
--[ 2019.11.09.17.29.41.619.0 ]--
r 36             if(this.getCost(0) < that.getCost(0.))
--[ 2019.11.09.17.29.41.730.0 ]--
r 36             if(this.getCost(0) < that.getCost(0.0))
--[ 2019.11.09.17.29.52.941.0 ]--
r 36             if(this.getCost(0.) < that.getCost(0.0))
--[ 2019.11.09.17.29.52.985.0 ]--
r 36             if(this.getCost(0.0) < that.getCost(0.0))
--[ 2019.11.09.17.30.08.438.0 ]--
r 37 
--[ 2019.11.09.17.30.39.537.0 ]--
r 36             if(this.getCost(0.) < that.getCost(0.0))
--[ 2019.11.09.17.30.39.637.0 ]--
r 36             if(this.getCost(0) < that.getCost(0.0))
--[ 2019.11.09.17.30.42.446.0 ]--
r 36             if(this.getCost(0) < that.getCost(00))
--[ 2019.11.09.17.30.42.549.0 ]--
r 36             if(this.getCost(0) < that.getCost(0))
--[ 2019.11.09.17.30.45.138.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)){
--[ 2019.11.09.17.30.45.481.0 ]--
+ 37 
+ 38 }
--[ 2019.11.09.17.30.45.488.0 ]--
r 38             }
--[ 2019.11.09.17.30.45.506.0 ]--
r 37                 
--[ 2019.11.09.17.30.45.943.0 ]--
- 37
--[ 2019.11.09.17.30.46.650.0 ]--
r 36             if(this.getCost(0) < that.getCost(0))
--[ 2019.11.09.17.30.47.201.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) 
--[ 2019.11.09.17.30.47.304.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) r
--[ 2019.11.09.17.30.47.380.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) re
--[ 2019.11.09.17.30.47.504.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) ret
--[ 2019.11.09.17.30.47.594.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) retu
--[ 2019.11.09.17.30.47.657.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) retur
--[ 2019.11.09.17.30.47.743.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) return
--[ 2019.11.09.17.30.47.957.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) return 
--[ 2019.11.09.17.30.48.066.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) return -
--[ 2019.11.09.17.30.48.158.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) return -1
--[ 2019.11.09.17.30.49.148.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) return -1;
--[ 2019.11.09.17.31.00.011.0 ]--
r 36             if(this.getCost(0) < that.getCost(0))
--[ 2019.11.09.17.31.01.573.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) return -1;
--[ 2019.11.09.17.31.02.551.0 ]--
r 36             if(this.getCost(0) < that.getCost(0))
--[ 2019.11.09.17.31.02.858.0 ]--
+ 36             if(this.getCost(0) < that.getCost(0)){
r 37                 
--[ 2019.11.09.17.31.04.228.0 ]--
- 37
- 37
--[ 2019.11.09.17.31.04.712.0 ]--
r 36             if(this.getCost(0) < that.getCost(0))
--[ 2019.11.09.17.31.06.373.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) 
--[ 2019.11.09.17.31.06.983.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) r
--[ 2019.11.09.17.31.07.073.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) re
--[ 2019.11.09.17.31.07.161.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) ret
--[ 2019.11.09.17.31.07.293.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) retu
--[ 2019.11.09.17.31.07.318.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) retur
--[ 2019.11.09.17.31.07.465.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) return
--[ 2019.11.09.17.31.07.845.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) return 
--[ 2019.11.09.17.31.09.023.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) return -
--[ 2019.11.09.17.31.09.078.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) return -1
--[ 2019.11.09.17.31.09.308.0 ]--
r 36             if(this.getCost(0) < that.getCost(0)) return -1;
--[ 2019.11.09.17.31.09.995.0 ]--
+ 37             
--[ 2019.11.09.17.31.10.586.0 ]--
r 37             e
--[ 2019.11.09.17.31.10.662.0 ]--
r 37             el
--[ 2019.11.09.17.31.10.747.0 ]--
r 37             els
--[ 2019.11.09.17.31.10.875.0 ]--
r 37             else
--[ 2019.11.09.17.31.10.961.0 ]--
r 37             else 
--[ 2019.11.09.17.31.11.066.0 ]--
r 37             else i
--[ 2019.11.09.17.31.11.212.0 ]--
r 37             else if
--[ 2019.11.09.17.31.11.272.0 ]--
r 37             else if 
--[ 2019.11.09.17.31.25.025.0 ]--
r 37             else if (this.getCost(0) < that.getCost(0))
--[ 2019.11.09.17.31.28.533.0 ]--
r 37             else if (this.getCost(0)  that.getCost(0))
--[ 2019.11.09.17.31.28.700.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0))
--[ 2019.11.09.17.31.30.169.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) 
--[ 2019.11.09.17.31.30.306.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) r
--[ 2019.11.09.17.31.30.337.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) re
--[ 2019.11.09.17.31.30.478.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) ret
--[ 2019.11.09.17.31.30.571.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) retu
--[ 2019.11.09.17.31.30.644.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) retur
--[ 2019.11.09.17.31.30.694.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) return
--[ 2019.11.09.17.31.30.861.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) return 
--[ 2019.11.09.17.31.31.282.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) return +
--[ 2019.11.09.17.31.31.295.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) return + 
--[ 2019.11.09.17.31.31.364.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) return + 1
--[ 2019.11.09.17.31.31.507.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) return + 1;
--[ 2019.11.09.17.31.32.368.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) return + 1; 
--[ 2019.11.09.17.31.32.424.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) return + 1;
--[ 2019.11.09.17.31.32.718.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) return + 1; 
--[ 2019.11.09.17.31.32.765.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) return + 1;
--[ 2019.11.09.17.31.33.393.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) return + 1
--[ 2019.11.09.17.31.33.472.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) return + 
--[ 2019.11.09.17.31.33.601.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) return +
--[ 2019.11.09.17.31.33.672.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) return +1
--[ 2019.11.09.17.31.34.015.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) return +
--[ 2019.11.09.17.31.34.120.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) return 
--[ 2019.11.09.17.31.34.148.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) return 1
--[ 2019.11.09.17.31.34.482.0 ]--
r 37             else if (this.getCost(0) > that.getCost(0)) return 1;
--[ 2019.11.09.17.32.03.705.0 ]--
- 128
+ 136 
--[ 2019.11.09.17.32.04.079.0 ]--
- 123
- 123
- 123
- 123
- 123
+ 130         }
+ 131         /*
+ 132         while(begin.fromNode.loc != end){
+ 133             return;
+ 135         */
--[ 2019.11.09.17.32.04.329.0 ]--
- 122
+ 130 
--[ 2019.11.09.17.32.04.666.0 ]--
- 121
+ 129         pfQueue.insert(begin);
--[ 2019.11.09.17.32.04.798.0 ]--
- 120
+ 128 
--[ 2019.11.09.17.32.04.890.0 ]--
- 119
+ 127         board = new Boolean[terrain.getN()][terrain.getN()];
--[ 2019.11.09.17.32.05.078.0 ]--
- 118
+ 126         PFNode begin = new PFNode(start, null);
--[ 2019.11.09.17.32.05.357.0 ]--
- 117
+ 125         MinPQ<PFNode> pfQueue = new MinPQ<>();
--[ 2019.11.09.17.32.06.588.0 ]--
- 116
+ 124         //Create a pointer that will initially begin at the start node. Keeps track of which node you're currently on.
--[ 2019.11.09.17.32.07.388.0 ]--
- 115
+ 123 
--[ 2019.11.09.17.32.08.835.0 ]--
+ 115 
- 124
--[ 2019.11.09.17.32.13.706.0 ]--
+ 116         
--[ 2019.11.09.17.32.15.606.0 ]--
+ 125         
--[ 2019.11.09.17.32.21.701.0 ]--
r 126         
--[ 2019.11.09.17.32.22.113.0 ]--
- 125
--[ 2019.11.09.17.32.25.253.0 ]--
r 129 \
--[ 2019.11.09.17.32.26.022.0 ]--
r 129 
--[ 2019.11.09.17.32.28.068.0 ]--
- 129
--[ 2019.11.09.17.32.29.103.0 ]--
+ 129         
--[ 2019.11.09.17.32.30.851.0 ]--
+ 129         
--[ 2019.11.09.17.32.37.438.0 ]--
- 133
- 133
- 133
- 133
- 133
r 133         
--[ 2019.11.09.17.32.37.717.0 ]--
- 132
--[ 2019.11.09.17.32.38.442.0 ]--
- 132
--[ 2019.11.09.17.35.46.840.0 ]--
+ 132         
--[ 2019.11.09.17.35.47.047.0 ]--
+ 132         
--[ 2019.11.09.17.35.48.292.0 ]--
- 132
--[ 2019.11.09.17.35.48.572.0 ]--
- 132
--[ 2019.11.09.17.35.49.322.0 ]--
+ 132         
--[ 2019.11.09.17.36.57.925.0 ]--
r 116 
r 125 
r 129 
r 130 
--[ 2019.11.09.17.44.00.153.0 ]--
r 132 
--[ 2019.11.09.17.47.11.877.0 ]--
r 130 \
--[ 2019.11.09.17.47.12.039.0 ]--
r 130 \\
--[ 2019.11.09.17.47.12.638.0 ]--
r 130 \
--[ 2019.11.09.17.47.12.797.0 ]--
r 130 
--[ 2019.11.09.17.47.12.938.0 ]--
- 129
r 129         
--[ 2019.11.09.17.47.26.556.0 ]--
- 131
r 131         
--[ 2019.11.09.17.47.26.787.0 ]--
+ 131         
--[ 2019.11.09.17.47.26.932.0 ]--
+ 131         
--[ 2019.11.09.17.48.30.437.0 ]--
r 133         w
--[ 2019.11.09.17.48.30.493.0 ]--
r 133         wh
--[ 2019.11.09.17.48.30.518.0 ]--
r 133         whi
--[ 2019.11.09.17.48.30.664.0 ]--
r 133         whil
--[ 2019.11.09.17.48.30.742.0 ]--
r 133         while
--[ 2019.11.09.17.48.31.193.0 ]--
r 133         while 
--[ 2019.11.09.17.48.31.530.0 ]--
r 133         while
--[ 2019.11.09.17.48.31.872.0 ]--
r 133         while()
--[ 2019.11.09.17.48.40.925.0 ]--
r 133         
--[ 2019.11.09.17.49.02.041.0 ]--
r 133         o
--[ 2019.11.09.17.49.02.519.0 ]--
r 133         
--[ 2019.11.09.17.49.02.865.0 ]--
r 133         p
--[ 2019.11.09.17.49.03.107.0 ]--
r 133         pf
--[ 2019.11.09.17.49.03.424.0 ]--
r 133         pfQ
--[ 2019.11.09.17.49.03.536.0 ]--
r 133         pfQu
--[ 2019.11.09.17.49.03.655.0 ]--
r 133         pfQue
--[ 2019.11.09.17.49.03.784.0 ]--
r 133         pfQue.
--[ 2019.11.09.17.49.04.189.0 ]--
r 133         pfQue
--[ 2019.11.09.17.49.05.114.0 ]--
r 133         pfQu
--[ 2019.11.09.17.49.05.465.0 ]--
r 133         pfQue
--[ 2019.11.09.17.49.05.631.0 ]--
r 133         pfQueu
--[ 2019.11.09.17.49.05.721.0 ]--
r 133         pfQueue
--[ 2019.11.09.17.49.05.940.0 ]--
r 133         pfQueue.
--[ 2019.11.09.17.49.06.038.0 ]--
r 133         pfQueue.g
--[ 2019.11.09.17.49.06.117.0 ]--
r 133         pfQueue.ge
--[ 2019.11.09.17.49.06.232.0 ]--
r 133         pfQueue.get
--[ 2019.11.09.17.49.06.599.0 ]--
r 133         pfQueue.get 
--[ 2019.11.09.17.49.06.623.0 ]--
r 133         pfQueue.get
--[ 2019.11.09.17.49.06.912.0 ]--
r 133         pfQueue.
--[ 2019.11.09.17.49.07.451.0 ]--
r 133         pfQueue
--[ 2019.11.09.17.49.07.723.0 ]--
r 133         pfQueue.
--[ 2019.11.09.17.49.12.674.0 ]--
r 133         pfQueue.min
--[ 2019.11.09.17.49.12.685.0 ]--
r 133         pfQueue.min()
--[ 2019.11.09.17.49.14.123.0 ]--
r 133         pfQueue.min();
--[ 2019.11.09.17.49.17.907.0 ]--
r 133         cpfQueue.min();
--[ 2019.11.09.17.49.17.994.0 ]--
r 133         copfQueue.min();
--[ 2019.11.09.17.49.18.075.0 ]--
r 133         conpfQueue.min();
--[ 2019.11.09.17.49.18.147.0 ]--
r 133         conspfQueue.min();
--[ 2019.11.09.17.49.18.231.0 ]--
r 133         consopfQueue.min();
--[ 2019.11.09.17.49.18.366.0 ]--
r 133         consolpfQueue.min();
--[ 2019.11.09.17.49.18.591.0 ]--
r 133         consopfQueue.min();
--[ 2019.11.09.17.49.18.690.0 ]--
r 133         conspfQueue.min();
--[ 2019.11.09.17.49.18.782.0 ]--
r 133         conpfQueue.min();
--[ 2019.11.09.17.49.18.882.0 ]--
r 133         copfQueue.min();
--[ 2019.11.09.17.49.19.019.0 ]--
r 133         cpfQueue.min();
--[ 2019.11.09.17.49.19.490.0 ]--
r 133         pfQueue.min();
--[ 2019.11.09.17.49.19.624.0 ]--
r 133         SpfQueue.min();
--[ 2019.11.09.17.49.19.767.0 ]--
r 133         StpfQueue.min();
--[ 2019.11.09.17.49.19.950.0 ]--
r 133         StdpfQueue.min();
--[ 2019.11.09.17.49.20.004.0 ]--
r 133         StdOutpfQueue.min();
--[ 2019.11.09.17.49.20.014.0 ]--
r 133         StdOut pfQueue.min();
--[ 2019.11.09.17.49.20.022.0 ]--
r 133         StdOutpfQueue.min();
--[ 2019.11.09.17.49.20.763.0 ]--
r 133         StdOut.pfQueue.min();
--[ 2019.11.09.17.49.20.963.0 ]--
r 133         StdOut.ppfQueue.min();
--[ 2019.11.09.17.49.21.255.0 ]--
r 133         StdOut.printlnpfQueue.min();
--[ 2019.11.09.17.49.21.299.0 ]--
r 133         StdOut.println()pfQueue.min();
--[ 2019.11.09.17.49.21.306.0 ]--
r 133         StdOut.println();pfQueue.min();
--[ 2019.11.09.17.49.25.018.0 ]--
r 133         StdOut.println();;
--[ 2019.11.09.17.49.25.811.0 ]--
r 133         StdOut.println();
--[ 2019.11.09.17.49.26.868.0 ]--
r 133         StdOut.println(pfQueue.min());
--[ 2019.11.09.17.49.28.890.0 ]--
r 129 
r 131 
r 132 
--[ 2019.11.09.17.49.30.609.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.17.49.39.055.0 ]--
r 133         StdOut.println(pfQueue.min() );
--[ 2019.11.09.17.49.42.254.0 ]--
r 133         StdOut.println(pfQueue.min());
--[ 2019.11.09.17.49.42.377.0 ]--
r 129         
r 131         
r 132         
r 133         StdOut.println();
--[ 2019.11.09.17.49.42.622.0 ]--
r 133         StdOut.println();;
--[ 2019.11.09.17.49.42.881.0 ]--
r 133         StdOut.println();pfQueue.min();
--[ 2019.11.09.17.49.43.141.0 ]--
r 133         StdOut.ppfQueue.min();
--[ 2019.11.09.17.49.43.362.0 ]--
r 133         StdOutpfQueue.min();
--[ 2019.11.09.17.49.43.508.0 ]--
r 133         StdpfQueue.min();
--[ 2019.11.09.17.49.43.665.0 ]--
r 133         pfQueue.min();
--[ 2019.11.09.17.49.43.798.0 ]--
r 133         consolpfQueue.min();
--[ 2019.11.09.17.49.43.923.0 ]--
r 133         pfQueue.min();
--[ 2019.11.09.17.49.44.333.0 ]--
r 133         pfQueue.min()
--[ 2019.11.09.17.49.44.456.0 ]--
r 133         pfQueue.
--[ 2019.11.09.17.49.44.594.0 ]--
r 133         pfQueue
--[ 2019.11.09.17.49.44.745.0 ]--
r 133         pfQueue.get 
--[ 2019.11.09.17.49.44.872.0 ]--
r 133         pfQu
--[ 2019.11.09.17.49.45.007.0 ]--
r 133         pfQue.
--[ 2019.11.09.17.49.45.092.0 ]--
r 133         
--[ 2019.11.09.17.49.45.243.0 ]--
r 133         o
--[ 2019.11.09.17.49.45.380.0 ]--
r 133         
--[ 2019.11.09.17.49.45.543.0 ]--
r 133         while()
--[ 2019.11.09.17.49.45.992.0 ]--
r 133         while
--[ 2019.11.09.17.49.46.206.0 ]--
r 133         while 
--[ 2019.11.09.17.49.46.345.0 ]--
r 133         
--[ 2019.11.09.17.49.46.542.0 ]--
- 131
--[ 2019.11.09.17.49.48.862.0 ]--
r 129 
r 131 
--[ 2019.11.09.17.49.50.515.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.17.50.12.240.0 ]--
r 129         
- 131
--[ 2019.11.09.17.50.12.731.0 ]--
+ 131 
r 132 
--[ 2019.11.09.17.50.12.770.0 ]--
+ 129 
r 130 
--[ 2019.11.09.17.50.12.801.0 ]--
r 130 \\
--[ 2019.11.09.17.50.12.825.0 ]--
r 130 
--[ 2019.11.09.17.50.12.859.0 ]--
r 116         
r 125         
r 129         
r 130         
r 132         
--[ 2019.11.09.17.50.12.893.0 ]--
- 132
--[ 2019.11.09.17.50.12.932.0 ]--
+ 132         
+ 133         
--[ 2019.11.09.17.50.12.958.0 ]--
- 132
--[ 2019.11.09.17.50.12.980.0 ]--
- 132
--[ 2019.11.09.17.50.13.030.0 ]--
+ 132 
+ 133         /*
+ 134         while(begin.fromNode.loc != end){
+ 135             return;
+ 136         }
+ 137         */
+ 138 
--[ 2019.11.09.17.50.13.087.0 ]--
- 129
--[ 2019.11.09.17.50.13.114.0 ]--
- 129
--[ 2019.11.09.17.50.13.140.0 ]--
+ 129 
--[ 2019.11.09.17.50.13.161.0 ]--
r 129 \
--[ 2019.11.09.17.50.13.233.0 ]--
r 129 
--[ 2019.11.09.17.50.14.276.0 ]--
+ 126         //Create a pointer that will initially begin at the start node. Keeps track of which node you're currently on.
--[ 2019.11.09.17.50.14.625.0 ]--
- 125
--[ 2019.11.09.17.50.15.357.0 ]--
- 116
--[ 2019.11.09.17.50.15.657.0 ]--
- 115
+ 123 
--[ 2019.11.09.17.50.15.772.0 ]--
+ 115 
- 124
--[ 2019.11.09.17.50.15.901.0 ]--
+ 116         //Create a pointer that will initially begin at the start node. Keeps track of which node you're currently on.
- 125
--[ 2019.11.09.17.50.16.269.0 ]--
+ 117         MinPQ<PFNode> pfQueue = new MinPQ<>();
- 126
--[ 2019.11.09.17.50.16.419.0 ]--
+ 118         PFNode begin = new PFNode(start, null);
- 127
--[ 2019.11.09.17.50.16.619.0 ]--
+ 119         board = new Boolean[terrain.getN()][terrain.getN()];
- 128
--[ 2019.11.09.17.50.17.075.0 ]--
+ 120 
- 129
--[ 2019.11.09.17.50.19.070.0 ]--
- 120
+ 128 
--[ 2019.11.09.17.50.24.172.0 ]--
+ 120 
- 129
--[ 2019.11.09.17.50.28.099.0 ]--
+ 129         
--[ 2019.11.09.17.50.31.563.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.17.50.39.127.0 ]--
- 120
--[ 2019.11.09.17.51.32.489.0 ]--
r 116         
--[ 2019.11.09.17.51.44.998.0 ]--
+ 117         board = new Boolean[terrain.getN()][terrain.getN()];
- 120
--[ 2019.11.09.17.51.45.095.0 ]--
+ 118         //Initialize the board and then print the current state of it
- 121
--[ 2019.11.09.17.51.45.189.0 ]--
+ 119         for(int i = 0; i < terrain.getN(); i++){
- 122
--[ 2019.11.09.17.51.45.202.0 ]--
r 120             MinPQ<PFNode> pfQueue = new MinPQ<>();
r 121             PFNode begin = new PFNode(start, null);
--[ 2019.11.09.17.51.45.406.0 ]--
+ 120             for(int j = 0; j < terrain.getN(); j++){
- 123
--[ 2019.11.09.17.51.45.419.0 ]--
r 121                 MinPQ<PFNode> pfQueue = new MinPQ<>();
r 122                 PFNode begin = new PFNode(start, null);
--[ 2019.11.09.17.51.45.442.0 ]--
+ 121                 board[i][j] = false;
- 124
--[ 2019.11.09.17.51.45.522.0 ]--
+ 122                 System.out.print(board[i][j] + " ");
- 125
--[ 2019.11.09.17.51.45.636.0 ]--
+ 123             }
- 126
--[ 2019.11.09.17.51.45.650.0 ]--
r 124             MinPQ<PFNode> pfQueue = new MinPQ<>();
r 125             PFNode begin = new PFNode(start, null);
--[ 2019.11.09.17.51.45.787.0 ]--
+ 124             System.out.println();
- 127
--[ 2019.11.09.17.51.45.857.0 ]--
+ 125         }
- 128
--[ 2019.11.09.17.51.45.868.0 ]--
r 126         MinPQ<PFNode> pfQueue = new MinPQ<>();
r 127         PFNode begin = new PFNode(start, null);
--[ 2019.11.09.17.51.46.221.0 ]--
+ 126         
- 129
--[ 2019.11.09.17.51.46.233.0 ]--
r 126 
--[ 2019.11.09.17.51.54.605.0 ]--
+ 127         
--[ 2019.11.09.17.51.55.957.0 ]--
+ 130         
--[ 2019.11.09.17.51.58.469.0 ]--
- 133
- 133
- 133
- 133
r 133         
--[ 2019.11.09.17.51.58.674.0 ]--
- 132
--[ 2019.11.09.17.52.00.722.0 ]--
+ 132         
--[ 2019.11.09.17.52.01.747.0 ]--
r 133         p
--[ 2019.11.09.17.52.01.804.0 ]--
r 133         pf
--[ 2019.11.09.17.52.02.872.0 ]--
r 133         p
--[ 2019.11.09.17.52.02.933.0 ]--
r 133         
--[ 2019.11.09.17.52.03.324.0 ]--
r 133         S
--[ 2019.11.09.17.52.03.513.0 ]--
r 133         Sy
--[ 2019.11.09.17.52.03.822.0 ]--
r 133         Sys
--[ 2019.11.09.17.52.06.356.0 ]--
r 133         Sy
--[ 2019.11.09.17.52.06.483.0 ]--
r 133         S
--[ 2019.11.09.17.52.06.731.0 ]--
r 133         
--[ 2019.11.09.17.52.06.961.0 ]--
r 133         S
--[ 2019.11.09.17.52.07.200.0 ]--
r 133         St
--[ 2019.11.09.17.52.07.483.0 ]--
r 133         String 
--[ 2019.11.09.17.52.08.066.0 ]--
r 133         String
--[ 2019.11.09.17.52.08.165.0 ]--
r 133         Strin
--[ 2019.11.09.17.52.08.256.0 ]--
r 133         Stri
--[ 2019.11.09.17.52.08.405.0 ]--
r 133         Str
--[ 2019.11.09.17.52.08.499.0 ]--
r 133         St
--[ 2019.11.09.17.52.08.605.0 ]--
r 133         S
--[ 2019.11.09.17.52.08.762.0 ]--
r 133         
--[ 2019.11.09.17.52.08.974.0 ]--
r 133         S
--[ 2019.11.09.17.52.09.107.0 ]--
r 133         St
--[ 2019.11.09.17.52.09.266.0 ]--
r 133         Std
--[ 2019.11.09.17.52.09.479.0 ]--
r 133         Stdo
--[ 2019.11.09.17.52.09.802.0 ]--
r 133         Std
--[ 2019.11.09.17.52.09.958.0 ]--
r 133         StdO
--[ 2019.11.09.17.52.10.134.0 ]--
r 133         StdOut
--[ 2019.11.09.17.52.10.273.0 ]--
r 133         StdOut.
--[ 2019.11.09.17.52.10.494.0 ]--
r 133         StdOut.p
--[ 2019.11.09.17.52.10.701.0 ]--
r 133         StdOut.println
--[ 2019.11.09.17.52.10.722.0 ]--
r 133         StdOut.println()
--[ 2019.11.09.17.52.10.763.0 ]--
r 133         StdOut.println();
--[ 2019.11.09.17.52.11.868.0 ]--
r 133         StdOut.println("");
--[ 2019.11.09.17.52.12.576.0 ]--
r 133         StdOut.println();
--[ 2019.11.09.17.52.16.128.0 ]--
r 133         StdOut.println(b);
--[ 2019.11.09.17.52.16.229.0 ]--
r 133         StdOut.println(be);
--[ 2019.11.09.17.52.16.332.0 ]--
r 133         StdOut.println(beg);
--[ 2019.11.09.17.52.16.382.0 ]--
r 133         StdOut.println(begi);
--[ 2019.11.09.17.52.16.447.0 ]--
r 133         StdOut.println(begin);
--[ 2019.11.09.17.52.16.638.0 ]--
r 133         StdOut.println(begin.);
--[ 2019.11.09.17.52.16.919.0 ]--
r 133         StdOut.println(begin. );
--[ 2019.11.09.17.52.16.960.0 ]--
r 133         StdOut.println(begin.);
--[ 2019.11.09.17.52.17.101.0 ]--
r 133         StdOut.println(begin);
--[ 2019.11.09.17.52.17.311.0 ]--
r 133         StdOut.println(begi);
--[ 2019.11.09.17.52.17.408.0 ]--
r 133         StdOut.println(beg);
--[ 2019.11.09.17.52.17.536.0 ]--
r 133         StdOut.println(be);
--[ 2019.11.09.17.52.17.880.0 ]--
r 133         StdOut.println(b);
--[ 2019.11.09.17.52.18.024.0 ]--
r 133         StdOut.println();
--[ 2019.11.09.17.52.18.180.0 ]--
r 133         StdOut.println(p);
--[ 2019.11.09.17.52.18.270.0 ]--
r 133         StdOut.println(pf);
--[ 2019.11.09.17.52.18.905.0 ]--
r 133         StdOut.println(pfQueue);
--[ 2019.11.09.17.52.19.032.0 ]--
r 133         StdOut.println(pfQueue.);
--[ 2019.11.09.17.52.19.594.0 ]--
r 133         StdOut.println(pfQueue.m);
--[ 2019.11.09.17.52.19.996.0 ]--
r 133         StdOut.println(pfQueue.mi);
--[ 2019.11.09.17.52.20.036.0 ]--
r 133         StdOut.println(pfQueue.min);
--[ 2019.11.09.17.52.20.418.0 ]--
r 133         StdOut.println(pfQueue.min());
--[ 2019.11.09.17.52.27.200.0 ]--
+ 118         
--[ 2019.11.09.17.52.30.188.0 ]--
- 118
--[ 2019.11.09.17.52.33.400.0 ]--
r 118         
--[ 2019.11.09.17.52.33.953.0 ]--
- 118
--[ 2019.11.09.17.52.34.921.0 ]--
+ 116         
--[ 2019.11.09.17.52.35.291.0 ]--
r 117         //Initialize the board and then print the current state of it
--[ 2019.11.09.17.52.35.300.0 ]--
r 116 
--[ 2019.11.09.17.52.37.786.0 ]--
r 127 
r 130 
r 132 
--[ 2019.11.09.17.52.39.787.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.17.52.49.942.0 ]--
r 133         StdOut.println(pfQueue.min().);
--[ 2019.11.09.17.52.50.599.0 ]--
r 133         StdOut.println(pfQueue.min().l);
--[ 2019.11.09.17.52.50.825.0 ]--
r 133         StdOut.println(pfQueue.min().lc);
--[ 2019.11.09.17.52.51.669.0 ]--
r 133         StdOut.println(pfQueue.min().l);
--[ 2019.11.09.17.52.51.774.0 ]--
r 133         StdOut.println(pfQueue.min().lo);
--[ 2019.11.09.17.52.51.862.0 ]--
r 133         StdOut.println(pfQueue.min().loc);
--[ 2019.11.09.17.52.56.599.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.17.53.03.464.0 ]--
+ 134         
--[ 2019.11.09.17.53.05.053.0 ]--
+ 134         
--[ 2019.11.09.17.53.05.453.0 ]--
r 135         p
--[ 2019.11.09.17.53.05.524.0 ]--
r 135         pf
--[ 2019.11.09.17.53.05.813.0 ]--
r 135         pfQ
--[ 2019.11.09.17.53.06.062.0 ]--
r 135         pfQueue
--[ 2019.11.09.17.53.06.236.0 ]--
r 135         pfQueue.
--[ 2019.11.09.17.53.06.863.0 ]--
r 135         pfQueue.d
--[ 2019.11.09.17.53.06.921.0 ]--
r 135         pfQueue.de
--[ 2019.11.09.17.53.06.999.0 ]--
r 135         pfQueue.del
--[ 2019.11.09.17.53.07.660.0 ]--
r 135         pfQueue.delM
--[ 2019.11.09.17.53.07.774.0 ]--
r 135         pfQueue.delMi
--[ 2019.11.09.17.53.07.799.0 ]--
r 135         pfQueue.delMin
--[ 2019.11.09.17.53.08.040.0 ]--
r 135         pfQueue.delMin()
--[ 2019.11.09.17.53.08.375.0 ]--
r 135         pfQueue.delMin() 
--[ 2019.11.09.17.53.08.442.0 ]--
r 135         pfQueue.delMin()
--[ 2019.11.09.17.53.09.591.0 ]--
+ 136         
--[ 2019.11.09.17.53.09.609.0 ]--
r 136                 
--[ 2019.11.09.17.53.10.345.0 ]--
- 136
--[ 2019.11.09.17.53.10.793.0 ]--
r 135         pfQueue.delMin();
--[ 2019.11.09.17.53.11.029.0 ]--
+ 136         
--[ 2019.11.09.17.53.11.304.0 ]--
r 136         p
--[ 2019.11.09.17.53.11.457.0 ]--
r 136         pf
--[ 2019.11.09.17.53.12.045.0 ]--
r 136         pfQueue
--[ 2019.11.09.17.53.12.614.0 ]--
r 136         pfQueu
--[ 2019.11.09.17.53.12.714.0 ]--
r 136         pfQue
--[ 2019.11.09.17.53.12.830.0 ]--
r 136         pfQu
--[ 2019.11.09.17.53.12.970.0 ]--
r 136         pfQ
--[ 2019.11.09.17.53.13.048.0 ]--
r 136         pf
--[ 2019.11.09.17.53.13.182.0 ]--
r 136         p
--[ 2019.11.09.17.53.13.323.0 ]--
r 136         
--[ 2019.11.09.17.53.13.436.0 ]--
r 136         f
--[ 2019.11.09.17.53.13.554.0 ]--
r 136         fo
--[ 2019.11.09.17.53.13.601.0 ]--
r 136         for
--[ 2019.11.09.17.53.14.010.0 ]--
r 136         for()
--[ 2019.11.09.17.53.14.238.0 ]--
r 136         for(i)
--[ 2019.11.09.17.53.14.566.0 ]--
r 136         for(i )
--[ 2019.11.09.17.53.14.609.0 ]--
r 136         for(i)
--[ 2019.11.09.17.53.18.248.0 ]--
- 135
r 135         
--[ 2019.11.09.17.53.18.561.0 ]--
- 134
--[ 2019.11.09.17.53.20.197.0 ]--
+ 134         
--[ 2019.11.09.17.53.21.193.0 ]--
r 135         f
--[ 2019.11.09.17.53.21.266.0 ]--
r 135         fo
--[ 2019.11.09.17.53.21.334.0 ]--
r 135         for
--[ 2019.11.09.17.53.21.542.0 ]--
r 135         for()
--[ 2019.11.09.17.53.21.665.0 ]--
r 135         for( )
--[ 2019.11.09.17.53.21.763.0 ]--
r 135         for()
--[ 2019.11.09.17.53.21.950.0 ]--
r 135         for(i)
--[ 2019.11.09.17.53.24.163.0 ]--
r 135         for(in)
--[ 2019.11.09.17.53.24.209.0 ]--
r 135         for(int)
--[ 2019.11.09.17.53.24.274.0 ]--
r 135         for(int )
--[ 2019.11.09.17.53.24.342.0 ]--
r 135         for(int i)
--[ 2019.11.09.17.53.24.427.0 ]--
r 135         for(int i )
--[ 2019.11.09.17.53.25.300.0 ]--
r 135         for(int i =)
--[ 2019.11.09.17.53.25.376.0 ]--
r 135         for(int i = )
--[ 2019.11.09.17.53.25.464.0 ]--
r 135         for(int i = 0)
--[ 2019.11.09.17.53.28.865.0 ]--
r 135         for(int i = 0;)
--[ 2019.11.09.17.53.28.930.0 ]--
r 135         for(int i = 0; )
--[ 2019.11.09.17.53.39.832.0 ]--
r 135         for(int i = 0; i)
--[ 2019.11.09.17.53.39.927.0 ]--
r 135         for(int i = 0; i )
--[ 2019.11.09.17.53.40.034.0 ]--
r 135         for(int i = 0; i <)
--[ 2019.11.09.17.53.40.127.0 ]--
r 135         for(int i = 0; i < )
--[ 2019.11.09.17.53.41.979.0 ]--
r 135         for(int i = 0; i < b)
--[ 2019.11.09.17.53.42.033.0 ]--
r 135         for(int i = 0; i < be)
--[ 2019.11.09.17.53.42.164.0 ]--
r 135         for(int i = 0; i < beg)
--[ 2019.11.09.17.53.42.225.0 ]--
r 135         for(int i = 0; i < begi)
--[ 2019.11.09.17.53.42.279.0 ]--
r 135         for(int i = 0; i < begin)
--[ 2019.11.09.17.53.42.462.0 ]--
r 135         for(int i = 0; i < begin.)
--[ 2019.11.09.17.53.43.257.0 ]--
r 135         for(int i = 0; i < begin.n)
--[ 2019.11.09.17.53.43.374.0 ]--
r 135         for(int i = 0; i < begin.ne)
--[ 2019.11.09.17.53.43.457.0 ]--
r 135         for(int i = 0; i < begin.nei)
--[ 2019.11.09.17.53.43.788.0 ]--
r 135         for(int i = 0; i < begin.neighbors)
--[ 2019.11.09.17.53.43.797.0 ]--
r 135         for(int i = 0; i < begin.neighbors())
--[ 2019.11.09.17.53.43.957.0 ]--
r 135         for(int i = 0; i < begin.neighbors().)
--[ 2019.11.09.17.53.44.850.0 ]--
r 135         for(int i = 0; i < begin.neighbors().l)
--[ 2019.11.09.17.53.44.885.0 ]--
r 135         for(int i = 0; i < begin.neighbors().le)
--[ 2019.11.09.17.53.44.964.0 ]--
r 135         for(int i = 0; i < begin.neighbors().len)
--[ 2019.11.09.17.53.45.367.0 ]--
r 135         for(int i = 0; i < begin.neighbors().le)
--[ 2019.11.09.17.53.45.466.0 ]--
r 135         for(int i = 0; i < begin.neighbors().l)
--[ 2019.11.09.17.53.45.572.0 ]--
r 135         for(int i = 0; i < begin.neighbors().)
--[ 2019.11.09.17.53.46.184.0 ]--
r 135         for(int i = 0; i < begin.neighbors(). )
--[ 2019.11.09.17.53.46.247.0 ]--
r 135         for(int i = 0; i < begin.neighbors().)
--[ 2019.11.09.17.53.46.442.0 ]--
r 135         for(int i = 0; i < begin.neighbors())
--[ 2019.11.09.17.53.46.590.0 ]--
r 135         for(int i = 0; i < begin.neighbors().)
--[ 2019.11.09.17.53.46.740.0 ]--
r 135         for(int i = 0; i < begin.neighbors().s)
--[ 2019.11.09.17.53.46.882.0 ]--
r 135         for(int i = 0; i < begin.neighbors().si)
--[ 2019.11.09.17.53.47.361.0 ]--
r 135         for(int i = 0; i < begin.neighbors().s)
--[ 2019.11.09.17.53.47.472.0 ]--
r 135         for(int i = 0; i < begin.neighbors().)
--[ 2019.11.09.17.53.47.807.0 ]--
r 135         for(int i = 0; i < begin.neighbors())
--[ 2019.11.09.17.53.49.056.0 ]--
r 135         for(int i = 0; i < begin.neighbors() )
--[ 2019.11.09.17.53.49.125.0 ]--
r 135         for(int i = 0; i < begin.neighbors())
--[ 2019.11.09.17.53.53.874.0 ]--
r 135         for(int i = 0; i < begin.neighbors().)
--[ 2019.11.09.17.54.00.269.0 ]--
r 135         for(int i = 0; i < begin.neighbors())
--[ 2019.11.09.17.54.03.568.0 ]--
r 135         
--[ 2019.11.09.17.54.04.356.0 ]--
- 134
--[ 2019.11.09.17.54.04.748.0 ]--
- 134
--[ 2019.11.09.17.54.07.469.0 ]--
r 133         
--[ 2019.11.09.17.54.07.696.0 ]--
r 133         S
--[ 2019.11.09.17.54.07.823.0 ]--
r 133         St
--[ 2019.11.09.17.54.07.982.0 ]--
r 133         Std
--[ 2019.11.09.17.54.08.215.0 ]--
r 133         StdO
--[ 2019.11.09.17.54.08.376.0 ]--
r 133         StdOut
--[ 2019.11.09.17.54.08.530.0 ]--
r 133         StdOut.
--[ 2019.11.09.17.54.09.201.0 ]--
r 133         StdOut.println
--[ 2019.11.09.17.54.09.225.0 ]--
r 133         StdOut.println()
--[ 2019.11.09.17.54.09.237.0 ]--
r 133         StdOut.println();
--[ 2019.11.09.17.54.14.733.0 ]--
r 133         StdOut.println( );
--[ 2019.11.09.17.54.14.784.0 ]--
r 133         StdOut.println();
--[ 2019.11.09.17.54.15.432.0 ]--
r 133         StdOut.println(b);
--[ 2019.11.09.17.54.15.551.0 ]--
r 133         StdOut.println(be);
--[ 2019.11.09.17.54.16.185.0 ]--
r 133         StdOut.println(begin);
--[ 2019.11.09.17.54.16.330.0 ]--
r 133         StdOut.println(begin.);
--[ 2019.11.09.17.54.17.243.0 ]--
r 133         StdOut.println(begin.n);
--[ 2019.11.09.17.54.17.314.0 ]--
r 133         StdOut.println(begin.ne);
--[ 2019.11.09.17.54.17.791.0 ]--
r 133         StdOut.println(begin.neighbors);
--[ 2019.11.09.17.54.17.798.0 ]--
r 133         StdOut.println(begin.neighbors());
--[ 2019.11.09.17.54.23.255.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.17.54.40.149.0 ]--
r 133         
--[ 2019.11.09.17.54.40.380.0 ]--
- 132
--[ 2019.11.09.17.54.46.671.0 ]--
+ 132         
--[ 2019.11.09.18.04.29.305.0 ]--
r 133         w
--[ 2019.11.09.18.04.29.367.0 ]--
r 133         wh
--[ 2019.11.09.18.04.29.404.0 ]--
r 133         whi
--[ 2019.11.09.18.04.29.560.0 ]--
r 133         whil
--[ 2019.11.09.18.04.29.630.0 ]--
r 133         while
--[ 2019.11.09.18.04.29.716.0 ]--
r 133         while 
--[ 2019.11.09.18.04.29.890.0 ]--
r 133         while b
--[ 2019.11.09.18.04.29.985.0 ]--
r 133         while be
--[ 2019.11.09.18.04.30.148.0 ]--
r 133         while beg
--[ 2019.11.09.18.04.30.232.0 ]--
r 133         while begi
--[ 2019.11.09.18.04.30.278.0 ]--
r 133         while begin
--[ 2019.11.09.18.04.30.853.0 ]--
r 133         while 
--[ 2019.11.09.18.04.31.115.0 ]--
r 133         while
--[ 2019.11.09.18.04.31.381.0 ]--
r 133         while()
--[ 2019.11.09.18.04.31.512.0 ]--
r 133         while(b)
--[ 2019.11.09.18.04.31.617.0 ]--
r 133         while(be)
--[ 2019.11.09.18.04.31.798.0 ]--
r 133         while(beg)
--[ 2019.11.09.18.04.32.005.0 ]--
r 133         while(begi)
--[ 2019.11.09.18.04.32.047.0 ]--
r 133         while(begin)
--[ 2019.11.09.18.04.32.299.0 ]--
r 133         while(begin.)
--[ 2019.11.09.18.04.32.526.0 ]--
r 133         while(begin.l)
--[ 2019.11.09.18.04.32.698.0 ]--
r 133         while(begin.lo)
--[ 2019.11.09.18.04.32.765.0 ]--
r 133         while(begin.loc)
--[ 2019.11.09.18.04.32.907.0 ]--
r 133         while(begin.loca)
--[ 2019.11.09.18.04.32.984.0 ]--
r 133         while(begin.locat)
--[ 2019.11.09.18.04.33.381.0 ]--
r 133         while(begin.loca)
--[ 2019.11.09.18.04.33.620.0 ]--
r 133         while(begin.loc)
--[ 2019.11.09.18.04.33.757.0 ]--
r 133         while(begin.lo)
--[ 2019.11.09.18.04.33.865.0 ]--
r 133         while(begin.l)
--[ 2019.11.09.18.04.34.293.0 ]--
r 133         while(begin.)
--[ 2019.11.09.18.04.34.914.0 ]--
r 133         while(begin. )
--[ 2019.11.09.18.04.34.982.0 ]--
r 133         while(begin.)
--[ 2019.11.09.18.04.35.144.0 ]--
r 133         while(begin.l)
--[ 2019.11.09.18.04.35.304.0 ]--
r 133         while(begin.lo)
--[ 2019.11.09.18.04.35.441.0 ]--
r 133         while(begin.loc)
--[ 2019.11.09.18.04.37.451.0 ]--
r 133         while(begin.loc )
--[ 2019.11.09.18.04.38.445.0 ]--
r 133         while(begin.loc !)
--[ 2019.11.09.18.04.38.635.0 ]--
r 133         while(begin.loc !=)
--[ 2019.11.09.18.04.38.781.0 ]--
r 133         while(begin.loc != )
--[ 2019.11.09.18.04.40.314.0 ]--
r 133         while(begin.loc != e)
--[ 2019.11.09.18.04.40.416.0 ]--
r 133         while(begin.loc != en)
--[ 2019.11.09.18.04.40.483.0 ]--
r 133         while(begin.loc != end)
--[ 2019.11.09.18.04.40.631.0 ]--
r 133         while(begin.loc != end.)
--[ 2019.11.09.18.04.41.130.0 ]--
r 133         while(begin.loc != end.l)
--[ 2019.11.09.18.04.41.259.0 ]--
r 133         while(begin.loc != end.lo)
--[ 2019.11.09.18.04.41.725.0 ]--
r 133         while(begin.loc != end.loc)
--[ 2019.11.09.18.04.42.120.0 ]--
r 133         while(begin.loc != end.loc )
--[ 2019.11.09.18.04.42.198.0 ]--
r 133         while(begin.loc != end.loc)
--[ 2019.11.09.18.04.42.399.0 ]--
r 133         while(begin.loc != end.)
--[ 2019.11.09.18.04.42.788.0 ]--
r 133         while(begin.loc != end)
--[ 2019.11.09.18.04.43.164.0 ]--
r 133         while(begin.loc != end )
--[ 2019.11.09.18.04.43.206.0 ]--
r 133         while(begin.loc != end)
--[ 2019.11.09.18.04.44.468.0 ]--
r 133         while(begin.loc != end){
--[ 2019.11.09.18.04.44.952.0 ]--
+ 134 
+ 135 }
--[ 2019.11.09.18.04.44.964.0 ]--
r 135         }
--[ 2019.11.09.18.04.44.977.0 ]--
r 134             
--[ 2019.11.09.18.04.47.035.0 ]--
r 134             p
--[ 2019.11.09.18.04.47.126.0 ]--
r 134             pf
--[ 2019.11.09.18.04.47.529.0 ]--
r 134             pfQ
--[ 2019.11.09.18.04.48.977.0 ]--
r 132 
--[ 2019.11.09.18.04.57.017.0 ]--
- 133
- 133
- 133
r 133         while
--[ 2019.11.09.18.04.57.261.0 ]--
r 133         whil
--[ 2019.11.09.18.04.57.400.0 ]--
r 133         whi
--[ 2019.11.09.18.04.57.553.0 ]--
r 133         wh
--[ 2019.11.09.18.04.57.662.0 ]--
r 133         w
--[ 2019.11.09.18.04.57.787.0 ]--
r 133         
--[ 2019.11.09.18.20.56.375.0 ]--
r 133         f
--[ 2019.11.09.18.20.56.451.0 ]--
r 133         fo
--[ 2019.11.09.18.20.56.516.0 ]--
r 133         for
--[ 2019.11.09.18.20.57.051.0 ]--
r 133         for()
--[ 2019.11.09.18.20.57.642.0 ]--
r 133         for( )
--[ 2019.11.09.18.20.57.717.0 ]--
r 133         for()
--[ 2019.11.09.18.20.59.732.0 ]--
r 133         for(P)
--[ 2019.11.09.18.20.59.818.0 ]--
r 133         for(PF)
--[ 2019.11.09.18.20.59.955.0 ]--
r 133         for(PFN)
--[ 2019.11.09.18.21.00.148.0 ]--
r 133         for(PFNo)
--[ 2019.11.09.18.21.00.208.0 ]--
r 133         for(PFNod)
--[ 2019.11.09.18.21.00.298.0 ]--
r 133         for(PFNode)
--[ 2019.11.09.18.21.02.459.0 ]--
r 133         for(PFNode )
--[ 2019.11.09.18.21.04.114.0 ]--
r 133         for(PFNode p)
--[ 2019.11.09.18.21.05.888.0 ]--
r 133         for(PFNode p )
--[ 2019.11.09.18.21.06.033.0 ]--
r 133         for(PFNode p :)
--[ 2019.11.09.18.21.06.104.0 ]--
r 133         for(PFNode p : )
--[ 2019.11.09.18.21.13.704.0 ]--
r 133         for(PFNode p : P)
--[ 2019.11.09.18.21.13.810.0 ]--
r 133         for(PFNode p : PF)
--[ 2019.11.09.18.21.13.952.0 ]--
r 133         for(PFNode p : PFN)
--[ 2019.11.09.18.21.14.100.0 ]--
r 133         for(PFNode p : PFNo)
--[ 2019.11.09.18.21.14.183.0 ]--
r 133         for(PFNode p : PFNod)
--[ 2019.11.09.18.21.14.229.0 ]--
r 133         for(PFNode p : PFNode)
--[ 2019.11.09.18.21.14.311.0 ]--
r 133         for(PFNode p : PFNode.)
--[ 2019.11.09.18.21.16.292.0 ]--
r 133         for(PFNode p : PFNode.g)
--[ 2019.11.09.18.21.16.835.0 ]--
r 133         for(PFNode p : PFNode.g )
--[ 2019.11.09.18.21.16.930.0 ]--
r 133         for(PFNode p : PFNode.g)
--[ 2019.11.09.18.21.17.096.0 ]--
r 133         for(PFNode p : PFNode.)
--[ 2019.11.09.18.21.17.354.0 ]--
r 133         for(PFNode p : PFNode)
--[ 2019.11.09.18.21.17.858.0 ]--
r 133         for(PFNode p : )
--[ 2019.11.09.18.21.18.242.0 ]--
r 133         for(PFNode p : b)
--[ 2019.11.09.18.21.18.286.0 ]--
r 133         for(PFNode p : be)
--[ 2019.11.09.18.21.18.408.0 ]--
r 133         for(PFNode p : beg)
--[ 2019.11.09.18.21.18.488.0 ]--
r 133         for(PFNode p : begi)
--[ 2019.11.09.18.21.18.534.0 ]--
r 133         for(PFNode p : begin)
--[ 2019.11.09.18.21.19.130.0 ]--
r 133         for(PFNode p : begin.)
--[ 2019.11.09.18.21.19.387.0 ]--
r 133         for(PFNode p : begin.n)
--[ 2019.11.09.18.21.19.442.0 ]--
r 133         for(PFNode p : begin.ne)
--[ 2019.11.09.18.21.19.969.0 ]--
r 133         for(PFNode p : begin.neighbors)
--[ 2019.11.09.18.21.19.981.0 ]--
r 133         for(PFNode p : begin.neighbors())
--[ 2019.11.09.18.21.21.310.0 ]--
r 133         for(PFNode p : begin.neighbors()){
--[ 2019.11.09.18.21.21.478.0 ]--
+ 134 
+ 135 }
--[ 2019.11.09.18.21.21.496.0 ]--
r 135         }
--[ 2019.11.09.18.21.21.512.0 ]--
r 134             
--[ 2019.11.09.18.21.23.902.0 ]--
r 134             p
--[ 2019.11.09.18.21.23.993.0 ]--
r 134             pf
--[ 2019.11.09.18.21.25.092.0 ]--
r 134             pfQueue
--[ 2019.11.09.18.21.25.282.0 ]--
r 134             pfQueue.
--[ 2019.11.09.18.21.26.245.0 ]--
r 134             pfQueue.p
--[ 2019.11.09.18.21.26.590.0 ]--
r 134             pfQueue.
--[ 2019.11.09.18.21.27.827.0 ]--
r 134             pfQueue.m
--[ 2019.11.09.18.21.27.995.0 ]--
r 134             pfQueue.mi
--[ 2019.11.09.18.21.28.054.0 ]--
r 134             pfQueue.min
--[ 2019.11.09.18.21.30.057.0 ]--
r 134             pfQueue.mi
--[ 2019.11.09.18.21.30.191.0 ]--
r 134             pfQueue.m
--[ 2019.11.09.18.21.31.166.0 ]--
r 134             pfQueue.
--[ 2019.11.09.18.21.45.627.0 ]--
r 134             pfQueue.i
--[ 2019.11.09.18.21.45.658.0 ]--
r 134             pfQueue.in
--[ 2019.11.09.18.21.45.741.0 ]--
r 134             pfQueue.int
--[ 2019.11.09.18.21.46.481.0 ]--
r 134             pfQueue.in
--[ 2019.11.09.18.21.46.706.0 ]--
r 134             pfQueue.ins
--[ 2019.11.09.18.21.47.581.0 ]--
r 134             pfQueue.insert
--[ 2019.11.09.18.21.47.593.0 ]--
r 134             pfQueue.insert()
--[ 2019.11.09.18.21.47.598.0 ]--
r 134             pfQueue.insert();
--[ 2019.11.09.18.22.09.158.0 ]--
r 134             pfQueue.insert(p);
--[ 2019.11.09.18.22.12.129.0 ]--
r 135         }\
--[ 2019.11.09.18.22.12.144.0 ]--
+ 136         
--[ 2019.11.09.18.22.12.745.0 ]--
- 136
--[ 2019.11.09.18.22.12.827.0 ]--
r 135         }
--[ 2019.11.09.18.22.13.141.0 ]--
+ 136         
--[ 2019.11.09.18.22.13.528.0 ]--
+ 136         
--[ 2019.11.09.18.22.14.528.0 ]--
- 136
--[ 2019.11.09.18.22.15.446.0 ]--
r 136          
--[ 2019.11.09.18.22.15.484.0 ]--
r 136         
--[ 2019.11.09.18.22.22.700.0 ]--
+ 134             
--[ 2019.11.09.18.22.23.450.0 ]--
r 134             S
--[ 2019.11.09.18.22.23.576.0 ]--
r 134             Sy
--[ 2019.11.09.18.22.23.698.0 ]--
r 134             Sys
--[ 2019.11.09.18.22.23.960.0 ]--
r 134             Syst
--[ 2019.11.09.18.22.24.258.0 ]--
r 134             System
--[ 2019.11.09.18.22.24.510.0 ]--
r 134             Syste
--[ 2019.11.09.18.22.24.587.0 ]--
r 134             Syst
--[ 2019.11.09.18.22.24.888.0 ]--
r 134             Sys
--[ 2019.11.09.18.22.24.974.0 ]--
r 134             Sy
--[ 2019.11.09.18.22.25.097.0 ]--
r 134             S
--[ 2019.11.09.18.22.25.749.0 ]--
r 134             
--[ 2019.11.09.18.22.25.911.0 ]--
r 134             S
--[ 2019.11.09.18.22.26.174.0 ]--
r 134             St
--[ 2019.11.09.18.22.26.342.0 ]--
r 134             Std
--[ 2019.11.09.18.22.26.857.0 ]--
r 134             Stdo
--[ 2019.11.09.18.22.27.601.0 ]--
r 134             StdOut
--[ 2019.11.09.18.22.27.731.0 ]--
r 134             StdOut.
--[ 2019.11.09.18.22.27.965.0 ]--
r 134             StdOut.p
--[ 2019.11.09.18.22.28.166.0 ]--
r 134             StdOut.println
--[ 2019.11.09.18.22.28.186.0 ]--
r 134             StdOut.println()
--[ 2019.11.09.18.22.28.195.0 ]--
r 134             StdOut.println();
--[ 2019.11.09.18.22.28.823.0 ]--
r 134             StdOut.println(p);
--[ 2019.11.09.18.22.31.525.0 ]--
r 137 
--[ 2019.11.09.18.22.33.176.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.18.22.39.152.0 ]--
r 134             StdOut.println(p.);
--[ 2019.11.09.18.22.42.935.0 ]--
r 134             StdOut.println(p.l);
--[ 2019.11.09.18.22.43.075.0 ]--
r 134             StdOut.println(p.lo);
--[ 2019.11.09.18.22.43.136.0 ]--
r 134             StdOut.println(p.loc);
--[ 2019.11.09.18.22.47.833.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.18.22.57.856.0 ]--
r 134             
--[ 2019.11.09.18.22.58.128.0 ]--
- 134
--[ 2019.11.09.18.58.33.601.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.19.05.40.758.0 ]--
r 131         pfQueue.insert(begin); 
--[ 2019.11.09.19.05.40.805.0 ]--
r 131         pfQueue.insert(begin);
--[ 2019.11.09.19.05.46.200.0 ]--
+ 136         
--[ 2019.11.09.19.05.46.378.0 ]--
+ 136         
--[ 2019.11.09.19.05.47.188.0 ]--
- 136
--[ 2019.11.09.19.05.47.735.0 ]--
r 136         b
--[ 2019.11.09.19.05.47.851.0 ]--
r 136         bpa
--[ 2019.11.09.19.05.47.979.0 ]--
r 136         bpar
--[ 2019.11.09.19.05.48.150.0 ]--
r 136         bpard
--[ 2019.11.09.19.05.48.303.0 ]--
r 136         bpar
--[ 2019.11.09.19.05.48.416.0 ]--
r 136         bpa
--[ 2019.11.09.19.05.48.506.0 ]--
r 136         bp
--[ 2019.11.09.19.05.48.619.0 ]--
r 136         b
--[ 2019.11.09.19.05.48.736.0 ]--
r 136         bo
--[ 2019.11.09.19.05.48.821.0 ]--
r 136         boa
--[ 2019.11.09.19.05.48.899.0 ]--
r 136         boar
--[ 2019.11.09.19.05.49.052.0 ]--
r 136         board
--[ 2019.11.09.19.05.49.167.0 ]--
r 136         board[]
--[ 2019.11.09.19.05.49.612.0 ]--
r 136         board[ ]
--[ 2019.11.09.19.05.49.619.0 ]--
r 136         board[]
--[ 2019.11.09.19.05.50.977.0 ]--
r 136         board[b]
--[ 2019.11.09.19.05.51.087.0 ]--
r 136         board[be]
--[ 2019.11.09.19.05.51.234.0 ]--
r 136         board[bei]
--[ 2019.11.09.19.05.51.273.0 ]--
r 136         board[bein]
--[ 2019.11.09.19.05.51.356.0 ]--
r 136         board[being]
--[ 2019.11.09.19.05.51.946.0 ]--
r 136         board[being ]
--[ 2019.11.09.19.05.52.008.0 ]--
r 136         board[being]
--[ 2019.11.09.19.05.52.153.0 ]--
r 136         board[bein]
--[ 2019.11.09.19.05.52.274.0 ]--
r 136         board[bei]
--[ 2019.11.09.19.05.52.848.0 ]--
r 136         board[beig]
--[ 2019.11.09.19.05.52.966.0 ]--
r 136         board[beigo]
--[ 2019.11.09.19.05.53.436.0 ]--
r 136         board[beig]
--[ 2019.11.09.19.05.54.216.0 ]--
r 136         board[bei]
--[ 2019.11.09.19.05.54.334.0 ]--
r 136         board[be]
--[ 2019.11.09.19.05.54.447.0 ]--
r 136         board[beg]
--[ 2019.11.09.19.05.54.547.0 ]--
r 136         board[begi]
--[ 2019.11.09.19.05.54.618.0 ]--
r 136         board[begin]
--[ 2019.11.09.19.05.54.964.0 ]--
r 136         board[begin.]
--[ 2019.11.09.19.05.55.506.0 ]--
r 136         board[begin.g]
--[ 2019.11.09.19.05.55.550.0 ]--
r 136         board[begin.ge]
--[ 2019.11.09.19.05.55.664.0 ]--
r 136         board[begin.get]
--[ 2019.11.09.19.05.56.555.0 ]--
r 136         board[begin.getJ]
--[ 2019.11.09.19.05.56.889.0 ]--
r 136         board[begin.getJ()]
--[ 2019.11.09.19.05.57.343.0 ]--
r 136         board[begin.getJ(]
--[ 2019.11.09.19.05.57.791.0 ]--
r 136         board[begin.getJ]
--[ 2019.11.09.19.05.58.213.0 ]--
r 136         board[begin.get]
--[ 2019.11.09.19.05.58.558.0 ]--
r 136         board[begin.ge]
--[ 2019.11.09.19.05.58.828.0 ]--
r 136         board[begin.g]
--[ 2019.11.09.19.05.58.931.0 ]--
r 136         board[begin.]
--[ 2019.11.09.19.05.59.171.0 ]--
r 136         board[begin.g]
--[ 2019.11.09.19.06.02.002.0 ]--
r 136         board[begin.]
--[ 2019.11.09.19.06.02.533.0 ]--
r 136         board[begin.l]
--[ 2019.11.09.19.06.02.629.0 ]--
r 136         board[begin.lo]
--[ 2019.11.09.19.06.02.721.0 ]--
r 136         board[begin.loc]
--[ 2019.11.09.19.06.02.867.0 ]--
r 136         board[begin.loc.]
--[ 2019.11.09.19.06.03.142.0 ]--
r 136         board[begin.loc.g]
--[ 2019.11.09.19.06.04.480.0 ]--
r 136         board[begin.loc.getJ]
--[ 2019.11.09.19.06.04.501.0 ]--
r 136         board[begin.loc.getJ()]
--[ 2019.11.09.19.06.06.226.0 ]--
r 136         board[begin.loc.getJ()][]
--[ 2019.11.09.19.06.07.146.0 ]--
r 136         board[begin.loc.getJ()][b]
--[ 2019.11.09.19.06.07.288.0 ]--
r 136         board[begin.loc.getJ()][be]
--[ 2019.11.09.19.06.07.430.0 ]--
r 136         board[begin.loc.getJ()][beg]
--[ 2019.11.09.19.06.07.629.0 ]--
r 136         board[begin.loc.getJ()][begi]
--[ 2019.11.09.19.06.07.676.0 ]--
r 136         board[begin.loc.getJ()][begin]
--[ 2019.11.09.19.06.07.926.0 ]--
r 136         board[begin.loc.getJ()][begin.]
--[ 2019.11.09.19.06.08.058.0 ]--
r 136         board[begin.loc.getJ()][begin.l]
--[ 2019.11.09.19.06.08.189.0 ]--
r 136         board[begin.loc.getJ()][begin.lo]
--[ 2019.11.09.19.06.08.601.0 ]--
r 136         board[begin.loc.getJ()][begin.loc]
--[ 2019.11.09.19.06.08.844.0 ]--
r 136         board[begin.loc.getJ()][begin.loc.]
--[ 2019.11.09.19.06.09.026.0 ]--
r 136         board[begin.loc.getJ()][begin.loc.g]
--[ 2019.11.09.19.06.10.295.0 ]--
r 136         board[begin.loc.getJ()][begin.loc.getI]
--[ 2019.11.09.19.06.10.309.0 ]--
r 136         board[begin.loc.getJ()][begin.loc.getI()]
--[ 2019.11.09.19.06.12.039.0 ]--
r 136         board[begin.loc.getJ()][begin.loc.getI()] 
--[ 2019.11.09.19.06.12.437.0 ]--
r 136         board[begin.loc.getJ()][begin.loc.getI()] =
--[ 2019.11.09.19.06.12.498.0 ]--
r 136         board[begin.loc.getJ()][begin.loc.getI()] = 
--[ 2019.11.09.19.06.12.848.0 ]--
r 136         board[begin.loc.getJ()][begin.loc.getI()] = t
--[ 2019.11.09.19.06.12.887.0 ]--
r 136         board[begin.loc.getJ()][begin.loc.getI()] = tr
--[ 2019.11.09.19.06.13.031.0 ]--
r 136         board[begin.loc.getJ()][begin.loc.getI()] = tru
--[ 2019.11.09.19.06.13.105.0 ]--
r 136         board[begin.loc.getJ()][begin.loc.getI()] = true
--[ 2019.11.09.19.06.13.256.0 ]--
r 136         board[begin.loc.getJ()][begin.loc.getI()] = true;
--[ 2019.11.09.19.06.25.173.0 ]--
+ 139         
--[ 2019.11.09.19.06.25.854.0 ]--
- 137
--[ 2019.11.09.19.06.26.817.0 ]--
+ 138         for(int i = 0; i < terrain.getN(); i++){
+ 139             for(int j = 0; j < terrain.getN(); j++){
+ 140                 board[i][j] = false;
+ 141                 System.out.print(board[i][j] + " ");
+ 142             }
+ 143             System.out.println();
r 144         }
--[ 2019.11.09.19.06.34.332.0 ]--
r 140                 /board[i][j] = false;
--[ 2019.11.09.19.06.34.426.0 ]--
r 140                 //board[i][j] = false;
--[ 2019.11.09.19.06.38.240.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.19.06.58.702.0 ]--
r 134             pfQueue.insert(p); 
--[ 2019.11.09.19.06.58.745.0 ]--
r 134             pfQueue.insert(p);
--[ 2019.11.09.19.06.59.223.0 ]--
+ 135             
--[ 2019.11.09.19.07.00.695.0 ]--
r 135              
--[ 2019.11.09.19.07.00.762.0 ]--
r 135             
--[ 2019.11.09.19.07.03.641.0 ]--
r 135             b
--[ 2019.11.09.19.07.03.704.0 ]--
r 135             bo
--[ 2019.11.09.19.07.03.732.0 ]--
r 135             boa
--[ 2019.11.09.19.07.03.833.0 ]--
r 135             boar
--[ 2019.11.09.19.07.03.978.0 ]--
r 135             board
--[ 2019.11.09.19.07.04.067.0 ]--
r 135             board[]
--[ 2019.11.09.19.07.04.386.0 ]--
r 135             board[ ]
--[ 2019.11.09.19.07.04.448.0 ]--
r 135             board[]
--[ 2019.11.09.19.07.07.722.0 ]--
r 135             board[ ]
--[ 2019.11.09.19.07.07.786.0 ]--
r 135             board[]
--[ 2019.11.09.19.07.07.941.0 ]--
r 135             board[b]
--[ 2019.11.09.19.07.08.139.0 ]--
r 135             board[be]
--[ 2019.11.09.19.07.08.310.0 ]--
r 135             board[beg]
--[ 2019.11.09.19.07.09.004.0 ]--
r 135             board[begi]
--[ 2019.11.09.19.07.09.030.0 ]--
r 135             board[begin]
--[ 2019.11.09.19.07.09.237.0 ]--
r 135             board[begin.]
--[ 2019.11.09.19.07.16.771.0 ]--
r 135             
--[ 2019.11.09.19.07.17.299.0 ]--
- 135
--[ 2019.11.09.19.07.27.107.0 ]--
- 136
- 136
- 136
- 136
- 136
- 136
- 136
- 136
r 136         
--[ 2019.11.09.19.07.27.129.0 ]--
r 136         \
--[ 2019.11.09.19.07.27.408.0 ]--
r 136         
--[ 2019.11.09.19.07.27.823.0 ]--
- 136
--[ 2019.11.09.19.35.28.665.0 ]--
+ 135             
--[ 2019.11.09.19.35.29.073.0 ]--
r 135             s
--[ 2019.11.09.19.35.29.144.0 ]--
r 135             s.
--[ 2019.11.09.19.35.29.392.0 ]--
r 135             s.p
--[ 2019.11.09.19.35.29.467.0 ]--
r 135             s.pu
--[ 2019.11.09.19.35.29.616.0 ]--
r 135             s.pus
--[ 2019.11.09.19.35.29.807.0 ]--
r 135             s.push
--[ 2019.11.09.19.35.30.048.0 ]--
r 135             s.push()
--[ 2019.11.09.19.35.30.224.0 ]--
r 135             s.push(p)
--[ 2019.11.09.19.35.30.862.0 ]--
r 135             s.push(p);
--[ 2019.11.09.19.35.35.976.0 ]--
r 135             s.push(p.);
--[ 2019.11.09.19.35.36.284.0 ]--
r 135             s.push(p.l);
--[ 2019.11.09.19.35.36.480.0 ]--
r 135             s.push(p.li);
--[ 2019.11.09.19.35.36.571.0 ]--
r 135             s.push(p.lic);
--[ 2019.11.09.19.35.37.374.0 ]--
r 135             s.push(p.li);
--[ 2019.11.09.19.35.37.815.0 ]--
r 135             s.push(p.l);
--[ 2019.11.09.19.35.37.884.0 ]--
r 135             s.push(p.lo);
--[ 2019.11.09.19.35.37.967.0 ]--
r 135             s.push(p.loc);
--[ 2019.11.09.19.35.42.720.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.19.36.07.203.0 ]--
r 138         s = new Stack<>();
r 139         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerException
--[ 2019.11.09.19.36.07.394.0 ]--
r 137         s = new Stack<>();
r 138 
--[ 2019.11.09.19.36.07.531.0 ]--
r 136         s = new Stack<>();
r 137         }
--[ 2019.11.09.19.36.07.555.0 ]--
r 136             s = new Stack<>();
--[ 2019.11.09.19.36.07.622.0 ]--
r 135             s = new Stack<>();
r 136             s.push(p.loc);
--[ 2019.11.09.19.36.07.883.0 ]--
r 134             s = new Stack<>();
r 135             pfQueue.insert(p);
--[ 2019.11.09.19.36.07.981.0 ]--
r 133             s = new Stack<>();
r 134         for(PFNode p : begin.neighbors()){
--[ 2019.11.09.19.36.07.989.0 ]--
r 133         s = new Stack<>();
--[ 2019.11.09.19.36.08.143.0 ]--
r 132         s = new Stack<>();
r 133 
--[ 2019.11.09.19.36.08.778.0 ]--
r 132 
r 133         s = new Stack<>();
--[ 2019.11.09.19.36.12.506.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.19.36.26.242.0 ]--
r 133         for(PFNode p : begin.neighbors()){
r 134         s = new Stack<>();
--[ 2019.11.09.19.36.26.263.0 ]--
r 134             s = new Stack<>();
--[ 2019.11.09.19.36.26.339.0 ]--
r 134             pfQueue.insert(p);
r 135             s = new Stack<>();
--[ 2019.11.09.19.36.26.449.0 ]--
r 135             s.push(p.loc);
r 136             s = new Stack<>();
--[ 2019.11.09.19.36.26.579.0 ]--
r 136         }
r 137             s = new Stack<>();
--[ 2019.11.09.19.36.26.585.0 ]--
r 137         s = new Stack<>();
--[ 2019.11.09.19.36.26.767.0 ]--
r 137 
r 138         s = new Stack<>();
--[ 2019.11.09.19.36.26.996.0 ]--
r 138         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerException
r 139         s = new Stack<>();
--[ 2019.11.09.19.36.30.540.0 ]--
r 135             s
--[ 2019.11.09.19.36.30.727.0 ]--
r 135             
--[ 2019.11.09.19.36.30.983.0 ]--
- 135
--[ 2019.11.09.19.51.07.732.0 ]--
+ 140         
--[ 2019.11.09.19.51.08.566.0 ]--
r 140         s
--[ 2019.11.09.19.51.08.649.0 ]--
r 140         s.
--[ 2019.11.09.19.51.09.373.0 ]--
r 140         s.p
--[ 2019.11.09.19.51.09.417.0 ]--
r 140         s.pu
--[ 2019.11.09.19.51.09.525.0 ]--
r 140         s.pus
--[ 2019.11.09.19.51.09.600.0 ]--
r 140         s.push
--[ 2019.11.09.19.51.09.790.0 ]--
r 140         s.push()
--[ 2019.11.09.19.51.09.807.0 ]--
r 140         s.push(*)
--[ 2019.11.09.19.51.10.397.0 ]--
r 140         s.push()
--[ 2019.11.09.19.51.10.571.0 ]--
r 140         s.push(n)
--[ 2019.11.09.19.51.10.665.0 ]--
r 140         s.push(ne)
--[ 2019.11.09.19.51.10.770.0 ]--
r 140         s.push(new)
--[ 2019.11.09.19.51.10.827.0 ]--
r 140         s.push(new )
--[ 2019.11.09.19.51.10.993.0 ]--
r 140         s.push(new C)
--[ 2019.11.09.19.51.11.100.0 ]--
r 140         s.push(new Co)
--[ 2019.11.09.19.51.11.146.0 ]--
r 140         s.push(new Coo)
--[ 2019.11.09.19.51.11.191.0 ]--
r 140         s.push(new Coor)
--[ 2019.11.09.19.51.11.339.0 ]--
r 140         s.push(new Coord)
--[ 2019.11.09.19.51.11.517.0 ]--
r 140         s.push(new Coord())
--[ 2019.11.09.19.51.13.178.0 ]--
r 140         s.push(new Coord(1))
--[ 2019.11.09.19.51.13.283.0 ]--
r 140         s.push(new Coord(1,))
--[ 2019.11.09.19.51.13.315.0 ]--
r 140         s.push(new Coord(1, ))
--[ 2019.11.09.19.51.13.401.0 ]--
r 140         s.push(new Coord(1, 5))
--[ 2019.11.09.19.51.15.063.0 ]--
r 140         s.push(new Coord(1, 5));
--[ 2019.11.09.19.51.16.164.0 ]--
+ 141         
--[ 2019.11.09.19.51.16.299.0 ]--
r 141         w
--[ 2019.11.09.19.51.16.739.0 ]--
r 141         
--[ 2019.11.09.19.51.16.823.0 ]--
r 141         s
--[ 2019.11.09.19.51.16.904.0 ]--
r 141         s.
--[ 2019.11.09.19.51.17.201.0 ]--
r 141         s.p
--[ 2019.11.09.19.51.17.831.0 ]--
r 141         s.pu
--[ 2019.11.09.19.51.17.888.0 ]--
r 141         s.pus
--[ 2019.11.09.19.51.17.959.0 ]--
r 141         s.push
--[ 2019.11.09.19.51.18.143.0 ]--
r 141         s.push()
--[ 2019.11.09.19.51.18.563.0 ]--
r 141         s.push
--[ 2019.11.09.19.51.19.243.0 ]--
r 141         s.push()
--[ 2019.11.09.19.51.19.426.0 ]--
r 141         s.push(n)
--[ 2019.11.09.19.51.19.504.0 ]--
r 141         s.push(ne)
--[ 2019.11.09.19.51.19.613.0 ]--
r 141         s.push(new)
--[ 2019.11.09.19.51.19.770.0 ]--
r 141         s.push(new )
--[ 2019.11.09.19.51.20.437.0 ]--
r 141         s.push(new C)
--[ 2019.11.09.19.51.20.693.0 ]--
r 141         s.push(new Co)
--[ 2019.11.09.19.51.20.784.0 ]--
r 141         s.push(new Coo)
--[ 2019.11.09.19.51.20.878.0 ]--
r 141         s.push(new Coor)
--[ 2019.11.09.19.51.21.003.0 ]--
r 141         s.push(new Coord)
--[ 2019.11.09.19.51.21.144.0 ]--
r 141         s.push(new Coord9)
--[ 2019.11.09.19.51.21.543.0 ]--
r 141         s.push(new Coord)
--[ 2019.11.09.19.51.21.976.0 ]--
r 141         s.push(new Coord())
--[ 2019.11.09.19.51.23.874.0 ]--
r 141         s.push(new Coord(6))
--[ 2019.11.09.19.51.23.967.0 ]--
r 141         s.push(new Coord(6,))
--[ 2019.11.09.19.51.24.028.0 ]--
r 141         s.push(new Coord(6, ))
--[ 2019.11.09.19.51.24.133.0 ]--
r 141         s.push(new Coord(6, 9))
--[ 2019.11.09.19.51.25.411.0 ]--
r 141         s.push(new Coord(6, 9));
--[ 2019.11.09.19.51.25.607.0 ]--
+ 142         
--[ 2019.11.09.19.51.26.301.0 ]--
r 142         s
--[ 2019.11.09.19.51.26.537.0 ]--
r 142         s.
--[ 2019.11.09.19.51.26.773.0 ]--
r 142         s.p
--[ 2019.11.09.19.51.26.942.0 ]--
r 142         s.ps
--[ 2019.11.09.19.51.27.140.0 ]--
r 142         s.p
--[ 2019.11.09.19.51.27.294.0 ]--
r 142         s.pu
--[ 2019.11.09.19.51.27.405.0 ]--
r 142         s.pus
--[ 2019.11.09.19.51.27.471.0 ]--
r 142         s.push
--[ 2019.11.09.19.51.27.632.0 ]--
r 142         s.push()
--[ 2019.11.09.19.51.28.950.0 ]--
r 142         s.push(n)
--[ 2019.11.09.19.51.29.045.0 ]--
r 142         s.push(ne)
--[ 2019.11.09.19.51.29.437.0 ]--
r 142         s.push(new)
--[ 2019.11.09.19.51.29.506.0 ]--
r 142         s.push(new )
--[ 2019.11.09.19.51.29.662.0 ]--
r 142         s.push(new C)
--[ 2019.11.09.19.51.29.756.0 ]--
r 142         s.push(new Co)
--[ 2019.11.09.19.51.29.846.0 ]--
r 142         s.push(new Coo)
--[ 2019.11.09.19.51.29.919.0 ]--
r 142         s.push(new Coor)
--[ 2019.11.09.19.51.30.106.0 ]--
r 142         s.push(new Coord)
--[ 2019.11.09.19.51.30.655.0 ]--
r 142         s.push(new Coord())
--[ 2019.11.09.19.51.31.566.0 ]--
r 142         s.push(new Coord(2))
--[ 2019.11.09.19.51.31.641.0 ]--
r 142         s.push(new Coord(25))
--[ 2019.11.09.19.51.31.737.0 ]--
r 142         s.push(new Coord(25,))
--[ 2019.11.09.19.51.31.846.0 ]--
r 142         s.push(new Coord(25, ))
--[ 2019.11.09.19.51.33.182.0 ]--
r 142         s.push(new Coord(25, 3))
--[ 2019.11.09.19.51.33.215.0 ]--
r 142         s.push(new Coord(25, 32))
--[ 2019.11.09.19.51.35.291.0 ]--
r 142         s.push(new Coord(25, 32));
--[ 2019.11.09.19.51.38.647.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.19.52.07.870.0 ]--
- 140
- 140
r 140         s.
--[ 2019.11.09.19.52.08.071.0 ]--
r 140         s
--[ 2019.11.09.19.52.08.314.0 ]--
r 140         
--[ 2019.11.09.19.52.08.688.0 ]--
- 140
--[ 2019.11.09.19.52.17.708.0 ]--
+ 140         s.push(new Coord(1, 5));
+ 141         s.push(new Coord(6, 9));
+ 142         s.push(new Coord(25, 32));
--[ 2019.11.09.19.52.22.658.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.19.52.44.164.0 ]--
- 140
- 140
r 140  
--[ 2019.11.09.19.52.44.394.0 ]--
- 140
--[ 2019.11.09.19.52.44.822.0 ]--
r 139         s.push(start)
--[ 2019.11.09.19.52.45.679.0 ]--
r 139         s.push(start);
--[ 2019.11.09.19.52.49.758.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.19.57.35.975.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.09.21.01.27.415.0 ]--
DisposeComponent
--[ 2019.11.10.14.24.50.859.0 ]--
NewLogger: P04_Pathfinding
Version: 1.3
--[ 2019.11.10.14.24.51.124.0 ]--
InitTree:
/out/production/P04_Pathfinding/.donotlog
/out/production/P04_Pathfinding/algs4.jar
/out/production/P04_Pathfinding/stdlib.jar
/out/production/P04_Pathfinding/Coord.class
/out/production/P04_Pathfinding/png2emap.py
/out/production/P04_Pathfinding/Walker.class
/out/production/P04_Pathfinding/Terrain.class
/out/production/P04_Pathfinding/ramp.png.emap
/out/production/P04_Pathfinding/ramp2.png.emap
/out/production/P04_Pathfinding/ramp3.png.emap
/out/production/P04_Pathfinding/mazeAB.png.emap
/out/production/P04_Pathfinding/usa128.png.emap
/out/production/P04_Pathfinding/usa256.png.emap
/out/production/P04_Pathfinding/Pathfinder.class
/out/production/P04_Pathfinding/usa1024.png.emap
/out/production/P04_Pathfinding/maze32_0.png.emap
/out/production/P04_Pathfinding/maze32_1.png.emap
/out/production/P04_Pathfinding/maze232_0.png.emap
/out/production/P04_Pathfinding/maze320_0.png.emap
/out/production/P04_Pathfinding/mazeBrain.png.emap
/out/production/P04_Pathfinding/TerrainEditor.class
/out/production/P04_Pathfinding/Pathfinder$PFNode.class
/out/production/P04_Pathfinding/PathfinderVisualizer.class
/out/production/P04_Pathfinding/InteractivePathfinderVisualizer.class
/src/algs4.jar
/src/Coord.java
/src/stdlib.jar
/src/Walker.java
/src/Terrain.java
/src/Pathfinder.java
/src/TerrainEditor.java
/src/PathfinderVisualizer.java
/src/InteractivePathfinderVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/heightmaps/.donotlog
/heightmaps/png2emap.py
/heightmaps/ramp.png.emap
/heightmaps/ramp2.png.emap
/heightmaps/ramp3.png.emap
/heightmaps/mazeAB.png.emap
/heightmaps/usa128.png.emap
/heightmaps/usa256.png.emap
/heightmaps/usa1024.png.emap
/heightmaps/maze32_0.png.emap
/heightmaps/maze32_1.png.emap
/heightmaps/maze232_0.png.emap
/heightmaps/maze320_0.png.emap
/heightmaps/mazeBrain.png.emap
/.cos265
/readme.html
/P04_Pathfinding.iml

--[ 2019.11.10.14.24.51.124.1 ]--
InitFile: /src/InteractivePathfinderVisualizer.java
import java.awt.event.KeyEvent;

/**
 * InteractivePathfinderVisualizer visualizes the terrain and the computed
 * path and allows the user to change parameters of the Pathfinder.  Below
 * is a list of commands and what they do.  Note: some of the commands
 * modify the properties of the path finder and some modify the terrain.
 *
 * Command        Action                                      Terrain
 * C              clear path
 * space          recompute path
 * S/E            set start/end location to mouse
 * left/right     halve/double path search heuristic value
 * 0/1            set path search heuristic to 0 or 1
 * W              start a walker to show the path
 * R              randomly generate a new terrain                *
 * M              smooths terrain under mouse                    *
 * shift+M        smooths all terrain                            *
 * up/down        increase/decrease terrain under mouse          *
 */

public class InteractivePathfinderVisualizer {
    private final static int DELAY = 10;

    // sets how many redraws it should take for the walker to reach its destination
    private final static float STEPS_TO_WALK = 100.0f;

    // for convenience, here are the emap files that are located under heightmaps/ folder
    // the python script in that folder converts png files to emap. \
    // you can use it to create your own maps to test your code
    private final static String[] emaps = {
            "maze32_0.png.emap",    // 0   (32x32 maze)
            "maze32_1.png.emap",    // 1   (another 32x32 maze)
            "maze232_0.png.emap",   // 2   (232x232 maze)
            "maze320_0.png.emap",   // 3   (same as maze32_0, only scaled up by 10x)
            "mazeAB.png.emap",      // 4   (a maze from a site no longer online :( )
            "mazeBrain.png.emap",   // 5   (...)
            "ramp.png.emap",        // 6   (some tests)
            "ramp2.png.emap",       // 7   (...)
            "ramp3.png.emap",       // 8   (...)
            "usa128.png.emap",      // 9   (elevation map of USA from https://bananas.openttd.org/en/heightmap/)
            "usa256.png.emap",      // 10  (same as usa128, only higher resolution)
            "usa1024.png.emap",     // 11  (same as usa128, only higher resolution
    };

    private final static String emapFilename = emaps[0];        // change index to load a different elevation map



    public static void main(String[] args) {
        Terrain terrain = new Terrain(emapFilename);
        Pathfinder pf = new Pathfinder(terrain);
        int N = terrain.getN();

        StdDraw.show(0);

        // set default starting and ending locations
        pf.setPathStart(new Coord(1, 1));
        pf.setPathEnd(new Coord(N-3, N-3));

        // find a path
        pf.computePath();

        PathfinderVisualizer.draw(terrain, pf, null, N);
        StdDraw.show(DELAY);

        // prevent repeated applications
        boolean keyboardR = false;
        boolean keyboardM = false;

        Walker walker = null;

        while(true) {
            boolean recompute = false;
            boolean redraw = false;

            // mouse location on map
            int mouseI = (int) ((StdDraw.mouseX()-24) / 464 * N);
            int mouseJ = (int) ((464 - (StdDraw.mouseY()-36)) / 464 * N);
            boolean isMouseOnMap = (mouseI >=0 && mouseI < N && mouseJ >= 0 && mouseJ < N);

            if(StdDraw.isKeyPressed(KeyEvent.VK_LEFT) || StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
                boolean keyboardLeft = StdDraw.isKeyPressed(KeyEvent.VK_LEFT);
                float m = keyboardLeft ? 0.5f : 2.0f;
                float h = pf.getHeuristic() * m;
                h = Math.max(1.0f/1024.0f, Math.min(1048576.0f, h));
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_0) || StdDraw.isKeyPressed(KeyEvent.VK_1)) {
                boolean keyboard0 = StdDraw.isKeyPressed(KeyEvent.VK_0);
                float h = keyboard0 ? 0 : 1;
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_C)) {
                pf.resetPath();
                walker = null;
                redraw = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_R) && !keyboardR) {
                TerrainEditor.setFractalHeights(terrain);
                TerrainEditor.clampHeights(terrain);
                recompute = true;
            }
            keyboardR = StdDraw.isKeyPressed(KeyEvent.VK_R);

            if(StdDraw.isKeyPressed(KeyEvent.VK_M)) {
                if(StdDraw.isKeyPressed(KeyEvent.VK_SHIFT)) {
                    if(!keyboardM) {
                        TerrainEditor.smoothHeights(terrain);
                        recompute = true;
                    }
                } else {
                    TerrainEditor.smoothHeights(mouseI, mouseJ, N / 20, true, terrain);
                    recompute = true;
                }
            }
            keyboardM = StdDraw.isKeyPressed(KeyEvent.VK_M);

            if(StdDraw.isKeyPressed(KeyEvent.VK_SPACE)) {
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_UP) || StdDraw.isKeyPressed(KeyEvent.VK_DOWN)) {
                boolean keyboardUp = StdDraw.isKeyPressed(KeyEvent.VK_UP);
                float add = keyboardUp ? 8.0f : -8.0f;
                TerrainEditor.addHeight(mouseI, mouseJ, N / 20, add, terrain);
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_S)) {
                pf.setPathStart(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_E)) {
                pf.setPathEnd(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_W)) {
                Iterable<Coord> path = pf.getPathSolution();
                if(path != null) {
                    walker = new Walker(terrain, pf.getPathSolution());
                }
            }

            if(walker != null) {
                if(walker.doneWalking()) {
                    walker = null;
                } else {
                    walker.advance(pf.getPathCost() / STEPS_TO_WALK);
                }
                redraw = true;
            }

            if(recompute) {
                walker = null;
                pf.resetPath();
                if(pf.getPathStart() != null && pf.getPathEnd() != null) {
                    pf.computePath();
                }
                redraw = true;
            }

            if(redraw) {
                PathfinderVisualizer.draw(terrain, pf, walker, N);
                StdDraw.show(DELAY);
            } else {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    /* do nothing */
                }
            }
        }
    }
}

--[ 2019.11.10.14.24.51.124.2 ]--
InitFile: /src/PathfinderVisualizer.java
/**
 * PathfinderVisualizer visualizes the terrain and found path.
 */

import java.awt.Color;
import java.awt.Font;

public class PathfinderVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // color for different elevations.  must be in ascending order!
    private final static int[][] elevationColors = {
            // h    r   g   b   where h=height, r=red, g=green, b=blue
            {  0,   0,  0,  0},
            {  2,   0,  0,160},
            {  4,   0,224,224},
            { 16, 192,192,  0},
            { 64,  16,255, 16},
            {128,  32,224, 32},
            {192, 128,128,  8},
            {224, 164,164,164},
            {255, 255,255,255}
    };

    private final static Color cStart    = new Color(128, 128, 255);
    private final static Color cEnd      = new Color(255, 128, 128);
    private final static Color cSolution = new Color(255, 128, 255);
    private final static Color cSearched = new Color(128,   0, 128);

    // linearly interpolating between the corresponding rgb values
    private static Color colorLERP(float v1, int r0, int g0, int b0, int r1, int g1, int b1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * r0 + v1 * r1);
        int g = (int)(v0 * g0 + v1 * g1);
        int b = (int)(v0 * b0 + v1 * b1);
        return new Color(r, g, b);
    }
    private static Color colorLERP(float v1, Color c0, Color c1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * c0.getRed()   + v1 * c1.getRed());
        int g = (int)(v0 * c0.getGreen() + v1 * c1.getGreen());
        int b = (int)(v0 * c0.getBlue()  + v1 * c1.getBlue());
        int a = (int)(v0 * c0.getAlpha() + v1 * c1.getAlpha());
        return new Color(r, g, b, a);
    }

    // returns color for given height
    private static Color height2Color(int h) {
        h = Math.max(0, Math.min(255, h));

        int[] ec0 = elevationColors[0];  // default lower bound
        int[] ec1 = elevationColors[1];  // default upper bound

        // find upper bound while updating lower bound
        for(int i = 1; i < elevationColors.length; i++) {
            ec1 = elevationColors[i];
            if(h >= ec0[0] && h <= ec1[0]) break;
            ec0 = ec1;
        }

        int h0=ec0[0], r0=ec0[1], g0=ec0[2], b0=ec0[3];
        int h1=ec1[0], r1=ec1[1], g1=ec1[2], b1=ec1[3];
        float v1 = ((float)(h - h0)) / ((float)(h1 - h0));

        return colorLERP(v1, r0, g0, b0, r1, g1, b1);
    }

    private static void drawCircle(int i, int j, int N, double rad) {
        int c = (int)((i+0.5f) * 464.0f / N);
        int r = (int)((j+0.5f) * 464.0f / N);
        StdDraw.circle(c + 24, 464 - r + 36, rad);
    }
    public static void drawCircle(Coord loc, int N, double rad) {
        drawCircle(loc.getI(), loc.getJ(), N, rad);
    }

    private static void drawPath(Iterable<Coord> path, int N) {
        boolean first = true;
        int c0 = 0, r0 = 0;
        for (Coord loc : path) {
            int c1 = (int)((loc.getI()+0.5f) * 464.0f / N);
            int r1 = (int)((loc.getJ()+0.5f) * 464.0f / N);
            if(!first) {
                StdDraw.line(c0 + 24, 464 - r0 + 36, c1 + 24, 464 - r1 + 36);
            }
            first = false;
            c0 = c1; r0 = r1;
        }
    }

    // draw N-by-N pathfinding map
    public static void draw(Terrain terrain, Pathfinder pf, Walker walker, int N) {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.filledSquare(256, 256 + 12, 464 / 2);

        // draw terrain
        for(int row = 0; row < 464; row++) {
            int j = (int)((float)row/464.0f * N);
            for(int col = 0; col < 464; col++) {
                int i = (int)((float)col/464.0f * N);
                Coord loc = new Coord(i,j);
                Color c = height2Color(terrain.getHeight(loc));
                if(pf.wasSearched(loc)) {
                    c = colorLERP(0.50f, c, cSearched);
                }
                StdDraw.setPenColor(c);
                StdDraw.filledSquare(col + 24, 464 - row + 36, 1);
            }
        }

        // draw path start
        if(pf.getPathStart() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathStart(), N, 4.0);

            StdDraw.setPenColor(cStart);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathStart(), N, 4.0);
        }

        // draw path end
        if(pf.getPathEnd() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathEnd(), N, 4.0);

            StdDraw.setPenColor(cEnd);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathEnd(), N, 4.0);
        }

        // draw found path
        if(pf.foundPath()) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawPath(pf.getPathSolution(), N);

            StdDraw.setPenColor(cSolution);
            StdDraw.setPenRadius(0.002);
            drawPath(pf.getPathSolution(), N);
        }

        // draw walker
        if(walker != null) {
            Coord loc = walker.getLocation();
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);

            StdDraw.setPenColor(StdDraw.WHITE);
            StdDraw.setPenRadius(0.002);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);
        }

        // write status text
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.text(96, 12, "heuristic: " + pf.getHeuristic());
        if(pf.foundPath()) StdDraw.text(256, 12, "path: " + pf.getPathCost());
        else               StdDraw.text(256, 12, "no path found");
        StdDraw.text(512-96, 12, "searched: " + pf.getSearchSize() + " (" + (int)(100.0f * pf.getSearchSize() / (N*N)) + "%)");
    }
}

--[ 2019.11.10.14.24.51.125.0 ]--
InitFile: /src/Terrain.java
import java.lang.IndexOutOfBoundsException;

/**
 * Terrain stores elevations for map and computes distance and
 * cost in traversing the terrain.
 */

public class Terrain {
    private int N;
    private int[][] heights;

    public Terrain(int N) {
        this.N = N;
        this.heights = new int[N][N];
    }

    public Terrain(int[][] heights) {
        this.N = heights.length;
        this.heights = heights;
    }

    public Terrain(String emapfile) {
        In in = new In(emapfile);
        this.N = in.readInt();
        this.heights = new int[N][N];
        for (int j = 0; j < N; j++) {
            for (int i = 0; i < N; i++) {
                this.heights[i][j] = in.readInt();
            }
        }
    }

    public int getN() {
        return N;
    }

    public void setHeight(int i, int j, int h) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        heights[i][j] = h;
    }
    public void setHeight(int i, int j, float h) {
        setHeight(i, j, (int) h);
    }
    public void setHeight(Coord loc, int h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }
    public void setHeight(Coord loc, float h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }

    public int getHeight(int i, int j) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        return heights[i][j];
    }
    public int getHeight(Coord loc) {
        return getHeight(loc.getI(), loc.getJ());
    }

    // computes distance between (i0,j0) and (i1,j1) as the crow flies
    public float computeDistance(int i0, int j0, int i1, int j1) {
        return (float)Math.sqrt((i0 - i1) * (i0 - i1) + (j0 - j1) * (j0 - j1));
    }
    public float computeDistance(Coord c0, Coord c1) {
        return computeDistance(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }

    public float computeTravelCost(int i0, int j0, int i1, int j1) {
        float h0 = getHeight(i0, j0), h1 = getHeight(i1, j1);
        float climb = (float)Math.pow(Math.abs(h0 - h1) * 1000.0, 1.5);
        float dist = computeDistance(i0,j0, i1,j1);
        return (1.0f + climb) * dist;
    }
    public float computeTravelCost(Coord c0, Coord c1) {
        return computeTravelCost(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }
    public float computeTravelCost(Iterable<Coord> cs) {
        Coord c0 = null;
        float cost = 0.0f;
        for(Coord c1 : cs) {
            if(c0 != null) cost += computeTravelCost(c0, c1);
            c0 = c1;
        }
        return cost;
    }
}

--[ 2019.11.10.14.24.51.125.1 ]--
InitFile: /src/Walker.java
import java.util.Iterator;

/**
 * Walker takes an Iterable of Coords and simulates an individual
 * walking along the path over the given Terrain
 */
public class Walker {

    // terrain: the Terrain the Walker traverses
    // path: the sequence of Coords the Walker follows
    public Walker(Terrain terrain, Iterable<Coord> path) {
    }

    // returns the Walker's current location
    public Coord getLocation() {
        return null;
    }

    // returns true if Walker has reached the end Coord (last in path)
    public boolean doneWalking() {
        return true;
    }

    // advances the Walker along path
    // byTime: how long the Walker should traverse (may be any non-negative value)
    public void advance(float byTime) {
    }

}

--[ 2019.11.10.14.24.51.125.2 ]--
InitFile: /src/Coord.java
/**
 * Coordinates is an immutable type that store the tuple (i, j)
 */
public final class Coord {
    private final int i;
    private final int j;

    public Coord(int i, int j) {
        this.i = i;
        this.j = j;
    }

    public int getI() { return i; }
    public int getJ() { return j; }

    public boolean isInBounds(int minI, int minJ, int maxI, int maxJ) {
        return i >= minI && j >= minJ && i <= maxI && j <= maxJ;
    }
    public boolean isInBounds(Coord min, Coord max) {
        return i >= min.i && i <= max.i && j >= min.j && j <= max.j;
    }

    public Coord add(int addI, int addJ) {
        return new Coord(i + addI, j + addJ);
    }
    public Coord add(Coord that) { return new Coord(i + that.i, j + that.j); }

    public String toString() { return "(" + i + "," + j + ")"; }

    public boolean equals(Object o) {
        if(this == o) return true;
        if(o == null) return false;
        if(o.getClass() != this.getClass()) return false;
        Coord that = (Coord) o;
        if(this.i != that.i) return false;
        if(this.j != that.j) return false;
        return true;
    }
}

--[ 2019.11.10.14.24.51.126.0 ]--
InitFile: /src/Pathfinder.java
import java.lang.IndexOutOfBoundsException;
import java.lang.IllegalArgumentException;
import java.util.Iterator;

/**
 * Pathfinder uses A* search to find a near optimal path
 * between to locations with given terrain.
 */

public class Pathfinder {

    private Coord start;
    private Coord end;
    private float heuristic;
    private boolean pathFound;
    private Stack<Coord> s;
    private Terrain terrain;
    private Boolean[][] board;

    /**
     * PFNode will be the key for MinPQ (used in computePath())
     */
    private class PFNode implements Comparable<PFNode> {
        Coord loc;
        PFNode fromNode;
        // loc: the location of the PFNode
        // fromNode: how did we get here? (linked list back to start)
        public PFNode(Coord loc, PFNode fromNode) {
            this.loc = loc;
            this.fromNode = fromNode;

        }

        // compares this with that, used to find minimum cost PFNode
        public int compareTo(PFNode that) {
            if(this.getCost(0) < that.getCost(0)) return -1;
            else if (this.getCost(0) > that.getCost(0)) return 1;

            return 0;
        }

        // returns the cost to travel from starting point to this
        // via the fromNode chain
        public float getCost(float heuristic) { return 0; }

        // returns if this PFNode is not marked invalid
        public boolean isValid() {
            return false;
        }

        // marks the PFNode as invalid
        public void invalidate() {
        }

        // returns if the PFNode is marked as used
        public boolean isUsed() {
            return true;
        }

        // marks the PFNode as used
        public void use() { }

        // returns an Iterable of PFNodes that surround this
        public Iterable<PFNode> neighbors() {
            Stack<PFNode> s = new Stack<>();
            s.push(new PFNode(new Coord(loc.getI() + 1, loc.getJ()), this));
            s.push(new PFNode(new Coord(loc.getI() - 1, loc.getJ()), this));
            s.push(new PFNode(new Coord(loc.getI() , loc.getJ() + 1), this));
            s.push(new PFNode(new Coord(loc.getI(), loc.getJ() - 1), this));
            return s;
        }

        public Coord getLoc(){
            return loc;
        }

        public PFNode getFromNode() {
            return fromNode;
        }
    }

    public Pathfinder(Terrain terrain) {
        this.terrain = terrain;
    }

    public void setPathStart(Coord loc) {
        start = loc;
    }

    public Coord getPathStart() {
        return start;
    }

    public void setPathEnd(Coord loc) {
        end = loc;
    }

    public Coord getPathEnd() {
        return end;
    }

    public void setHeuristic(float v)
    {
        heuristic = v;
    }

    public float getHeuristic() {
        return heuristic;
    }

    public void resetPath() {
    }

    public void computePath() {


        //Initialize the board and then print the current state of it
        board = new Boolean[terrain.getN()][terrain.getN()];
        for(int i = 0; i < terrain.getN(); i++){
            for(int j = 0; j < terrain.getN(); j++){
                board[i][j] = false;
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }


        MinPQ<PFNode> pfQueue = new MinPQ<>();
        PFNode begin = new PFNode(start, null);

        pfQueue.insert(begin);

        for(PFNode p : begin.neighbors()){
            pfQueue.insert(p);
        }

        //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerException
        s = new Stack<>();
        s.push(start);
        s.push(end);


        pathFound = true;
    }

    public boolean foundPath() {
        return pathFound;
    }

    public float getPathCost() {
        return 0;
    }

    public int getSearchSize() {
        return 0;
    }

    public Iterable<Coord> getPathSolution() {

        //Return a stack of coordinates for the visualizer
        return s;
    }

    public boolean wasSearched(Coord loc) {
        return false;
    }
}

--[ 2019.11.10.14.24.51.126.1 ]--
InitFile: /src/TerrainEditor.java
/**
 * The following class provides some simple terrain editing functions.
 */
public class TerrainEditor {
    private static float rndRadius(float d) {
        return (float)StdRandom.uniform(-d,d);
    }

    private static float getFractalHeight(int i, int j, float dh, Terrain terrain, boolean[] isset) {
        int N = terrain.getN();
        dh = Math.max(-64, Math.min(255+64, dh));   // allow the height to go just a bit out of range
        if(!isset[i + j * N]) {
            isset[i + j * N] = true;
            terrain.setHeight(i, j, dh);
        }
        return terrain.getHeight(i,j);
    }

    private static void setFractalHeights(int i0, int j0, int i1, int j1, Terrain terrain, boolean[] isset) {
        int id = i1-i0;
        int jd = j1-j0;
        int i01 = (i0+i1)/2;
        int j01 = (j0+j1)/2;

        if(id <= 1 && jd <= 1) return;

        float h00 = getFractalHeight(i0,j0,32,terrain,isset);
        float h01 = getFractalHeight(i0,j1,32,terrain,isset);
        float h10 = getFractalHeight(i1,j0,32,terrain,isset);
        float h11 = getFractalHeight(i1,j1,32,terrain,isset);

        float d = (float)(Math.sqrt((i1-i0)*(i1-i0) + (j1-j0)*(j1-j0)) * 0.5);

        float d0001 = (h00 + h01) / 2 + rndRadius(d);
        float d0010 = (h00 + h10) / 2 + rndRadius(d);
        float d1101 = (h11 + h01) / 2 + rndRadius(d);
        float d1110 = (h11 + h10) / 2 + rndRadius(d);

        float h0001 = getFractalHeight(i0, j01, d0001, terrain,isset);
        float h0010 = getFractalHeight(i01, j0, d0010, terrain,isset);
        float h1101 = getFractalHeight(i01, j1, d1101, terrain,isset);
        float h1110 = getFractalHeight(i1, j01, d1110, terrain,isset);

        float dm = (float)((h0001 + h0010 + h1101 + h1110) / 4.0);
        float hm = getFractalHeight(i01, j01, dm, terrain,isset);

        if(id > 1 && jd > 1) {
            setFractalHeights(i0, j0, i01, j01, terrain, isset);
            setFractalHeights(i01, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i01, j1, terrain, isset);
            setFractalHeights(i01, j01, i1, j1, terrain, isset);
        } else if(jd > 1) {
            setFractalHeights(i0, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i1, j1, terrain, isset);
        } else {
            setFractalHeights(i0, j0, i01, j1, terrain, isset);
            setFractalHeights(i01, j0, i1, j1, terrain, isset);
        }
    }

    public static void setFractalHeights(Terrain terrain) {
        int N = terrain.getN();
        boolean[] isset = new boolean[N*N];
        setFractalHeights(0, 0, N - 1, N - 1, terrain, isset);
    }

    public static void smoothHeights(Terrain terrain) {
        int N = terrain.getN();
        int radius = (int)Math.ceil(Math.sqrt(N*N/2.0f));
        smoothHeights(N/2, N/2, radius, false, terrain);
    }

    public static void smoothHeights(int ic, int jc, int radius, boolean fallOff, Terrain terrain) {
        final int N = terrain.getN();
        final int w = 2*radius+1;
        float[] s = new float[w*w];
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;

                float m = computeEffect(i, j, ic, jc, radius, fallOff, N);
                if(m <= 0.0000001) {
                    s[sidx] = terrain.getHeight(i,j);
                    continue;
                }
                float h = 0;
                int c = 0;
                if(i > 0 && j > 0) {
                    h += terrain.getHeight(i-1,j-1);
                    c += 1;
                }
                if(i < N-1 && j > 0) {
                    h += terrain.getHeight(i+1,j-1);
                    c += 1;
                }
                if(i > 0 && j < N-1) {
                    h += terrain.getHeight(i-1,j+1);
                    c += 1;
                }
                if(i < N-1 && j < N-1) {
                    h += terrain.getHeight(i+1,j+1);
                    c += 1;
                }
                if(i > 0) {
                    h += terrain.getHeight(i-1,j);
                    c += 1;
                }
                if(j > 0) {
                    h += terrain.getHeight(i,j-1);
                    c += 1;
                }
                if(i < N-1) {
                    h += terrain.getHeight(i+1,j);
                    c += 1;
                }
                if(j < N-1) {
                    h += terrain.getHeight(i,j+1);
                    c += 1;
                }
                s[sidx] = (1-m) * terrain.getHeight(i,j) + m * h / c;
            }
        }
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;
                terrain.setHeight(i, j, s[sidx]);
            }
        }
    }

    public static void clampHeights(Terrain terrain) {
        int N = terrain.getN();
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                terrain.setHeight(i, j, Math.max(0, Math.min(255, terrain.getHeight(i, j))));
            }
        }
    }

    private static float computeEffect(int i, int j, int ic, int jc, int radius, boolean fallOff, int N) {
        if(i < 0 || j < 0 || i >= N || j >= N) return 0;
        if(!fallOff) return 1;
        int d2 = (ic-i)*(ic-i)+(jc-j)*(jc-j);
        if(d2 > radius*radius) return 0;
        return ((float)radius - (float)Math.sqrt(d2)) / (float)radius;
    }

    public static void addHeight(int i, int j, int radius, float add, Terrain terrain) {
        final int N = terrain.getN();
        for(int ja = -radius; ja <= radius; ja++) {
            int r = j + ja;
            if(r < 0 || r >= N) continue;
            for(int ia = -radius; ia <= radius; ia++) {
                int c = i + ia;
                if(c < 0 || c >= N) continue;
                float v = add * computeEffect(c, r, i, j, radius, true, N);
                float h = terrain.getHeight(c, r) + v;
                h = Math.max(0, Math.min(255, h));
                terrain.setHeight(c, r, h);
            }
        }
    }
}

--[ 2019.11.10.14.24.51.126.2 ]--
InitFile: /.cos265


--[ 2019.11.10.14.24.51.126.3 ]--
InitFile: /P04_Pathfinding.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/heightmaps" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.11.10.14.47.40.717.0 ]--
:/src/Pathfinder.java
r 139         s.push(end);
--[ 2019.11.10.14.47.41.710.0 ]--
r 140         s.push(d);
--[ 2019.11.10.14.47.42.684.0 ]--
r 140         s.push(s);
--[ 2019.11.10.14.47.42.711.0 ]--
r 140         s.push(star);
--[ 2019.11.10.14.47.42.838.0 ]--
r 140         s.push(stary);
--[ 2019.11.10.14.47.43.635.0 ]--
r 140         s.push(stary\);
--[ 2019.11.10.14.47.43.674.0 ]--
r 140         s.push(stary\t);
--[ 2019.11.10.14.47.44.000.0 ]--
r 140         s.push(stary\);
--[ 2019.11.10.14.47.44.101.0 ]--
r 140         s.push(stary);
--[ 2019.11.10.14.47.44.417.0 ]--
r 140         s.push(staryt);
--[ 2019.11.10.14.47.44.538.0 ]--
r 140         s.push(stary);
--[ 2019.11.10.14.47.44.639.0 ]--
r 140         s.push(star);
--[ 2019.11.10.14.47.44.733.0 ]--
r 140         s.push(start);
--[ 2019.11.10.14.47.51.606.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.14.48.02.189.0 ]--
r 139         s.push(s);
--[ 2019.11.10.14.48.02.329.0 ]--
r 139         s.push(st);
--[ 2019.11.10.14.48.02.371.0 ]--
r 139         s.push(sta);
--[ 2019.11.10.14.48.02.510.0 ]--
r 139         s.push(star);
--[ 2019.11.10.14.48.02.630.0 ]--
r 139         s.push(start);
--[ 2019.11.10.14.48.04.866.0 ]--
r 140         s.push(e);
--[ 2019.11.10.14.48.04.979.0 ]--
r 140         s.push(en);
--[ 2019.11.10.14.48.05.088.0 ]--
r 140         s.push(end);
--[ 2019.11.10.14.48.09.807.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.14.49.31.054.0 ]--
r 143         pathFound = true;   q
--[ 2019.11.10.14.49.32.232.0 ]--
r 143         pathFound = true;   
--[ 2019.11.10.14.52.45.399.0 ]--
+ 133         
--[ 2019.11.10.14.52.46.652.0 ]--
r 133         w
--[ 2019.11.10.14.52.46.749.0 ]--
r 133         wh
--[ 2019.11.10.14.52.46.775.0 ]--
r 133         whi
--[ 2019.11.10.14.52.46.915.0 ]--
r 133         whil
--[ 2019.11.10.14.52.47.032.0 ]--
r 133         while
--[ 2019.11.10.14.52.47.266.0 ]--
r 133         while 
--[ 2019.11.10.14.52.48.317.0 ]--
r 133         while  
--[ 2019.11.10.14.52.48.433.0 ]--
r 133         while 
--[ 2019.11.10.14.52.49.814.0 ]--
r 133         
--[ 2019.11.10.14.52.54.181.0 ]--
- 132
--[ 2019.11.10.14.52.54.919.0 ]--
r 132          
--[ 2019.11.10.14.52.54.976.0 ]--
r 132         
--[ 2019.11.10.14.52.55.134.0 ]--
+ 132         
--[ 2019.11.10.14.53.23.107.0 ]--
r 133         w
--[ 2019.11.10.14.53.23.169.0 ]--
r 133         wh
--[ 2019.11.10.14.53.23.196.0 ]--
r 133         whi
--[ 2019.11.10.14.53.23.355.0 ]--
r 133         whil
--[ 2019.11.10.14.53.23.405.0 ]--
r 133         while
--[ 2019.11.10.14.53.23.752.0 ]--
r 133         while()
--[ 2019.11.10.14.53.25.856.0 ]--
r 133         while(p)
--[ 2019.11.10.14.53.26.171.0 ]--
r 133         while(pf)
--[ 2019.11.10.14.53.26.437.0 ]--
r 133         while(pfQ)
--[ 2019.11.10.14.53.26.585.0 ]--
r 133         while(pfQu)
--[ 2019.11.10.14.53.26.910.0 ]--
r 133         while(pfQueue)
--[ 2019.11.10.14.53.27.093.0 ]--
r 133         while(pfQueue.)
--[ 2019.11.10.14.53.28.233.0 ]--
r 133         while(pfQueue.m)
--[ 2019.11.10.14.53.28.278.0 ]--
r 133         while(pfQueue.mi)
--[ 2019.11.10.14.53.28.347.0 ]--
r 133         while(pfQueue.min)
--[ 2019.11.10.14.53.29.368.0 ]--
r 133         while(pfQueue.min*)
--[ 2019.11.10.14.53.29.403.0 ]--
r 133         while(pfQueue.min*())
--[ 2019.11.10.14.53.29.814.0 ]--
r 133         while(pfQueue.min*)
--[ 2019.11.10.14.53.29.896.0 ]--
r 133         while(pfQueue.min)
--[ 2019.11.10.14.53.30.416.0 ]--
r 133         while(pfQueue.min())
--[ 2019.11.10.14.53.30.572.0 ]--
r 133         while(pfQueue.min() )
--[ 2019.11.10.14.53.30.827.0 ]--
r 133         while(pfQueue.min() <)
--[ 2019.11.10.14.53.30.920.0 ]--
r 133         while(pfQueue.min() < )
--[ 2019.11.10.14.53.34.664.0 ]--
r 133         while(pfQueue.min() < e)
--[ 2019.11.10.14.53.34.738.0 ]--
r 133         while(pfQueue.min() < en)
--[ 2019.11.10.14.53.34.808.0 ]--
r 133         while(pfQueue.min() < end)
--[ 2019.11.10.14.53.35.142.0 ]--
r 133         while(pfQueue.min() < end )
--[ 2019.11.10.14.53.35.184.0 ]--
r 133         while(pfQueue.min() < end)
--[ 2019.11.10.14.53.35.360.0 ]--
r 133         while(pfQueue.min() < end;)
--[ 2019.11.10.14.53.43.716.0 ]--
r 133         while(pfQueue.min(). < end;)
--[ 2019.11.10.14.53.43.901.0 ]--
r 133         while(pfQueue.min().l < end;)
--[ 2019.11.10.14.53.44.025.0 ]--
r 133         while(pfQueue.min().lo < end;)
--[ 2019.11.10.14.53.44.111.0 ]--
r 133         while(pfQueue.min().loc < end;)
--[ 2019.11.10.14.53.53.703.0 ]--
r 133         while()
--[ 2019.11.10.14.53.54.127.0 ]--
r 133         while( )
--[ 2019.11.10.14.53.54.146.0 ]--
r 133         while()
--[ 2019.11.10.14.53.56.298.0 ]--
r 133         while(p)
--[ 2019.11.10.14.53.56.399.0 ]--
r 133         while(pf)
--[ 2019.11.10.14.53.56.690.0 ]--
r 133         while(pfQ)
--[ 2019.11.10.14.53.56.794.0 ]--
r 133         while(pfQu)
--[ 2019.11.10.14.53.56.870.0 ]--
r 133         while(pfQue)
--[ 2019.11.10.14.53.57.474.0 ]--
r 133         while(pfQue )
--[ 2019.11.10.14.53.57.514.0 ]--
r 133         while(pfQue)
--[ 2019.11.10.14.53.58.115.0 ]--
r 133         while(pfQuee)
--[ 2019.11.10.14.53.58.773.0 ]--
r 133         while()
--[ 2019.11.10.14.54.01.540.0 ]--
r 133 
--[ 2019.11.10.14.54.01.865.0 ]--
- 133
--[ 2019.11.10.14.54.02.390.0 ]--
+ 132         
--[ 2019.11.10.14.54.03.299.0 ]--
r 133         s
--[ 2019.11.10.14.54.03.383.0 ]--
r 133         sy
--[ 2019.11.10.14.54.03.478.0 ]--
r 133         sys
--[ 2019.11.10.14.54.03.765.0 ]--
r 133         syst
--[ 2019.11.10.14.54.04.367.0 ]--
r 133         sys
--[ 2019.11.10.14.54.04.418.0 ]--
r 133         sy
--[ 2019.11.10.14.54.04.520.0 ]--
r 133         s
--[ 2019.11.10.14.54.04.641.0 ]--
r 133         
--[ 2019.11.10.14.54.04.870.0 ]--
r 133         S
--[ 2019.11.10.14.54.05.012.0 ]--
r 133         St
--[ 2019.11.10.14.54.05.136.0 ]--
r 133         Std
--[ 2019.11.10.14.54.05.280.0 ]--
+ 134         
--[ 2019.11.10.14.54.05.447.0 ]--
r 134                 
--[ 2019.11.10.14.54.05.480.0 ]--
r 134                 .
--[ 2019.11.10.14.54.05.978.0 ]--
r 134                 
--[ 2019.11.10.14.54.06.139.0 ]--
- 134
--[ 2019.11.10.14.54.06.217.0 ]--
r 133         St
--[ 2019.11.10.14.54.07.046.0 ]--
+ 134         
--[ 2019.11.10.14.54.07.056.0 ]--
r 134                 
--[ 2019.11.10.14.54.07.910.0 ]--
r 133         Std
--[ 2019.11.10.14.54.08.622.0 ]--
r 133         StdOut
--[ 2019.11.10.14.54.08.741.0 ]--
r 133         StdOut.
--[ 2019.11.10.14.54.09.176.0 ]--
r 133         StdOut.println
--[ 2019.11.10.14.54.09.206.0 ]--
r 133         StdOut.println()
--[ 2019.11.10.14.54.09.215.0 ]--
r 133         StdOut.println();
--[ 2019.11.10.14.54.10.861.0 ]--
r 133         StdOut.println(p);
--[ 2019.11.10.14.54.10.893.0 ]--
r 133         StdOut.println(pf);
--[ 2019.11.10.14.54.11.624.0 ]--
r 133         StdOut.println(pfQueue);
--[ 2019.11.10.14.54.11.734.0 ]--
r 133         StdOut.println(pfQueue.);
--[ 2019.11.10.14.54.12.522.0 ]--
r 133         StdOut.println(pfQueue.m);
--[ 2019.11.10.14.54.12.579.0 ]--
r 133         StdOut.println(pfQueue.mi);
--[ 2019.11.10.14.54.12.626.0 ]--
r 133         StdOut.println(pfQueue.min);
--[ 2019.11.10.14.54.12.930.0 ]--
r 133         StdOut.println(pfQueue.min*);
--[ 2019.11.10.14.54.12.959.0 ]--
r 133         StdOut.println(pfQueue.min*)();
--[ 2019.11.10.14.54.13.299.0 ]--
r 133         StdOut.println(pfQueue.min*);
--[ 2019.11.10.14.54.13.391.0 ]--
r 133         StdOut.println(pfQueue.min*;
--[ 2019.11.10.14.54.13.785.0 ]--
r 133         StdOut.println(pfQueue.min;
--[ 2019.11.10.14.54.14.164.0 ]--
r 133         StdOut.println(pfQueue.min();
--[ 2019.11.10.14.54.14.207.0 ]--
r 133         StdOut.println(pfQueue.min());
--[ 2019.11.10.14.54.14.790.0 ]--
r 133         StdOut.println(pfQueue.min().);
--[ 2019.11.10.14.54.14.942.0 ]--
r 133         StdOut.println(pfQueue.min().l);
--[ 2019.11.10.14.54.15.074.0 ]--
r 133         StdOut.println(pfQueue.min().lo);
--[ 2019.11.10.14.54.15.129.0 ]--
r 133         StdOut.println(pfQueue.min().loc);
--[ 2019.11.10.14.54.15.322.0 ]--
r 133         StdOut.println(pfQueue.min().loc;);
--[ 2019.11.10.14.54.15.799.0 ]--
r 133         StdOut.println(pfQueue.min().loc);
--[ 2019.11.10.14.54.20.288.0 ]--
r 122                 /System.out.print(board[i][j] + " ");
--[ 2019.11.10.14.54.20.390.0 ]--
r 122                 //System.out.print(board[i][j] + " ");
--[ 2019.11.10.14.54.25.247.0 ]--
r 124             /System.out.println();
--[ 2019.11.10.14.54.25.368.0 ]--
r 124             //System.out.println();
--[ 2019.11.10.14.54.27.407.0 ]--
r 132 
r 134 
r 145         pathFound = true;
--[ 2019.11.10.14.54.29.092.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.14.54.34.163.0 ]--
+ 133         
r 134         
--[ 2019.11.10.14.54.35.970.0 ]--
- 133
r 133         StdOut.println(pfQueue.min().loc);
--[ 2019.11.10.14.54.37.024.0 ]--
+ 134         
--[ 2019.11.10.14.54.37.203.0 ]--
+ 134         
--[ 2019.11.10.14.54.38.040.0 ]--
r 135         w
--[ 2019.11.10.14.54.38.074.0 ]--
r 135         wh
--[ 2019.11.10.14.54.38.169.0 ]--
r 135         whi
--[ 2019.11.10.14.54.38.289.0 ]--
r 135         whil
--[ 2019.11.10.14.54.38.357.0 ]--
r 135         while
--[ 2019.11.10.14.54.38.822.0 ]--
r 135         while 
--[ 2019.11.10.14.54.38.964.0 ]--
r 135         while
--[ 2019.11.10.14.54.39.148.0 ]--
r 135         while()
--[ 2019.11.10.14.54.40.735.0 ]--
r 135         while(p)
--[ 2019.11.10.14.54.40.911.0 ]--
r 135         while(pf)
--[ 2019.11.10.14.54.41.539.0 ]--
r 135         while(pfQueue)
--[ 2019.11.10.14.54.41.654.0 ]--
r 135         while(pfQueue.)
--[ 2019.11.10.14.54.41.903.0 ]--
r 135         while(pfQueue.m)
--[ 2019.11.10.14.54.42.012.0 ]--
r 135         while(pfQueue.mi)
--[ 2019.11.10.14.54.42.231.0 ]--
r 135         while(pfQueue.min)
--[ 2019.11.10.14.54.42.456.0 ]--
r 135         while(pfQueue.min.)
--[ 2019.11.10.14.54.42.694.0 ]--
r 135         while(pfQueue.min)
--[ 2019.11.10.14.54.42.869.0 ]--
r 135         while(pfQueue.min())
--[ 2019.11.10.14.54.43.238.0 ]--
r 135         while(pfQueue.min().)
--[ 2019.11.10.14.54.43.406.0 ]--
r 135         while(pfQueue.min().l)
--[ 2019.11.10.14.54.43.632.0 ]--
r 135         while(pfQueue.min().lo)
--[ 2019.11.10.14.54.43.716.0 ]--
r 135         while(pfQueue.min().loc)
--[ 2019.11.10.14.54.44.259.0 ]--
r 135         while(pfQueue.min().loc )
--[ 2019.11.10.14.54.46.084.0 ]--
r 135         while(pfQueue.min().loc !)
--[ 2019.11.10.14.54.46.182.0 ]--
r 135         while(pfQueue.min().loc !=)
--[ 2019.11.10.14.54.46.289.0 ]--
r 135         while(pfQueue.min().loc != )
--[ 2019.11.10.14.54.48.398.0 ]--
r 135         while(pfQueue.min().loc != e)
--[ 2019.11.10.14.54.48.479.0 ]--
r 135         while(pfQueue.min().loc != en)
--[ 2019.11.10.14.54.48.572.0 ]--
r 135         while(pfQueue.min().loc != end)
--[ 2019.11.10.14.54.51.811.0 ]--
r 135         while(pfQueue.min().loc != end){
--[ 2019.11.10.14.54.51.948.0 ]--
+ 136 
+ 137 }
--[ 2019.11.10.14.54.51.967.0 ]--
r 137         }
--[ 2019.11.10.14.54.51.988.0 ]--
r 136             
--[ 2019.11.10.14.54.56.486.0 ]--
r 136             s
--[ 2019.11.10.14.54.56.607.0 ]--
r 136             st
--[ 2019.11.10.14.54.56.753.0 ]--
r 136             std
--[ 2019.11.10.14.54.57.075.0 ]--
r 136             std 
--[ 2019.11.10.14.54.57.134.0 ]--
r 136             std
--[ 2019.11.10.14.54.57.277.0 ]--
r 136             st
--[ 2019.11.10.14.54.57.501.0 ]--
r 136             s
--[ 2019.11.10.14.54.57.525.0 ]--
r 136             
--[ 2019.11.10.14.54.58.578.0 ]--
r 136             r
--[ 2019.11.10.14.54.58.637.0 ]--
r 136             rm
--[ 2019.11.10.14.54.58.969.0 ]--
r 136             rm 
--[ 2019.11.10.14.54.58.991.0 ]--
r 136             rm
--[ 2019.11.10.14.54.59.281.0 ]--
r 136             r
--[ 2019.11.10.14.54.59.471.0 ]--
r 136             
--[ 2019.11.10.14.55.00.029.0 ]--
r 136             p
--[ 2019.11.10.14.55.00.098.0 ]--
r 136             pf
--[ 2019.11.10.14.55.00.349.0 ]--
r 136             pfQ
--[ 2019.11.10.14.55.00.687.0 ]--
r 136             pfQueue
--[ 2019.11.10.14.55.00.799.0 ]--
r 136             pfQueue.
--[ 2019.11.10.14.55.02.874.0 ]--
r 136             pfQueue.delMin
--[ 2019.11.10.14.55.02.881.0 ]--
r 136             pfQueue.delMin()
--[ 2019.11.10.14.55.03.649.0 ]--
r 136             pfQueue.delMin();
--[ 2019.11.10.14.55.07.450.0 ]--
- 138
+ 141 
--[ 2019.11.10.14.55.07.711.0 ]--
- 137
+ 139         }
--[ 2019.11.10.14.55.07.728.0 ]--
r 137             for(PFNode p : begin.neighbors()){
r 138                 pfQueue.insert(p);
r 139             }
--[ 2019.11.10.14.55.07.936.0 ]--
- 136
+ 139             pfQueue.delMin();
--[ 2019.11.10.14.55.08.311.0 ]--
+ 136             pfQueue.delMin();
- 140
--[ 2019.11.10.14.55.16.621.0 ]--
r 133         
--[ 2019.11.10.14.55.16.711.0 ]--
- 132
--[ 2019.11.10.14.55.17.028.0 ]--
- 132
--[ 2019.11.10.14.55.20.222.0 ]--
+ 138             
--[ 2019.11.10.14.55.21.582.0 ]--
r 138             StdOut.println(pfQueue.min().loc);
--[ 2019.11.10.14.55.24.354.0 ]--
r 132 
--[ 2019.11.10.14.55.26.146.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.14.56.32.427.0 ]--
+ 133         
--[ 2019.11.10.14.56.32.849.0 ]--
- 132
--[ 2019.11.10.14.56.33.345.0 ]--
r 132          
--[ 2019.11.10.14.56.33.361.0 ]--
r 132         
--[ 2019.11.10.14.56.33.858.0 ]--
+ 132         
--[ 2019.11.10.14.56.44.055.0 ]--
r 133             
--[ 2019.11.10.14.56.44.463.0 ]--
r 133                 
--[ 2019.11.10.14.56.45.347.0 ]--
+ 132         
--[ 2019.11.10.14.56.45.562.0 ]--
r 133         StdOut.println(pfQueue.min().loc);
--[ 2019.11.10.14.56.45.625.0 ]--
r 132 
--[ 2019.11.10.14.56.47.561.0 ]--
+ 134         
--[ 2019.11.10.14.56.48.016.0 ]--
r 134         S
--[ 2019.11.10.14.56.48.143.0 ]--
r 134         St
--[ 2019.11.10.14.56.48.304.0 ]--
r 134         Std
--[ 2019.11.10.14.56.48.586.0 ]--
r 134         StdOut
--[ 2019.11.10.14.56.48.728.0 ]--
r 134         StdOut.
--[ 2019.11.10.14.56.49.155.0 ]--
r 134         StdOut.println
--[ 2019.11.10.14.56.49.161.0 ]--
r 134         StdOut.println()
--[ 2019.11.10.14.56.49.166.0 ]--
r 134         StdOut.println();
--[ 2019.11.10.14.56.49.929.0 ]--
r 134         StdOut.println(p);
--[ 2019.11.10.14.56.50.005.0 ]--
r 134         StdOut.println(pf);
--[ 2019.11.10.14.56.50.739.0 ]--
r 134         StdOut.println(pfQueue);
--[ 2019.11.10.14.56.50.844.0 ]--
r 134         StdOut.println(pfQueue.);
--[ 2019.11.10.14.56.51.008.0 ]--
r 134         StdOut.println(pfQueue.m);
--[ 2019.11.10.14.56.51.093.0 ]--
r 134         StdOut.println(pfQueue.mi);
--[ 2019.11.10.14.56.51.169.0 ]--
r 134         StdOut.println(pfQueue.min);
--[ 2019.11.10.14.56.51.910.0 ]--
r 134         StdOut.println(pfQueue.min());
--[ 2019.11.10.14.56.52.495.0 ]--
r 134         StdOut.println(pfQueue.min().);
--[ 2019.11.10.14.56.52.615.0 ]--
r 134         StdOut.println(pfQueue.min().g);
--[ 2019.11.10.14.56.52.664.0 ]--
r 134         StdOut.println(pfQueue.min().ge);
--[ 2019.11.10.14.56.52.803.0 ]--
r 134         StdOut.println(pfQueue.min().get);
--[ 2019.11.10.14.56.53.391.0 ]--
r 134         StdOut.println(pfQueue.min().getCost);
--[ 2019.11.10.14.56.53.413.0 ]--
r 134         StdOut.println(pfQueue.min().getCost());
--[ 2019.11.10.14.56.55.736.0 ]--
r 134         StdOut.println(pfQueue.min().getCost(0));
--[ 2019.11.10.14.57.04.968.0 ]--
r 134         StdOut.println("pfQueue.min().getCost(0));
--[ 2019.11.10.14.57.05.133.0 ]--
r 134         StdOut.println("CpfQueue.min().getCost(0));
--[ 2019.11.10.14.57.05.244.0 ]--
r 134         StdOut.println("CopfQueue.min().getCost(0));
--[ 2019.11.10.14.57.05.392.0 ]--
r 134         StdOut.println("CospfQueue.min().getCost(0));
--[ 2019.11.10.14.57.05.460.0 ]--
r 134         StdOut.println("CostpfQueue.min().getCost(0));
--[ 2019.11.10.14.57.05.908.0 ]--
r 134         StdOut.println("Cost:pfQueue.min().getCost(0));
--[ 2019.11.10.14.57.05.974.0 ]--
r 134         StdOut.println("Cost: pfQueue.min().getCost(0));
--[ 2019.11.10.14.57.06.053.0 ]--
r 134         StdOut.println("Cost: "pfQueue.min().getCost(0));
--[ 2019.11.10.14.57.06.609.0 ]--
r 134         StdOut.println("Cost: " pfQueue.min().getCost(0));
--[ 2019.11.10.14.57.06.697.0 ]--
r 134         StdOut.println("Cost: " +pfQueue.min().getCost(0));
--[ 2019.11.10.14.57.06.780.0 ]--
r 134         StdOut.println("Cost: " + pfQueue.min().getCost(0));
--[ 2019.11.10.14.57.08.834.0 ]--
r 135 
--[ 2019.11.10.14.57.10.613.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.14.57.27.384.0 ]--
- 132
- 132
- 132
--[ 2019.11.10.14.57.28.641.0 ]--
+ 133         
--[ 2019.11.10.14.57.30.545.0 ]--
r 133         /
--[ 2019.11.10.14.57.30.642.0 ]--
r 133         /*
--[ 2019.11.10.14.57.32.872.0 ]--
+ 141         
+ 142          */
--[ 2019.11.10.14.57.36.127.0 ]--
r 141        
--[ 2019.11.10.14.57.36.675.0 ]--
r 141       
--[ 2019.11.10.14.57.36.829.0 ]--
r 141      
--[ 2019.11.10.14.57.37.055.0 ]--
r 141     
--[ 2019.11.10.14.57.37.176.0 ]--
r 141    
--[ 2019.11.10.14.57.37.563.0 ]--
r 141   
--[ 2019.11.10.14.57.37.866.0 ]--
r 141  
--[ 2019.11.10.14.57.38.184.0 ]--
r 141 
--[ 2019.11.10.14.57.38.543.0 ]--
- 141
--[ 2019.11.10.14.57.41.384.0 ]--
+ 133         
--[ 2019.11.10.14.57.44.951.0 ]--
r 133         S
--[ 2019.11.10.14.57.45.312.0 ]--
r 133         Sy
--[ 2019.11.10.14.57.45.648.0 ]--
r 133         S
--[ 2019.11.10.14.57.46.298.0 ]--
r 133         StdOut
--[ 2019.11.10.14.57.46.423.0 ]--
r 133         StdOut.
--[ 2019.11.10.14.57.46.858.0 ]--
r 133         StdOut.println
--[ 2019.11.10.14.57.46.875.0 ]--
r 133         StdOut.println()
--[ 2019.11.10.14.57.46.887.0 ]--
r 133         StdOut.println();
--[ 2019.11.10.14.57.48.057.0 ]--
r 133         StdOut.println(p);
--[ 2019.11.10.14.57.48.109.0 ]--
r 133         StdOut.println(pf);
--[ 2019.11.10.14.57.48.491.0 ]--
r 133         StdOut.println(pfQ);
--[ 2019.11.10.14.57.48.894.0 ]--
r 133         StdOut.println(pfQueue);
--[ 2019.11.10.14.57.49.064.0 ]--
r 133         StdOut.println(pfQueue.);
--[ 2019.11.10.14.57.49.872.0 ]--
r 133         StdOut.println(pfQueue.m);
--[ 2019.11.10.14.57.49.934.0 ]--
r 133         StdOut.println(pfQueue.mi);
--[ 2019.11.10.14.57.49.999.0 ]--
r 133         StdOut.println(pfQueue.min);
--[ 2019.11.10.14.57.50.342.0 ]--
r 133         StdOut.println(pfQueue.min());
--[ 2019.11.10.14.57.50.529.0 ]--
r 133         StdOut.println(pfQueue.min(););
--[ 2019.11.10.14.57.50.812.0 ]--
r 133         StdOut.println(pfQueue.min();.);
--[ 2019.11.10.14.57.51.110.0 ]--
r 133         StdOut.println(pfQueue.min(););
--[ 2019.11.10.14.57.51.224.0 ]--
r 133         StdOut.println(pfQueue.min());
--[ 2019.11.10.14.57.51.334.0 ]--
r 133         StdOut.println(pfQueue.min();
--[ 2019.11.10.14.57.51.489.0 ]--
r 133         StdOut.println(pfQueue.min(.);
--[ 2019.11.10.14.57.51.732.0 ]--
r 133         StdOut.println(pfQueue.min();
--[ 2019.11.10.14.57.52.270.0 ]--
r 133         StdOut.println(pfQueue.min());
--[ 2019.11.10.14.57.52.784.0 ]--
r 133         StdOut.println(pfQueue.min();
--[ 2019.11.10.14.57.53.100.0 ]--
r 133         StdOut.println(pfQueue.min( );
--[ 2019.11.10.14.57.53.153.0 ]--
r 133         StdOut.println(pfQueue.min();
--[ 2019.11.10.14.57.53.588.0 ]--
r 133         StdOut.println(pfQueue.min().;
--[ 2019.11.10.14.57.53.842.0 ]--
r 133         StdOut.println(pfQueue.min().g;
--[ 2019.11.10.14.57.53.914.0 ]--
r 133         StdOut.println(pfQueue.min().ge;
--[ 2019.11.10.14.57.54.014.0 ]--
r 133         StdOut.println(pfQueue.min().get;
--[ 2019.11.10.14.57.54.809.0 ]--
r 133         StdOut.println(pfQueue.min().getCost;
--[ 2019.11.10.14.57.54.836.0 ]--
r 133         StdOut.println(pfQueue.min().getCost();
--[ 2019.11.10.14.57.54.953.0 ]--
r 133         StdOut.println(pfQueue.min().getCost());
--[ 2019.11.10.14.57.56.484.0 ]--
r 133         StdOut.println(pfQueue.min().getCost();
--[ 2019.11.10.14.57.58.062.0 ]--
r 133         StdOut.println(pfQueue.min().getCost());
--[ 2019.11.10.14.58.02.689.0 ]--
r 133         
--[ 2019.11.10.14.58.02.966.0 ]--
- 132
--[ 2019.11.10.14.58.37.597.0 ]--
r 133         /
--[ 2019.11.10.14.58.37.697.0 ]--
r 133         
--[ 2019.11.10.14.58.40.331.0 ]--
r 141          *
--[ 2019.11.10.14.58.40.476.0 ]--
r 141          
--[ 2019.11.10.14.58.40.688.0 ]--
r 141         
--[ 2019.11.10.14.58.41.358.0 ]--
- 141
--[ 2019.11.10.14.58.43.845.0 ]--
r 140         } 
--[ 2019.11.10.14.58.43.911.0 ]--
r 140         }
--[ 2019.11.10.14.58.47.822.0 ]--
+ 139             
--[ 2019.11.10.14.58.54.568.0 ]--
r 139             b
--[ 2019.11.10.14.58.54.631.0 ]--
r 139             be
--[ 2019.11.10.14.58.54.784.0 ]--
r 139             beg
--[ 2019.11.10.14.58.54.852.0 ]--
r 139             begi
--[ 2019.11.10.14.58.54.899.0 ]--
r 139             begin
--[ 2019.11.10.14.58.55.020.0 ]--
r 139             begin 
--[ 2019.11.10.14.58.55.122.0 ]--
r 139             begin =
--[ 2019.11.10.14.58.55.222.0 ]--
r 139             begin = 
--[ 2019.11.10.14.58.57.547.0 ]--
r 139             begin = p
--[ 2019.11.10.14.58.57.710.0 ]--
r 139             begin = pF
--[ 2019.11.10.14.58.57.815.0 ]--
r 139             begin = pFN
--[ 2019.11.10.14.58.58.201.0 ]--
r 139             begin = pF
--[ 2019.11.10.14.58.58.305.0 ]--
r 139             begin = p
--[ 2019.11.10.14.58.58.437.0 ]--
r 139             begin = 
--[ 2019.11.10.14.58.58.601.0 ]--
r 139             begin = P
--[ 2019.11.10.14.58.58.674.0 ]--
r 139             begin = PF
--[ 2019.11.10.14.58.58.913.0 ]--
r 139             begin = PFn
--[ 2019.11.10.14.58.59.159.0 ]--
r 139             begin = PF
--[ 2019.11.10.14.58.59.276.0 ]--
r 139             begin = PFN
--[ 2019.11.10.14.58.59.606.0 ]--
r 139             begin = PFNode
--[ 2019.11.10.14.58.59.744.0 ]--
r 139             begin = PFNode.
--[ 2019.11.10.14.59.00.182.0 ]--
r 139             begin = PFNode.m
--[ 2019.11.10.14.59.00.251.0 ]--
r 139             begin = PFNode.mi
--[ 2019.11.10.14.59.00.325.0 ]--
r 139             begin = PFNode.min
--[ 2019.11.10.14.59.01.086.0 ]--
r 139             begin = PFNode.mi
--[ 2019.11.10.14.59.01.188.0 ]--
r 139             begin = PFNode.
--[ 2019.11.10.14.59.01.412.0 ]--
r 139             begin = PFNode
--[ 2019.11.10.14.59.01.826.0 ]--
r 139             begin = PFNod
--[ 2019.11.10.14.59.01.924.0 ]--
r 139             begin = PFNo
--[ 2019.11.10.14.59.02.012.0 ]--
r 139             begin = PFN
--[ 2019.11.10.14.59.02.159.0 ]--
r 139             begin = PF
--[ 2019.11.10.14.59.02.433.0 ]--
r 139             begin = PFQ
--[ 2019.11.10.14.59.03.027.0 ]--
r 139             begin = PF
--[ 2019.11.10.14.59.03.112.0 ]--
r 139             begin = P
--[ 2019.11.10.14.59.03.475.0 ]--
r 139             begin = 
--[ 2019.11.10.14.59.03.898.0 ]--
r 139             begin = p
--[ 2019.11.10.14.59.03.958.0 ]--
r 139             begin = pf
--[ 2019.11.10.14.59.04.125.0 ]--
r 139             begin = pfQ
--[ 2019.11.10.14.59.04.481.0 ]--
r 139             begin = pfQueue
--[ 2019.11.10.14.59.04.641.0 ]--
r 139             begin = pfQueue.
--[ 2019.11.10.14.59.04.841.0 ]--
r 139             begin = pfQueue.m
--[ 2019.11.10.14.59.04.925.0 ]--
r 139             begin = pfQueue.mi
--[ 2019.11.10.14.59.04.974.0 ]--
r 139             begin = pfQueue.min
--[ 2019.11.10.14.59.05.226.0 ]--
r 139             begin = pfQueue.min()
--[ 2019.11.10.14.59.05.499.0 ]--
r 139             begin = pfQueue.min();
--[ 2019.11.10.14.59.07.160.0 ]--
r 139             begin = pfQueue.min(); 
--[ 2019.11.10.14.59.07.225.0 ]--
r 139             begin = pfQueue.min();
--[ 2019.11.10.14.59.09.338.0 ]--
r 132 
r 133 
--[ 2019.11.10.14.59.10.977.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.14.59.32.618.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.14.59.45.442.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.01.24.816.0 ]--
r 134         f{
--[ 2019.11.10.15.01.24.897.0 ]--
r 134         fo{
--[ 2019.11.10.15.01.24.930.0 ]--
r 134         for{
--[ 2019.11.10.15.01.25.099.0 ]--
r 134         for(){
--[ 2019.11.10.15.01.25.253.0 ]--
r 134         for(i){
--[ 2019.11.10.15.01.25.332.0 ]--
r 134         for(in){
--[ 2019.11.10.15.01.25.492.0 ]--
r 134         for(int){
--[ 2019.11.10.15.01.25.547.0 ]--
r 134         for(int ){
--[ 2019.11.10.15.01.25.654.0 ]--
r 134         for(int i){
--[ 2019.11.10.15.01.25.777.0 ]--
r 134         for(int i ){
--[ 2019.11.10.15.01.25.855.0 ]--
r 134         for(int i =){
--[ 2019.11.10.15.01.26.447.0 ]--
r 134         for(int i = ){
--[ 2019.11.10.15.01.26.571.0 ]--
r 134         for(int i = 0){
--[ 2019.11.10.15.01.27.218.0 ]--
r 134         for(int i = 0;){
--[ 2019.11.10.15.01.27.309.0 ]--
r 134         for(int i = 0; ){
--[ 2019.11.10.15.01.27.482.0 ]--
r 134         for(int i = 0; i){
--[ 2019.11.10.15.01.28.116.0 ]--
r 134         for(int i = 0; i ){
--[ 2019.11.10.15.01.28.236.0 ]--
r 134         for(int i = 0; i <){
--[ 2019.11.10.15.01.28.314.0 ]--
r 134         for(int i = 0; i < ){
--[ 2019.11.10.15.01.28.526.0 ]--
r 134         for(int i = 0; i < 4){
--[ 2019.11.10.15.01.29.517.0 ]--
r 134         for(int i = 0; i < 4,){
--[ 2019.11.10.15.01.29.614.0 ]--
r 134         for(int i = 0; i < 4, ){
--[ 2019.11.10.15.01.30.090.0 ]--
r 134         for(int i = 0; i < 4, i){
--[ 2019.11.10.15.01.30.628.0 ]--
r 134         for(int i = 0; i < 4, ){
--[ 2019.11.10.15.01.30.803.0 ]--
r 134         for(int i = 0; i < 4,){
--[ 2019.11.10.15.01.30.892.0 ]--
r 134         for(int i = 0; i < 4){
--[ 2019.11.10.15.01.31.266.0 ]--
r 134         for(int i = 0; i < 4;){
--[ 2019.11.10.15.01.31.390.0 ]--
r 134         for(int i = 0; i < 4; ){
--[ 2019.11.10.15.01.31.506.0 ]--
r 134         for(int i = 0; i < 4; i){
--[ 2019.11.10.15.01.31.598.0 ]--
r 134         for(int i = 0; i < 4; i ){
--[ 2019.11.10.15.01.31.695.0 ]--
r 134         for(int i = 0; i < 4; i +){
--[ 2019.11.10.15.01.31.802.0 ]--
r 134         for(int i = 0; i < 4; i ++){
--[ 2019.11.10.15.01.32.154.0 ]--
r 134         for(int i = 0; i < 4; i +){
--[ 2019.11.10.15.01.32.232.0 ]--
r 134         for(int i = 0; i < 4; i ){
--[ 2019.11.10.15.01.32.311.0 ]--
r 134         for(int i = 0; i < 4; i){
--[ 2019.11.10.15.01.32.593.0 ]--
r 134         for(int i = 0; i < 4; i+){
--[ 2019.11.10.15.01.32.644.0 ]--
r 134         for(int i = 0; i < 4; i++){
--[ 2019.11.10.15.01.36.593.0 ]--
+ 138                 
--[ 2019.11.10.15.01.37.361.0 ]--
- 138
--[ 2019.11.10.15.01.42.843.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.01.53.617.0 ]--
r 134         for(int i = 0; i < ; i++){
--[ 2019.11.10.15.01.53.697.0 ]--
r 134         for(int i = 0; i < 3; i++){
--[ 2019.11.10.15.01.53.731.0 ]--
r 134         for(int i = 0; i < 32; i++){
--[ 2019.11.10.15.02.00.117.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.02.14.168.0 ]--
r 134         for(int i = 0; i < 3; i++){
--[ 2019.11.10.15.02.14.271.0 ]--
r 134         for(int i = 0; i < ; i++){
--[ 2019.11.10.15.02.14.604.0 ]--
r 134         for(int i = 0; i < 4; i++){
--[ 2019.11.10.15.02.18.053.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.02.28.219.0 ]--
+ 135             
--[ 2019.11.10.15.02.30.365.0 ]--
- 135
--[ 2019.11.10.15.02.30.887.0 ]--
+ 135             
--[ 2019.11.10.15.02.35.313.0 ]--
r 135             s
--[ 2019.11.10.15.02.35.399.0 ]--
r 135             s.
--[ 2019.11.10.15.02.35.637.0 ]--
r 135             s.p
--[ 2019.11.10.15.02.35.688.0 ]--
r 135             s.pu
--[ 2019.11.10.15.02.35.883.0 ]--
r 135             s.pus
--[ 2019.11.10.15.02.35.978.0 ]--
r 135             s.push
--[ 2019.11.10.15.02.36.176.0 ]--
r 135             s.push()
--[ 2019.11.10.15.02.36.362.0 ]--
r 135             s.push(p)
--[ 2019.11.10.15.02.36.604.0 ]--
r 135             s.push(pf)
--[ 2019.11.10.15.02.37.086.0 ]--
r 135             s.push(pfQueue)
--[ 2019.11.10.15.02.37.215.0 ]--
r 135             s.push(pfQueue.)
--[ 2019.11.10.15.02.37.918.0 ]--
r 135             s.push(pfQueue.delMin)
--[ 2019.11.10.15.02.37.931.0 ]--
r 135             s.push(pfQueue.delMin())
--[ 2019.11.10.15.02.39.339.0 ]--
r 135             s.push(pfQueue.delMin());
--[ 2019.11.10.15.02.39.948.0 ]--
r 135             s.push(pfQueue.delMin()); 
--[ 2019.11.10.15.02.40.014.0 ]--
r 135             s.push(pfQueue.delMin());
--[ 2019.11.10.15.02.42.047.0 ]--
r 135             s.push(pfQueue.m);
--[ 2019.11.10.15.02.42.133.0 ]--
r 135             s.push(pfQueue.mi);
--[ 2019.11.10.15.02.42.201.0 ]--
r 135             s.push(pfQueue.min);
--[ 2019.11.10.15.02.43.077.0 ]--
r 135             s.push(pfQueue.min());
--[ 2019.11.10.15.02.48.631.0 ]--
r 135             s.push(pfQueue.min().);
--[ 2019.11.10.15.02.49.523.0 ]--
r 135             s.push(pfQueue.min().l);
--[ 2019.11.10.15.02.49.644.0 ]--
r 135             s.push(pfQueue.min().lo);
--[ 2019.11.10.15.02.49.698.0 ]--
r 135             s.push(pfQueue.min().loc);
--[ 2019.11.10.15.02.54.983.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.03.16.005.0 ]--
- 145
+ 147         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerException
--[ 2019.11.10.15.03.16.115.0 ]--
- 143
+ 146 
--[ 2019.11.10.15.03.16.207.0 ]--
- 143
+ 145 
--[ 2019.11.10.15.03.16.321.0 ]--
- 142
+ 144         }
--[ 2019.11.10.15.03.16.349.0 ]--
r 142             s = new Stack<>();
r 143             s.push(start);
--[ 2019.11.10.15.03.16.415.0 ]--
- 141
+ 143             StdOut.println(pfQueue.min().loc);
--[ 2019.11.10.15.03.16.539.0 ]--
- 140
+ 142             begin = pfQueue.min();
--[ 2019.11.10.15.03.16.665.0 ]--
- 139
+ 141             }
--[ 2019.11.10.15.03.16.682.0 ]--
r 139                 s = new Stack<>();
r 140                 s.push(start);
--[ 2019.11.10.15.03.16.748.0 ]--
- 138
+ 140                 pfQueue.insert(p);
--[ 2019.11.10.15.03.16.863.0 ]--
- 137
+ 139             for(PFNode p : begin.neighbors()){
--[ 2019.11.10.15.03.16.884.0 ]--
r 137             s = new Stack<>();
r 138             s.push(start);
--[ 2019.11.10.15.03.17.012.0 ]--
- 136
+ 138             pfQueue.delMin();
--[ 2019.11.10.15.03.17.091.0 ]--
- 135
+ 137             s.push(pfQueue.min().loc);
--[ 2019.11.10.15.03.17.212.0 ]--
- 134
+ 136         for(int i = 0; i < 4; i++){
--[ 2019.11.10.15.03.17.237.0 ]--
r 134         s = new Stack<>();
r 135         s.push(start);
--[ 2019.11.10.15.03.17.361.0 ]--
- 132
+ 135 
--[ 2019.11.10.15.03.22.213.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.03.34.071.0 ]--
r 136         for(int i = 0; i < ; i++){
--[ 2019.11.10.15.03.34.165.0 ]--
r 136         for(int i = 0; i < 1; i++){
--[ 2019.11.10.15.03.34.240.0 ]--
r 136         for(int i = 0; i < 10; i++){
--[ 2019.11.10.15.03.34.366.0 ]--
r 136         for(int i = 0; i < 100; i++){
--[ 2019.11.10.15.03.37.665.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.03.48.668.0 ]--
r 136         for(int i = 0; i < ; i++){
--[ 2019.11.10.15.03.48.688.0 ]--
r 136         for(int i = 0; i < 4; i++){
--[ 2019.11.10.15.03.48.752.0 ]--
+ 132 
- 136
--[ 2019.11.10.15.03.48.785.0 ]--
r 134         for(int i = 0; i < 4; i++){
r 135             s = new Stack<>();
r 136             s.push(start);
--[ 2019.11.10.15.03.48.818.0 ]--
+ 135             s.push(pfQueue.min().loc);
- 138
--[ 2019.11.10.15.03.48.852.0 ]--
+ 136             pfQueue.delMin();
- 139
--[ 2019.11.10.15.03.48.884.0 ]--
r 137             for(PFNode p : begin.neighbors()){
r 138                 s = new Stack<>();
r 139                 s.push(start);
--[ 2019.11.10.15.03.48.917.0 ]--
+ 138                 pfQueue.insert(p);
- 141
--[ 2019.11.10.15.03.48.942.0 ]--
r 139             }
r 140             s = new Stack<>();
r 141             s.push(start);
--[ 2019.11.10.15.03.48.987.0 ]--
+ 140             begin = pfQueue.min();
- 143
--[ 2019.11.10.15.03.49.011.0 ]--
+ 141             StdOut.println(pfQueue.min().loc);
- 144
--[ 2019.11.10.15.03.49.047.0 ]--
r 142         }
r 143         s = new Stack<>();
r 144         s.push(start);
--[ 2019.11.10.15.03.49.086.0 ]--
+ 143 
- 146
--[ 2019.11.10.15.03.49.116.0 ]--
+ 143 
- 147
--[ 2019.11.10.15.03.49.129.0 ]--
+ 145         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerException
- 148
--[ 2019.11.10.15.03.49.794.0 ]--
r 135             s.push(pfQueue.min());
--[ 2019.11.10.15.03.50.102.0 ]--
r 135             s.push(pfQueue.delMin());
--[ 2019.11.10.15.03.50.631.0 ]--
r 135             s.push(pfQueue.delMin()); 
--[ 2019.11.10.15.03.50.664.0 ]--
r 135             s.push(pfQueue.delMin())
--[ 2019.11.10.15.03.50.735.0 ]--
r 135             s.push(pfQueue.)
--[ 2019.11.10.15.03.50.767.0 ]--
r 135             s.push(pfQueue)
--[ 2019.11.10.15.03.50.803.0 ]--
r 135             s.push(pf)
--[ 2019.11.10.15.03.50.850.0 ]--
r 135             
--[ 2019.11.10.15.03.50.946.0 ]--
- 135
--[ 2019.11.10.15.03.50.975.0 ]--
r 134         for(int i = 0; i < ; i++){
--[ 2019.11.10.15.03.51.008.0 ]--
r 134         for(int i = 0; i < 32; i++){
--[ 2019.11.10.15.03.51.036.0 ]--
r 134         for(int i = 0; i < ; i++){
--[ 2019.11.10.15.03.51.075.0 ]--
r 134         for(int i = 0; i < 4; i++){
--[ 2019.11.10.15.03.51.134.0 ]--
+ 138                 
--[ 2019.11.10.15.03.51.165.0 ]--
- 138
--[ 2019.11.10.15.03.51.218.0 ]--
r 134         for(int i = 0; i < 4; i){
--[ 2019.11.10.15.03.51.273.0 ]--
r 134         for(int i = 0; i < 4; i ++){
--[ 2019.11.10.15.03.51.293.0 ]--
r 134         for(int i = 0; i < 4){
--[ 2019.11.10.15.03.51.323.0 ]--
r 134         for(int i = 0; i < 4, i){
--[ 2019.11.10.15.03.51.378.0 ]--
r 134         while(pfQueue.min().loc != end){
--[ 2019.11.10.15.03.51.410.0 ]--
r 132         
r 133         
r 139             begin = pfQueue.min(); 
--[ 2019.11.10.15.03.51.447.0 ]--
r 139             begin = pfQueue
--[ 2019.11.10.15.03.51.470.0 ]--
r 139             begin = pfQ
--[ 2019.11.10.15.03.51.500.0 ]--
r 139             begin = 
--[ 2019.11.10.15.03.51.529.0 ]--
r 139             begin = PFQ
--[ 2019.11.10.15.03.51.557.0 ]--
r 139             begin = PF
--[ 2019.11.10.15.03.51.661.0 ]--
r 139             begin = PFNode
--[ 2019.11.10.15.03.51.669.0 ]--
r 139             begin = PFN
--[ 2019.11.10.15.03.51.682.0 ]--
r 139             begin = PF
--[ 2019.11.10.15.03.51.711.0 ]--
r 139             begin = PFn
--[ 2019.11.10.15.03.51.745.0 ]--
r 139             begin = 
--[ 2019.11.10.15.03.51.772.0 ]--
r 139             begin = pFN
--[ 2019.11.10.15.03.51.807.0 ]--
r 139             
--[ 2019.11.10.15.03.51.894.0 ]--
- 139
--[ 2019.11.10.15.03.51.963.0 ]--
r 140         } 
--[ 2019.11.10.15.03.52.006.0 ]--
+ 140         }
r 141          */
--[ 2019.11.10.15.03.52.057.0 ]--
r 133         /*
--[ 2019.11.10.15.03.52.089.0 ]--
+ 132 
r 133         StdOut.println(pfQueue.min().getCost());
--[ 2019.11.10.15.03.52.148.0 ]--
r 133         StdOut.println(pfQueue.min().getCost();
--[ 2019.11.10.15.03.52.964.0 ]--
r 133         StdOut.println(pfQueue.min().getCost());
--[ 2019.11.10.15.03.52.994.0 ]--
r 133         StdOut.println(pfQueue.min().getCost();
--[ 2019.11.10.15.03.53.024.0 ]--
r 133         StdOut.println(pfQueue.min().get;
--[ 2019.11.10.15.03.53.058.0 ]--
r 133         StdOut.println(pfQueue.min();
--[ 2019.11.10.15.03.53.115.0 ]--
r 133         StdOut.println(pfQueue.min( );
--[ 2019.11.10.15.03.53.148.0 ]--
r 133         StdOut.println(pfQueue.min();
--[ 2019.11.10.15.03.53.175.0 ]--
r 133         StdOut.println(pfQueue.min());
--[ 2019.11.10.15.03.53.206.0 ]--
r 133         StdOut.println(pfQueue.min();
--[ 2019.11.10.15.03.53.240.0 ]--
r 133         StdOut.println(pfQueue.min(.);
--[ 2019.11.10.15.03.53.277.0 ]--
r 133         StdOut.println(pfQueue.min();
--[ 2019.11.10.15.03.53.300.0 ]--
r 133         StdOut.println(pfQueue.min();.);
--[ 2019.11.10.15.03.53.337.0 ]--
r 133         StdOut.println(pfQueue);
--[ 2019.11.10.15.03.53.365.0 ]--
r 133         StdOut.println(pfQ);
--[ 2019.11.10.15.03.53.387.0 ]--
r 133         StdOut.println();
--[ 2019.11.10.15.03.53.421.0 ]--
r 133         StdOut.
--[ 2019.11.10.15.03.53.455.0 ]--
r 133         StdOut
--[ 2019.11.10.15.03.53.483.0 ]--
r 133         S
--[ 2019.11.10.15.03.53.514.0 ]--
r 133         Sy
--[ 2019.11.10.15.03.53.548.0 ]--
r 133         
--[ 2019.11.10.15.03.53.575.0 ]--
- 133
--[ 2019.11.10.15.03.53.658.0 ]--
+ 141 
--[ 2019.11.10.15.03.53.677.0 ]--
r 141         
--[ 2019.11.10.15.03.53.710.0 ]--
- 141
- 141
--[ 2019.11.10.15.03.53.760.0 ]--
r 133         
--[ 2019.11.10.15.03.53.796.0 ]--
- 133
--[ 2019.11.10.15.03.53.831.0 ]--
+ 132 
+ 133         StdOut.println(pfQueue.min().loc);
+ 134         StdOut.println("Cost: " + pfQueue.min().getCost(0));
--[ 2019.11.10.15.03.54.961.0 ]--
r 134         StdOut.println(pfQueue.min().getCost(0));
r 135                 
--[ 2019.11.10.15.03.55.311.0 ]--
r 134         StdOut.println(pfQueue.min().getCost());
--[ 2019.11.10.15.03.55.704.0 ]--
r 134         StdOut.println(pfQueue.min().get);
--[ 2019.11.10.15.03.56.101.0 ]--
r 134         StdOut.println(pfQueue);
--[ 2019.11.10.15.03.56.166.0 ]--
r 134         StdOut.println(pf);
--[ 2019.11.10.15.03.56.316.0 ]--
r 134         StdOut.println();
--[ 2019.11.10.15.03.56.481.0 ]--
r 134         StdOut.
--[ 2019.11.10.15.03.56.570.0 ]--
r 134         StdOut
--[ 2019.11.10.15.03.56.694.0 ]--
r 134         Std
--[ 2019.11.10.15.03.56.846.0 ]--
r 134         
--[ 2019.11.10.15.03.56.948.0 ]--
- 134
--[ 2019.11.10.15.03.57.197.0 ]--
r 132         
r 133         
--[ 2019.11.10.15.03.57.362.0 ]--
- 132
--[ 2019.11.10.15.03.57.946.0 ]--
r 133         
--[ 2019.11.10.15.03.58.351.0 ]--
- 132
--[ 2019.11.10.15.03.58.494.0 ]--
r 132          
--[ 2019.11.10.15.04.03.761.0 ]--
- 133
r 133         
--[ 2019.11.10.15.04.04.174.0 ]--
- 132
--[ 2019.11.10.15.04.06.278.0 ]--
- 136
--[ 2019.11.10.15.04.06.472.0 ]--
r 136     }
--[ 2019.11.10.15.04.07.095.0 ]--
- 135
r 135             } }
--[ 2019.11.10.15.04.07.897.0 ]--
r 135             } 
--[ 2019.11.10.15.04.08.169.0 ]--
r 135             }
--[ 2019.11.10.15.04.15.522.0 ]--
r 133         for(PFNode p : begin.neighbors()){
--[ 2019.11.10.15.04.17.112.0 ]--
r 134             pfQueue.insert(p);
--[ 2019.11.10.15.04.18.010.0 ]--
r 135         }
--[ 2019.11.10.15.04.20.676.0 ]--
r 132 
--[ 2019.11.10.15.04.22.282.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.13.55.310.0 ]--
+ 132         
--[ 2019.11.10.15.13.56.103.0 ]--
+ 132         
--[ 2019.11.10.15.13.56.247.0 ]--
r 133         w
--[ 2019.11.10.15.13.56.325.0 ]--
r 133         wh
--[ 2019.11.10.15.13.56.357.0 ]--
r 133         whi
--[ 2019.11.10.15.13.56.540.0 ]--
r 133         whil
--[ 2019.11.10.15.13.56.595.0 ]--
r 133         while
--[ 2019.11.10.15.13.56.889.0 ]--
r 133         while()
--[ 2019.11.10.15.13.57.010.0 ]--
r 133         while(b)
--[ 2019.11.10.15.13.57.090.0 ]--
r 133         while(be)
--[ 2019.11.10.15.13.57.229.0 ]--
r 133         while(beg)
--[ 2019.11.10.15.13.57.326.0 ]--
r 133         while(begi)
--[ 2019.11.10.15.13.57.362.0 ]--
r 133         while(begin)
--[ 2019.11.10.15.13.57.537.0 ]--
r 133         while(begin.)
--[ 2019.11.10.15.13.57.703.0 ]--
r 133         while(begin.l)
--[ 2019.11.10.15.13.57.833.0 ]--
r 133         while(begin.lo)
--[ 2019.11.10.15.13.57.954.0 ]--
r 133         while(begin.loc)
--[ 2019.11.10.15.13.58.960.0 ]--
r 133         while(begin.loc )
--[ 2019.11.10.15.13.59.140.0 ]--
r 133         while(begin.loc !)
--[ 2019.11.10.15.13.59.276.0 ]--
r 133         while(begin.loc !=)
--[ 2019.11.10.15.13.59.352.0 ]--
r 133         while(begin.loc != )
--[ 2019.11.10.15.14.00.488.0 ]--
r 133         while(begin.loc != e)
--[ 2019.11.10.15.14.00.547.0 ]--
r 133         while(begin.loc != en)
--[ 2019.11.10.15.14.00.612.0 ]--
r 133         while(begin.loc != end)
--[ 2019.11.10.15.14.01.086.0 ]--
r 133         while(begin.loc != end);
--[ 2019.11.10.15.14.01.458.0 ]--
r 133         while(begin.loc != end)
--[ 2019.11.10.15.14.01.813.0 ]--
r 133         while(begin.loc != end){
--[ 2019.11.10.15.14.02.023.0 ]--
+ 134 
+ 135 }
--[ 2019.11.10.15.14.02.102.0 ]--
r 135         }
--[ 2019.11.10.15.14.02.130.0 ]--
r 134             
--[ 2019.11.10.15.14.06.432.0 ]--
- 136
+ 139 
--[ 2019.11.10.15.14.06.542.0 ]--
- 135
+ 137         }
--[ 2019.11.10.15.14.06.557.0 ]--
r 134 
r 135             for(PFNode p : begin.neighbors()){
r 136                 pfQueue.insert(p);
r 137             }
--[ 2019.11.10.15.14.06.656.0 ]--
- 134
+ 137 
--[ 2019.11.10.15.14.09.062.0 ]--
+ 134             
--[ 2019.11.10.15.14.10.504.0 ]--
r 134             p
--[ 2019.11.10.15.14.10.586.0 ]--
r 134             pf
--[ 2019.11.10.15.14.11.184.0 ]--
r 134             pfQueue
--[ 2019.11.10.15.14.11.313.0 ]--
r 134             pfQueue.
--[ 2019.11.10.15.14.12.312.0 ]--
r 134             pfQueue.delMin
--[ 2019.11.10.15.14.12.322.0 ]--
r 134             pfQueue.delMin()
--[ 2019.11.10.15.14.12.744.0 ]--
r 134             pfQueue.delMin();
--[ 2019.11.10.15.14.15.740.0 ]--
+ 138             
--[ 2019.11.10.15.14.50.475.0 ]--
+ 135             
--[ 2019.11.10.15.14.51.410.0 ]--
r 135             b
--[ 2019.11.10.15.14.51.457.0 ]--
r 135             bo
--[ 2019.11.10.15.14.51.513.0 ]--
r 135             boa
--[ 2019.11.10.15.14.51.864.0 ]--
r 135             boar
--[ 2019.11.10.15.14.52.026.0 ]--
r 135             board
--[ 2019.11.10.15.14.52.106.0 ]--
r 135             board[]
--[ 2019.11.10.15.14.52.675.0 ]--
r 135             board[ ]
--[ 2019.11.10.15.14.52.788.0 ]--
r 135             board[]
--[ 2019.11.10.15.14.54.402.0 ]--
r 135             board[b]
--[ 2019.11.10.15.14.54.524.0 ]--
r 135             board[be]
--[ 2019.11.10.15.14.54.629.0 ]--
r 135             board[beg]
--[ 2019.11.10.15.14.54.678.0 ]--
r 135             board[begi]
--[ 2019.11.10.15.14.54.729.0 ]--
r 135             board[begin]
--[ 2019.11.10.15.14.54.947.0 ]--
r 135             board[begin.]
--[ 2019.11.10.15.14.56.067.0 ]--
r 135             board[begin.loc]
--[ 2019.11.10.15.14.56.555.0 ]--
r 135             board[begin.loc.]
--[ 2019.11.10.15.14.56.866.0 ]--
r 135             board[begin.loc.g]
--[ 2019.11.10.15.14.57.407.0 ]--
r 135             board[begin.loc.getI]
--[ 2019.11.10.15.14.57.418.0 ]--
r 135             board[begin.loc.getI()]
--[ 2019.11.10.15.14.58.970.0 ]--
r 135             board[begin.loc.get()]
--[ 2019.11.10.15.14.59.322.0 ]--
r 135             board[begin.loc.getJ()]
--[ 2019.11.10.15.15.00.975.0 ]--
r 135             board[begin.loc.getJ()][]
--[ 2019.11.10.15.15.01.609.0 ]--
r 135             board[begin.loc.getJ()][b]
--[ 2019.11.10.15.15.01.684.0 ]--
r 135             board[begin.loc.getJ()][be]
--[ 2019.11.10.15.15.01.828.0 ]--
r 135             board[begin.loc.getJ()][beg]
--[ 2019.11.10.15.15.01.952.0 ]--
r 135             board[begin.loc.getJ()][begn]
--[ 2019.11.10.15.15.02.228.0 ]--
r 135             board[begin.loc.getJ()][beg]
--[ 2019.11.10.15.15.02.430.0 ]--
r 135             board[begin.loc.getJ()][begi]
--[ 2019.11.10.15.15.02.467.0 ]--
r 135             board[begin.loc.getJ()][begin]
--[ 2019.11.10.15.15.02.643.0 ]--
r 135             board[begin.loc.getJ()][begin.]
--[ 2019.11.10.15.15.02.813.0 ]--
r 135             board[begin.loc.getJ()][begin.l]
--[ 2019.11.10.15.15.02.963.0 ]--
r 135             board[begin.loc.getJ()][begin.lo]
--[ 2019.11.10.15.15.03.074.0 ]--
r 135             board[begin.loc.getJ()][begin.loc]
--[ 2019.11.10.15.15.03.266.0 ]--
r 135             board[begin.loc.getJ()][begin.loc.]
--[ 2019.11.10.15.15.03.487.0 ]--
r 135             board[begin.loc.getJ()][begin.loc.g]
--[ 2019.11.10.15.15.03.545.0 ]--
r 135             board[begin.loc.getJ()][begin.loc.ge]
--[ 2019.11.10.15.15.04.252.0 ]--
r 135             board[begin.loc.getJ()][begin.loc.getI]
--[ 2019.11.10.15.15.04.257.0 ]--
r 135             board[begin.loc.getJ()][begin.loc.getI()]
--[ 2019.11.10.15.15.05.510.0 ]--
r 135             board[begin.loc.getJ()][begin.loc.getI()] 
--[ 2019.11.10.15.15.05.640.0 ]--
r 135             board[begin.loc.getJ()][begin.loc.getI()] =
--[ 2019.11.10.15.15.05.701.0 ]--
r 135             board[begin.loc.getJ()][begin.loc.getI()] = 
--[ 2019.11.10.15.15.06.612.0 ]--
r 135             board[begin.loc.getJ()][begin.loc.getI()] = t
--[ 2019.11.10.15.15.06.735.0 ]--
r 135             board[begin.loc.getJ()][begin.loc.getI()] = tr
--[ 2019.11.10.15.15.06.765.0 ]--
r 135             board[begin.loc.getJ()][begin.loc.getI()] = tru
--[ 2019.11.10.15.15.06.848.0 ]--
r 135             board[begin.loc.getJ()][begin.loc.getI()] = true
--[ 2019.11.10.15.15.06.966.0 ]--
r 135             board[begin.loc.getJ()][begin.loc.getI()] = true;
--[ 2019.11.10.15.15.08.340.0 ]--
r 135             board[begin.loc.getJ()][begin.loc.getI()] = true; 
--[ 2019.11.10.15.15.08.387.0 ]--
r 135             board[begin.loc.getJ()][begin.loc.getI()] = true;
--[ 2019.11.10.15.15.26.865.0 ]--
+ 139             
--[ 2019.11.10.15.15.29.296.0 ]--
r 139             b
--[ 2019.11.10.15.15.29.358.0 ]--
r 139             be
--[ 2019.11.10.15.15.29.501.0 ]--
r 139             beg
--[ 2019.11.10.15.15.29.585.0 ]--
r 139             begi
--[ 2019.11.10.15.15.29.631.0 ]--
r 139             begin
--[ 2019.11.10.15.15.29.961.0 ]--
r 139             begin 
--[ 2019.11.10.15.15.30.049.0 ]--
r 139             begin =
--[ 2019.11.10.15.15.30.108.0 ]--
r 139             begin = 
--[ 2019.11.10.15.15.31.154.0 ]--
r 139             begin = p
--[ 2019.11.10.15.15.31.216.0 ]--
r 139             begin = pf
--[ 2019.11.10.15.15.32.189.0 ]--
r 139             begin = pfQueue
--[ 2019.11.10.15.15.32.357.0 ]--
r 139             begin = pfQueue.
--[ 2019.11.10.15.15.33.375.0 ]--
r 139             begin = pfQueue.m
--[ 2019.11.10.15.15.33.456.0 ]--
r 139             begin = pfQueue.mi
--[ 2019.11.10.15.15.33.717.0 ]--
r 139             begin = pfQueue.min
--[ 2019.11.10.15.15.33.970.0 ]--
r 139             begin = pfQueue.min()
--[ 2019.11.10.15.15.34.235.0 ]--
r 139             begin = pfQueue.min();
--[ 2019.11.10.15.15.34.703.0 ]--
r 139             begin = pfQueue.min(); 
--[ 2019.11.10.15.15.34.804.0 ]--
r 139             begin = pfQueue.min();
--[ 2019.11.10.15.15.37.520.0 ]--
- 140
--[ 2019.11.10.15.15.38.612.0 ]--
+ 140             
--[ 2019.11.10.15.15.40.991.0 ]--
r 140             s
--[ 2019.11.10.15.15.41.121.0 ]--
r 140             sy
--[ 2019.11.10.15.15.41.221.0 ]--
r 140             sys
--[ 2019.11.10.15.15.42.068.0 ]--
r 140             sy
--[ 2019.11.10.15.15.42.145.0 ]--
r 140             s
--[ 2019.11.10.15.15.42.253.0 ]--
r 140             
--[ 2019.11.10.15.15.42.436.0 ]--
r 140             S
--[ 2019.11.10.15.15.42.600.0 ]--
r 140             Sy
--[ 2019.11.10.15.15.43.387.0 ]--
r 140             S
--[ 2019.11.10.15.15.43.472.0 ]--
r 140             
--[ 2019.11.10.15.15.43.829.0 ]--
r 140             S
--[ 2019.11.10.15.15.44.017.0 ]--
r 140             St
--[ 2019.11.10.15.15.44.237.0 ]--
r 140             String 
--[ 2019.11.10.15.15.44.702.0 ]--
r 140             String
--[ 2019.11.10.15.15.44.795.0 ]--
r 140             Strin
--[ 2019.11.10.15.15.44.896.0 ]--
r 140             Stri
--[ 2019.11.10.15.15.44.995.0 ]--
r 140             Str
--[ 2019.11.10.15.15.45.107.0 ]--
r 140             St
--[ 2019.11.10.15.15.45.209.0 ]--
r 140             S
--[ 2019.11.10.15.15.45.329.0 ]--
r 140             
--[ 2019.11.10.15.15.45.477.0 ]--
r 140             S
--[ 2019.11.10.15.15.45.590.0 ]--
r 140             St
--[ 2019.11.10.15.15.46.205.0 ]--
r 140             Std
--[ 2019.11.10.15.15.46.739.0 ]--
r 140             StdOut
--[ 2019.11.10.15.15.46.857.0 ]--
r 140             StdOut.
--[ 2019.11.10.15.15.47.326.0 ]--
r 140             StdOut.println
--[ 2019.11.10.15.15.47.341.0 ]--
r 140             StdOut.println()
--[ 2019.11.10.15.15.47.353.0 ]--
r 140             StdOut.println();
--[ 2019.11.10.15.15.48.883.0 ]--
r 140             StdOut.println(b);
--[ 2019.11.10.15.15.48.995.0 ]--
r 140             StdOut.println(be);
--[ 2019.11.10.15.15.49.347.0 ]--
r 140             StdOut.println(beg);
--[ 2019.11.10.15.15.49.431.0 ]--
r 140             StdOut.println(begi);
--[ 2019.11.10.15.15.49.479.0 ]--
r 140             StdOut.println(begin);
--[ 2019.11.10.15.15.49.733.0 ]--
r 140             StdOut.println(begin.);
--[ 2019.11.10.15.15.49.816.0 ]--
r 140             StdOut.println(begin.l);
--[ 2019.11.10.15.15.49.950.0 ]--
r 140             StdOut.println(begin.lo);
--[ 2019.11.10.15.15.50.050.0 ]--
r 140             StdOut.println(begin.loc);
--[ 2019.11.10.15.16.08.646.0 ]--
r 132 
--[ 2019.11.10.15.16.10.324.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.16.24.632.0 ]--
+ 137                 
--[ 2019.11.10.15.16.28.248.0 ]--
r 137                 i
--[ 2019.11.10.15.16.28.355.0 ]--
r 137                 if
--[ 2019.11.10.15.16.28.905.0 ]--
r 137                 if()
--[ 2019.11.10.15.16.31.800.0 ]--
r 137                 if( )
--[ 2019.11.10.15.16.31.833.0 ]--
r 137                 if()
--[ 2019.11.10.15.16.41.413.0 ]--
r 137                 if(p)
--[ 2019.11.10.15.16.41.565.0 ]--
r 137                 if(p.)
--[ 2019.11.10.15.16.42.257.0 ]--
r 137                 if(p.l)
--[ 2019.11.10.15.16.42.459.0 ]--
r 137                 if(p.lo)
--[ 2019.11.10.15.16.42.561.0 ]--
r 137                 if(p.loc)
--[ 2019.11.10.15.16.43.247.0 ]--
r 137                 if(p.loc.)
--[ 2019.11.10.15.16.43.342.0 ]--
r 137                 if(p.loc.g)
--[ 2019.11.10.15.16.43.419.0 ]--
r 137                 if(p.loc.ge)
--[ 2019.11.10.15.16.46.193.0 ]--
r 137                 if(p.loc.getJ)
--[ 2019.11.10.15.16.46.200.0 ]--
r 137                 if(p.loc.getJ())
--[ 2019.11.10.15.16.47.909.0 ]--
r 137                 if(p.loc.getJ() )
--[ 2019.11.10.15.16.49.242.0 ]--
r 137                 if(p.loc.getJ() >)
--[ 2019.11.10.15.16.49.391.0 ]--
r 137                 if(p.loc.getJ() > )
--[ 2019.11.10.15.16.51.647.0 ]--
r 137                 if(p.loc.getJ() >)
--[ 2019.11.10.15.16.51.742.0 ]--
r 137                 if(p.loc.getJ() )
--[ 2019.11.10.15.16.52.993.0 ]--
r 137                 if(p.loc.getJ() >)
--[ 2019.11.10.15.16.53.317.0 ]--
r 137                 if(p.loc.getJ() >=)
--[ 2019.11.10.15.16.53.667.0 ]--
r 137                 if(p.loc.getJ() >= )
--[ 2019.11.10.15.16.53.719.0 ]--
r 137                 if(p.loc.getJ() >= 0)
--[ 2019.11.10.15.16.54.287.0 ]--
r 137                 if(p.loc.getJ() >= 0 )
--[ 2019.11.10.15.16.55.435.0 ]--
r 137                 if(p.loc.getJ() >= 0 &)
--[ 2019.11.10.15.16.55.529.0 ]--
r 137                 if(p.loc.getJ() >= 0 &&)
--[ 2019.11.10.15.16.55.693.0 ]--
r 137                 if(p.loc.getJ() >= 0 && )
--[ 2019.11.10.15.16.56.292.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p)
--[ 2019.11.10.15.16.56.743.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.)
--[ 2019.11.10.15.16.56.880.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.l)
--[ 2019.11.10.15.16.57.028.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.lo)
--[ 2019.11.10.15.16.57.084.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc)
--[ 2019.11.10.15.16.57.587.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.)
--[ 2019.11.10.15.16.57.723.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.g)
--[ 2019.11.10.15.16.57.797.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.ge)
--[ 2019.11.10.15.16.58.486.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI)
--[ 2019.11.10.15.16.58.513.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI())
--[ 2019.11.10.15.16.59.817.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() )
--[ 2019.11.10.15.17.00.677.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() <)
--[ 2019.11.10.15.17.01.172.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < )
--[ 2019.11.10.15.17.01.453.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < 2)
--[ 2019.11.10.15.17.01.545.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < 23)
--[ 2019.11.10.15.17.02.045.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < 2)
--[ 2019.11.10.15.17.02.148.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < )
--[ 2019.11.10.15.17.03.060.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < N)
--[ 2019.11.10.15.17.03.858.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < )
--[ 2019.11.10.15.17.04.357.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < t)
--[ 2019.11.10.15.17.05.107.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < te)
--[ 2019.11.10.15.17.05.408.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain)
--[ 2019.11.10.15.17.05.557.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain.)
--[ 2019.11.10.15.17.05.797.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain.g)
--[ 2019.11.10.15.17.05.865.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain.ge)
--[ 2019.11.10.15.17.05.972.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain.get)
--[ 2019.11.10.15.17.06.340.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain.getN)
--[ 2019.11.10.15.17.06.352.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain.getN())
--[ 2019.11.10.15.17.08.162.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain.getN()){
--[ 2019.11.10.15.17.08.948.0 ]--
+ 138 
+ 139 }
--[ 2019.11.10.15.17.09.000.0 ]--
r 139                 }
--[ 2019.11.10.15.17.09.046.0 ]--
r 138                     
--[ 2019.11.10.15.17.13.270.0 ]--
r 139                 pfQueue.insert(p);
r 140                 }
--[ 2019.11.10.15.17.13.326.0 ]--
r 138 
r 139                     pfQueue.insert(p);
--[ 2019.11.10.15.17.13.369.0 ]--
r 138                     pfQueue.insert(p);
r 139 
--[ 2019.11.10.15.17.13.941.0 ]--
r 138 
r 139                     pfQueue.insert(p);
--[ 2019.11.10.15.17.14.519.0 ]--
r 138                     pfQueue.insert(p);
r 139 
--[ 2019.11.10.15.17.17.918.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.17.29.671.0 ]--
r 137                 if(p.loc.get() >= 0 && p.loc.getI() < terrain.getN()){
--[ 2019.11.10.15.17.29.842.0 ]--
r 137                 if(p.loc.getI() >= 0 && p.loc.getI() < terrain.getN()){
--[ 2019.11.10.15.17.32.819.0 ]--
r 137                 if(p.loc.getI() >= 0 && p.loc.get() < terrain.getN()){
--[ 2019.11.10.15.17.32.986.0 ]--
r 137                 if(p.loc.getI() >= 0 && p.loc.getJ() < terrain.getN()){
--[ 2019.11.10.15.17.36.946.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.17.57.329.0 ]--
- 140
--[ 2019.11.10.15.17.57.639.0 ]--
- 139
--[ 2019.11.10.15.17.59.483.0 ]--
+ 139                     
--[ 2019.11.10.15.18.00.375.0 ]--
- 139
--[ 2019.11.10.15.18.01.157.0 ]--
+ 139                     
--[ 2019.11.10.15.18.02.029.0 ]--
r 139                     }
--[ 2019.11.10.15.18.02.172.0 ]--
r 137                 if(p.loc.getI() >= 0 && p.loc.getJ() < terrain.getN()) {
--[ 2019.11.10.15.18.02.175.0 ]--
r 139                 }
--[ 2019.11.10.15.18.02.629.0 ]--
r 139                 } 
--[ 2019.11.10.15.18.02.675.0 ]--
r 139                 }
--[ 2019.11.10.15.18.10.178.0 ]--
r 137                 if( {
--[ 2019.11.10.15.18.12.046.0 ]--
r 137                 if
--[ 2019.11.10.15.18.12.159.0 ]--
r 137                 i
--[ 2019.11.10.15.18.12.272.0 ]--
r 137                 
--[ 2019.11.10.15.18.12.450.0 ]--
- 137
--[ 2019.11.10.15.18.12.662.0 ]--
r 136             for(PFNode p : begin.neighbors())
--[ 2019.11.10.15.18.13.510.0 ]--
+ 136             for(PFNode p : begin.neighbors()){
r 137                 if( {
--[ 2019.11.10.15.18.14.223.0 ]--
r 137                 if
--[ 2019.11.10.15.18.14.326.0 ]--
r 137                 i
--[ 2019.11.10.15.18.14.422.0 ]--
r 137                 
--[ 2019.11.10.15.18.14.887.0 ]--
- 137
--[ 2019.11.10.15.18.16.020.0 ]--
r 138                 }\
--[ 2019.11.10.15.18.16.459.0 ]--
r 138                 }
--[ 2019.11.10.15.18.16.550.0 ]--
r 138                 
--[ 2019.11.10.15.18.16.824.0 ]--
- 138
--[ 2019.11.10.15.18.39.079.0 ]--
+ 66             
--[ 2019.11.10.15.18.43.193.0 ]--
- 66
--[ 2019.11.10.15.19.12.794.0 ]--
+ 136             
--[ 2019.11.10.15.19.13.323.0 ]--
r 136             i
--[ 2019.11.10.15.19.13.416.0 ]--
r 136             if
--[ 2019.11.10.15.19.14.467.0 ]--
r 136             if 
--[ 2019.11.10.15.19.14.531.0 ]--
r 136             if
--[ 2019.11.10.15.19.17.338.0 ]--
r 136             if 
--[ 2019.11.10.15.19.17.400.0 ]--
r 136             if
--[ 2019.11.10.15.19.17.533.0 ]--
r 136             i
--[ 2019.11.10.15.19.17.670.0 ]--
r 136             
--[ 2019.11.10.15.19.17.951.0 ]--
- 136
--[ 2019.11.10.15.19.18.876.0 ]--
+ 137                 
--[ 2019.11.10.15.19.19.683.0 ]--
r 137                 i
--[ 2019.11.10.15.19.19.766.0 ]--
r 137                 if
--[ 2019.11.10.15.19.20.352.0 ]--
r 137                 if()
--[ 2019.11.10.15.19.20.554.0 ]--
r 137                 if(p)
--[ 2019.11.10.15.19.20.716.0 ]--
r 137                 if(p.)
--[ 2019.11.10.15.19.21.471.0 ]--
r 137                 if(p.l)
--[ 2019.11.10.15.19.21.555.0 ]--
r 137                 if(p.lo)
--[ 2019.11.10.15.19.21.631.0 ]--
r 137                 if(p.loc)
--[ 2019.11.10.15.19.21.700.0 ]--
r 137                 if(p.loc.)
--[ 2019.11.10.15.19.21.803.0 ]--
r 137                 if(p.loc.g)
--[ 2019.11.10.15.19.21.870.0 ]--
r 137                 if(p.loc.ge)
--[ 2019.11.10.15.19.22.317.0 ]--
r 137                 if(p.loc.getI)
--[ 2019.11.10.15.19.22.330.0 ]--
r 137                 if(p.loc.getI())
--[ 2019.11.10.15.19.22.784.0 ]--
r 137                 if(p.loc.getI()
--[ 2019.11.10.15.19.22.882.0 ]--
r 137                 if(p.loc.getI)
--[ 2019.11.10.15.19.23.003.0 ]--
r 137                 if(p.loc.get)
--[ 2019.11.10.15.19.23.253.0 ]--
r 137                 if(p.loc.getJ)
--[ 2019.11.10.15.19.23.821.0 ]--
r 137                 if(p.loc.getJ())
--[ 2019.11.10.15.19.24.590.0 ]--
r 137                 if(p.loc.getJ() )
--[ 2019.11.10.15.19.25.381.0 ]--
r 137                 if(p.loc.getJ() <)
--[ 2019.11.10.15.19.25.574.0 ]--
r 137                 if(p.loc.getJ() <=)
--[ 2019.11.10.15.19.25.854.0 ]--
r 137                 if(p.loc.getJ() <= )
--[ 2019.11.10.15.19.26.117.0 ]--
r 137                 if(p.loc.getJ() <= 3)
--[ 2019.11.10.15.19.26.341.0 ]--
r 137                 if(p.loc.getJ() <= 32)
--[ 2019.11.10.15.19.26.636.0 ]--
r 137                 if(p.loc.getJ() <= 3)
--[ 2019.11.10.15.19.26.745.0 ]--
r 137                 if(p.loc.getJ() <= )
--[ 2019.11.10.15.19.26.824.0 ]--
r 137                 if(p.loc.getJ() <=)
--[ 2019.11.10.15.19.26.943.0 ]--
r 137                 if(p.loc.getJ() <)
--[ 2019.11.10.15.19.27.083.0 ]--
r 137                 if(p.loc.getJ() )
--[ 2019.11.10.15.19.27.236.0 ]--
r 137                 if(p.loc.getJ() >)
--[ 2019.11.10.15.19.27.430.0 ]--
r 137                 if(p.loc.getJ() >=)
--[ 2019.11.10.15.19.27.493.0 ]--
r 137                 if(p.loc.getJ() >=3)
--[ 2019.11.10.15.19.27.655.0 ]--
r 137                 if(p.loc.getJ() >=32)
--[ 2019.11.10.15.19.28.037.0 ]--
r 137                 if(p.loc.getJ() >=3)
--[ 2019.11.10.15.19.28.166.0 ]--
r 137                 if(p.loc.getJ() >=)
--[ 2019.11.10.15.19.28.253.0 ]--
r 137                 if(p.loc.getJ() >)
--[ 2019.11.10.15.19.28.377.0 ]--
r 137                 if(p.loc.getJ() )
--[ 2019.11.10.15.19.28.528.0 ]--
r 137                 if(p.loc.getJ() <)
--[ 2019.11.10.15.19.28.727.0 ]--
r 137                 if(p.loc.getJ() <3)
--[ 2019.11.10.15.19.28.893.0 ]--
r 137                 if(p.loc.getJ() <32)
--[ 2019.11.10.15.19.29.156.0 ]--
r 137                 if(p.loc.getJ() <32 )
--[ 2019.11.10.15.19.29.564.0 ]--
r 137                 if(p.loc.getJ() <32)
--[ 2019.11.10.15.19.29.673.0 ]--
r 137                 if(p.loc.getJ() <3)
--[ 2019.11.10.15.19.30.264.0 ]--
r 137                 if(p.loc.getJ() <)
--[ 2019.11.10.15.19.30.390.0 ]--
r 137                 if(p.loc.getJ() <=)
--[ 2019.11.10.15.19.30.498.0 ]--
r 137                 if(p.loc.getJ() <= )
--[ 2019.11.10.15.19.30.660.0 ]--
r 137                 if(p.loc.getJ() <= 3)
--[ 2019.11.10.15.19.30.747.0 ]--
r 137                 if(p.loc.getJ() <= 32)
--[ 2019.11.10.15.19.32.492.0 ]--
r 137                 if(p.loc.getJ() <= 32){
--[ 2019.11.10.15.19.32.615.0 ]--
+ 138 
+ 139 }
--[ 2019.11.10.15.19.32.635.0 ]--
r 139                 }
--[ 2019.11.10.15.19.32.650.0 ]--
r 138                     
--[ 2019.11.10.15.19.36.892.0 ]--
r 137                 if(p.loc.getJ() <= t){
--[ 2019.11.10.15.19.37.002.0 ]--
r 137                 if(p.loc.getJ() <= te){
--[ 2019.11.10.15.19.37.118.0 ]--
r 137                 if(p.loc.getJ() <= ter){
--[ 2019.11.10.15.19.37.229.0 ]--
r 137                 if(p.loc.getJ() <= terr){
--[ 2019.11.10.15.19.37.457.0 ]--
r 137                 if(p.loc.getJ() <= terrain){
--[ 2019.11.10.15.19.37.639.0 ]--
r 137                 if(p.loc.getJ() <= terrain.){
--[ 2019.11.10.15.19.37.732.0 ]--
r 137                 if(p.loc.getJ() <= terrain.g){
--[ 2019.11.10.15.19.38.071.0 ]--
r 137                 if(p.loc.getJ() <= terrain.ge){
--[ 2019.11.10.15.19.38.125.0 ]--
r 137                 if(p.loc.getJ() <= terrain.get){
--[ 2019.11.10.15.19.38.441.0 ]--
r 137                 if(p.loc.getJ() <= terrain.getN){
--[ 2019.11.10.15.19.38.692.0 ]--
r 137                 if(p.loc.getJ() <= terrain.getN()){
--[ 2019.11.10.15.19.46.827.0 ]--
r 139                     pfQueue.insert(p);
r 140                 }
--[ 2019.11.10.15.19.46.847.0 ]--
r 138 
--[ 2019.11.10.15.19.47.584.0 ]--
r 138                     pfQueue.insert(p);
r 139 
--[ 2019.11.10.15.19.51.082.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.19.58.229.0 ]--
r 137                 if(p.loc.getJ() < terrain.getN()){
--[ 2019.11.10.15.20.01.703.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.20.06.588.0 ]--
r 137                 if(p.loc.get() < terrain.getN()){
--[ 2019.11.10.15.20.06.775.0 ]--
r 137                 if(p.loc.getI() < terrain.getN()){
--[ 2019.11.10.15.20.10.307.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.20.35.483.0 ]--
+ 152         
--[ 2019.11.10.15.20.35.880.0 ]--
r 152         s
--[ 2019.11.10.15.20.35.926.0 ]--
r 152         s.
--[ 2019.11.10.15.20.36.166.0 ]--
r 152         s.p
--[ 2019.11.10.15.20.36.245.0 ]--
r 152         s.pu
--[ 2019.11.10.15.20.36.326.0 ]--
r 152         s.pus
--[ 2019.11.10.15.20.36.423.0 ]--
r 152         s.push
--[ 2019.11.10.15.20.37.122.0 ]--
r 152         s.push()
--[ 2019.11.10.15.20.38.089.0 ]--
r 152         s.push
--[ 2019.11.10.15.20.39.215.0 ]--
r 152         s.push()
--[ 2019.11.10.15.20.39.742.0 ]--
r 152         s.push(n)
--[ 2019.11.10.15.20.39.826.0 ]--
r 152         s.push(ne)
--[ 2019.11.10.15.20.39.975.0 ]--
r 152         s.push(new)
--[ 2019.11.10.15.20.40.027.0 ]--
r 152         s.push(new )
--[ 2019.11.10.15.20.40.171.0 ]--
r 152         s.push(new C)
--[ 2019.11.10.15.20.40.228.0 ]--
r 152         s.push(new CO)
--[ 2019.11.10.15.20.40.332.0 ]--
r 152         s.push(new COo)
--[ 2019.11.10.15.20.40.429.0 ]--
r 152         s.push(new COor)
--[ 2019.11.10.15.20.40.572.0 ]--
r 152         s.push(new COord)
--[ 2019.11.10.15.20.40.784.0 ]--
r 152         s.push(new COor)
--[ 2019.11.10.15.20.40.899.0 ]--
r 152         s.push(new COo)
--[ 2019.11.10.15.20.41.007.0 ]--
r 152         s.push(new CO)
--[ 2019.11.10.15.20.41.121.0 ]--
r 152         s.push(new C)
--[ 2019.11.10.15.20.41.258.0 ]--
r 152         s.push(new Co)
--[ 2019.11.10.15.20.41.403.0 ]--
r 152         s.push(new Coo)
--[ 2019.11.10.15.20.41.458.0 ]--
r 152         s.push(new Coor)
--[ 2019.11.10.15.20.41.600.0 ]--
r 152         s.push(new Coord)
--[ 2019.11.10.15.20.41.788.0 ]--
r 152         s.push(new Coord())
--[ 2019.11.10.15.20.43.132.0 ]--
r 152         s.push(new Coord(3))
--[ 2019.11.10.15.20.43.213.0 ]--
r 152         s.push(new Coord(31))
--[ 2019.11.10.15.20.43.391.0 ]--
r 152         s.push(new Coord(31,))
--[ 2019.11.10.15.20.43.538.0 ]--
r 152         s.push(new Coord(31,1))
--[ 2019.11.10.15.20.45.335.0 ]--
r 152         s.push(new Coord(31,1));
--[ 2019.11.10.15.20.47.589.0 ]--
+ 132         
--[ 2019.11.10.15.20.49.361.0 ]--
r 132         /
--[ 2019.11.10.15.20.49.470.0 ]--
r 132         /*
--[ 2019.11.10.15.20.52.185.0 ]--
+ 147 
+ 149          */
--[ 2019.11.10.15.20.57.460.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.21.05.009.0 ]--
r 155         s.push(new Coord(3,1));
--[ 2019.11.10.15.21.05.066.0 ]--
r 155         s.push(new Coord(32,1));
--[ 2019.11.10.15.21.09.093.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.21.14.982.0 ]--
r 155         s.push(new Coord(32,));
--[ 2019.11.10.15.21.15.081.0 ]--
r 155         s.push(new Coord(32,2));
--[ 2019.11.10.15.21.15.951.0 ]--
r 155         s.push(new Coord(32,));
--[ 2019.11.10.15.21.16.068.0 ]--
r 155         s.push(new Coord(32,3));
--[ 2019.11.10.15.21.16.108.0 ]--
r 155         s.push(new Coord(32,32));
--[ 2019.11.10.15.21.20.746.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.21.26.091.0 ]--
r 155         s.push(new Coord(32,));
--[ 2019.11.10.15.21.26.373.0 ]--
r 155         s.push(new Coord(32,2));
--[ 2019.11.10.15.21.26.683.0 ]--
r 155         s.push(new Coord(32,));
--[ 2019.11.10.15.21.26.938.0 ]--
r 155         s.push(new Coord(32,1));
--[ 2019.11.10.15.21.27.301.0 ]--
r 155         s.push(new Coord(3,1));
--[ 2019.11.10.15.21.27.552.0 ]--
r 155         s.push(new Coord(31,1));
--[ 2019.11.10.15.21.28.127.0 ]--
- 147
- 148
--[ 2019.11.10.15.21.30.095.0 ]--
r 132         
--[ 2019.11.10.15.21.34.604.0 ]--
r 153         
--[ 2019.11.10.15.21.34.851.0 ]--
- 153
--[ 2019.11.10.15.22.44.902.0 ]--
+ 144             
--[ 2019.11.10.15.22.45.619.0 ]--
r 144             s
--[ 2019.11.10.15.22.45.723.0 ]--
r 144             s.
--[ 2019.11.10.15.22.47.088.0 ]--
r 144             s.p
--[ 2019.11.10.15.22.47.173.0 ]--
r 144             s.pu
--[ 2019.11.10.15.22.47.593.0 ]--
r 144             s.pus
--[ 2019.11.10.15.22.47.644.0 ]--
r 144             s.push
--[ 2019.11.10.15.22.48.646.0 ]--
r 144             s.push()
--[ 2019.11.10.15.22.48.801.0 ]--
r 144             s.push(b)
--[ 2019.11.10.15.22.48.908.0 ]--
r 144             s.push(be)
--[ 2019.11.10.15.22.49.071.0 ]--
r 144             s.push(beg)
--[ 2019.11.10.15.22.49.167.0 ]--
r 144             s.push(begi)
--[ 2019.11.10.15.22.49.215.0 ]--
r 144             s.push(begin)
--[ 2019.11.10.15.22.49.811.0 ]--
r 144             s.push(begin);
--[ 2019.11.10.15.22.49.958.0 ]--
r 144             s.push(begin); 
--[ 2019.11.10.15.22.50.022.0 ]--
r 144             s.push(begin);
--[ 2019.11.10.15.22.55.557.0 ]--
r 144             s.push(begin.);
--[ 2019.11.10.15.22.55.729.0 ]--
r 144             s.push(begin.l);
--[ 2019.11.10.15.22.55.889.0 ]--
r 144             s.push(begin.lo);
--[ 2019.11.10.15.22.55.935.0 ]--
r 144             s.push(begin.loc);
--[ 2019.11.10.15.23.06.669.0 ]--
r 134         f
--[ 2019.11.10.15.23.06.743.0 ]--
r 134         fo
--[ 2019.11.10.15.23.06.793.0 ]--
r 134         for
--[ 2019.11.10.15.23.06.967.0 ]--
r 134         for()
--[ 2019.11.10.15.23.07.203.0 ]--
r 134         for(i)
--[ 2019.11.10.15.23.08.058.0 ]--
r 134         for(in)
--[ 2019.11.10.15.23.08.147.0 ]--
r 134         for(int)
--[ 2019.11.10.15.23.08.164.0 ]--
r 134         for(int )
--[ 2019.11.10.15.23.08.224.0 ]--
r 134         for(int i)
--[ 2019.11.10.15.23.08.377.0 ]--
r 134         for(int i )
--[ 2019.11.10.15.23.08.412.0 ]--
r 134         for(int i =)
--[ 2019.11.10.15.23.08.495.0 ]--
r 134         for(int i = )
--[ 2019.11.10.15.23.08.599.0 ]--
r 134         for(int i = 0)
--[ 2019.11.10.15.23.09.310.0 ]--
r 134         for(int i = 0;)
--[ 2019.11.10.15.23.09.396.0 ]--
r 134         for(int i = 0; )
--[ 2019.11.10.15.23.09.491.0 ]--
r 134         for(int i = 0; i)
--[ 2019.11.10.15.23.09.575.0 ]--
r 134         for(int i = 0; i )
--[ 2019.11.10.15.23.09.750.0 ]--
r 134         for(int i = 0; i <)
--[ 2019.11.10.15.23.09.833.0 ]--
r 134         for(int i = 0; i < )
--[ 2019.11.10.15.23.11.606.0 ]--
r 134         for(int i = 0; i < 3)
--[ 2019.11.10.15.23.11.660.0 ]--
r 134         for(int i = 0; i < 32)
--[ 2019.11.10.15.23.12.197.0 ]--
r 134         for(int i = 0; i < 32;)
--[ 2019.11.10.15.23.12.354.0 ]--
r 134         for(int i = 0; i < 32; )
--[ 2019.11.10.15.23.12.662.0 ]--
r 134         for(int i = 0; i < 32; i)
--[ 2019.11.10.15.23.12.761.0 ]--
r 134         for(int i = 0; i < 32; i )
--[ 2019.11.10.15.23.12.827.0 ]--
r 134         for(int i = 0; i < 32; i +)
--[ 2019.11.10.15.23.12.945.0 ]--
r 134         for(int i = 0; i < 32; i ++)
--[ 2019.11.10.15.23.13.462.0 ]--
r 134         for(int i = 0; i < 32; i +)
--[ 2019.11.10.15.23.13.548.0 ]--
r 134         for(int i = 0; i < 32; i )
--[ 2019.11.10.15.23.13.664.0 ]--
r 134         for(int i = 0; i < 32; i)
--[ 2019.11.10.15.23.14.354.0 ]--
r 134         for(int i = 0; i < 32; i+)
--[ 2019.11.10.15.23.14.450.0 ]--
r 134         for(int i = 0; i < 32; i++)
--[ 2019.11.10.15.23.17.887.0 ]--
r 134         for(int i = 0; i < 32; i++){
--[ 2019.11.10.15.23.20.393.0 ]--
r 132 
--[ 2019.11.10.15.23.22.132.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.23.32.093.0 ]--
r 151         s = new Stack<>();
r 152         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerException
--[ 2019.11.10.15.23.32.571.0 ]--
r 150         s = new Stack<>();
r 151 
--[ 2019.11.10.15.23.32.605.0 ]--
r 149         s = new Stack<>();
r 150 
--[ 2019.11.10.15.23.32.639.0 ]--
r 148         s = new Stack<>();
r 149 
--[ 2019.11.10.15.23.32.673.0 ]--
r 147         s = new Stack<>();
r 148         }
--[ 2019.11.10.15.23.32.697.0 ]--
r 147             s = new Stack<>();
--[ 2019.11.10.15.23.32.717.0 ]--
r 146             s = new Stack<>();
r 147 
--[ 2019.11.10.15.23.32.751.0 ]--
r 145             s = new Stack<>();
r 146             StdOut.println(begin.loc);
--[ 2019.11.10.15.23.32.773.0 ]--
r 144             s = new Stack<>();
r 145             s.push(begin.loc);
--[ 2019.11.10.15.23.32.801.0 ]--
r 143             s = new Stack<>();
r 144             begin = pfQueue.min();
--[ 2019.11.10.15.23.32.837.0 ]--
r 142             s = new Stack<>();
r 143             }
--[ 2019.11.10.15.23.32.849.0 ]--
r 142                 s = new Stack<>();
--[ 2019.11.10.15.23.32.868.0 ]--
r 141                 s = new Stack<>();
r 142                 }
--[ 2019.11.10.15.23.32.883.0 ]--
r 141                     s = new Stack<>();
--[ 2019.11.10.15.23.32.911.0 ]--
r 140                     s = new Stack<>();
r 141 
--[ 2019.11.10.15.23.32.935.0 ]--
r 139                     s = new Stack<>();
r 140                     pfQueue.insert(p);
--[ 2019.11.10.15.23.32.958.0 ]--
r 138                     s = new Stack<>();
r 139                 if(p.loc.getI() < terrain.getN()){
--[ 2019.11.10.15.23.32.967.0 ]--
r 138                 s = new Stack<>();
--[ 2019.11.10.15.23.32.992.0 ]--
r 137                 s = new Stack<>();
r 138             for(PFNode p : begin.neighbors()){
--[ 2019.11.10.15.23.33.005.0 ]--
r 137             s = new Stack<>();
--[ 2019.11.10.15.23.33.026.0 ]--
r 136             s = new Stack<>();
r 137             board[begin.loc.getJ()][begin.loc.getI()] = true;
--[ 2019.11.10.15.23.33.054.0 ]--
r 135             s = new Stack<>();
r 136             pfQueue.delMin();
--[ 2019.11.10.15.23.33.082.0 ]--
r 134             s = new Stack<>();
r 135         for(int i = 0; i < 32; i++){
--[ 2019.11.10.15.23.33.094.0 ]--
r 134         s = new Stack<>();
--[ 2019.11.10.15.23.33.116.0 ]--
r 133         s = new Stack<>();
r 134 
--[ 2019.11.10.15.23.36.891.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.23.44.969.0 ]--
r 135         for(int i = 0; i < 3; i++){
--[ 2019.11.10.15.23.45.098.0 ]--
r 135         for(int i = 0; i < ; i++){
--[ 2019.11.10.15.23.45.317.0 ]--
r 135         for(int i = 0; i < 1; i++){
--[ 2019.11.10.15.23.45.348.0 ]--
r 135         for(int i = 0; i < 10; i++){
--[ 2019.11.10.15.23.45.459.0 ]--
r 135         for(int i = 0; i < 100; i++){
--[ 2019.11.10.15.23.49.227.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.23.54.582.0 ]--
r 135         for(int i = 0; i <100; i++){
--[ 2019.11.10.15.23.55.201.0 ]--
r 135         for(int i = 0; i < 100; i++){
--[ 2019.11.10.15.23.55.550.0 ]--
r 135         for(int i = 0; i < 00; i++){
--[ 2019.11.10.15.23.55.597.0 ]--
r 135         for(int i = 0; i < 500; i++){
--[ 2019.11.10.15.23.59.078.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.24.11.418.0 ]--
r 135         for(int i = 0; i < 00; i++){
--[ 2019.11.10.15.24.11.596.0 ]--
r 135         for(int i = 0; i < 100; i++){
--[ 2019.11.10.15.24.11.885.0 ]--
r 135         for(int i = 0; i <100; i++){
--[ 2019.11.10.15.24.12.043.0 ]--
r 135         for(int i = 0; i < 100; i++){
--[ 2019.11.10.15.24.12.363.0 ]--
r 135         for(int i = 0; i < ; i++){
--[ 2019.11.10.15.24.12.484.0 ]--
r 135         for(int i = 0; i < 32; i++){
--[ 2019.11.10.15.24.12.795.0 ]--
r 133 
r 134         s = new Stack<>();
--[ 2019.11.10.15.24.12.925.0 ]--
r 134         for(int i = 0; i < 32; i++){
r 135             s = new Stack<>();
--[ 2019.11.10.15.24.13.279.0 ]--
r 135             pfQueue.delMin();
r 136             s = new Stack<>();
--[ 2019.11.10.15.24.13.610.0 ]--
r 136             board[begin.loc.getJ()][begin.loc.getI()] = true;
r 137             s = new Stack<>();
--[ 2019.11.10.15.24.13.747.0 ]--
r 137             for(PFNode p : begin.neighbors()){
r 138                 s = new Stack<>();
--[ 2019.11.10.15.24.13.869.0 ]--
r 138                 if(p.loc.getI() < terrain.getN()){
r 139                     s = new Stack<>();
--[ 2019.11.10.15.24.14.040.0 ]--
r 139                     pfQueue.insert(p);
r 140                     s = new Stack<>();
--[ 2019.11.10.15.24.14.249.0 ]--
r 140 
r 141                     s = new Stack<>();
--[ 2019.11.10.15.24.14.355.0 ]--
r 141                 }
r 142                 s = new Stack<>();
--[ 2019.11.10.15.24.14.852.0 ]--
r 142             }
r 143             s = new Stack<>();
--[ 2019.11.10.15.24.14.980.0 ]--
r 143             begin = pfQueue.min();
r 144             s = new Stack<>();
--[ 2019.11.10.15.24.15.098.0 ]--
r 144             s.push(begin.loc);
r 145             s = new Stack<>();
--[ 2019.11.10.15.24.15.229.0 ]--
r 145             StdOut.println(begin.loc);
r 146             s = new Stack<>();
--[ 2019.11.10.15.24.15.395.0 ]--
r 146 
r 147             s = new Stack<>();
--[ 2019.11.10.15.24.15.564.0 ]--
r 147         }
r 148         s = new Stack<>();
--[ 2019.11.10.15.24.15.669.0 ]--
r 148 
r 149         s = new Stack<>();
--[ 2019.11.10.15.24.15.859.0 ]--
r 149 
r 150         s = new Stack<>();
--[ 2019.11.10.15.24.16.011.0 ]--
r 150 
r 151         s = new Stack<>();
--[ 2019.11.10.15.24.16.204.0 ]--
r 151         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerException
r 152         s = new Stack<>();
--[ 2019.11.10.15.24.16.599.0 ]--
r 132         
r 134         for(int i = 0; i < 32; i++)
--[ 2019.11.10.15.24.16.955.0 ]--
r 134         for(int i = 0; i < 32; i)
--[ 2019.11.10.15.24.17.140.0 ]--
r 134         for(int i = 0; i < 32; i ++)
--[ 2019.11.10.15.24.17.249.0 ]--
r 134         while(begin.loc != end){
--[ 2019.11.10.15.24.17.773.0 ]--
r 144             s.push(begin);
--[ 2019.11.10.15.24.17.832.0 ]--
r 144             s.push(begin); 
--[ 2019.11.10.15.24.17.868.0 ]--
r 144             
--[ 2019.11.10.15.24.17.904.0 ]--
- 144
--[ 2019.11.10.15.24.17.963.0 ]--
+ 153         s.push(new Coord(31,1));
--[ 2019.11.10.15.24.18.018.0 ]--
- 132
--[ 2019.11.10.15.24.18.074.0 ]--
r 152         s.push(new C)
--[ 2019.11.10.15.24.18.106.0 ]--
r 152         s.push(new COord)
--[ 2019.11.10.15.24.18.138.0 ]--
r 152         s.push
--[ 2019.11.10.15.24.18.165.0 ]--
r 152         s.push()
--[ 2019.11.10.15.24.18.197.0 ]--
r 152         
--[ 2019.11.10.15.24.18.233.0 ]--
- 152
--[ 2019.11.10.15.24.18.284.0 ]--
r 137                 if(p.loc.get() < terrain.getN()){
--[ 2019.11.10.15.24.18.316.0 ]--
r 137                 if(p.loc.getJ() < terrain.getN()){
--[ 2019.11.10.15.24.18.381.0 ]--
r 137                 if(p.loc.getJ() <= terrain.getN()){
--[ 2019.11.10.15.24.18.877.0 ]--
r 138 
r 139                     pfQueue.insert(p);
--[ 2019.11.10.15.24.19.379.0 ]--
r 138                     
r 139                 }
r 140                     pfQueue.insert(p);
--[ 2019.11.10.15.24.19.433.0 ]--
r 137                 if(p.loc.getJ() <= terrain){
--[ 2019.11.10.15.24.19.462.0 ]--
r 137                 if(p.loc.getJ() <= terr){
--[ 2019.11.10.15.24.19.497.0 ]--
r 137                 if(p.loc.getJ() <= 32){
--[ 2019.11.10.15.24.19.632.0 ]--
- 138
- 138
--[ 2019.11.10.15.24.19.713.0 ]--
r 137                 if(p.loc.getJ() <32 )
--[ 2019.11.10.15.24.19.740.0 ]--
r 137                 if(p.loc.getJ() )
--[ 2019.11.10.15.24.19.749.0 ]--
r 137                 if(p.loc.getJ() >=32)
--[ 2019.11.10.15.24.19.777.0 ]--
r 137                 if(p.loc.getJ() )
--[ 2019.11.10.15.24.20.111.0 ]--
r 137                 if(p.loc.getJ() <= 32)
--[ 2019.11.10.15.24.20.598.0 ]--
r 137                 if(p.loc.get)
--[ 2019.11.10.15.24.20.621.0 ]--
r 137                 if(p.loc.getI())
--[ 2019.11.10.15.24.20.650.0 ]--
r 137                 if(p.loc.ge)
--[ 2019.11.10.15.24.20.683.0 ]--
r 137                 
--[ 2019.11.10.15.24.20.717.0 ]--
- 137
--[ 2019.11.10.15.24.20.778.0 ]--
+ 136             if 
--[ 2019.11.10.15.24.20.803.0 ]--
r 136             if
--[ 2019.11.10.15.24.20.832.0 ]--
r 136             if 
--[ 2019.11.10.15.24.20.863.0 ]--
r 136             
--[ 2019.11.10.15.24.20.905.0 ]--
- 136
--[ 2019.11.10.15.24.20.989.0 ]--
+ 66             
--[ 2019.11.10.15.24.21.015.0 ]--
- 66
--[ 2019.11.10.15.24.21.063.0 ]--
+ 138                 }\
--[ 2019.11.10.15.24.21.080.0 ]--
r 138                 }
--[ 2019.11.10.15.24.21.153.0 ]--
+ 137                 if( {
--[ 2019.11.10.15.24.21.205.0 ]--
r 137                 if(p.loc.getI() >= 0 && p.loc.getJ() < terrain.getN()) {
--[ 2019.11.10.15.24.21.296.0 ]--
r 139                 } 
--[ 2019.11.10.15.24.21.307.0 ]--
r 139                 }
--[ 2019.11.10.15.24.21.331.0 ]--
r 137                 if(p.loc.getI() >= 0 && p.loc.getJ() < terrain.getN()){
r 139                     }
--[ 2019.11.10.15.24.21.366.0 ]--
r 139                     
--[ 2019.11.10.15.24.22.281.0 ]--
- 139
--[ 2019.11.10.15.24.22.746.0 ]--
+ 139                     
--[ 2019.11.10.15.24.22.776.0 ]--
- 139
--[ 2019.11.10.15.24.22.838.0 ]--
+ 139 
--[ 2019.11.10.15.24.22.870.0 ]--
+ 140                 }
--[ 2019.11.10.15.24.22.915.0 ]--
r 137                 if(p.loc.getI() >= 0 && p.loc.get() < terrain.getN()){
--[ 2019.11.10.15.24.22.946.0 ]--
r 137                 if(p.loc.getI() >= 0 && p.loc.getI() < terrain.getN()){
--[ 2019.11.10.15.24.23.007.0 ]--
r 137                 if(p.loc.get() >= 0 && p.loc.getI() < terrain.getN()){
--[ 2019.11.10.15.24.23.104.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain.getN()){
--[ 2019.11.10.15.24.23.128.0 ]--
r 138 
r 139                     pfQueue.insert(p);
--[ 2019.11.10.15.24.23.159.0 ]--
r 138                     pfQueue.insert(p);
r 139 
--[ 2019.11.10.15.24.23.193.0 ]--
r 138 
r 139                     pfQueue.insert(p);
--[ 2019.11.10.15.24.23.218.0 ]--
r 138                     
r 139                 }
r 140                 pfQueue.insert(p);
--[ 2019.11.10.15.24.23.273.0 ]--
- 138
- 138
--[ 2019.11.10.15.24.23.304.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain.getN())
--[ 2019.11.10.15.24.23.351.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain.get)
--[ 2019.11.10.15.24.23.383.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain)
--[ 2019.11.10.15.24.23.460.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < te)
--[ 2019.11.10.15.24.23.489.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < N)
--[ 2019.11.10.15.24.23.514.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < )
--[ 2019.11.10.15.24.23.542.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI() < 23)
--[ 2019.11.10.15.24.23.574.0 ]--
r 137                 if(p.loc.getJ() >= 0 && p.loc.getI())
--[ 2019.11.10.15.24.28.617.0 ]--
r 137                 
--[ 2019.11.10.15.24.28.855.0 ]--
- 137
--[ 2019.11.10.15.24.33.893.0 ]--
r 133 
--[ 2019.11.10.15.24.34.085.0 ]--
- 132
r 132         
--[ 2019.11.10.15.24.36.355.0 ]--
r 133         pfQueue.delMin();
--[ 2019.11.10.15.24.37.889.0 ]--
r 134         board[begin.loc.getJ()][begin.loc.getI()] = true;
--[ 2019.11.10.15.24.39.339.0 ]--
r 135         for(PFNode p : begin.neighbors()){
--[ 2019.11.10.15.24.41.030.0 ]--
r 136             pfQueue.insert(p);
--[ 2019.11.10.15.24.41.938.0 ]--
r 137         }
--[ 2019.11.10.15.24.43.845.0 ]--
r 138         begin = pfQueue.min();
--[ 2019.11.10.15.24.45.662.0 ]--
r 139         StdOut.println(begin.loc);
--[ 2019.11.10.15.24.46.828.0 ]--
r 141         
--[ 2019.11.10.15.24.47.127.0 ]--
- 140
--[ 2019.11.10.15.24.49.163.0 ]--
+ 138         
--[ 2019.11.10.15.24.50.421.0 ]--
+ 135         
--[ 2019.11.10.15.25.07.493.0 ]--
+ 142         
--[ 2019.11.10.15.25.07.594.0 ]--
+ 142         
--[ 2019.11.10.15.25.21.131.0 ]--
+ 113     
--[ 2019.11.10.15.25.21.558.0 ]--
+ 113     
--[ 2019.11.10.15.25.21.946.0 ]--
r 114     p
--[ 2019.11.10.15.25.21.979.0 ]--
r 114     pu
--[ 2019.11.10.15.25.22.197.0 ]--
r 114     pub
--[ 2019.11.10.15.25.22.226.0 ]--
r 114     publ
--[ 2019.11.10.15.25.22.364.0 ]--
r 114     publi
--[ 2019.11.10.15.25.22.470.0 ]--
r 114     public
--[ 2019.11.10.15.25.22.531.0 ]--
r 114     public 
--[ 2019.11.10.15.25.22.724.0 ]--
r 114     public o
--[ 2019.11.10.15.25.22.879.0 ]--
r 114     public oi
--[ 2019.11.10.15.25.23.003.0 ]--
r 114     public o
--[ 2019.11.10.15.25.23.219.0 ]--
r 114     public 
--[ 2019.11.10.15.25.23.295.0 ]--
r 114     public v
--[ 2019.11.10.15.25.23.417.0 ]--
r 114     public vo
--[ 2019.11.10.15.25.23.497.0 ]--
r 114     public voi
--[ 2019.11.10.15.25.23.596.0 ]--
r 114     public void
--[ 2019.11.10.15.25.24.459.0 ]--
r 114     public void 
--[ 2019.11.10.15.25.25.114.0 ]--
r 114     public void p
--[ 2019.11.10.15.25.25.190.0 ]--
r 114     public void pr
--[ 2019.11.10.15.25.25.264.0 ]--
r 114     public void pri
--[ 2019.11.10.15.25.25.312.0 ]--
r 114     public void prin
--[ 2019.11.10.15.25.25.379.0 ]--
r 114     public void print
--[ 2019.11.10.15.25.25.853.0 ]--
r 114     public void printB
--[ 2019.11.10.15.25.25.918.0 ]--
r 114     public void printBo
--[ 2019.11.10.15.25.25.974.0 ]--
r 114     public void printBoa
--[ 2019.11.10.15.25.26.057.0 ]--
r 114     public void printBoar
--[ 2019.11.10.15.25.26.218.0 ]--
r 114     public void printBoard
--[ 2019.11.10.15.25.26.334.0 ]--
r 114     public void printBoard()
--[ 2019.11.10.15.25.26.716.0 ]--
r 114     public void printBoard(){}
--[ 2019.11.10.15.25.26.921.0 ]--
+ 114     public void printBoard(){
r 115     }
--[ 2019.11.10.15.25.26.951.0 ]--
+ 115         
--[ 2019.11.10.15.25.27.309.0 ]--
+ 115         for(int i = 0; i < terrain.getN(); i++){
+ 116             for(int j = 0; j < terrain.getN(); j++){
+ 117                 board[i][j] = false;
+ 118                 //System.out.print(board[i][j] + " ");
+ 119             }
+ 120             //System.out.println();
r 121         }
--[ 2019.11.10.15.25.38.314.0 ]--
r 117                 
--[ 2019.11.10.15.25.38.476.0 ]--
- 117
--[ 2019.11.10.15.25.41.686.0 ]--
r 117                 /System.out.print(board[i][j] + " ");
--[ 2019.11.10.15.25.41.757.0 ]--
r 117                 System.out.print(board[i][j] + " ");
--[ 2019.11.10.15.25.42.769.0 ]--
r 119             /System.out.println();
--[ 2019.11.10.15.25.42.879.0 ]--
r 119             System.out.println();
--[ 2019.11.10.15.25.48.065.0 ]--
r 152         p
--[ 2019.11.10.15.25.48.139.0 ]--
r 152         pr
--[ 2019.11.10.15.25.48.207.0 ]--
r 152         pri
--[ 2019.11.10.15.25.48.245.0 ]--
r 152         prin
--[ 2019.11.10.15.25.48.316.0 ]--
r 152         print
--[ 2019.11.10.15.25.48.896.0 ]--
r 152         printBoard
--[ 2019.11.10.15.25.48.906.0 ]--
r 152         printBoard()
--[ 2019.11.10.15.25.48.920.0 ]--
r 152         printBoard();
--[ 2019.11.10.15.25.50.556.0 ]--
r 113 
r 141 
r 144 
r 148 
r 151 
r 153 
--[ 2019.11.10.15.25.52.780.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.26.05.975.0 ]--
+ 151         
--[ 2019.11.10.15.26.06.136.0 ]--
+ 151         
--[ 2019.11.10.15.26.06.756.0 ]--
r 152          
--[ 2019.11.10.15.26.06.834.0 ]--
r 152         
--[ 2019.11.10.15.26.08.999.0 ]--
r 152         p
--[ 2019.11.10.15.26.09.076.0 ]--
r 152         pf
--[ 2019.11.10.15.26.09.336.0 ]--
r 152         pfQ
--[ 2019.11.10.15.26.09.974.0 ]--
r 152         pfQueue
--[ 2019.11.10.15.26.10.168.0 ]--
r 152         pfQueue.
--[ 2019.11.10.15.26.10.622.0 ]--
r 152         pfQueue.d
--[ 2019.11.10.15.26.10.651.0 ]--
r 152         pfQueue.de
--[ 2019.11.10.15.26.10.740.0 ]--
r 152         pfQueue.del
--[ 2019.11.10.15.26.11.310.0 ]--
r 152         pfQueue.delM
--[ 2019.11.10.15.26.11.638.0 ]--
r 152         pfQueue.delMi
--[ 2019.11.10.15.26.11.687.0 ]--
r 152         pfQueue.delMin
--[ 2019.11.10.15.26.11.942.0 ]--
r 152         pfQueue.delMin()
--[ 2019.11.10.15.26.13.068.0 ]--
r 152         pfQueue.delMin();
--[ 2019.11.10.15.26.13.271.0 ]--
r 152         pfQueue.delMin(); 
--[ 2019.11.10.15.26.13.304.0 ]--
r 152         pfQueue.delMin();
--[ 2019.11.10.15.26.13.495.0 ]--
+ 153         
--[ 2019.11.10.15.26.14.523.0 ]--
r 153         b
--[ 2019.11.10.15.26.14.601.0 ]--
r 153         bo
--[ 2019.11.10.15.26.14.656.0 ]--
r 153         boa
--[ 2019.11.10.15.26.14.733.0 ]--
r 153         boar
--[ 2019.11.10.15.26.14.901.0 ]--
r 153         board
--[ 2019.11.10.15.26.14.988.0 ]--
r 153         board[]
--[ 2019.11.10.15.26.15.568.0 ]--
r 153         board[b]
--[ 2019.11.10.15.26.15.720.0 ]--
r 153         board[be]
--[ 2019.11.10.15.26.15.825.0 ]--
r 153         board[beg]
--[ 2019.11.10.15.26.15.923.0 ]--
r 153         board[begi]
--[ 2019.11.10.15.26.15.952.0 ]--
r 153         board[begin]
--[ 2019.11.10.15.26.20.830.0 ]--
- 152
r 152         
--[ 2019.11.10.15.26.28.227.0 ]--
+ 152         pfQueue.delMin();
+ 153         board[begin.loc.getJ()][begin.loc.getI()] = true;
+ 154 
+ 155         for(PFNode p : begin.neighbors()){
+ 156             pfQueue.insert(p);
r 157         }
--[ 2019.11.10.15.26.28.266.0 ]--
r 151 
--[ 2019.11.10.15.26.37.051.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.26.48.587.0 ]--
+ 158         
--[ 2019.11.10.15.26.49.310.0 ]--
+ 158         
--[ 2019.11.10.15.26.59.977.0 ]--
r 159         StdOut.println(begin.loc);
--[ 2019.11.10.15.27.00.010.0 ]--
r 158 
--[ 2019.11.10.15.27.05.161.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.27.24.528.0 ]--
r 158         
r 159         
--[ 2019.11.10.15.27.24.567.0 ]--
- 158
--[ 2019.11.10.15.27.24.599.0 ]--
- 158
--[ 2019.11.10.15.27.24.688.0 ]--
- 151
- 151
- 151
- 151
- 151
r 151         
r 152         
--[ 2019.11.10.15.27.24.731.0 ]--
+ 152         pfQueue.delMin();
r 153         board[begin]
--[ 2019.11.10.15.27.24.785.0 ]--
r 153         
--[ 2019.11.10.15.27.24.811.0 ]--
- 153
--[ 2019.11.10.15.27.24.880.0 ]--
r 152         pfQueue.delMin(); 
--[ 2019.11.10.15.27.24.891.0 ]--
r 152         pfQueue
--[ 2019.11.10.15.27.24.913.0 ]--
r 152         pfQ
--[ 2019.11.10.15.27.24.943.0 ]--
r 152         
--[ 2019.11.10.15.27.24.971.0 ]--
r 152          
--[ 2019.11.10.15.27.25.003.0 ]--
r 152         
--[ 2019.11.10.15.27.25.038.0 ]--
- 151
--[ 2019.11.10.15.27.25.070.0 ]--
- 151
--[ 2019.11.10.15.27.25.362.0 ]--
r 113     
r 141         
r 144         
r 148         
r 151         
r 152         print
r 153         
--[ 2019.11.10.15.27.25.881.0 ]--
r 152         
--[ 2019.11.10.15.27.25.920.0 ]--
r 119             //System.out.println();
--[ 2019.11.10.15.27.25.975.0 ]--
r 117                 //System.out.print(board[i][j] + " ");
--[ 2019.11.10.15.27.26.048.0 ]--
+ 117                 board[i][j] = false;
--[ 2019.11.10.15.27.26.106.0 ]--
- 115
- 115
- 115
- 115
- 115
- 115
r 115         
--[ 2019.11.10.15.27.26.138.0 ]--
- 114
- 114
r 114     public void printBoard(){}
--[ 2019.11.10.15.27.26.170.0 ]--
r 114     public 
--[ 2019.11.10.15.27.26.263.0 ]--
r 114     public oi
--[ 2019.11.10.15.27.26.280.0 ]--
r 114     
--[ 2019.11.10.15.27.27.742.0 ]--
- 113
--[ 2019.11.10.15.27.27.969.0 ]--
- 113
--[ 2019.11.10.15.27.28.307.0 ]--
- 142
--[ 2019.11.10.15.27.28.469.0 ]--
- 142
--[ 2019.11.10.15.27.29.615.0 ]--
- 135
--[ 2019.11.10.15.27.31.753.0 ]--
+ 135         
--[ 2019.11.10.15.27.33.510.0 ]--
+ 134         
--[ 2019.11.10.15.27.35.415.0 ]--
r 132 
r 134 
r 136 
r 140 
r 143 
--[ 2019.11.10.15.27.37.306.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.28.51.302.0 ]--
+ 44         public float getCost(float heuristic) { return 
r 45         0; }
--[ 2019.11.10.15.28.51.309.0 ]--
r 45                 0; }
--[ 2019.11.10.15.28.52.082.0 ]--
- 44
r 44         public float getCost(float heuristic) { return 0; }
--[ 2019.11.10.15.28.53.628.0 ]--
r 44         public float getCost(float heuristic) { return ; }
--[ 2019.11.10.15.28.53.793.0 ]--
r 44         public float getCost(float heuristic) { return t; }
--[ 2019.11.10.15.28.53.854.0 ]--
r 44         public float getCost(float heuristic) { return te; }
--[ 2019.11.10.15.28.53.946.0 ]--
r 44         public float getCost(float heuristic) { return ter; }
--[ 2019.11.10.15.28.54.061.0 ]--
r 44         public float getCost(float heuristic) { return terr; }
--[ 2019.11.10.15.28.54.149.0 ]--
r 44         public float getCost(float heuristic) { return terra; }
--[ 2019.11.10.15.28.54.251.0 ]--
r 44         public float getCost(float heuristic) { return terrai; }
--[ 2019.11.10.15.28.54.290.0 ]--
r 44         public float getCost(float heuristic) { return terrain; }
--[ 2019.11.10.15.28.54.478.0 ]--
r 44         public float getCost(float heuristic) { return terrain.; }
--[ 2019.11.10.15.28.54.626.0 ]--
r 44         public float getCost(float heuristic) { return terrain.g; }
--[ 2019.11.10.15.28.54.696.0 ]--
r 44         public float getCost(float heuristic) { return terrain.ge; }
--[ 2019.11.10.15.28.54.834.0 ]--
r 44         public float getCost(float heuristic) { return terrain.get; }
--[ 2019.11.10.15.28.55.814.0 ]--
r 44         public float getCost(float heuristic) { return terrain.getC; }
--[ 2019.11.10.15.28.56.096.0 ]--
r 44         public float getCost(float heuristic) { return terrain.; }
--[ 2019.11.10.15.28.56.544.0 ]--
r 44         public float getCost(float heuristic) { return terrain; }
--[ 2019.11.10.15.28.56.746.0 ]--
r 44         public float getCost(float heuristic) { return terrai; }
--[ 2019.11.10.15.28.56.978.0 ]--
r 44         public float getCost(float heuristic) { return terra; }
--[ 2019.11.10.15.28.57.084.0 ]--
r 44         public float getCost(float heuristic) { return terr; }
--[ 2019.11.10.15.28.57.187.0 ]--
r 44         public float getCost(float heuristic) { return ter; }
--[ 2019.11.10.15.28.57.353.0 ]--
r 44         public float getCost(float heuristic) { return te; }
--[ 2019.11.10.15.28.57.419.0 ]--
r 44         public float getCost(float heuristic) { return t; }
--[ 2019.11.10.15.28.57.538.0 ]--
r 44         public float getCost(float heuristic) { return ; }
--[ 2019.11.10.15.28.58.046.0 ]--
r 44         public float getCost(float heuristic) { return 0; }
--[ 2019.11.10.15.28.58.146.0 ]--
r 44         public float getCost(float heuristic) { return 0 ; }
--[ 2019.11.10.15.28.58.206.0 ]--
r 44         public float getCost(float heuristic) { return 0; }
--[ 2019.11.10.15.30.15.830.0 ]--
+ 42         
--[ 2019.11.10.15.30.17.406.0 ]--
- 41
--[ 2019.11.10.15.30.23.264.0 ]--
+ 84         
--[ 2019.11.10.15.30.23.549.0 ]--
r 84         t
--[ 2019.11.10.15.30.23.627.0 ]--
r 84         te
--[ 2019.11.10.15.30.23.728.0 ]--
r 84         ter
--[ 2019.11.10.15.30.23.874.0 ]--
r 84         terr
--[ 2019.11.10.15.30.23.983.0 ]--
r 84         terra
--[ 2019.11.10.15.30.24.060.0 ]--
r 84         terrai
--[ 2019.11.10.15.30.24.097.0 ]--
r 84         terrain
--[ 2019.11.10.15.30.24.278.0 ]--
r 84         terrain.
--[ 2019.11.10.15.30.25.287.0 ]--
r 84         terrain.g
--[ 2019.11.10.15.30.25.559.0 ]--
r 84         terrain.ge
--[ 2019.11.10.15.30.25.616.0 ]--
r 84         terrain.get
--[ 2019.11.10.15.30.25.960.0 ]--
r 84         terrain.getC
--[ 2019.11.10.15.30.26.446.0 ]--
r 84         terrain.getC 
--[ 2019.11.10.15.30.26.475.0 ]--
r 84         terrain.getC
--[ 2019.11.10.15.30.26.622.0 ]--
r 84         terrain.get
--[ 2019.11.10.15.30.26.759.0 ]--
r 84         terrain.ge
--[ 2019.11.10.15.30.26.833.0 ]--
r 84         terrain.g
--[ 2019.11.10.15.30.26.968.0 ]--
r 84         terrain.
--[ 2019.11.10.15.30.27.195.0 ]--
r 84         terrain
--[ 2019.11.10.15.30.27.691.0 ]--
r 84         terrain.
--[ 2019.11.10.15.30.27.824.0 ]--
r 84         terrain.g
--[ 2019.11.10.15.30.28.533.0 ]--
r 84         terrain.
--[ 2019.11.10.15.30.55.354.0 ]--
r 84         terrain.g
--[ 2019.11.10.15.30.55.713.0 ]--
r 84         terrain
--[ 2019.11.10.15.30.55.887.0 ]--
r 84         terrain.getC 
--[ 2019.11.10.15.30.56.075.0 ]--
r 84         
--[ 2019.11.10.15.30.56.312.0 ]--
- 84
--[ 2019.11.10.15.31.10.174.0 ]--
r 44         public float getCost(float heuristic) { return ; }
--[ 2019.11.10.15.31.10.292.0 ]--
r 44         public float getCost(float heuristic) { return t; }
--[ 2019.11.10.15.31.10.480.0 ]--
r 44         public float getCost(float heuristic) { return te; }
--[ 2019.11.10.15.31.10.704.0 ]--
r 44         public float getCost(float heuristic) { return ter; }
--[ 2019.11.10.15.31.10.870.0 ]--
r 44         public float getCost(float heuristic) { return terr; }
--[ 2019.11.10.15.31.10.990.0 ]--
r 44         public float getCost(float heuristic) { return terra; }
--[ 2019.11.10.15.31.11.093.0 ]--
r 44         public float getCost(float heuristic) { return terrai; }
--[ 2019.11.10.15.31.11.121.0 ]--
r 44         public float getCost(float heuristic) { return terrain; }
--[ 2019.11.10.15.31.11.344.0 ]--
r 44         public float getCost(float heuristic) { return terrain.; }
--[ 2019.11.10.15.31.11.489.0 ]--
r 44         public float getCost(float heuristic) { return terrain.g; }
--[ 2019.11.10.15.31.11.879.0 ]--
r 44         public float getCost(float heuristic) { return terrain.ge; }
--[ 2019.11.10.15.31.11.979.0 ]--
r 44         public float getCost(float heuristic) { return terrain.get; }
--[ 2019.11.10.15.31.12.345.0 ]--
r 44         public float getCost(float heuristic) { return terrain.ge; }
--[ 2019.11.10.15.31.12.461.0 ]--
r 44         public float getCost(float heuristic) { return terrain.g; }
--[ 2019.11.10.15.31.12.551.0 ]--
r 44         public float getCost(float heuristic) { return terrain.; }
--[ 2019.11.10.15.31.12.685.0 ]--
r 44         public float getCost(float heuristic) { return terrain; }
--[ 2019.11.10.15.31.13.235.0 ]--
r 44         public float getCost(float heuristic) { return terrain.; }
--[ 2019.11.10.15.31.13.347.0 ]--
r 44         public float getCost(float heuristic) { return terrain.c; }
--[ 2019.11.10.15.31.13.455.0 ]--
r 44         public float getCost(float heuristic) { return terrain.co; }
--[ 2019.11.10.15.31.13.509.0 ]--
r 44         public float getCost(float heuristic) { return terrain.com; }
--[ 2019.11.10.15.31.17.757.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost; }
--[ 2019.11.10.15.31.17.761.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(); }
--[ 2019.11.10.15.31.22.314.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(l); }
--[ 2019.11.10.15.31.22.458.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(lo); }
--[ 2019.11.10.15.31.22.558.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(loc); }
--[ 2019.11.10.15.31.22.621.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(loc,); }
--[ 2019.11.10.15.31.22.760.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(loc, ); }
--[ 2019.11.10.15.31.26.398.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(loc, f); }
--[ 2019.11.10.15.31.26.754.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(loc, fr); }
--[ 2019.11.10.15.31.26.851.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(loc, fro); }
--[ 2019.11.10.15.31.26.910.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(loc, from); }
--[ 2019.11.10.15.31.27.234.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(loc, fromN); }
--[ 2019.11.10.15.31.27.394.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(loc, fromNo); }
--[ 2019.11.10.15.31.27.508.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(loc, fromNod); }
--[ 2019.11.10.15.31.27.527.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(loc, fromNode); }
--[ 2019.11.10.15.31.27.607.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(loc, fromNode.); }
--[ 2019.11.10.15.31.28.354.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(loc, fromNode.l); }
--[ 2019.11.10.15.31.28.512.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(loc, fromNode.lo); }
--[ 2019.11.10.15.31.28.568.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(loc, fromNode.loc); }
--[ 2019.11.10.15.31.31.608.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(loc, fromNode.loc);  }
--[ 2019.11.10.15.31.31.687.0 ]--
r 44         public float getCost(float heuristic) { return terrain.computeTravelCost(loc, fromNode.loc); }
--[ 2019.11.10.15.31.38.483.0 ]--
+ 19     
--[ 2019.11.10.15.32.01.312.0 ]--
- 19
--[ 2019.11.10.15.32.05.863.0 ]--
+ 19     
--[ 2019.11.10.15.32.06.301.0 ]--
r 19     p
--[ 2019.11.10.15.32.06.653.0 ]--
r 19     pr
--[ 2019.11.10.15.32.06.726.0 ]--
r 19     pri
--[ 2019.11.10.15.32.06.843.0 ]--
r 19     priv
--[ 2019.11.10.15.32.06.922.0 ]--
r 19     priva
--[ 2019.11.10.15.32.07.029.0 ]--
r 19     privat
--[ 2019.11.10.15.32.07.103.0 ]--
r 19     private
--[ 2019.11.10.15.32.07.152.0 ]--
r 19     private 
--[ 2019.11.10.15.32.07.472.0 ]--
r 19     private in
--[ 2019.11.10.15.32.07.559.0 ]--
r 19     private int
--[ 2019.11.10.15.32.07.747.0 ]--
r 19     private int 
--[ 2019.11.10.15.32.07.998.0 ]--
r 19     private int r
--[ 2019.11.10.15.32.08.050.0 ]--
r 19     private int ru
--[ 2019.11.10.15.32.08.197.0 ]--
r 19     private int run
--[ 2019.11.10.15.32.08.345.0 ]--
r 19     private int runn
--[ 2019.11.10.15.32.08.406.0 ]--
r 19     private int runni
--[ 2019.11.10.15.32.08.476.0 ]--
r 19     private int runnin
--[ 2019.11.10.15.32.08.545.0 ]--
r 19     private int running
--[ 2019.11.10.15.32.08.848.0 ]--
r 19     private int runningC
--[ 2019.11.10.15.32.08.920.0 ]--
r 19     private int runningCo
--[ 2019.11.10.15.32.09.068.0 ]--
r 19     private int runningCos
--[ 2019.11.10.15.32.09.222.0 ]--
r 19     private int runningCost
--[ 2019.11.10.15.32.09.482.0 ]--
r 19     private int runningCost;
--[ 2019.11.10.15.32.15.802.0 ]--
r 45         public float getCost(float heuristic) { return rterrain.computeTravelCost(loc, fromNode.loc); }
--[ 2019.11.10.15.32.15.921.0 ]--
r 45         public float getCost(float heuristic) { return ruterrain.computeTravelCost(loc, fromNode.loc); }
--[ 2019.11.10.15.32.16.108.0 ]--
r 45         public float getCost(float heuristic) { return runterrain.computeTravelCost(loc, fromNode.loc); }
--[ 2019.11.10.15.32.16.228.0 ]--
r 45         public float getCost(float heuristic) { return runnterrain.computeTravelCost(loc, fromNode.loc); }
--[ 2019.11.10.15.32.16.332.0 ]--
r 45         public float getCost(float heuristic) { return runniterrain.computeTravelCost(loc, fromNode.loc); }
--[ 2019.11.10.15.32.16.390.0 ]--
r 45         public float getCost(float heuristic) { return runninterrain.computeTravelCost(loc, fromNode.loc); }
--[ 2019.11.10.15.32.16.430.0 ]--
r 45         public float getCost(float heuristic) { return runningterrain.computeTravelCost(loc, fromNode.loc); }
--[ 2019.11.10.15.32.16.690.0 ]--
r 45         public float getCost(float heuristic) { return runningCterrain.computeTravelCost(loc, fromNode.loc); }
--[ 2019.11.10.15.32.16.700.0 ]--
r 45         public float getCost(float heuristic) { return runningCoterrain.computeTravelCost(loc, fromNode.loc); }
--[ 2019.11.10.15.32.17.139.0 ]--
r 45         public float getCost(float heuristic) { return runningCosterrain.computeTravelCost(loc, fromNode.loc); }
--[ 2019.11.10.15.32.17.216.0 ]--
r 45         public float getCost(float heuristic) { return runningCostterrain.computeTravelCost(loc, fromNode.loc); }
--[ 2019.11.10.15.32.17.294.0 ]--
r 45         public float getCost(float heuristic) { return runningCost terrain.computeTravelCost(loc, fromNode.loc); }
--[ 2019.11.10.15.32.17.467.0 ]--
r 45         public float getCost(float heuristic) { return runningCost +terrain.computeTravelCost(loc, fromNode.loc); }
--[ 2019.11.10.15.32.17.510.0 ]--
r 45         public float getCost(float heuristic) { return runningCost + terrain.computeTravelCost(loc, fromNode.loc); }
--[ 2019.11.10.15.32.34.815.0 ]--
+ 141         
--[ 2019.11.10.15.32.38.415.0 ]--
- 141
--[ 2019.11.10.15.32.41.939.0 ]--
+ 132         
--[ 2019.11.10.15.32.43.240.0 ]--
r 132         S
--[ 2019.11.10.15.32.43.428.0 ]--
r 132         Sy
--[ 2019.11.10.15.32.43.613.0 ]--
r 132         Sys
--[ 2019.11.10.15.32.44.046.0 ]--
r 132         System
--[ 2019.11.10.15.32.44.608.0 ]--
r 132         System.
--[ 2019.11.10.15.32.46.106.0 ]--
r 132         System
--[ 2019.11.10.15.32.46.257.0 ]--
r 132         
--[ 2019.11.10.15.32.46.673.0 ]--
r 132         S
--[ 2019.11.10.15.32.46.837.0 ]--
r 132         St
--[ 2019.11.10.15.32.46.975.0 ]--
r 132         Std
--[ 2019.11.10.15.32.47.124.0 ]--
r 132         StdO
--[ 2019.11.10.15.32.47.315.0 ]--
r 132         StdOut
--[ 2019.11.10.15.32.47.745.0 ]--
r 132         StdOut.
--[ 2019.11.10.15.32.47.922.0 ]--
r 132         StdOut.p
--[ 2019.11.10.15.32.48.046.0 ]--
r 132         StdOut.pr
--[ 2019.11.10.15.32.48.085.0 ]--
r 132         StdOut.pri
--[ 2019.11.10.15.32.48.135.0 ]--
r 132         StdOut.prin
--[ 2019.11.10.15.32.48.207.0 ]--
r 132         StdOut.print
--[ 2019.11.10.15.32.48.893.0 ]--
r 132         StdOut.printl
--[ 2019.11.10.15.32.48.989.0 ]--
r 132         StdOut.println
--[ 2019.11.10.15.32.49.143.0 ]--
r 132         StdOut.println()
--[ 2019.11.10.15.32.50.320.0 ]--
r 132         StdOut.println(b)
--[ 2019.11.10.15.32.50.461.0 ]--
r 132         StdOut.println(be)
--[ 2019.11.10.15.32.50.753.0 ]--
r 132         StdOut.println(beg)
--[ 2019.11.10.15.32.50.786.0 ]--
r 132         StdOut.println(begin)
--[ 2019.11.10.15.32.51.204.0 ]--
r 132         StdOut.println(begin.)
--[ 2019.11.10.15.32.51.476.0 ]--
r 132         StdOut.println(begin.g)
--[ 2019.11.10.15.32.51.501.0 ]--
r 132         StdOut.println(begin.ge)
--[ 2019.11.10.15.32.52.716.0 ]--
r 132         StdOut.println(begin.getCost)
--[ 2019.11.10.15.32.52.723.0 ]--
r 132         StdOut.println(begin.getCost())
--[ 2019.11.10.15.32.53.399.0 ]--
r 132         StdOut.println(begin.getCost());
--[ 2019.11.10.15.32.54.376.0 ]--
r 132         StdOut.println(begin.getCost()); 
--[ 2019.11.10.15.32.54.427.0 ]--
r 132         StdOut.println(begin.getCost());
--[ 2019.11.10.15.32.58.202.0 ]--
r 132         StdOut.println(begin.getCost(0));
--[ 2019.11.10.15.33.01.591.0 ]--
r 42 
--[ 2019.11.10.15.33.03.294.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.33.24.375.0 ]--
+ 45         public float getCost(float heuristic) { 
r 46             return runningCost + terrain.computeTravelCost(loc, fromNode.loc); }
--[ 2019.11.10.15.33.27.438.0 ]--
+ 46             return runningCost + terrain.computeTravelCost(loc, fromNode.loc); 
r 47         }
--[ 2019.11.10.15.33.29.895.0 ]--
+ 45         public float getCost(float heuristic) {
r 46             
--[ 2019.11.10.15.33.30.582.0 ]--
r 46             i
--[ 2019.11.10.15.33.30.680.0 ]--
r 46             if
--[ 2019.11.10.15.33.31.341.0 ]--
r 46             if()
--[ 2019.11.10.15.33.37.651.0 ]--
r 46             if(f)
--[ 2019.11.10.15.33.37.772.0 ]--
r 46             if(fr)
--[ 2019.11.10.15.33.37.840.0 ]--
r 46             if(fro)
--[ 2019.11.10.15.33.37.878.0 ]--
r 46             if(from)
--[ 2019.11.10.15.33.38.083.0 ]--
r 46             if(fromN)
--[ 2019.11.10.15.33.38.198.0 ]--
r 46             if(fromNo)
--[ 2019.11.10.15.33.38.254.0 ]--
r 46             if(fromNod)
--[ 2019.11.10.15.33.38.328.0 ]--
r 46             if(fromNode)
--[ 2019.11.10.15.33.38.410.0 ]--
r 46             if(fromNode )
--[ 2019.11.10.15.33.38.583.0 ]--
r 46             if(fromNode =)
--[ 2019.11.10.15.33.38.670.0 ]--
r 46             if(fromNode ==)
--[ 2019.11.10.15.33.38.764.0 ]--
r 46             if(fromNode == )
--[ 2019.11.10.15.33.39.030.0 ]--
r 46             if(fromNode == u)
--[ 2019.11.10.15.33.39.052.0 ]--
r 46             if(fromNode == un)
--[ 2019.11.10.15.33.39.608.0 ]--
r 46             if(fromNode == u)
--[ 2019.11.10.15.33.39.688.0 ]--
r 46             if(fromNode == )
--[ 2019.11.10.15.33.39.856.0 ]--
r 46             if(fromNode == n)
--[ 2019.11.10.15.33.39.934.0 ]--
r 46             if(fromNode == nu)
--[ 2019.11.10.15.33.40.095.0 ]--
r 46             if(fromNode == nul)
--[ 2019.11.10.15.33.40.213.0 ]--
r 46             if(fromNode == null)
--[ 2019.11.10.15.33.40.969.0 ]--
r 46             if(fromNode == null){
--[ 2019.11.10.15.33.41.116.0 ]--
+ 47 
+ 48 }
--[ 2019.11.10.15.33.41.135.0 ]--
r 48             }
--[ 2019.11.10.15.33.41.155.0 ]--
r 47                 
--[ 2019.11.10.15.33.41.243.0 ]--
r 47                 r
--[ 2019.11.10.15.33.41.308.0 ]--
r 47                 re
--[ 2019.11.10.15.33.41.494.0 ]--
r 47                 ret
--[ 2019.11.10.15.33.41.596.0 ]--
r 47                 retu
--[ 2019.11.10.15.33.41.634.0 ]--
r 47                 retur
--[ 2019.11.10.15.33.41.689.0 ]--
r 47                 return
--[ 2019.11.10.15.33.41.782.0 ]--
r 47                 return 
--[ 2019.11.10.15.33.41.876.0 ]--
r 47                 return -
--[ 2019.11.10.15.33.42.377.0 ]--
r 47                 return 
--[ 2019.11.10.15.33.42.510.0 ]--
r 47                 return 0
--[ 2019.11.10.15.33.43.066.0 ]--
r 47                 return 0;
--[ 2019.11.10.15.33.47.797.0 ]--
r 49             return runningCost + terrain.computeTravelCost(loc, fromNode.loc);
--[ 2019.11.10.15.33.49.387.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.34.15.604.0 ]--
+ 149         
--[ 2019.11.10.15.34.20.732.0 ]--
- 149
--[ 2019.11.10.15.34.22.673.0 ]--
+ 150         
--[ 2019.11.10.15.34.23.375.0 ]--
r 150         S
--[ 2019.11.10.15.34.23.501.0 ]--
r 150         St
--[ 2019.11.10.15.34.23.657.0 ]--
r 150         Std
--[ 2019.11.10.15.34.24.204.0 ]--
r 150         StdOut
--[ 2019.11.10.15.34.24.295.0 ]--
r 150         StdOut.
--[ 2019.11.10.15.34.24.512.0 ]--
r 150         StdOut.p
--[ 2019.11.10.15.34.24.731.0 ]--
r 150         StdOut.println
--[ 2019.11.10.15.34.24.741.0 ]--
r 150         StdOut.println()
--[ 2019.11.10.15.34.24.755.0 ]--
r 150         StdOut.println();
--[ 2019.11.10.15.34.25.211.0 ]--
r 150         StdOut.println(b);
--[ 2019.11.10.15.34.25.254.0 ]--
r 150         StdOut.println(be);
--[ 2019.11.10.15.34.25.356.0 ]--
r 150         StdOut.println(beg);
--[ 2019.11.10.15.34.25.437.0 ]--
r 150         StdOut.println(begi);
--[ 2019.11.10.15.34.25.514.0 ]--
r 150         StdOut.println(begin);
--[ 2019.11.10.15.34.25.637.0 ]--
r 150         StdOut.println(begin.);
--[ 2019.11.10.15.34.26.332.0 ]--
r 150         StdOut.println(begin.getCost);
--[ 2019.11.10.15.34.26.339.0 ]--
r 150         StdOut.println(begin.getCost());
--[ 2019.11.10.15.34.27.619.0 ]--
r 150         StdOut.println(begin.getCost(0));
--[ 2019.11.10.15.34.30.781.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.34.49.695.0 ]--
r 148         begin = n;
--[ 2019.11.10.15.34.49.763.0 ]--
r 148         begin = ne;
--[ 2019.11.10.15.34.49.913.0 ]--
r 148         begin = new;
--[ 2019.11.10.15.34.50.192.0 ]--
r 148         begin = new ;
--[ 2019.11.10.15.34.52.448.0 ]--
r 148         begin = new N;
--[ 2019.11.10.15.34.52.616.0 ]--
r 148         begin = new No;
--[ 2019.11.10.15.34.52.715.0 ]--
r 148         begin = new Nod;
--[ 2019.11.10.15.34.52.768.0 ]--
r 148         begin = new Node;
--[ 2019.11.10.15.34.53.125.0 ]--
r 148         begin = new Node ;
--[ 2019.11.10.15.34.53.218.0 ]--
r 148         begin = new Node;
--[ 2019.11.10.15.34.54.088.0 ]--
r 148         begin = new Nod;
--[ 2019.11.10.15.34.54.200.0 ]--
r 148         begin = new ;
--[ 2019.11.10.15.34.54.506.0 ]--
r 148         begin = ;
--[ 2019.11.10.15.34.54.629.0 ]--
r 148         begin ;
--[ 2019.11.10.15.34.54.980.0 ]--
r 148         begin = new Node ;
--[ 2019.11.10.15.34.55.127.0 ]--
r 148         begin = pfQueue.min();
--[ 2019.11.10.15.34.55.431.0 ]--
r 150         StdOut.println(begin.getCost());
--[ 2019.11.10.15.34.56.809.0 ]--
- 150
--[ 2019.11.10.15.34.58.143.0 ]--
+ 150         StdOut.println(begin.getCost());
--[ 2019.11.10.15.34.59.238.0 ]--
r 150         StdOut.println(begin.getCost(0));
--[ 2019.11.10.15.35.06.759.0 ]--
r 150         StdOut.println(begin.getCost());
--[ 2019.11.10.15.35.06.899.0 ]--
r 150         StdOut.println(begin.getCost(h));
--[ 2019.11.10.15.35.07.746.0 ]--
r 150         StdOut.println(begin.getCost(heuristic));
--[ 2019.11.10.15.35.11.734.0 ]--
r 137         StdOut.println(begin.getCost());
--[ 2019.11.10.15.35.11.801.0 ]--
r 137         StdOut.println(begin.getCost(h));
--[ 2019.11.10.15.35.11.970.0 ]--
r 137         StdOut.println(begin.getCost(hu));
--[ 2019.11.10.15.35.12.009.0 ]--
r 137         StdOut.println(begin.getCost(hue));
--[ 2019.11.10.15.35.12.121.0 ]--
r 137         StdOut.println(begin.getCost(huer));
--[ 2019.11.10.15.35.12.756.0 ]--
r 137         StdOut.println(begin.getCost(heuristic));
--[ 2019.11.10.15.36.31.077.0 ]--
+ 144         
--[ 2019.11.10.15.36.31.927.0 ]--
r 144         /
--[ 2019.11.10.15.36.32.042.0 ]--
r 144         //
--[ 2019.11.10.15.36.32.368.0 ]--
r 144         // 
--[ 2019.11.10.15.36.32.454.0 ]--
r 144         //
--[ 2019.11.10.15.36.32.605.0 ]--
r 144         /
--[ 2019.11.10.15.36.32.719.0 ]--
r 144         
--[ 2019.11.10.15.36.33.113.0 ]--
r 144         /
--[ 2019.11.10.15.36.33.306.0 ]--
r 144         /*
--[ 2019.11.10.15.36.34.880.0 ]--
+ 148         
+ 149          */
--[ 2019.11.10.15.36.38.752.0 ]--
r 151         /begin = pfQueue.min();
--[ 2019.11.10.15.36.38.850.0 ]--
r 151         //begin = pfQueue.min();
--[ 2019.11.10.15.36.48.145.0 ]--
+ 152         
--[ 2019.11.10.15.36.53.414.0 ]--
- 152
--[ 2019.11.10.15.36.54.111.0 ]--
+ 152         
--[ 2019.11.10.15.36.54.529.0 ]--
r 152         p
--[ 2019.11.10.15.36.54.602.0 ]--
r 152         pf
--[ 2019.11.10.15.36.54.872.0 ]--
r 152         pfQ
--[ 2019.11.10.15.36.55.283.0 ]--
r 152         pfQueue
--[ 2019.11.10.15.36.55.689.0 ]--
r 152         pfQueue.
--[ 2019.11.10.15.36.56.611.0 ]--
r 152         pfQueue.i
--[ 2019.11.10.15.36.56.651.0 ]--
r 152         pfQueue.in
--[ 2019.11.10.15.36.56.696.0 ]--
r 152         pfQueue.int
--[ 2019.11.10.15.36.56.746.0 ]--
r 152         pfQueue.inte
--[ 2019.11.10.15.36.56.846.0 ]--
r 152         pfQueue.inter
--[ 2019.11.10.15.36.57.291.0 ]--
r 152         pfQueue.inte
--[ 2019.11.10.15.36.57.410.0 ]--
r 152         pfQueue.int
--[ 2019.11.10.15.36.57.497.0 ]--
r 152         pfQueue.in
--[ 2019.11.10.15.36.57.638.0 ]--
r 152         pfQueue.ins
--[ 2019.11.10.15.36.57.737.0 ]--
r 152         pfQueue.inse
--[ 2019.11.10.15.36.57.819.0 ]--
r 152         pfQueue.inser
--[ 2019.11.10.15.36.58.007.0 ]--
r 152         pfQueue.inserr
--[ 2019.11.10.15.36.58.354.0 ]--
r 152         pfQueue.inser
--[ 2019.11.10.15.36.58.422.0 ]--
r 152         pfQueue.insert
--[ 2019.11.10.15.36.58.494.0 ]--
r 152         pfQueue.insert 
--[ 2019.11.10.15.36.58.735.0 ]--
r 152         pfQueue.insert
--[ 2019.11.10.15.36.58.943.0 ]--
r 152         pfQueue.insert()
--[ 2019.11.10.15.36.59.129.0 ]--
r 152         pfQueue.insert(n)
--[ 2019.11.10.15.36.59.209.0 ]--
r 152         pfQueue.insert(ne)
--[ 2019.11.10.15.36.59.313.0 ]--
r 152         pfQueue.insert(new)
--[ 2019.11.10.15.36.59.504.0 ]--
r 152         pfQueue.insert(new )
--[ 2019.11.10.15.37.00.083.0 ]--
r 152         pfQueue.insert(new P)
--[ 2019.11.10.15.37.00.151.0 ]--
r 152         pfQueue.insert(new PF)
--[ 2019.11.10.15.37.00.321.0 ]--
r 152         pfQueue.insert(new PFN)
--[ 2019.11.10.15.37.00.948.0 ]--
r 152         pfQueue.insert(new PFNode)
--[ 2019.11.10.15.37.00.964.0 ]--
r 152         pfQueue.insert(new PFNode())
--[ 2019.11.10.15.37.03.965.0 ]--
r 152         pfQueue.insert(new PFNode(c))
--[ 2019.11.10.15.37.04.052.0 ]--
r 152         pfQueue.insert(new PFNode(co))
--[ 2019.11.10.15.37.04.178.0 ]--
r 152         pfQueue.insert(new PFNode(coo))
--[ 2019.11.10.15.37.04.584.0 ]--
r 152         pfQueue.insert(new PFNode(coo ))
--[ 2019.11.10.15.37.04.648.0 ]--
r 152         pfQueue.insert(new PFNode(coo))
--[ 2019.11.10.15.37.04.762.0 ]--
r 152         pfQueue.insert(new PFNode(co))
--[ 2019.11.10.15.37.04.881.0 ]--
r 152         pfQueue.insert(new PFNode(c))
--[ 2019.11.10.15.37.05.139.0 ]--
r 152         pfQueue.insert(new PFNode())
--[ 2019.11.10.15.37.06.297.0 ]--
r 152         pfQueue.insert(new PFNode(n))
--[ 2019.11.10.15.37.06.341.0 ]--
r 152         pfQueue.insert(new PFNode(ne))
--[ 2019.11.10.15.37.06.492.0 ]--
r 152         pfQueue.insert(new PFNode(new))
--[ 2019.11.10.15.37.06.568.0 ]--
r 152         pfQueue.insert(new PFNode(new ))
--[ 2019.11.10.15.37.06.709.0 ]--
r 152         pfQueue.insert(new PFNode(new C))
--[ 2019.11.10.15.37.06.827.0 ]--
r 152         pfQueue.insert(new PFNode(new Co))
--[ 2019.11.10.15.37.06.970.0 ]--
r 152         pfQueue.insert(new PFNode(new Coo))
--[ 2019.11.10.15.37.07.023.0 ]--
r 152         pfQueue.insert(new PFNode(new Coor))
--[ 2019.11.10.15.37.07.192.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord))
--[ 2019.11.10.15.37.07.399.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord()))
--[ 2019.11.10.15.37.31.895.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1)))
--[ 2019.11.10.15.37.32.003.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1,)))
--[ 2019.11.10.15.37.32.057.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, )))
--[ 2019.11.10.15.37.32.159.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0)))
--[ 2019.11.10.15.37.34.476.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0),))
--[ 2019.11.10.15.37.34.565.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), ))
--[ 2019.11.10.15.37.39.584.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), 9))
--[ 2019.11.10.15.37.39.825.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), 91))
--[ 2019.11.10.15.37.40.123.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), 9))
--[ 2019.11.10.15.37.40.233.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), ))
--[ 2019.11.10.15.37.40.506.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), ()))
--[ 2019.11.10.15.37.40.632.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), (1)))
--[ 2019.11.10.15.37.40.928.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), (1,)))
--[ 2019.11.10.15.37.41.129.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), (1, )))
--[ 2019.11.10.15.37.41.753.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), (1,)))
--[ 2019.11.10.15.37.41.892.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), (1)))
--[ 2019.11.10.15.37.43.358.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), ()))
--[ 2019.11.10.15.37.45.840.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), (b)))
--[ 2019.11.10.15.37.45.993.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), (be)))
--[ 2019.11.10.15.37.46.075.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), (beg)))
--[ 2019.11.10.15.37.46.167.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), (begi)))
--[ 2019.11.10.15.37.46.215.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), (begin)))
--[ 2019.11.10.15.37.48.537.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), (begin)));
--[ 2019.11.10.15.37.49.324.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), (begin))); 
--[ 2019.11.10.15.37.49.359.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), (begin)));
--[ 2019.11.10.15.37.53.157.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), (begin));
--[ 2019.11.10.15.37.53.903.0 ]--
r 152         pfQueue.insert(new PFNode(new Coord(1, 0), begin));
--[ 2019.11.10.15.38.13.145.0 ]--
r 152         b
--[ 2019.11.10.15.38.13.171.0 ]--
r 152         be
--[ 2019.11.10.15.38.13.333.0 ]--
r 152         beg
--[ 2019.11.10.15.38.13.384.0 ]--
r 152         begi
--[ 2019.11.10.15.38.13.412.0 ]--
r 152         begin
--[ 2019.11.10.15.38.13.510.0 ]--
r 152         begin 
--[ 2019.11.10.15.38.13.633.0 ]--
r 152         begin =
--[ 2019.11.10.15.38.13.712.0 ]--
r 152         begin = 
--[ 2019.11.10.15.38.13.893.0 ]--
r 152         begin = n
--[ 2019.11.10.15.38.13.992.0 ]--
r 152         begin = nw
--[ 2019.11.10.15.38.14.287.0 ]--
r 152         begin = n
--[ 2019.11.10.15.38.14.345.0 ]--
r 152         begin = ne
--[ 2019.11.10.15.38.14.463.0 ]--
r 152         begin = new
--[ 2019.11.10.15.38.14.578.0 ]--
r 152         begin = new 
--[ 2019.11.10.15.38.15.001.0 ]--
r 152         begin = new C
--[ 2019.11.10.15.38.15.099.0 ]--
r 152         begin = new Co
--[ 2019.11.10.15.38.15.204.0 ]--
r 152         begin = new Coo
--[ 2019.11.10.15.38.15.299.0 ]--
r 152         begin = new Coor
--[ 2019.11.10.15.38.15.878.0 ]--
r 152         begin = new 
--[ 2019.11.10.15.38.16.139.0 ]--
r 152         begin = new P
--[ 2019.11.10.15.38.16.225.0 ]--
r 152         begin = new PF
--[ 2019.11.10.15.38.16.299.0 ]--
r 152         begin = new PFN
--[ 2019.11.10.15.38.16.905.0 ]--
r 152         begin = new PFNode
--[ 2019.11.10.15.38.16.952.0 ]--
r 152         begin = new PFNode()
--[ 2019.11.10.15.38.18.598.0 ]--
r 152         begin = new PFNode(n)
--[ 2019.11.10.15.38.18.670.0 ]--
r 152         begin = new PFNode(ne)
--[ 2019.11.10.15.38.18.799.0 ]--
r 152         begin = new PFNode(new)
--[ 2019.11.10.15.38.18.929.0 ]--
r 152         begin = new PFNode(new )
--[ 2019.11.10.15.38.19.172.0 ]--
r 152         begin = new PFNode(new C)
--[ 2019.11.10.15.38.19.265.0 ]--
r 152         begin = new PFNode(new Co)
--[ 2019.11.10.15.38.19.354.0 ]--
r 152         begin = new PFNode(new Coo)
--[ 2019.11.10.15.38.19.416.0 ]--
r 152         begin = new PFNode(new Coor)
--[ 2019.11.10.15.38.19.575.0 ]--
r 152         begin = new PFNode(new Coord)
--[ 2019.11.10.15.38.19.783.0 ]--
r 152         begin = new PFNode(new Coord())
--[ 2019.11.10.15.38.20.631.0 ]--
r 152         begin = new PFNode(new Coord(1))
--[ 2019.11.10.15.38.20.713.0 ]--
r 152         begin = new PFNode(new Coord(1,))
--[ 2019.11.10.15.38.20.796.0 ]--
r 152         begin = new PFNode(new Coord(1, ))
--[ 2019.11.10.15.38.20.892.0 ]--
r 152         begin = new PFNode(new Coord(1, 0))
--[ 2019.11.10.15.38.21.653.0 ]--
r 152         begin = new PFNode(new Coord(1, 0),)
--[ 2019.11.10.15.38.21.783.0 ]--
r 152         begin = new PFNode(new Coord(1, 0), )
--[ 2019.11.10.15.38.28.964.0 ]--
r 152         begin = new PFNode(new Coord(1, 0), b)
--[ 2019.11.10.15.38.29.260.0 ]--
r 152         begin = new PFNode(new Coord(1, 0), be)
--[ 2019.11.10.15.38.29.450.0 ]--
r 152         begin = new PFNode(new Coord(1, 0), beg)
--[ 2019.11.10.15.38.29.586.0 ]--
r 152         begin = new PFNode(new Coord(1, 0), begi)
--[ 2019.11.10.15.38.29.617.0 ]--
r 152         begin = new PFNode(new Coord(1, 0), begin)
--[ 2019.11.10.15.38.30.635.0 ]--
r 152         begin = new PFNode(new Coord(1, 0), begin);
--[ 2019.11.10.15.38.31.603.0 ]--
r 152         begin = new PFNode(new Coord(1, 0), begin); 
--[ 2019.11.10.15.38.31.701.0 ]--
r 152         begin = new PFNode(new Coord(1, 0), begin);
--[ 2019.11.10.15.38.32.001.0 ]--
r 152         begin = new PFNode(new Coord(1, 0), begin); 
--[ 2019.11.10.15.38.32.065.0 ]--
r 152         begin = new PFNode(new Coord(1, 0), begin);
--[ 2019.11.10.15.38.33.920.0 ]--
r 148 
--[ 2019.11.10.15.38.35.618.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.39.06.207.0 ]--
r 152         
--[ 2019.11.10.15.39.06.429.0 ]--
- 152
--[ 2019.11.10.15.39.08.061.0 ]--
r 149          *
--[ 2019.11.10.15.39.08.095.0 ]--
r 149          
--[ 2019.11.10.15.39.08.459.0 ]--
r 149         
--[ 2019.11.10.15.39.10.436.0 ]--
r 144         
--[ 2019.11.10.15.39.10.712.0 ]--
- 143
--[ 2019.11.10.15.39.12.799.0 ]--
r 150         /begin = pfQueue.min();
--[ 2019.11.10.15.39.12.869.0 ]--
r 150         begin = pfQueue.min();
--[ 2019.11.10.15.39.15.075.0 ]--
r 143 
r 148 
--[ 2019.11.10.15.39.16.745.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.39.23.798.0 ]--
+ 140         
--[ 2019.11.10.15.39.24.434.0 ]--
r 140         f
--[ 2019.11.10.15.39.24.518.0 ]--
r 140         fo
--[ 2019.11.10.15.39.24.587.0 ]--
r 140         for
--[ 2019.11.10.15.39.24.796.0 ]--
r 140         for()
--[ 2019.11.10.15.39.25.200.0 ]--
r 140         for(i)
--[ 2019.11.10.15.39.25.220.0 ]--
r 140         for(in)
--[ 2019.11.10.15.39.25.283.0 ]--
r 140         for(int)
--[ 2019.11.10.15.39.25.335.0 ]--
r 140         for(int )
--[ 2019.11.10.15.39.25.405.0 ]--
r 140         for(int i)
--[ 2019.11.10.15.39.25.553.0 ]--
r 140         for(int i )
--[ 2019.11.10.15.39.25.583.0 ]--
r 140         for(int i =)
--[ 2019.11.10.15.39.25.654.0 ]--
r 140         for(int i = )
--[ 2019.11.10.15.39.25.800.0 ]--
r 140         for(int i =  )
--[ 2019.11.10.15.39.26.165.0 ]--
r 140         for(int i = )
--[ 2019.11.10.15.39.26.285.0 ]--
r 140         for(int i = 0)
--[ 2019.11.10.15.39.27.089.0 ]--
r 140         for(int i = 0;)
--[ 2019.11.10.15.39.27.163.0 ]--
r 140         for(int i = 0; )
--[ 2019.11.10.15.39.27.259.0 ]--
r 140         for(int i = 0; i)
--[ 2019.11.10.15.39.27.372.0 ]--
r 140         for(int i = 0; i )
--[ 2019.11.10.15.39.27.575.0 ]--
r 140         for(int i = 0; i ,)
--[ 2019.11.10.15.39.27.885.0 ]--
r 140         for(int i = 0; i )
--[ 2019.11.10.15.39.28.016.0 ]--
r 140         for(int i = 0; i <)
--[ 2019.11.10.15.39.28.103.0 ]--
r 140         for(int i = 0; i < )
--[ 2019.11.10.15.39.28.239.0 ]--
r 140         for(int i = 0; i < 3)
--[ 2019.11.10.15.39.28.628.0 ]--
r 140         for(int i = 0; i < )
--[ 2019.11.10.15.39.29.237.0 ]--
r 140         for(int i = 0; i < 4)
--[ 2019.11.10.15.39.30.621.0 ]--
r 140         for(int i = 0; i < 4;)
--[ 2019.11.10.15.39.30.693.0 ]--
r 140         for(int i = 0; i < 4; )
--[ 2019.11.10.15.39.31.005.0 ]--
r 140         for(int i = 0; i < 4; i)
--[ 2019.11.10.15.39.31.127.0 ]--
r 140         for(int i = 0; i < 4; i+)
--[ 2019.11.10.15.39.31.244.0 ]--
r 140         for(int i = 0; i < 4; i++)
--[ 2019.11.10.15.39.31.862.0 ]--
r 140         for(int i = 0; i < 4; i++){
--[ 2019.11.10.15.39.32.097.0 ]--
+ 141 
+ 142 }
--[ 2019.11.10.15.39.32.117.0 ]--
r 142         }
--[ 2019.11.10.15.39.32.135.0 ]--
r 141             
--[ 2019.11.10.15.39.38.097.0 ]--
r 142         pfQueue.delMin();
r 143         }
--[ 2019.11.10.15.39.38.131.0 ]--
r 141 
r 142             pfQueue.delMin();
--[ 2019.11.10.15.39.38.191.0 ]--
r 141             pfQueue.delMin();
r 142 
--[ 2019.11.10.15.39.45.174.0 ]--
r 144         board[begin.loc.getJ()][begin.loc.getI()] = true;
r 145 
--[ 2019.11.10.15.39.45.280.0 ]--
r 143         board[begin.loc.getJ()][begin.loc.getI()] = true;
r 144         }
--[ 2019.11.10.15.39.45.303.0 ]--
r 143             board[begin.loc.getJ()][begin.loc.getI()] = true;
--[ 2019.11.10.15.39.46.083.0 ]--
r 142             board[begin.loc.getJ()][begin.loc.getI()] = true;
r 143 
--[ 2019.11.10.15.39.50.525.0 ]--
- 145
+ 149 
--[ 2019.11.10.15.39.50.719.0 ]--
- 144
+ 147         }
--[ 2019.11.10.15.39.50.740.0 ]--
r 145             for(PFNode p : begin.neighbors()){
r 146                 pfQueue.insert(p);
r 147             }
--[ 2019.11.10.15.39.50.913.0 ]--
- 143
+ 147 
--[ 2019.11.10.15.39.51.461.0 ]--
- 142
+ 146             board[begin.loc.getJ()][begin.loc.getI()] = true;
--[ 2019.11.10.15.39.52.443.0 ]--
+ 142             board[begin.loc.getJ()][begin.loc.getI()] = true;
- 147
--[ 2019.11.10.15.39.54.632.0 ]--
- 143
+ 146 
--[ 2019.11.10.15.39.59.065.0 ]--
r 152         begin = pfQueue.min();
r 153 
--[ 2019.11.10.15.39.59.178.0 ]--
r 151         begin = pfQueue.min();
r 152 
--[ 2019.11.10.15.39.59.282.0 ]--
r 150         begin = pfQueue.min();
r 151 
--[ 2019.11.10.15.39.59.413.0 ]--
r 149         begin = pfQueue.min();
r 150 
--[ 2019.11.10.15.39.59.530.0 ]--
r 148         begin = pfQueue.min();
r 149         }
--[ 2019.11.10.15.39.59.547.0 ]--
r 148             begin = pfQueue.min();
--[ 2019.11.10.15.39.59.675.0 ]--
r 147             begin = pfQueue.min();
r 148 
--[ 2019.11.10.15.39.59.931.0 ]--
r 146             begin = pfQueue.min();
r 147 
--[ 2019.11.10.15.40.06.473.0 ]--
- 150
+ 155 
--[ 2019.11.10.15.40.06.597.0 ]--
- 150
+ 154 
--[ 2019.11.10.15.40.06.716.0 ]--
- 150
+ 153 
--[ 2019.11.10.15.40.06.832.0 ]--
- 150
+ 152 
--[ 2019.11.10.15.40.06.931.0 ]--
- 149
+ 151         }
--[ 2019.11.10.15.40.06.948.0 ]--
r 149             StdOut.println(begin.loc);
r 150             StdOut.println(begin.getCost(heuristic));
--[ 2019.11.10.15.40.07.063.0 ]--
- 147
+ 150 
--[ 2019.11.10.15.40.07.190.0 ]--
- 147
+ 149 
--[ 2019.11.10.15.40.08.184.0 ]--
+ 147 
- 150
--[ 2019.11.10.15.40.12.067.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.15.41.05.477.0 ]--
- 147
- 147
- 147
r 148                  }
--[ 2019.11.10.15.41.06.698.0 ]--
r 148          
--[ 2019.11.10.15.41.06.894.0 ]--
- 147
r 147             
--[ 2019.11.10.15.41.11.417.0 ]--
r 140         
--[ 2019.11.10.15.41.13.051.0 ]--
r 141         pfQueue.delMin();
--[ 2019.11.10.15.41.14.362.0 ]--
r 142         board[begin.loc.getJ()][begin.loc.getI()] = true;
--[ 2019.11.10.15.41.15.437.0 ]--
r 143         for(PFNode p : begin.neighbors()){
--[ 2019.11.10.15.41.16.723.0 ]--
r 144             pfQueue.insert(p);
--[ 2019.11.10.15.41.17.635.0 ]--
r 145         }
--[ 2019.11.10.15.41.18.687.0 ]--
r 146         begin = pfQueue.min();
--[ 2019.11.10.15.41.19.361.0 ]--
+ 146         
--[ 2019.11.10.15.41.39.818.0 ]--
- 48
- 48
--[ 2019.11.10.15.41.42.348.0 ]--
r 46             {
--[ 2019.11.10.15.41.43.043.0 ]--
r 46             
--[ 2019.11.10.15.41.43.235.0 ]--
- 46
--[ 2019.11.10.15.41.54.721.0 ]--
- 39
--[ 2019.11.10.15.41.58.317.0 ]--
r 136 
r 142 
r 144 
--[ 2019.11.10.15.42.00.021.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.10.18.28.49.914.0 ]--
DisposeComponent
--[ 2019.11.11.13.53.25.176.0 ]--
NewLogger: P04_Pathfinding
Version: 1.3
--[ 2019.11.11.13.53.25.204.0 ]--
InitTree:
/out/production/P04_Pathfinding/.donotlog
/out/production/P04_Pathfinding/algs4.jar
/out/production/P04_Pathfinding/stdlib.jar
/out/production/P04_Pathfinding/Coord.class
/out/production/P04_Pathfinding/png2emap.py
/out/production/P04_Pathfinding/Walker.class
/out/production/P04_Pathfinding/Terrain.class
/out/production/P04_Pathfinding/ramp.png.emap
/out/production/P04_Pathfinding/ramp2.png.emap
/out/production/P04_Pathfinding/ramp3.png.emap
/out/production/P04_Pathfinding/mazeAB.png.emap
/out/production/P04_Pathfinding/usa128.png.emap
/out/production/P04_Pathfinding/usa256.png.emap
/out/production/P04_Pathfinding/Pathfinder.class
/out/production/P04_Pathfinding/usa1024.png.emap
/out/production/P04_Pathfinding/maze32_0.png.emap
/out/production/P04_Pathfinding/maze32_1.png.emap
/out/production/P04_Pathfinding/maze232_0.png.emap
/out/production/P04_Pathfinding/maze320_0.png.emap
/out/production/P04_Pathfinding/mazeBrain.png.emap
/out/production/P04_Pathfinding/TerrainEditor.class
/out/production/P04_Pathfinding/Pathfinder$PFNode.class
/out/production/P04_Pathfinding/PathfinderVisualizer.class
/out/production/P04_Pathfinding/InteractivePathfinderVisualizer.class
/src/algs4.jar
/src/Coord.java
/src/stdlib.jar
/src/Walker.java
/src/Terrain.java
/src/Pathfinder.java
/src/TerrainEditor.java
/src/PathfinderVisualizer.java
/src/InteractivePathfinderVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/heightmaps/.donotlog
/heightmaps/png2emap.py
/heightmaps/ramp.png.emap
/heightmaps/ramp2.png.emap
/heightmaps/ramp3.png.emap
/heightmaps/mazeAB.png.emap
/heightmaps/usa128.png.emap
/heightmaps/usa256.png.emap
/heightmaps/usa1024.png.emap
/heightmaps/maze32_0.png.emap
/heightmaps/maze32_1.png.emap
/heightmaps/maze232_0.png.emap
/heightmaps/maze320_0.png.emap
/heightmaps/mazeBrain.png.emap
/.cos265
/readme.html
/P04_Pathfinding.iml

--[ 2019.11.11.13.53.25.204.1 ]--
InitFile: /src/InteractivePathfinderVisualizer.java
import java.awt.event.KeyEvent;

/**
 * InteractivePathfinderVisualizer visualizes the terrain and the computed
 * path and allows the user to change parameters of the Pathfinder.  Below
 * is a list of commands and what they do.  Note: some of the commands
 * modify the properties of the path finder and some modify the terrain.
 *
 * Command        Action                                      Terrain
 * C              clear path
 * space          recompute path
 * S/E            set start/end location to mouse
 * left/right     halve/double path search heuristic value
 * 0/1            set path search heuristic to 0 or 1
 * W              start a walker to show the path
 * R              randomly generate a new terrain                *
 * M              smooths terrain under mouse                    *
 * shift+M        smooths all terrain                            *
 * up/down        increase/decrease terrain under mouse          *
 */

public class InteractivePathfinderVisualizer {
    private final static int DELAY = 10;

    // sets how many redraws it should take for the walker to reach its destination
    private final static float STEPS_TO_WALK = 100.0f;

    // for convenience, here are the emap files that are located under heightmaps/ folder
    // the python script in that folder converts png files to emap. \
    // you can use it to create your own maps to test your code
    private final static String[] emaps = {
            "maze32_0.png.emap",    // 0   (32x32 maze)
            "maze32_1.png.emap",    // 1   (another 32x32 maze)
            "maze232_0.png.emap",   // 2   (232x232 maze)
            "maze320_0.png.emap",   // 3   (same as maze32_0, only scaled up by 10x)
            "mazeAB.png.emap",      // 4   (a maze from a site no longer online :( )
            "mazeBrain.png.emap",   // 5   (...)
            "ramp.png.emap",        // 6   (some tests)
            "ramp2.png.emap",       // 7   (...)
            "ramp3.png.emap",       // 8   (...)
            "usa128.png.emap",      // 9   (elevation map of USA from https://bananas.openttd.org/en/heightmap/)
            "usa256.png.emap",      // 10  (same as usa128, only higher resolution)
            "usa1024.png.emap",     // 11  (same as usa128, only higher resolution
    };

    private final static String emapFilename = emaps[0];        // change index to load a different elevation map



    public static void main(String[] args) {
        Terrain terrain = new Terrain(emapFilename);
        Pathfinder pf = new Pathfinder(terrain);
        int N = terrain.getN();

        StdDraw.show(0);

        // set default starting and ending locations
        pf.setPathStart(new Coord(1, 1));
        pf.setPathEnd(new Coord(N-3, N-3));

        // find a path
        pf.computePath();

        PathfinderVisualizer.draw(terrain, pf, null, N);
        StdDraw.show(DELAY);

        // prevent repeated applications
        boolean keyboardR = false;
        boolean keyboardM = false;

        Walker walker = null;

        while(true) {
            boolean recompute = false;
            boolean redraw = false;

            // mouse location on map
            int mouseI = (int) ((StdDraw.mouseX()-24) / 464 * N);
            int mouseJ = (int) ((464 - (StdDraw.mouseY()-36)) / 464 * N);
            boolean isMouseOnMap = (mouseI >=0 && mouseI < N && mouseJ >= 0 && mouseJ < N);

            if(StdDraw.isKeyPressed(KeyEvent.VK_LEFT) || StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
                boolean keyboardLeft = StdDraw.isKeyPressed(KeyEvent.VK_LEFT);
                float m = keyboardLeft ? 0.5f : 2.0f;
                float h = pf.getHeuristic() * m;
                h = Math.max(1.0f/1024.0f, Math.min(1048576.0f, h));
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_0) || StdDraw.isKeyPressed(KeyEvent.VK_1)) {
                boolean keyboard0 = StdDraw.isKeyPressed(KeyEvent.VK_0);
                float h = keyboard0 ? 0 : 1;
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_C)) {
                pf.resetPath();
                walker = null;
                redraw = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_R) && !keyboardR) {
                TerrainEditor.setFractalHeights(terrain);
                TerrainEditor.clampHeights(terrain);
                recompute = true;
            }
            keyboardR = StdDraw.isKeyPressed(KeyEvent.VK_R);

            if(StdDraw.isKeyPressed(KeyEvent.VK_M)) {
                if(StdDraw.isKeyPressed(KeyEvent.VK_SHIFT)) {
                    if(!keyboardM) {
                        TerrainEditor.smoothHeights(terrain);
                        recompute = true;
                    }
                } else {
                    TerrainEditor.smoothHeights(mouseI, mouseJ, N / 20, true, terrain);
                    recompute = true;
                }
            }
            keyboardM = StdDraw.isKeyPressed(KeyEvent.VK_M);

            if(StdDraw.isKeyPressed(KeyEvent.VK_SPACE)) {
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_UP) || StdDraw.isKeyPressed(KeyEvent.VK_DOWN)) {
                boolean keyboardUp = StdDraw.isKeyPressed(KeyEvent.VK_UP);
                float add = keyboardUp ? 8.0f : -8.0f;
                TerrainEditor.addHeight(mouseI, mouseJ, N / 20, add, terrain);
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_S)) {
                pf.setPathStart(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_E)) {
                pf.setPathEnd(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_W)) {
                Iterable<Coord> path = pf.getPathSolution();
                if(path != null) {
                    walker = new Walker(terrain, pf.getPathSolution());
                }
            }

            if(walker != null) {
                if(walker.doneWalking()) {
                    walker = null;
                } else {
                    walker.advance(pf.getPathCost() / STEPS_TO_WALK);
                }
                redraw = true;
            }

            if(recompute) {
                walker = null;
                pf.resetPath();
                if(pf.getPathStart() != null && pf.getPathEnd() != null) {
                    pf.computePath();
                }
                redraw = true;
            }

            if(redraw) {
                PathfinderVisualizer.draw(terrain, pf, walker, N);
                StdDraw.show(DELAY);
            } else {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    /* do nothing */
                }
            }
        }
    }
}

--[ 2019.11.11.13.53.25.205.0 ]--
InitFile: /src/PathfinderVisualizer.java
/**
 * PathfinderVisualizer visualizes the terrain and found path.
 */

import java.awt.Color;
import java.awt.Font;

public class PathfinderVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // color for different elevations.  must be in ascending order!
    private final static int[][] elevationColors = {
            // h    r   g   b   where h=height, r=red, g=green, b=blue
            {  0,   0,  0,  0},
            {  2,   0,  0,160},
            {  4,   0,224,224},
            { 16, 192,192,  0},
            { 64,  16,255, 16},
            {128,  32,224, 32},
            {192, 128,128,  8},
            {224, 164,164,164},
            {255, 255,255,255}
    };

    private final static Color cStart    = new Color(128, 128, 255);
    private final static Color cEnd      = new Color(255, 128, 128);
    private final static Color cSolution = new Color(255, 128, 255);
    private final static Color cSearched = new Color(128,   0, 128);

    // linearly interpolating between the corresponding rgb values
    private static Color colorLERP(float v1, int r0, int g0, int b0, int r1, int g1, int b1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * r0 + v1 * r1);
        int g = (int)(v0 * g0 + v1 * g1);
        int b = (int)(v0 * b0 + v1 * b1);
        return new Color(r, g, b);
    }
    private static Color colorLERP(float v1, Color c0, Color c1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * c0.getRed()   + v1 * c1.getRed());
        int g = (int)(v0 * c0.getGreen() + v1 * c1.getGreen());
        int b = (int)(v0 * c0.getBlue()  + v1 * c1.getBlue());
        int a = (int)(v0 * c0.getAlpha() + v1 * c1.getAlpha());
        return new Color(r, g, b, a);
    }

    // returns color for given height
    private static Color height2Color(int h) {
        h = Math.max(0, Math.min(255, h));

        int[] ec0 = elevationColors[0];  // default lower bound
        int[] ec1 = elevationColors[1];  // default upper bound

        // find upper bound while updating lower bound
        for(int i = 1; i < elevationColors.length; i++) {
            ec1 = elevationColors[i];
            if(h >= ec0[0] && h <= ec1[0]) break;
            ec0 = ec1;
        }

        int h0=ec0[0], r0=ec0[1], g0=ec0[2], b0=ec0[3];
        int h1=ec1[0], r1=ec1[1], g1=ec1[2], b1=ec1[3];
        float v1 = ((float)(h - h0)) / ((float)(h1 - h0));

        return colorLERP(v1, r0, g0, b0, r1, g1, b1);
    }

    private static void drawCircle(int i, int j, int N, double rad) {
        int c = (int)((i+0.5f) * 464.0f / N);
        int r = (int)((j+0.5f) * 464.0f / N);
        StdDraw.circle(c + 24, 464 - r + 36, rad);
    }
    public static void drawCircle(Coord loc, int N, double rad) {
        drawCircle(loc.getI(), loc.getJ(), N, rad);
    }

    private static void drawPath(Iterable<Coord> path, int N) {
        boolean first = true;
        int c0 = 0, r0 = 0;
        for (Coord loc : path) {
            int c1 = (int)((loc.getI()+0.5f) * 464.0f / N);
            int r1 = (int)((loc.getJ()+0.5f) * 464.0f / N);
            if(!first) {
                StdDraw.line(c0 + 24, 464 - r0 + 36, c1 + 24, 464 - r1 + 36);
            }
            first = false;
            c0 = c1; r0 = r1;
        }
    }

    // draw N-by-N pathfinding map
    public static void draw(Terrain terrain, Pathfinder pf, Walker walker, int N) {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.filledSquare(256, 256 + 12, 464 / 2);

        // draw terrain
        for(int row = 0; row < 464; row++) {
            int j = (int)((float)row/464.0f * N);
            for(int col = 0; col < 464; col++) {
                int i = (int)((float)col/464.0f * N);
                Coord loc = new Coord(i,j);
                Color c = height2Color(terrain.getHeight(loc));
                if(pf.wasSearched(loc)) {
                    c = colorLERP(0.50f, c, cSearched);
                }
                StdDraw.setPenColor(c);
                StdDraw.filledSquare(col + 24, 464 - row + 36, 1);
            }
        }

        // draw path start
        if(pf.getPathStart() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathStart(), N, 4.0);

            StdDraw.setPenColor(cStart);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathStart(), N, 4.0);
        }

        // draw path end
        if(pf.getPathEnd() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathEnd(), N, 4.0);

            StdDraw.setPenColor(cEnd);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathEnd(), N, 4.0);
        }

        // draw found path
        if(pf.foundPath()) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawPath(pf.getPathSolution(), N);

            StdDraw.setPenColor(cSolution);
            StdDraw.setPenRadius(0.002);
            drawPath(pf.getPathSolution(), N);
        }

        // draw walker
        if(walker != null) {
            Coord loc = walker.getLocation();
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);

            StdDraw.setPenColor(StdDraw.WHITE);
            StdDraw.setPenRadius(0.002);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);
        }

        // write status text
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.text(96, 12, "heuristic: " + pf.getHeuristic());
        if(pf.foundPath()) StdDraw.text(256, 12, "path: " + pf.getPathCost());
        else               StdDraw.text(256, 12, "no path found");
        StdDraw.text(512-96, 12, "searched: " + pf.getSearchSize() + " (" + (int)(100.0f * pf.getSearchSize() / (N*N)) + "%)");
    }
}

--[ 2019.11.11.13.53.25.205.1 ]--
InitFile: /src/Terrain.java
import java.lang.IndexOutOfBoundsException;

/**
 * Terrain stores elevations for map and computes distance and
 * cost in traversing the terrain.
 */

public class Terrain {
    private int N;
    private int[][] heights;

    public Terrain(int N) {
        this.N = N;
        this.heights = new int[N][N];
    }

    public Terrain(int[][] heights) {
        this.N = heights.length;
        this.heights = heights;
    }

    public Terrain(String emapfile) {
        In in = new In(emapfile);
        this.N = in.readInt();
        this.heights = new int[N][N];
        for (int j = 0; j < N; j++) {
            for (int i = 0; i < N; i++) {
                this.heights[i][j] = in.readInt();
            }
        }
    }

    public int getN() {
        return N;
    }

    public void setHeight(int i, int j, int h) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        heights[i][j] = h;
    }
    public void setHeight(int i, int j, float h) {
        setHeight(i, j, (int) h);
    }
    public void setHeight(Coord loc, int h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }
    public void setHeight(Coord loc, float h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }

    public int getHeight(int i, int j) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        return heights[i][j];
    }
    public int getHeight(Coord loc) {
        return getHeight(loc.getI(), loc.getJ());
    }

    // computes distance between (i0,j0) and (i1,j1) as the crow flies
    public float computeDistance(int i0, int j0, int i1, int j1) {
        return (float)Math.sqrt((i0 - i1) * (i0 - i1) + (j0 - j1) * (j0 - j1));
    }
    public float computeDistance(Coord c0, Coord c1) {
        return computeDistance(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }

    public float computeTravelCost(int i0, int j0, int i1, int j1) {
        float h0 = getHeight(i0, j0), h1 = getHeight(i1, j1);
        float climb = (float)Math.pow(Math.abs(h0 - h1) * 1000.0, 1.5);
        float dist = computeDistance(i0,j0, i1,j1);
        return (1.0f + climb) * dist;
    }
    public float computeTravelCost(Coord c0, Coord c1) {
        return computeTravelCost(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }
    public float computeTravelCost(Iterable<Coord> cs) {
        Coord c0 = null;
        float cost = 0.0f;
        for(Coord c1 : cs) {
            if(c0 != null) cost += computeTravelCost(c0, c1);
            c0 = c1;
        }
        return cost;
    }
}

--[ 2019.11.11.13.53.25.205.2 ]--
InitFile: /src/Walker.java
import java.util.Iterator;

/**
 * Walker takes an Iterable of Coords and simulates an individual
 * walking along the path over the given Terrain
 */
public class Walker {

    // terrain: the Terrain the Walker traverses
    // path: the sequence of Coords the Walker follows
    public Walker(Terrain terrain, Iterable<Coord> path) {
    }

    // returns the Walker's current location
    public Coord getLocation() {
        return null;
    }

    // returns true if Walker has reached the end Coord (last in path)
    public boolean doneWalking() {
        return true;
    }

    // advances the Walker along path
    // byTime: how long the Walker should traverse (may be any non-negative value)
    public void advance(float byTime) {
    }

}

--[ 2019.11.11.13.53.25.206.0 ]--
InitFile: /src/Coord.java
/**
 * Coordinates is an immutable type that store the tuple (i, j)
 */
public final class Coord {
    private final int i;
    private final int j;

    public Coord(int i, int j) {
        this.i = i;
        this.j = j;
    }

    public int getI() { return i; }
    public int getJ() { return j; }

    public boolean isInBounds(int minI, int minJ, int maxI, int maxJ) {
        return i >= minI && j >= minJ && i <= maxI && j <= maxJ;
    }
    public boolean isInBounds(Coord min, Coord max) {
        return i >= min.i && i <= max.i && j >= min.j && j <= max.j;
    }

    public Coord add(int addI, int addJ) {
        return new Coord(i + addI, j + addJ);
    }
    public Coord add(Coord that) { return new Coord(i + that.i, j + that.j); }

    public String toString() { return "(" + i + "," + j + ")"; }

    public boolean equals(Object o) {
        if(this == o) return true;
        if(o == null) return false;
        if(o.getClass() != this.getClass()) return false;
        Coord that = (Coord) o;
        if(this.i != that.i) return false;
        if(this.j != that.j) return false;
        return true;
    }
}

--[ 2019.11.11.13.53.25.206.1 ]--
InitFile: /src/Pathfinder.java
import java.lang.IndexOutOfBoundsException;
import java.lang.IllegalArgumentException;
import java.util.Iterator;

/**
 * Pathfinder uses A* search to find a near optimal path
 * between to locations with given terrain.
 */

public class Pathfinder {

    private Coord start;
    private Coord end;
    private float heuristic;
    private boolean pathFound;
    private Stack<Coord> s;
    private Terrain terrain;
    private Boolean[][] board;
    private int runningCost;

    /**
     * PFNode will be the key for MinPQ (used in computePath())
     */
    private class PFNode implements Comparable<PFNode> {
        Coord loc;
        PFNode fromNode;
        // loc: the location of the PFNode
        // fromNode: how did we get here? (linked list back to start)
        public PFNode(Coord loc, PFNode fromNode) {
            this.loc = loc;
            this.fromNode = fromNode;

        }

        // compares this with that, used to find minimum cost PFNode
        public int compareTo(PFNode that) {
            if(this.getCost(0) < that.getCost(0)) return -1;
            else if (this.getCost(0) > that.getCost(0)) return 1;
            return 0;
        }

        // returns the cost to travel from starting point to this
        // via the fromNode chain
        public float getCost(float heuristic) {
                return 0;
        }

        // returns if this PFNode is not marked invalid
        public boolean isValid() {
            return false;
        }

        // marks the PFNode as invalid
        public void invalidate() {
        }

        // returns if the PFNode is marked as used
        public boolean isUsed() {
            return true;
        }

        // marks the PFNode as used
        public void use() { }

        // returns an Iterable of PFNodes that surround this
        public Iterable<PFNode> neighbors() {
            Stack<PFNode> s = new Stack<>();
            s.push(new PFNode(new Coord(loc.getI() + 1, loc.getJ()), this));
            s.push(new PFNode(new Coord(loc.getI() - 1, loc.getJ()), this));
            s.push(new PFNode(new Coord(loc.getI() , loc.getJ() + 1), this));
            s.push(new PFNode(new Coord(loc.getI(), loc.getJ() - 1), this));
            return s;
        }

        public Coord getLoc(){
            return loc;
        }

        public PFNode getFromNode() {
            return fromNode;
        }
    }

    public Pathfinder(Terrain terrain) {
        this.terrain = terrain;
    }

    public void setPathStart(Coord loc) {
        start = loc;
    }

    public Coord getPathStart() {
        return start;
    }

    public void setPathEnd(Coord loc) {
        end = loc;
    }

    public Coord getPathEnd() {
        return end;
    }

    public void setHeuristic(float v)
    {
        heuristic = v;
    }

    public float getHeuristic() {
        return heuristic;
    }

    public void resetPath() {
    }

    public void computePath() {


        //Initialize the board and then print the current state of it
        board = new Boolean[terrain.getN()][terrain.getN()];
        for(int i = 0; i < terrain.getN(); i++){
            for(int j = 0; j < terrain.getN(); j++){
                board[i][j] = false;
                //System.out.print(board[i][j] + " ");
            }
            //System.out.println();
        }


        MinPQ<PFNode> pfQueue = new MinPQ<>();
        PFNode begin = new PFNode(start, null);

        StdOut.println(begin.getCost(heuristic));
        pfQueue.insert(begin);


        pfQueue.delMin();
        board[begin.loc.getJ()][begin.loc.getI()] = true;
        for(PFNode p : begin.neighbors()){
            pfQueue.insert(p);
        }

        begin = pfQueue.min();









        //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerException
        s = new Stack<>();
        s.push(start);
        s.push(end);


        pathFound = true;
    }

    public boolean foundPath() {
        return pathFound;
    }

    public float getPathCost() {
        return 0;
    }

    public int getSearchSize() {
        return 0;
    }

    public Iterable<Coord> getPathSolution() {

        //Return a stack of coordinates for the visualizer
        return s;
    }

    public boolean wasSearched(Coord loc) {
        return false;
    }
}

--[ 2019.11.11.13.53.25.206.2 ]--
InitFile: /src/TerrainEditor.java
/**
 * The following class provides some simple terrain editing functions.
 */
public class TerrainEditor {
    private static float rndRadius(float d) {
        return (float)StdRandom.uniform(-d,d);
    }

    private static float getFractalHeight(int i, int j, float dh, Terrain terrain, boolean[] isset) {
        int N = terrain.getN();
        dh = Math.max(-64, Math.min(255+64, dh));   // allow the height to go just a bit out of range
        if(!isset[i + j * N]) {
            isset[i + j * N] = true;
            terrain.setHeight(i, j, dh);
        }
        return terrain.getHeight(i,j);
    }

    private static void setFractalHeights(int i0, int j0, int i1, int j1, Terrain terrain, boolean[] isset) {
        int id = i1-i0;
        int jd = j1-j0;
        int i01 = (i0+i1)/2;
        int j01 = (j0+j1)/2;

        if(id <= 1 && jd <= 1) return;

        float h00 = getFractalHeight(i0,j0,32,terrain,isset);
        float h01 = getFractalHeight(i0,j1,32,terrain,isset);
        float h10 = getFractalHeight(i1,j0,32,terrain,isset);
        float h11 = getFractalHeight(i1,j1,32,terrain,isset);

        float d = (float)(Math.sqrt((i1-i0)*(i1-i0) + (j1-j0)*(j1-j0)) * 0.5);

        float d0001 = (h00 + h01) / 2 + rndRadius(d);
        float d0010 = (h00 + h10) / 2 + rndRadius(d);
        float d1101 = (h11 + h01) / 2 + rndRadius(d);
        float d1110 = (h11 + h10) / 2 + rndRadius(d);

        float h0001 = getFractalHeight(i0, j01, d0001, terrain,isset);
        float h0010 = getFractalHeight(i01, j0, d0010, terrain,isset);
        float h1101 = getFractalHeight(i01, j1, d1101, terrain,isset);
        float h1110 = getFractalHeight(i1, j01, d1110, terrain,isset);

        float dm = (float)((h0001 + h0010 + h1101 + h1110) / 4.0);
        float hm = getFractalHeight(i01, j01, dm, terrain,isset);

        if(id > 1 && jd > 1) {
            setFractalHeights(i0, j0, i01, j01, terrain, isset);
            setFractalHeights(i01, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i01, j1, terrain, isset);
            setFractalHeights(i01, j01, i1, j1, terrain, isset);
        } else if(jd > 1) {
            setFractalHeights(i0, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i1, j1, terrain, isset);
        } else {
            setFractalHeights(i0, j0, i01, j1, terrain, isset);
            setFractalHeights(i01, j0, i1, j1, terrain, isset);
        }
    }

    public static void setFractalHeights(Terrain terrain) {
        int N = terrain.getN();
        boolean[] isset = new boolean[N*N];
        setFractalHeights(0, 0, N - 1, N - 1, terrain, isset);
    }

    public static void smoothHeights(Terrain terrain) {
        int N = terrain.getN();
        int radius = (int)Math.ceil(Math.sqrt(N*N/2.0f));
        smoothHeights(N/2, N/2, radius, false, terrain);
    }

    public static void smoothHeights(int ic, int jc, int radius, boolean fallOff, Terrain terrain) {
        final int N = terrain.getN();
        final int w = 2*radius+1;
        float[] s = new float[w*w];
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;

                float m = computeEffect(i, j, ic, jc, radius, fallOff, N);
                if(m <= 0.0000001) {
                    s[sidx] = terrain.getHeight(i,j);
                    continue;
                }
                float h = 0;
                int c = 0;
                if(i > 0 && j > 0) {
                    h += terrain.getHeight(i-1,j-1);
                    c += 1;
                }
                if(i < N-1 && j > 0) {
                    h += terrain.getHeight(i+1,j-1);
                    c += 1;
                }
                if(i > 0 && j < N-1) {
                    h += terrain.getHeight(i-1,j+1);
                    c += 1;
                }
                if(i < N-1 && j < N-1) {
                    h += terrain.getHeight(i+1,j+1);
                    c += 1;
                }
                if(i > 0) {
                    h += terrain.getHeight(i-1,j);
                    c += 1;
                }
                if(j > 0) {
                    h += terrain.getHeight(i,j-1);
                    c += 1;
                }
                if(i < N-1) {
                    h += terrain.getHeight(i+1,j);
                    c += 1;
                }
                if(j < N-1) {
                    h += terrain.getHeight(i,j+1);
                    c += 1;
                }
                s[sidx] = (1-m) * terrain.getHeight(i,j) + m * h / c;
            }
        }
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;
                terrain.setHeight(i, j, s[sidx]);
            }
        }
    }

    public static void clampHeights(Terrain terrain) {
        int N = terrain.getN();
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                terrain.setHeight(i, j, Math.max(0, Math.min(255, terrain.getHeight(i, j))));
            }
        }
    }

    private static float computeEffect(int i, int j, int ic, int jc, int radius, boolean fallOff, int N) {
        if(i < 0 || j < 0 || i >= N || j >= N) return 0;
        if(!fallOff) return 1;
        int d2 = (ic-i)*(ic-i)+(jc-j)*(jc-j);
        if(d2 > radius*radius) return 0;
        return ((float)radius - (float)Math.sqrt(d2)) / (float)radius;
    }

    public static void addHeight(int i, int j, int radius, float add, Terrain terrain) {
        final int N = terrain.getN();
        for(int ja = -radius; ja <= radius; ja++) {
            int r = j + ja;
            if(r < 0 || r >= N) continue;
            for(int ia = -radius; ia <= radius; ia++) {
                int c = i + ia;
                if(c < 0 || c >= N) continue;
                float v = add * computeEffect(c, r, i, j, radius, true, N);
                float h = terrain.getHeight(c, r) + v;
                h = Math.max(0, Math.min(255, h));
                terrain.setHeight(c, r, h);
            }
        }
    }
}

--[ 2019.11.11.13.53.25.207.0 ]--
InitFile: /.cos265


--[ 2019.11.11.13.53.25.207.1 ]--
InitFile: /P04_Pathfinding.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/heightmaps" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.11.11.13.54.09.663.0 ]--
:/src/Pathfinder.java
- 143
--[ 2019.11.11.13.54.10.176.0 ]--
- 142
--[ 2019.11.11.13.54.11.838.0 ]--
+ 142         
--[ 2019.11.11.13.54.12.705.0 ]--
- 142
--[ 2019.11.11.13.54.13.122.0 ]--
+ 142         
--[ 2019.11.11.14.01.01.626.0 ]--
+ 45             
--[ 2019.11.11.14.01.07.300.0 ]--
- 45
--[ 2019.11.11.14.01.07.816.0 ]--
+ 45             
--[ 2019.11.11.14.01.13.923.0 ]--
r 45              
--[ 2019.11.11.14.01.13.958.0 ]--
r 45             
--[ 2019.11.11.14.01.14.025.0 ]--
- 45
--[ 2019.11.11.14.01.14.502.0 ]--
+ 45             
--[ 2019.11.11.14.01.26.214.0 ]--
r 45             hi
--[ 2019.11.11.14.01.26.556.0 ]--
r 45             
--[ 2019.11.11.14.01.26.617.0 ]--
r 45             t
--[ 2019.11.11.14.01.26.736.0 ]--
r 45             th
--[ 2019.11.11.14.01.26.767.0 ]--
r 45             thi
--[ 2019.11.11.14.01.26.824.0 ]--
r 45             this
--[ 2019.11.11.14.01.26.954.0 ]--
r 45             this.
--[ 2019.11.11.14.01.27.423.0 ]--
r 45             this.f
--[ 2019.11.11.14.01.27.548.0 ]--
r 45             this.fr
--[ 2019.11.11.14.01.28.485.0 ]--
r 45             this.
--[ 2019.11.11.14.01.28.987.0 ]--
r 45             this
--[ 2019.11.11.14.01.29.522.0 ]--
r 45             thi
--[ 2019.11.11.14.01.29.634.0 ]--
r 45             th
--[ 2019.11.11.14.01.29.980.0 ]--
r 45             t
--[ 2019.11.11.14.01.30.206.0 ]--
r 45             
--[ 2019.11.11.14.01.32.189.0 ]--
r 46 return 0;
--[ 2019.11.11.14.01.32.740.0 ]--
- 45
r 45             return 0;
--[ 2019.11.11.14.01.33.214.0 ]--
- 44
r 44         public float getCost(float heuristic) { return 0;
--[ 2019.11.11.14.01.33.326.0 ]--
r 44         public float getCost(float heuristic) {return 0;
--[ 2019.11.11.14.01.34.192.0 ]--
+ 44         public float getCost(float heuristic) {
r 45             return 0;
--[ 2019.11.11.14.01.35.472.0 ]--
+ 45             
--[ 2019.11.11.14.01.36.353.0 ]--
+ 45             
--[ 2019.11.11.14.01.37.082.0 ]--
r 45             t
--[ 2019.11.11.14.01.37.198.0 ]--
r 45             th
--[ 2019.11.11.14.01.37.262.0 ]--
r 45             thi
--[ 2019.11.11.14.01.37.349.0 ]--
r 45             this
--[ 2019.11.11.14.01.37.451.0 ]--
r 45             this.
--[ 2019.11.11.14.01.37.837.0 ]--
r 45             this.f
--[ 2019.11.11.14.01.38.269.0 ]--
r 45             this.fr
--[ 2019.11.11.14.01.38.314.0 ]--
r 45             this.fro
--[ 2019.11.11.14.01.38.385.0 ]--
r 45             this.from
--[ 2019.11.11.14.01.38.731.0 ]--
r 45             this.
--[ 2019.11.11.14.01.38.875.0 ]--
r 45             this
--[ 2019.11.11.14.01.39.219.0 ]--
r 45             
--[ 2019.11.11.14.01.45.486.0 ]--
r 45             i
--[ 2019.11.11.14.01.45.563.0 ]--
r 45             if
--[ 2019.11.11.14.01.45.768.0 ]--
r 45             if()
--[ 2019.11.11.14.01.46.458.0 ]--
r 45             if(t)
--[ 2019.11.11.14.01.46.535.0 ]--
r 45             if(th)
--[ 2019.11.11.14.01.46.585.0 ]--
r 45             if(thi)
--[ 2019.11.11.14.01.46.637.0 ]--
r 45             if(this)
--[ 2019.11.11.14.01.46.742.0 ]--
r 45             if(this.)
--[ 2019.11.11.14.01.47.311.0 ]--
r 45             if(this.a)
--[ 2019.11.11.14.01.47.838.0 ]--
r 45             if(this.)
--[ 2019.11.11.14.01.48.044.0 ]--
r 45             if(this.l)
--[ 2019.11.11.14.01.48.152.0 ]--
r 45             if(this.lo)
--[ 2019.11.11.14.01.48.250.0 ]--
r 45             if(this.loc)
--[ 2019.11.11.14.01.49.412.0 ]--
r 45             if(this.loc )
--[ 2019.11.11.14.01.49.457.0 ]--
r 45             if(this.loc)
--[ 2019.11.11.14.01.49.881.0 ]--
r 45             if(this.loc )
--[ 2019.11.11.14.01.49.995.0 ]--
r 45             if(this.loc)
--[ 2019.11.11.14.01.53.971.0 ]--
r 45             if(this.lo)
--[ 2019.11.11.14.01.54.035.0 ]--
r 45             if(this.l)
--[ 2019.11.11.14.01.54.151.0 ]--
r 45             if(this.)
--[ 2019.11.11.14.01.54.817.0 ]--
r 45             if(this.f)
--[ 2019.11.11.14.01.55.017.0 ]--
r 45             if(this.fr)
--[ 2019.11.11.14.01.55.052.0 ]--
r 45             if(this.fro)
--[ 2019.11.11.14.01.55.131.0 ]--
r 45             if(this.from)
--[ 2019.11.11.14.01.55.308.0 ]--
r 45             if(this.fromN)
--[ 2019.11.11.14.01.55.451.0 ]--
r 45             if(this.fromNo)
--[ 2019.11.11.14.01.55.521.0 ]--
r 45             if(this.fromNod)
--[ 2019.11.11.14.01.55.595.0 ]--
r 45             if(this.fromNode)
--[ 2019.11.11.14.01.55.682.0 ]--
r 45             if(this.fromNode )
--[ 2019.11.11.14.01.55.927.0 ]--
r 45             if(this.fromNode =)
--[ 2019.11.11.14.01.56.031.0 ]--
r 45             if(this.fromNode ==)
--[ 2019.11.11.14.01.56.123.0 ]--
r 45             if(this.fromNode == )
--[ 2019.11.11.14.01.56.400.0 ]--
r 45             if(this.fromNode == n)
--[ 2019.11.11.14.01.56.501.0 ]--
r 45             if(this.fromNode == nu)
--[ 2019.11.11.14.01.57.161.0 ]--
r 45             if(this.fromNode == nul)
--[ 2019.11.11.14.01.57.243.0 ]--
r 45             if(this.fromNode == null)
--[ 2019.11.11.14.01.57.356.0 ]--
r 45             if(this.fromNode == null;)
--[ 2019.11.11.14.01.57.768.0 ]--
r 45             if(this.fromNode == null)
--[ 2019.11.11.14.01.58.431.0 ]--
r 45             if(this.fromNode == null){
--[ 2019.11.11.14.01.58.579.0 ]--
+ 46 
+ 47 }
--[ 2019.11.11.14.01.58.662.0 ]--
r 47             }
--[ 2019.11.11.14.01.58.799.0 ]--
r 46                 re
--[ 2019.11.11.14.01.58.894.0 ]--
r 46                 ret
--[ 2019.11.11.14.01.58.949.0 ]--
r 46                 retu
--[ 2019.11.11.14.01.59.000.0 ]--
r 46                 retur
--[ 2019.11.11.14.01.59.086.0 ]--
r 46                 return
--[ 2019.11.11.14.01.59.189.0 ]--
r 46                 return 
--[ 2019.11.11.14.01.59.525.0 ]--
r 46                 return -
--[ 2019.11.11.14.01.59.914.0 ]--
r 46                 return 
--[ 2019.11.11.14.02.00.016.0 ]--
r 46                 return 0
--[ 2019.11.11.14.02.00.147.0 ]--
r 46                 return 0 
--[ 2019.11.11.14.02.00.215.0 ]--
r 46                 return 0
--[ 2019.11.11.14.02.01.046.0 ]--
r 46                 return 0;
--[ 2019.11.11.14.02.02.610.0 ]--
+ 48             
--[ 2019.11.11.14.02.04.831.0 ]--
r 48             t
--[ 2019.11.11.14.02.04.909.0 ]--
r 48             th
--[ 2019.11.11.14.02.04.951.0 ]--
r 48             thi
--[ 2019.11.11.14.02.05.021.0 ]--
r 48             this
--[ 2019.11.11.14.02.06.500.0 ]--
r 48             this 
--[ 2019.11.11.14.02.06.596.0 ]--
r 48             this
--[ 2019.11.11.14.02.06.735.0 ]--
r 48             
--[ 2019.11.11.14.02.08.543.0 ]--
r 48             t
--[ 2019.11.11.14.02.08.649.0 ]--
r 48             th
--[ 2019.11.11.14.02.08.674.0 ]--
r 48             thi
--[ 2019.11.11.14.02.08.765.0 ]--
r 48             this
--[ 2019.11.11.14.02.08.885.0 ]--
r 48             this.
--[ 2019.11.11.14.02.10.172.0 ]--
r 48             this.f
--[ 2019.11.11.14.02.10.308.0 ]--
r 48             this.fr
--[ 2019.11.11.14.02.10.410.0 ]--
r 48             this.fro
--[ 2019.11.11.14.02.10.453.0 ]--
r 48             this.from
--[ 2019.11.11.14.02.10.617.0 ]--
r 48             this.fromN
--[ 2019.11.11.14.02.10.775.0 ]--
r 48             this.fromNo
--[ 2019.11.11.14.02.11.081.0 ]--
r 48             this.fromNod
--[ 2019.11.11.14.02.11.154.0 ]--
r 48             this.fromNode
--[ 2019.11.11.14.02.11.262.0 ]--
r 48             this.fromNode.
--[ 2019.11.11.14.02.11.478.0 ]--
r 48             this.fromNode.g
--[ 2019.11.11.14.02.11.575.0 ]--
r 48             this.fromNode.ge
--[ 2019.11.11.14.02.11.645.0 ]--
r 48             this.fromNode.get
--[ 2019.11.11.14.02.12.218.0 ]--
r 48             this.fromNode.getCost
--[ 2019.11.11.14.02.12.277.0 ]--
r 48             this.fromNode.getCost()
--[ 2019.11.11.14.02.14.546.0 ]--
r 48             this.fromNode.getCost(h)
--[ 2019.11.11.14.02.14.660.0 ]--
r 48             this.fromNode.getCost(hu)
--[ 2019.11.11.14.02.14.687.0 ]--
r 48             this.fromNode.getCost(hue)
--[ 2019.11.11.14.02.14.792.0 ]--
r 48             this.fromNode.getCost(huer)
--[ 2019.11.11.14.02.14.903.0 ]--
r 48             this.fromNode.getCost(hueri)
--[ 2019.11.11.14.02.15.088.0 ]--
r 48             this.fromNode.getCost(huerit)
--[ 2019.11.11.14.02.15.427.0 ]--
r 48             this.fromNode.getCost(hueri)
--[ 2019.11.11.14.02.15.544.0 ]--
r 48             this.fromNode.getCost(hueris)
--[ 2019.11.11.14.02.16.089.0 ]--
r 48             this.fromNode.getCost(huerist)
--[ 2019.11.11.14.02.16.206.0 ]--
r 48             this.fromNode.getCost(hueristi)
--[ 2019.11.11.14.02.16.303.0 ]--
r 48             this.fromNode.getCost(hueristic)
--[ 2019.11.11.14.02.16.588.0 ]--
r 48             this.fromNode.getCost(hueristic )
--[ 2019.11.11.14.02.16.633.0 ]--
r 48             this.fromNode.getCost(hueristic)
--[ 2019.11.11.14.02.18.363.0 ]--
r 48             this.fromNode.getCost(h)
--[ 2019.11.11.14.02.19.880.0 ]--
r 48             this.fromNode.getCost(he)
--[ 2019.11.11.14.02.19.967.0 ]--
r 48             this.fromNode.getCost(heu)
--[ 2019.11.11.14.02.20.045.0 ]--
r 48             this.fromNode.getCost(heur)
--[ 2019.11.11.14.02.20.160.0 ]--
r 48             this.fromNode.getCost(heuri)
--[ 2019.11.11.14.02.20.237.0 ]--
r 48             this.fromNode.getCost(heuris)
--[ 2019.11.11.14.02.20.378.0 ]--
r 48             this.fromNode.getCost(heurist)
--[ 2019.11.11.14.02.20.483.0 ]--
r 48             this.fromNode.getCost(heuristi)
--[ 2019.11.11.14.02.20.562.0 ]--
r 48             this.fromNode.getCost(heuristic)
--[ 2019.11.11.14.02.21.536.0 ]--
r 48             this.fromNode.getCost(heuristic);
--[ 2019.11.11.14.02.22.178.0 ]--
+ 49             
--[ 2019.11.11.14.02.23.353.0 ]--
- 49
--[ 2019.11.11.14.02.27.028.0 ]--
+ 45             
--[ 2019.11.11.14.02.28.583.0 ]--
r 45             i
--[ 2019.11.11.14.02.28.632.0 ]--
r 45             in
--[ 2019.11.11.14.02.28.911.0 ]--
r 45             i
--[ 2019.11.11.14.02.29.018.0 ]--
r 45             
--[ 2019.11.11.14.02.29.892.0 ]--
r 45             f
--[ 2019.11.11.14.02.30.272.0 ]--
r 45             
--[ 2019.11.11.14.02.30.561.0 ]--
r 45              
--[ 2019.11.11.14.02.30.638.0 ]--
r 45             
--[ 2019.11.11.14.02.40.044.0 ]--
r 45             i
--[ 2019.11.11.14.02.40.125.0 ]--
r 45             inte
--[ 2019.11.11.14.02.40.206.0 ]--
r 45             inte 
--[ 2019.11.11.14.02.40.256.0 ]--
r 45             inte c
--[ 2019.11.11.14.02.40.557.0 ]--
r 45             inte 
--[ 2019.11.11.14.02.40.739.0 ]--
r 45             inte
--[ 2019.11.11.14.02.40.808.0 ]--
r 45             int
--[ 2019.11.11.14.02.41.144.0 ]--
r 45             int 
--[ 2019.11.11.14.02.41.163.0 ]--
r 45             int c
--[ 2019.11.11.14.02.41.214.0 ]--
r 45             int co
--[ 2019.11.11.14.02.41.294.0 ]--
r 45             int cos
--[ 2019.11.11.14.02.41.431.0 ]--
r 45             int cost
--[ 2019.11.11.14.02.41.524.0 ]--
r 45             int cost 
--[ 2019.11.11.14.02.41.847.0 ]--
r 45             int cost ;
--[ 2019.11.11.14.02.41.921.0 ]--
r 45             int cost 
--[ 2019.11.11.14.02.42.021.0 ]--
r 45             int cost
--[ 2019.11.11.14.02.42.104.0 ]--
r 45             int cost;
--[ 2019.11.11.14.02.42.562.0 ]--
r 45             int cost; 
--[ 2019.11.11.14.02.42.647.0 ]--
r 45             int cost;
--[ 2019.11.11.14.02.50.440.0 ]--
r 49             cthis.fromNode.getCost(heuristic);
--[ 2019.11.11.14.02.50.500.0 ]--
r 49             cothis.fromNode.getCost(heuristic);
--[ 2019.11.11.14.02.50.551.0 ]--
r 49             costhis.fromNode.getCost(heuristic);
--[ 2019.11.11.14.02.51.024.0 ]--
r 49             costthis.fromNode.getCost(heuristic);
--[ 2019.11.11.14.02.51.139.0 ]--
r 49             cost this.fromNode.getCost(heuristic);
--[ 2019.11.11.14.02.51.218.0 ]--
r 49             cost =this.fromNode.getCost(heuristic);
--[ 2019.11.11.14.02.51.282.0 ]--
r 49             cost = this.fromNode.getCost(heuristic);
--[ 2019.11.11.14.03.03.583.0 ]--
r 45             f cost;
--[ 2019.11.11.14.03.03.640.0 ]--
r 45             fl cost;
--[ 2019.11.11.14.03.03.770.0 ]--
r 45             flo cost;
--[ 2019.11.11.14.03.03.810.0 ]--
r 45             floa cost;
--[ 2019.11.11.14.03.03.881.0 ]--
r 45             float cost;
--[ 2019.11.11.14.03.08.191.0 ]--
r 49             cost = this.fromNode.getCost(heuristic)
--[ 2019.11.11.14.03.08.634.0 ]--
r 49             cost = this.fromNode.getCost(heuristic) 
--[ 2019.11.11.14.03.11.594.0 ]--
r 49             cost = this.fromNode.getCost(heuristic) +
--[ 2019.11.11.14.03.11.669.0 ]--
r 49             cost = this.fromNode.getCost(heuristic) + 
--[ 2019.11.11.14.03.11.859.0 ]--
r 49             cost = this.fromNode.getCost(heuristic) + t
--[ 2019.11.11.14.03.11.983.0 ]--
r 49             cost = this.fromNode.getCost(heuristic) + tr
--[ 2019.11.11.14.03.12.035.0 ]--
r 49             cost = this.fromNode.getCost(heuristic) + tra
--[ 2019.11.11.14.03.12.183.0 ]--
r 49             cost = this.fromNode.getCost(heuristic) + trav
--[ 2019.11.11.14.03.12.236.0 ]--
r 49             cost = this.fromNode.getCost(heuristic) + trave
--[ 2019.11.11.14.03.12.340.0 ]--
r 49             cost = this.fromNode.getCost(heuristic) + travel
--[ 2019.11.11.14.03.12.729.0 ]--
r 49             cost = this.fromNode.getCost(heuristic) + 
--[ 2019.11.11.14.03.13.444.0 ]--
r 49             cost = this.fromNode.getCost(heuristic) +
--[ 2019.11.11.14.03.13.574.0 ]--
r 49             cost = this.fromNode.getCost(heuristic) 
--[ 2019.11.11.14.03.14.886.0 ]--
r 49             cost = this.fromNode.getCost(heuristic)
--[ 2019.11.11.14.03.14.997.0 ]--
r 49             cost = this.fromNode.getCost(heuristic);
--[ 2019.11.11.14.03.15.180.0 ]--
+ 50             
--[ 2019.11.11.14.03.15.346.0 ]--
r 50             c
--[ 2019.11.11.14.03.15.553.0 ]--
r 50             
--[ 2019.11.11.14.03.16.193.0 ]--
r 50             t
--[ 2019.11.11.14.03.16.250.0 ]--
r 50             th
--[ 2019.11.11.14.03.16.301.0 ]--
r 50             thi
--[ 2019.11.11.14.03.16.503.0 ]--
r 50             thi.
--[ 2019.11.11.14.03.16.714.0 ]--
r 50             thi
--[ 2019.11.11.14.03.16.784.0 ]--
r 50             this
--[ 2019.11.11.14.03.16.899.0 ]--
r 50             this.
--[ 2019.11.11.14.03.16.990.0 ]--
r 50             this.f
--[ 2019.11.11.14.03.17.131.0 ]--
r 50             this.fr
--[ 2019.11.11.14.03.17.227.0 ]--
r 50             this.fro
--[ 2019.11.11.14.03.17.274.0 ]--
r 50             this.from
--[ 2019.11.11.14.03.17.854.0 ]--
r 50             this.fromNode
--[ 2019.11.11.14.03.17.963.0 ]--
r 50             this.fromNode.
--[ 2019.11.11.14.03.18.316.0 ]--
r 50             this.fromNode.t
--[ 2019.11.11.14.03.18.482.0 ]--
r 50             this.fromNode.tr
--[ 2019.11.11.14.03.18.518.0 ]--
r 50             this.fromNode.tra
--[ 2019.11.11.14.03.18.806.0 ]--
r 50             this.fromNode.trav
--[ 2019.11.11.14.03.19.213.0 ]--
r 50             this.fromNode.trave
--[ 2019.11.11.14.03.19.332.0 ]--
r 50             this.fromNode.trave;
--[ 2019.11.11.14.03.19.667.0 ]--
r 50             this.fromNode.trave; 
--[ 2019.11.11.14.03.19.697.0 ]--
r 50             this.fromNode.trave;
--[ 2019.11.11.14.03.19.830.0 ]--
r 50             this.fromNode.trave
--[ 2019.11.11.14.03.19.952.0 ]--
r 50             this.fromNode.travel
--[ 2019.11.11.14.03.20.334.0 ]--
r 50             this.fromNode.travelC
--[ 2019.11.11.14.03.20.495.0 ]--
r 50             this.fromNode.
--[ 2019.11.11.14.03.20.947.0 ]--
r 50             this.fromNode
--[ 2019.11.11.14.03.21.199.0 ]--
r 50             this.fromNode.
--[ 2019.11.11.14.03.26.164.0 ]--
r 50             
--[ 2019.11.11.14.03.26.453.0 ]--
- 50
--[ 2019.11.11.14.03.33.576.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); 
--[ 2019.11.11.14.03.33.720.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); +
--[ 2019.11.11.14.03.33.757.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + 
--[ 2019.11.11.14.03.33.949.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + t
--[ 2019.11.11.14.03.34.053.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + te
--[ 2019.11.11.14.03.34.144.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + ter
--[ 2019.11.11.14.03.34.281.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terr
--[ 2019.11.11.14.03.34.398.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terri
--[ 2019.11.11.14.03.34.465.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrin
--[ 2019.11.11.14.03.34.663.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrin.
--[ 2019.11.11.14.03.35.109.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrin.t
--[ 2019.11.11.14.03.35.245.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrin.tr
--[ 2019.11.11.14.03.35.306.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrin.tra
--[ 2019.11.11.14.03.35.615.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrin.
--[ 2019.11.11.14.03.35.944.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrin
--[ 2019.11.11.14.03.36.535.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + 
--[ 2019.11.11.14.03.36.757.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + t
--[ 2019.11.11.14.03.36.812.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + te
--[ 2019.11.11.14.03.36.908.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + ter
--[ 2019.11.11.14.03.37.044.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terr
--[ 2019.11.11.14.03.37.126.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terra
--[ 2019.11.11.14.03.37.194.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrai
--[ 2019.11.11.14.03.37.266.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain
--[ 2019.11.11.14.03.37.453.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain,
--[ 2019.11.11.14.03.37.946.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain
--[ 2019.11.11.14.03.38.069.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.
--[ 2019.11.11.14.03.38.179.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.t
--[ 2019.11.11.14.03.38.391.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.tra
--[ 2019.11.11.14.03.41.117.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost
--[ 2019.11.11.14.03.41.134.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost()
--[ 2019.11.11.14.03.42.757.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(t)
--[ 2019.11.11.14.03.42.895.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(th)
--[ 2019.11.11.14.03.42.957.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(thi)
--[ 2019.11.11.14.03.43.031.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this)
--[ 2019.11.11.14.03.43.180.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.)
--[ 2019.11.11.14.03.43.391.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.l)
--[ 2019.11.11.14.03.43.505.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.lo)
--[ 2019.11.11.14.03.43.595.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.loc)
--[ 2019.11.11.14.03.44.955.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.loc,)
--[ 2019.11.11.14.03.44.995.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.loc, )
--[ 2019.11.11.14.03.45.099.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.loc, f)
--[ 2019.11.11.14.03.45.267.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.loc, fr)
--[ 2019.11.11.14.03.45.375.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.loc, fro)
--[ 2019.11.11.14.03.45.577.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.loc, from)
--[ 2019.11.11.14.03.45.885.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.loc, fromN)
--[ 2019.11.11.14.03.45.960.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.loc, fromNo)
--[ 2019.11.11.14.03.46.022.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.loc, fromNod)
--[ 2019.11.11.14.03.46.077.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.loc, fromNode)
--[ 2019.11.11.14.03.46.122.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.loc, fromNode.)
--[ 2019.11.11.14.03.46.284.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.loc, fromNode.l)
--[ 2019.11.11.14.03.46.459.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.loc, fromNode.lo)
--[ 2019.11.11.14.03.46.529.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.loc, fromNode.loc)
--[ 2019.11.11.14.03.48.017.0 ]--
r 49             cost = this.fromNode.getCost(heuristic); + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.14.03.54.283.0 ]--
r 49             cost = this.fromNode.getCost(heuristic) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.14.03.56.573.0 ]--
r 51             return ;
--[ 2019.11.11.14.03.56.691.0 ]--
r 51             return c;
--[ 2019.11.11.14.03.56.795.0 ]--
r 51             return co;
--[ 2019.11.11.14.03.56.866.0 ]--
r 51             return cos;
--[ 2019.11.11.14.03.57.022.0 ]--
r 51             return cost;
--[ 2019.11.11.14.03.57.809.0 ]--
r 51             return cost ;
--[ 2019.11.11.14.03.57.827.0 ]--
r 51             return cost;
--[ 2019.11.11.14.04.10.831.0 ]--
+ 134         
--[ 2019.11.11.14.04.10.953.0 ]--
+ 134         
--[ 2019.11.11.14.04.12.063.0 ]--
r 135         a
--[ 2019.11.11.14.04.12.522.0 ]--
r 135         
--[ 2019.11.11.14.04.24.870.0 ]--
r 135          
--[ 2019.11.11.14.04.24.935.0 ]--
r 135         
--[ 2019.11.11.14.04.25.721.0 ]--
r 135          
--[ 2019.11.11.14.04.25.757.0 ]--
r 135         
--[ 2019.11.11.14.04.26.230.0 ]--
- 134
--[ 2019.11.11.14.04.27.061.0 ]--
- 134
--[ 2019.11.11.14.04.35.922.0 ]--
r 50 
r 148 
--[ 2019.11.11.14.04.41.778.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.04.51.865.0 ]--
+ 138         
--[ 2019.11.11.14.04.57.455.0 ]--
- 138
--[ 2019.11.11.14.05.00.256.0 ]--
+ 140         
--[ 2019.11.11.14.05.00.854.0 ]--
+ 140         
--[ 2019.11.11.14.05.01.179.0 ]--
r 141         b
--[ 2019.11.11.14.05.01.295.0 ]--
r 141         be
--[ 2019.11.11.14.05.01.478.0 ]--
r 141         beg
--[ 2019.11.11.14.05.01.576.0 ]--
r 141         begi
--[ 2019.11.11.14.05.01.674.0 ]--
r 141         begin
--[ 2019.11.11.14.05.02.451.0 ]--
r 141         begin 
--[ 2019.11.11.14.05.02.951.0 ]--
r 141         begin =
--[ 2019.11.11.14.05.03.293.0 ]--
r 141         begin 
--[ 2019.11.11.14.05.03.453.0 ]--
r 141         
--[ 2019.11.11.14.05.04.193.0 ]--
- 140
--[ 2019.11.11.14.05.04.627.0 ]--
r 140          
--[ 2019.11.11.14.05.04.663.0 ]--
r 140         
--[ 2019.11.11.14.05.04.966.0 ]--
+ 140         
--[ 2019.11.11.14.05.05.403.0 ]--
r 141         p
--[ 2019.11.11.14.05.05.832.0 ]--
r 141         
--[ 2019.11.11.14.05.05.955.0 ]--
r 141         P
--[ 2019.11.11.14.05.06.084.0 ]--
r 141         PF
--[ 2019.11.11.14.05.06.432.0 ]--
r 141         PFN
--[ 2019.11.11.14.05.06.544.0 ]--
r 141         PFNo
--[ 2019.11.11.14.05.06.603.0 ]--
r 141         PFNod
--[ 2019.11.11.14.05.06.660.0 ]--
r 141         PFNode
--[ 2019.11.11.14.05.07.621.0 ]--
r 141         PFNode 
--[ 2019.11.11.14.05.07.732.0 ]--
r 141         PFNode b
--[ 2019.11.11.14.05.07.886.0 ]--
r 141         PFNode be
--[ 2019.11.11.14.05.08.002.0 ]--
r 141         PFNode beg
--[ 2019.11.11.14.05.08.161.0 ]--
r 141         PFNode begn
--[ 2019.11.11.14.05.08.478.0 ]--
r 141         PFNode beg
--[ 2019.11.11.14.05.08.659.0 ]--
r 141         PFNode begi
--[ 2019.11.11.14.05.08.694.0 ]--
r 141         PFNode begin
--[ 2019.11.11.14.05.08.974.0 ]--
r 141         PFNode begin1
--[ 2019.11.11.14.05.09.621.0 ]--
r 141         PFNode begin1 
--[ 2019.11.11.14.05.09.695.0 ]--
r 141         PFNode begin1 =
--[ 2019.11.11.14.05.09.768.0 ]--
r 141         PFNode begin1 = 
--[ 2019.11.11.14.05.09.869.0 ]--
r 141         PFNode begin1 = n
--[ 2019.11.11.14.05.09.918.0 ]--
r 141         PFNode begin1 = ne
--[ 2019.11.11.14.05.10.055.0 ]--
r 141         PFNode begin1 = new
--[ 2019.11.11.14.05.10.144.0 ]--
r 141         PFNode begin1 = new 
--[ 2019.11.11.14.05.10.267.0 ]--
r 141         PFNode begin1 = new P
--[ 2019.11.11.14.05.10.338.0 ]--
r 141         PFNode begin1 = new PF
--[ 2019.11.11.14.05.10.437.0 ]--
r 141         PFNode begin1 = new PFO
--[ 2019.11.11.14.05.10.603.0 ]--
r 141         PFNode begin1 = new PFON
--[ 2019.11.11.14.05.11.048.0 ]--
r 141         PFNode begin1 = new PFO
--[ 2019.11.11.14.05.11.087.0 ]--
r 141         PFNode begin1 = new PF
--[ 2019.11.11.14.05.11.190.0 ]--
r 141         PFNode begin1 = new PFN
--[ 2019.11.11.14.05.11.279.0 ]--
r 141         PFNode begin1 = new PFNo
--[ 2019.11.11.14.05.11.335.0 ]--
r 141         PFNode begin1 = new PFNod
--[ 2019.11.11.14.05.11.408.0 ]--
r 141         PFNode begin1 = new PFNode
--[ 2019.11.11.14.05.11.655.0 ]--
r 141         PFNode begin1 = new PFNode()
--[ 2019.11.11.14.05.14.013.0 ]--
r 141         PFNode begin1 = new PFNode(1)
--[ 2019.11.11.14.05.14.273.0 ]--
r 141         PFNode begin1 = new PFNode(1())
--[ 2019.11.11.14.05.15.134.0 ]--
r 141         PFNode begin1 = new PFNode(1)
--[ 2019.11.11.14.05.16.897.0 ]--
r 141         PFNode begin1 = new PFNode()
--[ 2019.11.11.14.05.17.063.0 ]--
r 141         PFNode begin1 = new PFNode(0)
--[ 2019.11.11.14.05.17.243.0 ]--
r 141         PFNode begin1 = new PFNode(0,)
--[ 2019.11.11.14.05.17.624.0 ]--
r 141         PFNode begin1 = new PFNode(0, )
--[ 2019.11.11.14.05.17.782.0 ]--
r 141         PFNode begin1 = new PFNode(0,)
--[ 2019.11.11.14.05.18.270.0 ]--
r 141         PFNode begin1 = new PFNode(0)
--[ 2019.11.11.14.05.18.350.0 ]--
r 141         PFNode begin1 = new PFNode()
--[ 2019.11.11.14.05.23.819.0 ]--
r 141         PFNode begin1 = new PFNode(1)
--[ 2019.11.11.14.05.23.856.0 ]--
r 141         PFNode begin1 = new PFNode(1,)
--[ 2019.11.11.14.05.23.943.0 ]--
r 141         PFNode begin1 = new PFNode(1, )
--[ 2019.11.11.14.05.24.004.0 ]--
r 141         PFNode begin1 = new PFNode(1, 0)
--[ 2019.11.11.14.05.25.652.0 ]--
r 141         PFNode begin1 = new PFNode(1, )
--[ 2019.11.11.14.05.25.930.0 ]--
r 141         PFNode begin1 = new PFNode(1)
--[ 2019.11.11.14.05.26.240.0 ]--
r 141         PFNode begin1 = new PFNode()
--[ 2019.11.11.14.05.27.543.0 ]--
r 141         PFNode begin1 = new PFNode(n)
--[ 2019.11.11.14.05.27.599.0 ]--
r 141         PFNode begin1 = new PFNode(ne)
--[ 2019.11.11.14.05.27.770.0 ]--
r 141         PFNode begin1 = new PFNode(new)
--[ 2019.11.11.14.05.28.053.0 ]--
r 141         PFNode begin1 = new PFNode(new )
--[ 2019.11.11.14.05.28.198.0 ]--
r 141         PFNode begin1 = new PFNode(new C)
--[ 2019.11.11.14.05.28.285.0 ]--
r 141         PFNode begin1 = new PFNode(new Co)
--[ 2019.11.11.14.05.28.373.0 ]--
r 141         PFNode begin1 = new PFNode(new Coo)
--[ 2019.11.11.14.05.28.458.0 ]--
r 141         PFNode begin1 = new PFNode(new Coor)
--[ 2019.11.11.14.05.28.643.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord)
--[ 2019.11.11.14.05.28.784.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord())
--[ 2019.11.11.14.05.29.515.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(1))
--[ 2019.11.11.14.05.29.637.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(1,))
--[ 2019.11.11.14.05.29.767.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(1, ))
--[ 2019.11.11.14.05.29.904.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(1, 0))
--[ 2019.11.11.14.05.31.020.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(1, 0),)
--[ 2019.11.11.14.05.31.084.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(1, 0), )
--[ 2019.11.11.14.05.34.619.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(1, 0), b)
--[ 2019.11.11.14.05.34.784.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(1, 0), be)
--[ 2019.11.11.14.05.34.977.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(1, 0), beg)
--[ 2019.11.11.14.05.35.122.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(1, 0), begin)
--[ 2019.11.11.14.05.36.100.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(1, 0), begin);
--[ 2019.11.11.14.05.37.797.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(1, 0), begin); 
--[ 2019.11.11.14.05.37.839.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(1, 0), begin);
--[ 2019.11.11.14.05.38.578.0 ]--
+ 142         
--[ 2019.11.11.14.05.38.690.0 ]--
+ 142         
--[ 2019.11.11.14.05.39.188.0 ]--
r 143         s
--[ 2019.11.11.14.05.39.331.0 ]--
r 143         st
--[ 2019.11.11.14.05.40.300.0 ]--
r 143         std
--[ 2019.11.11.14.05.40.393.0 ]--
r 143         stdO
--[ 2019.11.11.14.05.40.844.0 ]--
r 143         std
--[ 2019.11.11.14.05.40.957.0 ]--
r 143         st
--[ 2019.11.11.14.05.41.119.0 ]--
r 143         s
--[ 2019.11.11.14.05.41.333.0 ]--
r 143         
--[ 2019.11.11.14.05.41.524.0 ]--
r 143         S
--[ 2019.11.11.14.05.41.685.0 ]--
r 143         St
--[ 2019.11.11.14.05.41.837.0 ]--
r 143         Std
--[ 2019.11.11.14.05.42.429.0 ]--
r 143         StdOut
--[ 2019.11.11.14.05.42.534.0 ]--
r 143         StdOut.
--[ 2019.11.11.14.05.42.721.0 ]--
r 143         StdOut.p
--[ 2019.11.11.14.05.43.227.0 ]--
r 143         StdOut.println
--[ 2019.11.11.14.05.43.242.0 ]--
r 143         StdOut.println()
--[ 2019.11.11.14.05.43.251.0 ]--
r 143         StdOut.println();
--[ 2019.11.11.14.05.44.847.0 ]--
r 143         StdOut.println(b);
--[ 2019.11.11.14.05.44.921.0 ]--
r 143         StdOut.println(be);
--[ 2019.11.11.14.05.45.046.0 ]--
r 143         StdOut.println(beg);
--[ 2019.11.11.14.05.45.136.0 ]--
r 143         StdOut.println(begi);
--[ 2019.11.11.14.05.45.198.0 ]--
r 143         StdOut.println(begin);
--[ 2019.11.11.14.05.45.298.0 ]--
r 143         StdOut.println(begin1);
--[ 2019.11.11.14.05.45.397.0 ]--
r 143         StdOut.println(begin1.);
--[ 2019.11.11.14.05.45.788.0 ]--
r 143         StdOut.println(begin1.g);
--[ 2019.11.11.14.05.45.814.0 ]--
r 143         StdOut.println(begin1.ge);
--[ 2019.11.11.14.05.45.886.0 ]--
r 143         StdOut.println(begin1.get);
--[ 2019.11.11.14.05.46.927.0 ]--
r 143         StdOut.println(begin1.getCost);
--[ 2019.11.11.14.05.46.946.0 ]--
r 143         StdOut.println(begin1.getCost());
--[ 2019.11.11.14.05.47.366.0 ]--
r 143         StdOut.println(begin1.getCost(h));
--[ 2019.11.11.14.05.47.465.0 ]--
r 143         StdOut.println(begin1.getCost(hu));
--[ 2019.11.11.14.05.47.566.0 ]--
r 143         StdOut.println(begin1.getCost(hue));
--[ 2019.11.11.14.05.47.979.0 ]--
r 143         StdOut.println(begin1.getCost(huer));
--[ 2019.11.11.14.05.48.168.0 ]--
r 143         StdOut.println(begin1.getCost(hue));
--[ 2019.11.11.14.05.48.282.0 ]--
r 143         StdOut.println(begin1.getCost(hu));
--[ 2019.11.11.14.05.48.634.0 ]--
r 143         StdOut.println(begin1.getCost(h));
--[ 2019.11.11.14.05.48.745.0 ]--
r 143         StdOut.println(begin1.getCost(he));
--[ 2019.11.11.14.05.48.802.0 ]--
r 143         StdOut.println(begin1.getCost(heu));
--[ 2019.11.11.14.05.48.943.0 ]--
r 143         StdOut.println(begin1.getCost(heur));
--[ 2019.11.11.14.05.49.305.0 ]--
r 143         StdOut.println(begin1.getCost(heuri));
--[ 2019.11.11.14.05.49.383.0 ]--
r 143         StdOut.println(begin1.getCost(heuris));
--[ 2019.11.11.14.05.49.478.0 ]--
r 143         StdOut.println(begin1.getCost(heurist));
--[ 2019.11.11.14.05.49.584.0 ]--
r 143         StdOut.println(begin1.getCost(heuristi));
--[ 2019.11.11.14.05.49.652.0 ]--
r 143         StdOut.println(begin1.getCost(heuristic));
--[ 2019.11.11.14.05.53.349.0 ]--
r 142 
--[ 2019.11.11.14.05.57.440.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.06.04.482.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(1, ), begin);
--[ 2019.11.11.14.06.04.540.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(1, 2), begin);
--[ 2019.11.11.14.06.07.851.0 ]--
r 140 
--[ 2019.11.11.14.06.11.531.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.06.24.235.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(1, ), begin);
--[ 2019.11.11.14.06.25.577.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(1, 1), begin);
--[ 2019.11.11.14.06.32.577.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.06.41.514.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(, 1), begin);
--[ 2019.11.11.14.06.41.543.0 ]--
r 141         PFNode begin1 = new PFNode(new Coord(2, 1), begin);
--[ 2019.11.11.14.06.48.097.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.06.59.969.0 ]--
+ 165         
--[ 2019.11.11.14.07.00.448.0 ]--
r 165         p
--[ 2019.11.11.14.07.00.682.0 ]--
r 165         p.
--[ 2019.11.11.14.07.01.031.0 ]--
r 165         p.p
--[ 2019.11.11.14.07.01.100.0 ]--
r 165         p.pu
--[ 2019.11.11.14.07.01.203.0 ]--
r 165         p.pus
--[ 2019.11.11.14.07.01.301.0 ]--
r 165         p.push
--[ 2019.11.11.14.07.01.494.0 ]--
r 165         p.push()
--[ 2019.11.11.14.07.01.944.0 ]--
r 165         p.push(b)
--[ 2019.11.11.14.07.02.103.0 ]--
r 165         p.push(be)
--[ 2019.11.11.14.07.02.204.0 ]--
r 165         p.push(beg)
--[ 2019.11.11.14.07.02.354.0 ]--
r 165         p.push(begi)
--[ 2019.11.11.14.07.02.426.0 ]--
r 165         p.push(begin)
--[ 2019.11.11.14.07.02.585.0 ]--
r 165         p.push(begin2)
--[ 2019.11.11.14.07.04.107.0 ]--
r 165         p.push(begin)
--[ 2019.11.11.14.07.04.128.0 ]--
r 165         p.push(begin1)
--[ 2019.11.11.14.07.04.742.0 ]--
r 165         p.push(begin1);
--[ 2019.11.11.14.07.06.198.0 ]--
r 165         .push(begin1);
--[ 2019.11.11.14.07.06.275.0 ]--
r 165         s.push(begin1);
--[ 2019.11.11.14.07.11.898.0 ]--
UpdateTree (AD): 0 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class

--[ 2019.11.11.14.07.11.898.1 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@5f9c0fa4
--[ 2019.11.11.14.07.16.427.0 ]--
r 165         s.push(begin1.);
--[ 2019.11.11.14.07.16.428.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.07.16.513.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.07.16.516.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.07.16.520.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.07.16.606.0 ]--
r 165         s.push(begin1.l);
--[ 2019.11.11.14.07.16.607.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.07.16.615.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.07.16.777.0 ]--
r 165         s.push(begin1.lo);
--[ 2019.11.11.14.07.16.778.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.07.16.781.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.07.16.831.0 ]--
r 165         s.push(begin1.loc);
--[ 2019.11.11.14.07.16.831.1 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.07.16.835.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.07.24.398.0 ]--
UpdateTree (AD): 2 0
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.07.24.398.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.07.32.622.0 ]--
r 165         s
--[ 2019.11.11.14.07.32.908.0 ]--
r 165         
--[ 2019.11.11.14.07.33.088.0 ]--
- 165
--[ 2019.11.11.14.07.37.159.0 ]--
+ 142         
--[ 2019.11.11.14.07.37.853.0 ]--
r 142         P
--[ 2019.11.11.14.07.37.957.0 ]--
r 142         PF
--[ 2019.11.11.14.07.38.063.0 ]--
r 142         PFN
--[ 2019.11.11.14.07.38.189.0 ]--
r 142         PFNo
--[ 2019.11.11.14.07.38.281.0 ]--
r 142         PFNod
--[ 2019.11.11.14.07.38.344.0 ]--
r 142         PFNode
--[ 2019.11.11.14.07.38.642.0 ]--
r 142         PFNode 
--[ 2019.11.11.14.07.38.726.0 ]--
r 142         PFNode b
--[ 2019.11.11.14.07.38.853.0 ]--
r 142         PFNode be
--[ 2019.11.11.14.07.39.096.0 ]--
r 142         PFNode beg
--[ 2019.11.11.14.07.39.160.0 ]--
r 142         PFNode begi
--[ 2019.11.11.14.07.39.227.0 ]--
r 142         PFNode begin
--[ 2019.11.11.14.07.39.325.0 ]--
r 142         PFNode begin2
--[ 2019.11.11.14.07.39.460.0 ]--
r 142         PFNode begin2 
--[ 2019.11.11.14.07.39.548.0 ]--
r 142         PFNode begin2 -
--[ 2019.11.11.14.07.39.613.0 ]--
r 142         PFNode begin2 - 
--[ 2019.11.11.14.07.39.947.0 ]--
r 142         PFNode begin2 -
--[ 2019.11.11.14.07.40.042.0 ]--
r 142         PFNode begin2 
--[ 2019.11.11.14.07.40.158.0 ]--
r 142         PFNode begin2 =
--[ 2019.11.11.14.07.40.246.0 ]--
r 142         PFNode begin2 = 
--[ 2019.11.11.14.07.40.754.0 ]--
r 142         PFNode begin2 = n
--[ 2019.11.11.14.07.40.808.0 ]--
r 142         PFNode begin2 = ne
--[ 2019.11.11.14.07.40.943.0 ]--
r 142         PFNode begin2 = new
--[ 2019.11.11.14.07.41.012.0 ]--
r 142         PFNode begin2 = new 
--[ 2019.11.11.14.07.41.128.0 ]--
r 142         PFNode begin2 = new P
--[ 2019.11.11.14.07.41.222.0 ]--
r 142         PFNode begin2 = new PF
--[ 2019.11.11.14.07.41.354.0 ]--
r 142         PFNode begin2 = new PFN
--[ 2019.11.11.14.07.41.521.0 ]--
r 142         PFNode begin2 = new PFNo
--[ 2019.11.11.14.07.41.631.0 ]--
r 142         PFNode begin2 = new PFNod
--[ 2019.11.11.14.07.41.705.0 ]--
r 142         PFNode begin2 = new PFNode
--[ 2019.11.11.14.07.42.164.0 ]--
r 142         PFNode begin2 = new PFNode()
--[ 2019.11.11.14.07.42.269.0 ]--
r 142         PFNode begin2 = new PFNode(n)
--[ 2019.11.11.14.07.42.326.0 ]--
r 142         PFNode begin2 = new PFNode(ne)
--[ 2019.11.11.14.07.42.601.0 ]--
r 142         PFNode begin2 = new PFNode(new)
--[ 2019.11.11.14.07.42.795.0 ]--
r 142         PFNode begin2 = new PFNode(new )
--[ 2019.11.11.14.07.42.887.0 ]--
r 142         PFNode begin2 = new PFNode(new C)
--[ 2019.11.11.14.07.42.974.0 ]--
r 142         PFNode begin2 = new PFNode(new CO)
--[ 2019.11.11.14.07.43.074.0 ]--
r 142         PFNode begin2 = new PFNode(new COo)
--[ 2019.11.11.14.07.43.118.0 ]--
r 142         PFNode begin2 = new PFNode(new COor)
--[ 2019.11.11.14.07.43.274.0 ]--
r 142         PFNode begin2 = new PFNode(new COord)
--[ 2019.11.11.14.07.43.441.0 ]--
r 142         PFNode begin2 = new PFNode(new COord())
--[ 2019.11.11.14.07.43.551.0 ]--
r 142         PFNode begin2 = new PFNode(new COord)
--[ 2019.11.11.14.07.43.655.0 ]--
r 142         PFNode begin2 = new PFNode(new COor)
--[ 2019.11.11.14.07.43.761.0 ]--
r 142         PFNode begin2 = new PFNode(new COo)
--[ 2019.11.11.14.07.43.861.0 ]--
r 142         PFNode begin2 = new PFNode(new CO)
--[ 2019.11.11.14.07.44.331.0 ]--
r 142         PFNode begin2 = new PFNode(new C)
--[ 2019.11.11.14.07.44.436.0 ]--
r 142         PFNode begin2 = new PFNode(new Co)
--[ 2019.11.11.14.07.44.648.0 ]--
r 142         PFNode begin2 = new PFNode(new Coor)
--[ 2019.11.11.14.07.44.755.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord)
--[ 2019.11.11.14.07.44.892.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord())
--[ 2019.11.11.14.07.45.469.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(2))
--[ 2019.11.11.14.07.45.916.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord())
--[ 2019.11.11.14.07.46.018.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3))
--[ 2019.11.11.14.07.46.102.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3,))
--[ 2019.11.11.14.07.46.290.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3, ))
--[ 2019.11.11.14.07.46.677.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3, 2))
--[ 2019.11.11.14.07.47.529.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3, 2),)
--[ 2019.11.11.14.07.48.042.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3, 2), )
--[ 2019.11.11.14.07.48.176.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3, 2), b)
--[ 2019.11.11.14.07.48.325.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3, 2), be)
--[ 2019.11.11.14.07.48.678.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3, 2), b)
--[ 2019.11.11.14.07.48.804.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3, 2), )
--[ 2019.11.11.14.07.49.136.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3, 2), b)
--[ 2019.11.11.14.07.49.275.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3, 2), be)
--[ 2019.11.11.14.07.49.359.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3, 2), beg)
--[ 2019.11.11.14.07.49.439.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3, 2), begi)
--[ 2019.11.11.14.07.49.468.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3, 2), begin)
--[ 2019.11.11.14.07.49.558.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3, 2), begin1)
--[ 2019.11.11.14.07.50.330.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3, 2), begin1);
--[ 2019.11.11.14.07.55.706.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.08.01.564.0 ]--
+ 145         
--[ 2019.11.11.14.08.03.057.0 ]--
r 145         StdOut.println(begin1.getCost(heuristic));
--[ 2019.11.11.14.08.04.475.0 ]--
r 145         StdOut.println(begin.getCost(heuristic));
--[ 2019.11.11.14.08.04.578.0 ]--
r 145         StdOut.println(begin2.getCost(heuristic));
--[ 2019.11.11.14.08.10.198.0 ]--
+ 167         
--[ 2019.11.11.14.08.10.510.0 ]--
r 167         s
--[ 2019.11.11.14.08.10.894.0 ]--
r 167         s.
--[ 2019.11.11.14.08.12.071.0 ]--
r 167         s.p
--[ 2019.11.11.14.08.12.104.0 ]--
r 167         s.pu
--[ 2019.11.11.14.08.12.192.0 ]--
r 167         s.pus
--[ 2019.11.11.14.08.12.281.0 ]--
r 167         s.push
--[ 2019.11.11.14.08.12.907.0 ]--
r 167         s.push()
--[ 2019.11.11.14.08.14.913.0 ]--
r 167         s.push(b)
--[ 2019.11.11.14.08.15.070.0 ]--
r 167         s.push(be)
--[ 2019.11.11.14.08.15.312.0 ]--
r 167         s.push(beg)
--[ 2019.11.11.14.08.15.465.0 ]--
r 167         s.push(begi)
--[ 2019.11.11.14.08.15.532.0 ]--
r 167         s.push(begin)
--[ 2019.11.11.14.08.16.147.0 ]--
r 167         s.push(begin1)
--[ 2019.11.11.14.08.16.189.0 ]--
r 167         s.push(begin1.)
--[ 2019.11.11.14.08.16.379.0 ]--
r 167         s.push(begin1.l)
--[ 2019.11.11.14.08.16.512.0 ]--
r 167         s.push(begin1.lo)
--[ 2019.11.11.14.08.16.589.0 ]--
r 167         s.push(begin1.loc)
--[ 2019.11.11.14.08.17.116.0 ]--
r 167         s.push(begin1.loc);
--[ 2019.11.11.14.08.17.261.0 ]--
+ 168         
--[ 2019.11.11.14.08.17.426.0 ]--
r 168         s
--[ 2019.11.11.14.08.17.580.0 ]--
r 168         s.
--[ 2019.11.11.14.08.17.808.0 ]--
r 168         s.p
--[ 2019.11.11.14.08.17.861.0 ]--
r 168         s.pu
--[ 2019.11.11.14.08.17.978.0 ]--
r 168         s.pus
--[ 2019.11.11.14.08.18.074.0 ]--
r 168         s.push
--[ 2019.11.11.14.08.18.400.0 ]--
r 168         s.pushb
--[ 2019.11.11.14.08.18.621.0 ]--
r 168         s.push
--[ 2019.11.11.14.08.18.780.0 ]--
r 168         s.push()
--[ 2019.11.11.14.08.18.894.0 ]--
r 168         s.push(b)
--[ 2019.11.11.14.08.18.968.0 ]--
r 168         s.push(be)
--[ 2019.11.11.14.08.19.089.0 ]--
r 168         s.push(beg)
--[ 2019.11.11.14.08.19.186.0 ]--
r 168         s.push(begi)
--[ 2019.11.11.14.08.19.223.0 ]--
r 168         s.push(begin)
--[ 2019.11.11.14.08.19.336.0 ]--
r 168         s.push(begin2)
--[ 2019.11.11.14.08.19.459.0 ]--
r 168         s.push(begin2.)
--[ 2019.11.11.14.08.19.583.0 ]--
r 168         s.push(begin2.l)
--[ 2019.11.11.14.08.19.735.0 ]--
r 168         s.push(begin2.lo)
--[ 2019.11.11.14.08.19.805.0 ]--
r 168         s.push(begin2.loc)
--[ 2019.11.11.14.08.20.298.0 ]--
r 168         s.push(begin2.loc);
--[ 2019.11.11.14.08.25.701.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.08.35.018.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3, ), begin1);
--[ 2019.11.11.14.08.35.065.0 ]--
r 142         PFNode begin2 = new PFNode(new Coord(3, 1), begin1);
--[ 2019.11.11.14.08.40.999.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.08.47.505.0 ]--
- 141
r 141         PFNode begin1 = new PFNode(new Coord(2, 1\), begin1);
--[ 2019.11.11.14.08.53.664.0 ]--
- 140
- 140
- 141
r 141         
--[ 2019.11.11.14.08.53.831.0 ]--
- 140
--[ 2019.11.11.14.09.00.683.0 ]--
- 162
r 162         s
--[ 2019.11.11.14.09.00.790.0 ]--
r 162         
--[ 2019.11.11.14.09.00.964.0 ]--
- 162
--[ 2019.11.11.14.09.09.871.0 ]--
r 139         
--[ 2019.11.11.14.09.10.040.0 ]--
- 138
--[ 2019.11.11.14.09.10.337.0 ]--
- 138
--[ 2019.11.11.14.09.15.460.0 ]--
r 37             if(this.getCost(0) < that.getCost()) return -1;
--[ 2019.11.11.14.09.15.560.0 ]--
r 37             if(this.getCost(0) < that.getCost(h)) return -1;
--[ 2019.11.11.14.09.16.139.0 ]--
r 37             if(this.getCost(0) < that.getCost(he)) return -1;
--[ 2019.11.11.14.09.16.267.0 ]--
r 37             if(this.getCost(0) < that.getCost(heu)) return -1;
--[ 2019.11.11.14.09.16.491.0 ]--
r 37             if(this.getCost(0) < that.getCost(heuristic)) return -1;
--[ 2019.11.11.14.09.17.757.0 ]--
r 38             else if (this.getCost(0) > that.getCos(0)) return 1;
--[ 2019.11.11.14.09.18.356.0 ]--
r 38             else if (this.getCost(0) > that.getCost(0)) return 1;
--[ 2019.11.11.14.09.20.098.0 ]--
r 38             else if (this.getCost(0) > that.getCost()) return 1;
--[ 2019.11.11.14.09.20.430.0 ]--
r 38             else if (this.getCost(0) > that.getCost(h)) return 1;
--[ 2019.11.11.14.09.20.556.0 ]--
r 38             else if (this.getCost(0) > that.getCost(he)) return 1;
--[ 2019.11.11.14.09.21.171.0 ]--
r 38             else if (this.getCost(0) > that.getCost(heuristic)) return 1;
--[ 2019.11.11.14.09.22.749.0 ]--
r 38             else if (this.getCost() > that.getCost(heuristic)) return 1;
--[ 2019.11.11.14.09.22.819.0 ]--
r 38             else if (this.getCost(h) > that.getCost(heuristic)) return 1;
--[ 2019.11.11.14.09.22.988.0 ]--
r 38             else if (this.getCost(he) > that.getCost(heuristic)) return 1;
--[ 2019.11.11.14.09.23.562.0 ]--
+ 38             else if (this.getCost(he\
r 39             ) > that.getCost(heuristic)) return 1;
--[ 2019.11.11.14.09.24.377.0 ]--
- 38
r 38             else if (this.getCost(he\) > that.getCost(heuristic)) return 1;
--[ 2019.11.11.14.09.24.657.0 ]--
r 38             else if (this.getCost(he) > that.getCost(heuristic)) return 1;
--[ 2019.11.11.14.09.25.474.0 ]--
r 38             else if (this.getCost(heu) > that.getCost(heuristic)) return 1;
--[ 2019.11.11.14.09.25.939.0 ]--
r 38             else if (this.getCost(heuristic) > that.getCost(heuristic)) return 1;
--[ 2019.11.11.14.09.27.646.0 ]--
r 37             if(this.getCost() < that.getCost(heuristic)) return -1;
--[ 2019.11.11.14.09.27.721.0 ]--
r 37             if(this.getCost(h) < that.getCost(heuristic)) return -1;
--[ 2019.11.11.14.09.27.889.0 ]--
r 37             if(this.getCost(he) < that.getCost(heuristic)) return -1;
--[ 2019.11.11.14.09.27.988.0 ]--
r 37             if(this.getCost(heu) < that.getCost(heuristic)) return -1;
--[ 2019.11.11.14.09.28.490.0 ]--
r 37             if(this.getCost(heuristic) < that.getCost(heuristic)) return -1;
--[ 2019.11.11.14.11.45.568.0 ]--
+ 142         
--[ 2019.11.11.14.12.30.422.0 ]--
r 49             cost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.14.12.41.389.0 ]--
r 138 
r 142 
--[ 2019.11.11.14.13.48.885.0 ]--
- 140
r 140         
--[ 2019.11.11.14.13.51.830.0 ]--
+ 142         
--[ 2019.11.11.14.15.14.547.0 ]--
r 144         
--[ 2019.11.11.14.15.15.008.0 ]--
- 144
--[ 2019.11.11.14.15.15.277.0 ]--
r 143         pfQueue.delMin(); 
--[ 2019.11.11.14.15.15.331.0 ]--
r 143         pfQueue.delMin();
--[ 2019.11.11.14.20.45.214.0 ]--
r 142         w
--[ 2019.11.11.14.20.45.311.0 ]--
r 142         wh
--[ 2019.11.11.14.20.45.331.0 ]--
r 142         whi
--[ 2019.11.11.14.20.45.601.0 ]--
r 142         wh
--[ 2019.11.11.14.20.45.665.0 ]--
r 142         w
--[ 2019.11.11.14.20.45.949.0 ]--
r 142         
--[ 2019.11.11.14.20.46.082.0 ]--
r 142         w
--[ 2019.11.11.14.20.46.111.0 ]--
r 142         wh
--[ 2019.11.11.14.20.46.143.0 ]--
r 142         whi
--[ 2019.11.11.14.20.46.296.0 ]--
r 142         whil
--[ 2019.11.11.14.20.46.373.0 ]--
r 142         while
--[ 2019.11.11.14.20.47.128.0 ]--
r 142         while()
--[ 2019.11.11.14.20.47.633.0 ]--
r 142         while( )
--[ 2019.11.11.14.20.47.700.0 ]--
r 142         while()
--[ 2019.11.11.14.20.49.575.0 ]--
r 142         while(p)
--[ 2019.11.11.14.20.49.678.0 ]--
r 142         while(pf)
--[ 2019.11.11.14.20.49.951.0 ]--
r 142         while(pfQ)
--[ 2019.11.11.14.20.52.566.0 ]--
r 142         while(pfQueue)
--[ 2019.11.11.14.20.52.977.0 ]--
r 142         while(pfQueue.)
--[ 2019.11.11.14.20.53.375.0 ]--
r 142         while(pfQueue.m)
--[ 2019.11.11.14.20.53.469.0 ]--
r 142         while(pfQueue.mi)
--[ 2019.11.11.14.20.53.541.0 ]--
r 142         while(pfQueue.min)
--[ 2019.11.11.14.20.53.921.0 ]--
r 142         while(pfQueue.min())
--[ 2019.11.11.14.20.54.429.0 ]--
r 142         while(pfQueue.min() )
--[ 2019.11.11.14.21.03.625.0 ]--
r 142         while(pfQueue.min() =)
--[ 2019.11.11.14.21.03.753.0 ]--
r 142         while(pfQueue.min() ==)
--[ 2019.11.11.14.21.04.036.0 ]--
r 142         while(pfQueue.min() == )
--[ 2019.11.11.14.21.06.663.0 ]--
r 142         while(pfQueue.min() == e)
--[ 2019.11.11.14.21.06.802.0 ]--
r 142         while(pfQueue.min() == en)
--[ 2019.11.11.14.21.06.878.0 ]--
r 142         while(pfQueue.min() == end)
--[ 2019.11.11.14.21.07.255.0 ]--
r 142         while(pfQueue.min() == end )
--[ 2019.11.11.14.21.07.304.0 ]--
r 142         while(pfQueue.min() == end)
--[ 2019.11.11.14.21.28.127.0 ]--
r 142         while(pfQueue.min(). == end)
--[ 2019.11.11.14.21.28.281.0 ]--
r 142         while(pfQueue.min().l == end)
--[ 2019.11.11.14.21.28.404.0 ]--
r 142         while(pfQueue.min().lo == end)
--[ 2019.11.11.14.21.28.487.0 ]--
r 142         while(pfQueue.min().loc == end)
--[ 2019.11.11.14.21.29.104.0 ]--
r 142         while(pfQueue.min().loc  == end)
--[ 2019.11.11.14.21.29.135.0 ]--
r 142         while(pfQueue.min().loc == end)
--[ 2019.11.11.14.21.30.576.0 ]--
r 142         while(pfQueue.min().loc == end){
--[ 2019.11.11.14.21.30.737.0 ]--
+ 143 
+ 144 }
--[ 2019.11.11.14.21.30.768.0 ]--
r 144         }
--[ 2019.11.11.14.21.30.788.0 ]--
r 143             
--[ 2019.11.11.14.21.33.910.0 ]--
- 144
+ 147         }
--[ 2019.11.11.14.21.33.954.0 ]--
r 143 
r 144             pfQueue.delMin();
r 145             for(PFNode p : begin.neighbors()){
r 146                 pfQueue.insert(p);
r 147             }
--[ 2019.11.11.14.21.33.981.0 ]--
- 143
+ 147 
--[ 2019.11.11.14.22.08.104.0 ]--
r 142         while(pfQueue.min().loc ==\ end){
--[ 2019.11.11.14.22.08.386.0 ]--
r 142         while(pfQueue.min().loc == end){
--[ 2019.11.11.14.22.08.506.0 ]--
r 142         while(pfQueue.min().loc = end){
--[ 2019.11.11.14.22.08.625.0 ]--
r 142         while(pfQueue.min().loc  end){
--[ 2019.11.11.14.22.08.860.0 ]--
r 142         while(pfQueue.min().loc end){
--[ 2019.11.11.14.22.08.963.0 ]--
r 142         while(pfQueue.min().loc  end){
--[ 2019.11.11.14.22.09.070.0 ]--
r 142         while(pfQueue.min().loc end){
--[ 2019.11.11.14.22.09.243.0 ]--
r 142         while(pfQueue.min().loc. end){
--[ 2019.11.11.14.22.09.488.0 ]--
r 142         while(pfQueue.min().loc.n end){
--[ 2019.11.11.14.22.09.574.0 ]--
r 142         while(pfQueue.min().loc.no end){
--[ 2019.11.11.14.22.09.770.0 ]--
r 142         while(pfQueue.min().loc.not end){
--[ 2019.11.11.14.22.10.391.0 ]--
r 142         while(pfQueue.min().loc.no end){
--[ 2019.11.11.14.22.10.497.0 ]--
r 142         while(pfQueue.min().loc.n end){
--[ 2019.11.11.14.22.10.596.0 ]--
r 142         while(pfQueue.min().loc. end){
--[ 2019.11.11.14.22.10.869.0 ]--
r 142         while(pfQueue.min().loc end){
--[ 2019.11.11.14.22.11.755.0 ]--
r 142         while(pfQueue.min().loc  end){
--[ 2019.11.11.14.22.11.876.0 ]--
r 142         while(pfQueue.min().loc = end){
--[ 2019.11.11.14.22.11.961.0 ]--
r 142         while(pfQueue.min().loc == end){
--[ 2019.11.11.14.22.34.431.0 ]--
+ 144             
--[ 2019.11.11.14.22.35.063.0 ]--
r 144             i
--[ 2019.11.11.14.22.35.172.0 ]--
r 144             if
--[ 2019.11.11.14.22.35.529.0 ]--
r 144             if()
--[ 2019.11.11.14.22.37.471.0 ]--
r 144             if(b)
--[ 2019.11.11.14.22.37.542.0 ]--
r 144             if(bo)
--[ 2019.11.11.14.22.37.567.0 ]--
r 144             if(boa)
--[ 2019.11.11.14.22.37.695.0 ]--
r 144             if(boar)
--[ 2019.11.11.14.22.37.872.0 ]--
r 144             if(board)
--[ 2019.11.11.14.22.37.980.0 ]--
r 144             if(board[])
--[ 2019.11.11.14.22.38.339.0 ]--
r 144             if(board[ ])
--[ 2019.11.11.14.22.38.394.0 ]--
r 144             if(board[])
--[ 2019.11.11.14.22.40.815.0 ]--
r 144             if(board[m])
--[ 2019.11.11.14.22.40.911.0 ]--
r 144             if(board[mi])
--[ 2019.11.11.14.22.40.952.0 ]--
r 144             if(board[min])
--[ 2019.11.11.14.22.41.279.0 ]--
r 144             if(board[min ])
--[ 2019.11.11.14.22.41.353.0 ]--
r 144             if(board[min])
--[ 2019.11.11.14.22.41.475.0 ]--
r 144             if(board[mi])
--[ 2019.11.11.14.22.41.603.0 ]--
r 144             if(board[m])
--[ 2019.11.11.14.22.41.873.0 ]--
r 144             if(board[])
--[ 2019.11.11.14.23.28.279.0 ]--
r 144             if(board[p])
--[ 2019.11.11.14.23.28.372.0 ]--
r 144             if(board[pf])
--[ 2019.11.11.14.23.28.556.0 ]--
r 144             if(board[pfQ])
--[ 2019.11.11.14.23.28.937.0 ]--
r 144             if(board[pfQueue])
--[ 2019.11.11.14.23.29.040.0 ]--
r 144             if(board[pfQueue.])
--[ 2019.11.11.14.23.29.434.0 ]--
r 144             if(board[pfQueue.m])
--[ 2019.11.11.14.23.29.549.0 ]--
r 144             if(board[pfQueue.mi])
--[ 2019.11.11.14.23.29.625.0 ]--
r 144             if(board[pfQueue.min])
--[ 2019.11.11.14.23.30.845.0 ]--
r 144             if(board[pfQueue.min()])
--[ 2019.11.11.14.23.31.095.0 ]--
r 144             if(board[pfQueue.min()/])
--[ 2019.11.11.14.23.31.200.0 ]--
r 144             if(board[pfQueue.min()/g])
--[ 2019.11.11.14.23.31.302.0 ]--
r 144             if(board[pfQueue.min()/ge])
--[ 2019.11.11.14.23.31.434.0 ]--
r 144             if(board[pfQueue.min()/get])
--[ 2019.11.11.14.23.31.586.0 ]--
r 144             if(board[pfQueue.min()/ge])
--[ 2019.11.11.14.23.31.703.0 ]--
r 144             if(board[pfQueue.min()/g])
--[ 2019.11.11.14.23.31.799.0 ]--
r 144             if(board[pfQueue.min()/])
--[ 2019.11.11.14.23.31.951.0 ]--
r 144             if(board[pfQueue.min()])
--[ 2019.11.11.14.23.32.104.0 ]--
r 144             if(board[pfQueue.min().])
--[ 2019.11.11.14.23.32.203.0 ]--
r 144             if(board[pfQueue.min().g])
--[ 2019.11.11.14.23.32.260.0 ]--
r 144             if(board[pfQueue.min().ge])
--[ 2019.11.11.14.23.32.407.0 ]--
r 144             if(board[pfQueue.min().get])
--[ 2019.11.11.14.23.32.949.0 ]--
r 144             if(board[pfQueue.min().ge])
--[ 2019.11.11.14.23.33.053.0 ]--
r 144             if(board[pfQueue.min().g])
--[ 2019.11.11.14.23.33.464.0 ]--
r 144             if(board[pfQueue.min().])
--[ 2019.11.11.14.23.33.607.0 ]--
r 144             if(board[pfQueue.min().l])
--[ 2019.11.11.14.23.33.718.0 ]--
r 144             if(board[pfQueue.min().lo])
--[ 2019.11.11.14.23.33.772.0 ]--
r 144             if(board[pfQueue.min().loc])
--[ 2019.11.11.14.23.33.865.0 ]--
r 144             if(board[pfQueue.min().loc.])
--[ 2019.11.11.14.23.34.023.0 ]--
r 144             if(board[pfQueue.min().loc.g])
--[ 2019.11.11.14.23.34.130.0 ]--
r 144             if(board[pfQueue.min().loc.ge])
--[ 2019.11.11.14.23.34.305.0 ]--
r 144             if(board[pfQueue.min().loc.get])
--[ 2019.11.11.14.23.34.600.0 ]--
r 144             if(board[pfQueue.min().loc.getI])
--[ 2019.11.11.14.23.34.837.0 ]--
r 144             if(board[pfQueue.min().loc.getI()])
--[ 2019.11.11.14.23.36.353.0 ]--
r 144             if(board[pfQueue.min().loc.getI(])
--[ 2019.11.11.14.23.36.440.0 ]--
r 144             if(board[pfQueue.min().loc.getI])
--[ 2019.11.11.14.23.36.571.0 ]--
r 144             if(board[pfQueue.min().loc.get])
--[ 2019.11.11.14.23.36.747.0 ]--
r 144             if(board[pfQueue.min().loc.getJ])
--[ 2019.11.11.14.23.37.103.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()])
--[ 2019.11.11.14.23.38.335.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][])
--[ 2019.11.11.14.23.43.011.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getJ()])
--[ 2019.11.11.14.23.44.404.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.get()])
--[ 2019.11.11.14.23.44.597.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()])
--[ 2019.11.11.14.23.45.773.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) 
--[ 2019.11.11.14.23.46.766.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) =
--[ 2019.11.11.14.23.48.354.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) ==
--[ 2019.11.11.14.23.48.417.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) == 
--[ 2019.11.11.14.23.48.767.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) == t
--[ 2019.11.11.14.23.48.796.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) == tr
--[ 2019.11.11.14.23.48.877.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) == tru
--[ 2019.11.11.14.23.49.001.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) == true
--[ 2019.11.11.14.23.49.133.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) == true)
--[ 2019.11.11.14.23.49.358.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) == true){
--[ 2019.11.11.14.23.49.632.0 ]--
+ 145 
+ 146 }
--[ 2019.11.11.14.23.49.648.0 ]--
r 146             }
--[ 2019.11.11.14.23.49.666.0 ]--
r 145     
--[ 2019.11.11.14.23.50.952.0 ]--
- 145
--[ 2019.11.11.14.23.51.254.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) == true)
--[ 2019.11.11.14.23.51.370.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) == true
--[ 2019.11.11.14.23.51.542.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) == tru
--[ 2019.11.11.14.23.51.673.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) == tr
--[ 2019.11.11.14.23.51.748.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) == t
--[ 2019.11.11.14.23.51.868.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) == 
--[ 2019.11.11.14.23.51.947.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) ==
--[ 2019.11.11.14.23.52.060.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) =
--[ 2019.11.11.14.23.52.150.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]) 
--[ 2019.11.11.14.23.52.451.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()])
--[ 2019.11.11.14.23.52.566.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]
--[ 2019.11.11.14.23.52.945.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()] 
--[ 2019.11.11.14.23.53.109.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()] =
--[ 2019.11.11.14.23.53.217.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()] ==
--[ 2019.11.11.14.23.53.358.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()] == 
--[ 2019.11.11.14.23.53.460.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()] == t
--[ 2019.11.11.14.23.53.607.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()] == tr
--[ 2019.11.11.14.23.53.780.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()] == tru
--[ 2019.11.11.14.23.53.867.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()] == true
--[ 2019.11.11.14.23.54.062.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()] == true)
--[ 2019.11.11.14.23.54.247.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()] == true){
--[ 2019.11.11.14.23.54.556.0 ]--
+ 145                 
--[ 2019.11.11.14.24.05.228.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]){
--[ 2019.11.11.14.24.22.394.0 ]--
r 146             
--[ 2019.11.11.14.24.22.532.0 ]--
- 146
--[ 2019.11.11.14.24.22.628.0 ]--
- 145
--[ 2019.11.11.14.24.22.725.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()])
--[ 2019.11.11.14.24.22.810.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][board[pfQueue.min().loc.getI()]
--[ 2019.11.11.14.24.25.426.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][
--[ 2019.11.11.14.24.25.516.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()]
--[ 2019.11.11.14.24.28.114.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][]
--[ 2019.11.11.14.24.29.323.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][p]
--[ 2019.11.11.14.24.30.317.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pf]
--[ 2019.11.11.14.24.30.515.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQ]
--[ 2019.11.11.14.24.30.798.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQu]
--[ 2019.11.11.14.24.31.050.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQue]
--[ 2019.11.11.14.24.31.206.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueu]
--[ 2019.11.11.14.24.31.264.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue]
--[ 2019.11.11.14.24.31.441.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.]
--[ 2019.11.11.14.24.31.698.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.m]
--[ 2019.11.11.14.24.31.835.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.mi]
--[ 2019.11.11.14.24.31.906.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min]
--[ 2019.11.11.14.24.32.577.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min.]
--[ 2019.11.11.14.24.32.722.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min.l]
--[ 2019.11.11.14.24.32.891.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min.lo]
--[ 2019.11.11.14.24.32.935.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min.loc]
--[ 2019.11.11.14.24.33.018.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min.loc.]
--[ 2019.11.11.14.24.33.134.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min.loc.g]
--[ 2019.11.11.14.24.33.223.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min.loc.ge]
--[ 2019.11.11.14.24.33.305.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min.loc.get]
--[ 2019.11.11.14.24.33.605.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min.loc.getJ]
--[ 2019.11.11.14.24.34.230.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min.loc.getJ()]
--[ 2019.11.11.14.24.37.261.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()]
--[ 2019.11.11.14.24.39.662.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()])
--[ 2019.11.11.14.24.40.809.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] )
--[ 2019.11.11.14.24.41.325.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] =)
--[ 2019.11.11.14.24.41.437.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] ==)
--[ 2019.11.11.14.24.41.483.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == )
--[ 2019.11.11.14.24.41.599.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == t)
--[ 2019.11.11.14.24.41.730.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == tr)
--[ 2019.11.11.14.24.41.803.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == tru)
--[ 2019.11.11.14.24.41.885.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true)
--[ 2019.11.11.14.24.43.250.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.24.43.410.0 ]--
+ 145 
+ 146 }
--[ 2019.11.11.14.24.43.438.0 ]--
r 146             }
--[ 2019.11.11.14.24.43.458.0 ]--
r 145                 
--[ 2019.11.11.14.24.45.766.0 ]--
r 145                 c
--[ 2019.11.11.14.24.45.884.0 ]--
r 145                 cp
--[ 2019.11.11.14.24.46.297.0 ]--
r 145                 c
--[ 2019.11.11.14.24.46.483.0 ]--
r 145                 co
--[ 2019.11.11.14.24.46.550.0 ]--
r 145                 con
--[ 2019.11.11.14.24.46.605.0 ]--
r 145                 cont
--[ 2019.11.11.14.24.46.936.0 ]--
r 145                 conti
--[ 2019.11.11.14.24.47.037.0 ]--
r 145                 contin
--[ 2019.11.11.14.24.47.109.0 ]--
r 145                 continu
--[ 2019.11.11.14.24.47.219.0 ]--
r 145                 continue
--[ 2019.11.11.14.24.47.464.0 ]--
r 145                 continue 
--[ 2019.11.11.14.24.47.517.0 ]--
r 145                 continue
--[ 2019.11.11.14.24.48.096.0 ]--
r 145                 continue;
--[ 2019.11.11.14.24.49.863.0 ]--
+ 147             
--[ 2019.11.11.14.24.50.815.0 ]--
r 147             b
--[ 2019.11.11.14.24.50.892.0 ]--
r 147             bo
--[ 2019.11.11.14.24.50.948.0 ]--
r 147             boa
--[ 2019.11.11.14.24.51.293.0 ]--
r 147             boar
--[ 2019.11.11.14.24.51.401.0 ]--
r 147             board
--[ 2019.11.11.14.24.51.508.0 ]--
r 147             board[]
--[ 2019.11.11.14.24.53.568.0 ]--
r 147             board[m]
--[ 2019.11.11.14.24.53.656.0 ]--
r 147             board[mi]
--[ 2019.11.11.14.24.53.695.0 ]--
r 147             board[min]
--[ 2019.11.11.14.24.53.954.0 ]--
r 147             board[min.]
--[ 2019.11.11.14.24.54.706.0 ]--
r 147             board[min]
--[ 2019.11.11.14.24.54.808.0 ]--
r 147             board[mi]
--[ 2019.11.11.14.24.54.943.0 ]--
r 147             board[m]
--[ 2019.11.11.14.24.55.041.0 ]--
r 147             board[]
--[ 2019.11.11.14.24.55.390.0 ]--
r 147             board[p]
--[ 2019.11.11.14.24.55.569.0 ]--
r 147             board[pF]
--[ 2019.11.11.14.24.56.247.0 ]--
r 147             board[pFQ]
--[ 2019.11.11.14.24.56.349.0 ]--
r 147             board[pFQu]
--[ 2019.11.11.14.24.56.832.0 ]--
r 147             board[pFQ]
--[ 2019.11.11.14.24.56.935.0 ]--
r 147             board[pF]
--[ 2019.11.11.14.24.57.036.0 ]--
r 147             board[p]
--[ 2019.11.11.14.24.57.144.0 ]--
r 147             board[]
--[ 2019.11.11.14.24.57.304.0 ]--
r 147             board[p]
--[ 2019.11.11.14.24.57.385.0 ]--
r 147             board[pf]
--[ 2019.11.11.14.24.57.588.0 ]--
r 147             board[pfQ]
--[ 2019.11.11.14.24.57.999.0 ]--
r 147             board[pfQueue]
--[ 2019.11.11.14.24.58.147.0 ]--
r 147             board[pfQueue.]
--[ 2019.11.11.14.24.58.373.0 ]--
r 147             board[pfQueue.m]
--[ 2019.11.11.14.24.58.482.0 ]--
r 147             board[pfQueue.mi]
--[ 2019.11.11.14.24.58.531.0 ]--
r 147             board[pfQueue.min]
--[ 2019.11.11.14.24.58.947.0 ]--
r 147             board[pfQueue.min.]
--[ 2019.11.11.14.24.59.132.0 ]--
r 147             board[pfQueue.min.l]
--[ 2019.11.11.14.24.59.263.0 ]--
r 147             board[pfQueue.min.lo]
--[ 2019.11.11.14.24.59.345.0 ]--
r 147             board[pfQueue.min.loc]
--[ 2019.11.11.14.25.00.358.0 ]--
r 147             board[pfQueue.min.lo]
--[ 2019.11.11.14.25.00.446.0 ]--
r 147             board[pfQueue.min.l]
--[ 2019.11.11.14.25.00.554.0 ]--
r 147             board[pfQueue.min.]
--[ 2019.11.11.14.25.00.679.0 ]--
r 147             board[pfQueue.min]
--[ 2019.11.11.14.25.01.108.0 ]--
r 147             board[pfQueue.min()]
--[ 2019.11.11.14.25.01.702.0 ]--
r 147             board[pfQueue.min().]
--[ 2019.11.11.14.25.03.989.0 ]--
r 147             board[pfQueue.min().l]
--[ 2019.11.11.14.25.04.106.0 ]--
r 147             board[pfQueue.min().lo]
--[ 2019.11.11.14.25.04.177.0 ]--
r 147             board[pfQueue.min().loc]
--[ 2019.11.11.14.25.04.255.0 ]--
r 147             board[pfQueue.min().loc.]
--[ 2019.11.11.14.25.04.667.0 ]--
r 147             board[pfQueue.min().loc]
--[ 2019.11.11.14.25.04.735.0 ]--
r 147             board[pfQueue.min().lo]
--[ 2019.11.11.14.25.05.682.0 ]--
r 147             board[pfQueue.min().loc]
--[ 2019.11.11.14.25.05.738.0 ]--
r 147             board[pfQueue.min().loc.]
--[ 2019.11.11.14.25.06.097.0 ]--
r 147             board[pfQueue.min().loc.g]
--[ 2019.11.11.14.25.07.984.0 ]--
r 147             board[pfQueue.min().loc.getJ]
--[ 2019.11.11.14.25.07.996.0 ]--
r 147             board[pfQueue.min().loc.getJ()]
--[ 2019.11.11.14.25.09.098.0 ]--
r 147             board[pfQueue.min().loc.getJ()][]
--[ 2019.11.11.14.25.10.414.0 ]--
r 147             board[pfQueue.min().loc.getJ()][p]
--[ 2019.11.11.14.25.10.501.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pf]
--[ 2019.11.11.14.25.11.416.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue]
--[ 2019.11.11.14.25.11.604.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.]
--[ 2019.11.11.14.25.11.836.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.m]
--[ 2019.11.11.14.25.12.658.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min]
--[ 2019.11.11.14.25.12.668.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min()]
--[ 2019.11.11.14.25.12.929.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min().]
--[ 2019.11.11.14.25.13.554.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min().l]
--[ 2019.11.11.14.25.13.993.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min().loc]
--[ 2019.11.11.14.25.14.367.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min().loc.]
--[ 2019.11.11.14.25.14.545.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min().loc.g]
--[ 2019.11.11.14.25.15.332.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getI]
--[ 2019.11.11.14.25.15.359.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getI()]
--[ 2019.11.11.14.25.17.460.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getI()] 
--[ 2019.11.11.14.25.18.800.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getI()] =
--[ 2019.11.11.14.25.18.839.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getI()] = 
--[ 2019.11.11.14.25.18.954.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getI()] = t
--[ 2019.11.11.14.25.19.166.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getI()] = tr
--[ 2019.11.11.14.25.19.232.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getI()] = tru
--[ 2019.11.11.14.25.19.366.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getI()] = true
--[ 2019.11.11.14.25.20.466.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getI()] = true;
--[ 2019.11.11.14.25.21.700.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getI()] = true; 
--[ 2019.11.11.14.25.21.737.0 ]--
r 147             board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getI()] = true;
--[ 2019.11.11.14.25.30.409.0 ]--
+ 151             
--[ 2019.11.11.14.25.31.005.0 ]--
r 151             i
--[ 2019.11.11.14.25.31.096.0 ]--
r 151             if
--[ 2019.11.11.14.25.31.385.0 ]--
r 151             if()
--[ 2019.11.11.14.25.32.457.0 ]--
r 151             if(m)
--[ 2019.11.11.14.25.32.548.0 ]--
r 151             if(mi)
--[ 2019.11.11.14.25.32.607.0 ]--
r 151             if(min)
--[ 2019.11.11.14.25.32.789.0 ]--
r 151             if(min.)
--[ 2019.11.11.14.25.32.961.0 ]--
r 151             if(min.l)
--[ 2019.11.11.14.25.33.119.0 ]--
r 151             if(min.lo)
--[ 2019.11.11.14.25.33.420.0 ]--
r 151             if(min.loc.)
--[ 2019.11.11.14.25.34.462.0 ]--
r 151             if(min.loc.e)
--[ 2019.11.11.14.25.34.611.0 ]--
r 151             if(min.loc.eq)
--[ 2019.11.11.14.25.34.693.0 ]--
r 151             if(min.loc.equ)
--[ 2019.11.11.14.25.35.240.0 ]--
r 151             if(min.loc.)
--[ 2019.11.11.14.25.35.357.0 ]--
r 151             if(min.loc)
--[ 2019.11.11.14.25.35.632.0 ]--
r 151             if(min.lo)
--[ 2019.11.11.14.25.35.728.0 ]--
r 151             if(min.l)
--[ 2019.11.11.14.25.35.846.0 ]--
r 151             if(min.)
--[ 2019.11.11.14.25.35.969.0 ]--
r 151             if(min)
--[ 2019.11.11.14.25.36.062.0 ]--
r 151             if(mi)
--[ 2019.11.11.14.25.36.165.0 ]--
r 151             if(m)
--[ 2019.11.11.14.25.36.403.0 ]--
r 151             if()
--[ 2019.11.11.14.25.36.575.0 ]--
r 151             if(p)
--[ 2019.11.11.14.25.36.779.0 ]--
r 151             if(pF)
--[ 2019.11.11.14.25.37.069.0 ]--
r 151             if(p)
--[ 2019.11.11.14.25.37.268.0 ]--
r 151             if()
--[ 2019.11.11.14.25.37.440.0 ]--
r 151             if(p)
--[ 2019.11.11.14.25.37.494.0 ]--
r 151             if(pf)
--[ 2019.11.11.14.25.37.719.0 ]--
r 151             if(pfQ)
--[ 2019.11.11.14.25.38.068.0 ]--
r 151             if(pfQueue)
--[ 2019.11.11.14.25.38.195.0 ]--
r 151             if(pfQueue.)
--[ 2019.11.11.14.25.38.413.0 ]--
r 151             if(pfQueue.m)
--[ 2019.11.11.14.25.38.513.0 ]--
r 151             if(pfQueue.mi)
--[ 2019.11.11.14.25.38.562.0 ]--
r 151             if(pfQueue.min)
--[ 2019.11.11.14.25.39.109.0 ]--
r 151             if(pfQueue.min
--[ 2019.11.11.14.25.39.249.0 ]--
r 151             if(pfQueue.min()
--[ 2019.11.11.14.25.39.302.0 ]--
r 151             if(pfQueue.min())
--[ 2019.11.11.14.25.39.499.0 ]--
r 151             if(pfQueue.min().)
--[ 2019.11.11.14.25.39.640.0 ]--
r 151             if(pfQueue.min().l)
--[ 2019.11.11.14.25.39.775.0 ]--
r 151             if(pfQueue.min().lo)
--[ 2019.11.11.14.25.39.899.0 ]--
r 151             if(pfQueue.min().loc)
--[ 2019.11.11.14.25.39.987.0 ]--
r 151             if(pfQueue.min().loc.)
--[ 2019.11.11.14.25.40.192.0 ]--
r 151             if(pfQueue.min().loc.e)
--[ 2019.11.11.14.25.41.058.0 ]--
r 151             if(pfQueue.min().loc.equals)
--[ 2019.11.11.14.25.41.067.0 ]--
r 151             if(pfQueue.min().loc.equals())
--[ 2019.11.11.14.25.42.797.0 ]--
r 151             if(pfQueue.min().loc.equals(e))
--[ 2019.11.11.14.25.42.857.0 ]--
r 151             if(pfQueue.min().loc.equals(en))
--[ 2019.11.11.14.25.42.964.0 ]--
r 151             if(pfQueue.min().loc.equals(end))
--[ 2019.11.11.14.25.44.980.0 ]--
r 151             if(pfQueue.min().loc.equals(end)) 
--[ 2019.11.11.14.25.45.007.0 ]--
r 151             if(pfQueue.min().loc.equals(end))
--[ 2019.11.11.14.25.45.122.0 ]--
r 151             if(pfQueue.min().loc.equals(end));
--[ 2019.11.11.14.25.47.511.0 ]--
+ 152             
--[ 2019.11.11.14.26.02.137.0 ]--
r 152             b
--[ 2019.11.11.14.26.02.342.0 ]--
r 152             br
--[ 2019.11.11.14.26.02.383.0 ]--
r 152             bre
--[ 2019.11.11.14.26.02.418.0 ]--
r 152             brea
--[ 2019.11.11.14.26.02.502.0 ]--
r 152             break
--[ 2019.11.11.14.26.02.899.0 ]--
r 152             break 
--[ 2019.11.11.14.26.02.948.0 ]--
r 152             break
--[ 2019.11.11.14.26.03.171.0 ]--
r 152             
--[ 2019.11.11.14.26.05.484.0 ]--
- 152
--[ 2019.11.11.14.26.05.829.0 ]--
r 151             if(pfQueue.min().loc.equals(end))
--[ 2019.11.11.14.26.06.571.0 ]--
r 151             if(pfQueue.min().loc.equals(end)){
--[ 2019.11.11.14.26.07.033.0 ]--
+ 152 
+ 153 }
--[ 2019.11.11.14.26.07.058.0 ]--
r 153             }
--[ 2019.11.11.14.26.07.077.0 ]--
r 152                 
--[ 2019.11.11.14.26.38.503.0 ]--
r 152                 w
--[ 2019.11.11.14.26.38.611.0 ]--
r 152                 wh
--[ 2019.11.11.14.26.38.631.0 ]--
r 152                 whi
--[ 2019.11.11.14.26.38.811.0 ]--
r 152                 whil
--[ 2019.11.11.14.26.38.895.0 ]--
r 152                 while
--[ 2019.11.11.14.26.39.293.0 ]--
r 152                 while()
--[ 2019.11.11.14.27.00.126.0 ]--
r 166         s = new Stack<>();
r 167         //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerException
--[ 2019.11.11.14.27.00.623.0 ]--
r 165         s = new Stack<>();
r 166 
--[ 2019.11.11.14.27.00.660.0 ]--
r 164         s = new Stack<>();
r 165 
--[ 2019.11.11.14.27.00.701.0 ]--
r 163         s = new Stack<>();
r 164 
--[ 2019.11.11.14.27.00.731.0 ]--
r 162         s = new Stack<>();
r 163 
--[ 2019.11.11.14.27.00.766.0 ]--
r 161         s = new Stack<>();
r 162 
--[ 2019.11.11.14.27.00.791.0 ]--
r 160         s = new Stack<>();
r 161 
--[ 2019.11.11.14.27.00.827.0 ]--
r 159         s = new Stack<>();
r 160 
--[ 2019.11.11.14.27.00.855.0 ]--
r 158         s = new Stack<>();
r 159 
--[ 2019.11.11.14.27.00.881.0 ]--
r 157         s = new Stack<>();
r 158 
--[ 2019.11.11.14.27.00.913.0 ]--
r 156         s = new Stack<>();
r 157 
--[ 2019.11.11.14.27.00.954.0 ]--
r 155         s = new Stack<>();
r 156         }
--[ 2019.11.11.14.27.00.973.0 ]--
r 155             s = new Stack<>();
--[ 2019.11.11.14.27.00.993.0 ]--
r 154             s = new Stack<>();
r 155 
--[ 2019.11.11.14.27.01.023.0 ]--
r 153             s = new Stack<>();
r 154             }
--[ 2019.11.11.14.27.01.034.0 ]--
r 153                     s = new Stack<>();
--[ 2019.11.11.14.27.01.054.0 ]--
- 151
+ 153             if(pfQueue.min().loc.equals(end)){
--[ 2019.11.11.14.27.01.070.0 ]--
r 151             while()
r 152                 s = new Stack<>();
--[ 2019.11.11.14.27.01.094.0 ]--
- 150
+ 152             }
--[ 2019.11.11.14.27.01.105.0 ]--
r 150                 while()
r 151                     s = new Stack<>();
--[ 2019.11.11.14.27.01.129.0 ]--
- 149
+ 151                 pfQueue.insert(p);
--[ 2019.11.11.14.27.01.159.0 ]--
- 148
+ 150             for(PFNode p : begin.neighbors()){
--[ 2019.11.11.14.27.01.172.0 ]--
r 148             while()
r 149                 s = new Stack<>();
--[ 2019.11.11.14.27.01.188.0 ]--
- 147
+ 149             board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getI()] = true;
--[ 2019.11.11.14.27.01.203.0 ]--
- 146
+ 148             }
--[ 2019.11.11.14.27.01.211.0 ]--
r 146                 while()
r 147                     s = new Stack<>();
--[ 2019.11.11.14.27.01.230.0 ]--
- 145
+ 147                 continue;
--[ 2019.11.11.14.27.01.256.0 ]--
- 144
+ 146             if(board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.27.01.269.0 ]--
r 144             while()
r 145                 s = new Stack<>();
--[ 2019.11.11.14.27.01.302.0 ]--
- 143
+ 145             pfQueue.delMin();
--[ 2019.11.11.14.27.01.328.0 ]--
- 142
+ 144         while(pfQueue.min().loc == end){
--[ 2019.11.11.14.27.01.344.0 ]--
r 140 
r 142         while()
r 143             s = new Stack<>();
--[ 2019.11.11.14.27.01.364.0 ]--
- 140
+ 143 
--[ 2019.11.11.14.27.01.387.0 ]--
- 140
+ 142 
--[ 2019.11.11.14.27.01.415.0 ]--
- 139
+ 141         pfQueue.insert(begin);
--[ 2019.11.11.14.27.01.441.0 ]--
- 138
+ 140 
--[ 2019.11.11.14.27.01.470.0 ]--
- 137
+ 139         PFNode begin = new PFNode(start, null);
--[ 2019.11.11.14.27.01.506.0 ]--
- 136
+ 138         MinPQ<PFNode> pfQueue = new MinPQ<>();
--[ 2019.11.11.14.27.01.536.0 ]--
- 134
+ 137 
--[ 2019.11.11.14.27.01.559.0 ]--
- 134
+ 136 
--[ 2019.11.11.14.27.01.591.0 ]--
- 133
+ 135         }
--[ 2019.11.11.14.27.01.607.0 ]--
r 133             while()
r 134                 s = new Stack<>();
--[ 2019.11.11.14.27.01.638.0 ]--
- 132
+ 134             //System.out.println();
--[ 2019.11.11.14.27.01.673.0 ]--
- 131
+ 133             }
--[ 2019.11.11.14.27.01.686.0 ]--
r 131                 while()
r 132                     s = new Stack<>();
--[ 2019.11.11.14.27.02.416.0 ]--
- 130
+ 132                 //System.out.print(board[i][j] + " ");
--[ 2019.11.11.14.27.02.601.0 ]--
+ 130                 //System.out.print(board[i][j] + " ");
- 133
--[ 2019.11.11.14.27.02.689.0 ]--
+ 131             }
- 134
--[ 2019.11.11.14.27.02.703.0 ]--
r 132             while()
r 133                 s = new Stack<>();
--[ 2019.11.11.14.27.02.827.0 ]--
+ 132             //System.out.println();
- 135
--[ 2019.11.11.14.27.02.923.0 ]--
+ 133         }
- 136
--[ 2019.11.11.14.27.02.932.0 ]--
r 134         while()
r 135             s = new Stack<>();
--[ 2019.11.11.14.27.03.042.0 ]--
+ 134 
- 137
--[ 2019.11.11.14.27.03.499.0 ]--
+ 134 
- 138
--[ 2019.11.11.14.27.03.875.0 ]--
+ 136         MinPQ<PFNode> pfQueue = new MinPQ<>();
- 139
--[ 2019.11.11.14.27.04.057.0 ]--
- 136
+ 138         MinPQ<PFNode> pfQueue = new MinPQ<>();
--[ 2019.11.11.14.27.04.386.0 ]--
- 134
+ 137 
--[ 2019.11.11.14.27.04.855.0 ]--
+ 134 
- 138
--[ 2019.11.11.14.27.05.278.0 ]--
+ 136         MinPQ<PFNode> pfQueue = new MinPQ<>();
- 139
--[ 2019.11.11.14.27.05.682.0 ]--
- 136
+ 138         MinPQ<PFNode> pfQueue = new MinPQ<>();
--[ 2019.11.11.14.27.06.012.0 ]--
- 134
+ 137 
--[ 2019.11.11.14.27.06.332.0 ]--
- 134
+ 136 
--[ 2019.11.11.14.27.06.722.0 ]--
r 133             while()
r 134                 s = new Stack<>();
r 135         }
--[ 2019.11.11.14.27.07.063.0 ]--
- 132
+ 134             //System.out.println();
--[ 2019.11.11.14.27.07.400.0 ]--
r 131                 while()
r 132                     s = new Stack<>();
r 133             }
--[ 2019.11.11.14.27.07.778.0 ]--
- 130
+ 132                 //System.out.print(board[i][j] + " ");
--[ 2019.11.11.14.27.08.147.0 ]--
+ 130                 //System.out.print(board[i][j] + " ");
- 133
--[ 2019.11.11.14.27.08.411.0 ]--
r 131             }
r 132             while()
r 133                 s = new Stack<>();
--[ 2019.11.11.14.27.08.775.0 ]--
+ 132             //System.out.println();
- 135
--[ 2019.11.11.14.27.09.218.0 ]--
r 133         }
r 134         while()
r 135             s = new Stack<>();
--[ 2019.11.11.14.27.09.572.0 ]--
+ 134 
- 137
--[ 2019.11.11.14.27.09.952.0 ]--
+ 134 
- 138
--[ 2019.11.11.14.27.10.276.0 ]--
+ 136         MinPQ<PFNode> pfQueue = new MinPQ<>();
- 139
--[ 2019.11.11.14.27.10.568.0 ]--
+ 137         PFNode begin = new PFNode(start, null);
- 140
--[ 2019.11.11.14.27.10.985.0 ]--
+ 138 
- 141
--[ 2019.11.11.14.27.11.275.0 ]--
+ 139         pfQueue.insert(begin);
- 142
--[ 2019.11.11.14.27.11.480.0 ]--
+ 140 
- 143
--[ 2019.11.11.14.27.11.620.0 ]--
+ 140 
- 144
--[ 2019.11.11.14.27.11.826.0 ]--
r 140         
r 142         while(pfQueue.min().loc == end){
r 143             while()
r 144                 s = new Stack<>();
--[ 2019.11.11.14.27.11.937.0 ]--
+ 143             pfQueue.delMin();
- 146
--[ 2019.11.11.14.27.12.066.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
r 145                 while()
r 146                     s = new Stack<>();
--[ 2019.11.11.14.27.12.244.0 ]--
+ 145                 continue;
- 148
--[ 2019.11.11.14.27.12.399.0 ]--
r 146             }
r 147             while()
r 148                 s = new Stack<>();
--[ 2019.11.11.14.27.12.479.0 ]--
+ 147             board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getI()] = true;
- 150
--[ 2019.11.11.14.27.12.857.0 ]--
r 148             for(PFNode p : begin.neighbors()){
r 149                 while()
r 150                     s = new Stack<>();
--[ 2019.11.11.14.27.13.010.0 ]--
+ 149                 pfQueue.insert(p);
- 152
--[ 2019.11.11.14.27.13.140.0 ]--
r 150             }
r 151             while()
r 152                 s = new Stack<>();
--[ 2019.11.11.14.27.13.305.0 ]--
r 151             if(pfQueue.min().loc.equals(end)){
r 152                 while()
r 153                     s = new Stack<>();
--[ 2019.11.11.14.27.13.451.0 ]--
r 153             }
r 154             s = new Stack<>();
--[ 2019.11.11.14.27.13.703.0 ]--
r 154 
r 155             s = new Stack<>();
--[ 2019.11.11.14.27.13.873.0 ]--
r 155         }
r 156         s = new Stack<>();
--[ 2019.11.11.14.27.14.283.0 ]--
r 156 
r 157         s = new Stack<>();
--[ 2019.11.11.14.27.14.835.0 ]--
r 157 
r 158         s = new Stack<>();
--[ 2019.11.11.14.27.15.033.0 ]--
r 158 
r 159         s = new Stack<>();
--[ 2019.11.11.14.27.15.255.0 ]--
r 159 
r 160         s = new Stack<>();
--[ 2019.11.11.14.27.15.419.0 ]--
r 160 
r 161         s = new Stack<>();
--[ 2019.11.11.14.27.15.633.0 ]--
r 161 
r 162         s = new Stack<>();
--[ 2019.11.11.14.27.15.764.0 ]--
r 162 
r 163         s = new Stack<>();
--[ 2019.11.11.14.27.15.911.0 ]--
r 163 
r 164         s = new Stack<>();
--[ 2019.11.11.14.27.16.077.0 ]--
r 164 
r 165         s = new Stack<>();
--[ 2019.11.11.14.27.16.250.0 ]--
r 165 
r 166         s = new Stack<>();
--[ 2019.11.11.14.27.19.975.0 ]--
r 165         s = new Stack<>();
r 166 
--[ 2019.11.11.14.27.20.447.0 ]--
r 164         s = new Stack<>();
r 165 
--[ 2019.11.11.14.27.20.511.0 ]--
r 163         s = new Stack<>();
r 164 
--[ 2019.11.11.14.27.20.521.0 ]--
r 162         s = new Stack<>();
r 163 
--[ 2019.11.11.14.27.20.546.0 ]--
r 161         s = new Stack<>();
r 162 
--[ 2019.11.11.14.27.20.581.0 ]--
r 160         s = new Stack<>();
r 161 
--[ 2019.11.11.14.27.20.616.0 ]--
r 159         s = new Stack<>();
r 160 
--[ 2019.11.11.14.27.20.650.0 ]--
r 158         s = new Stack<>();
r 159 
--[ 2019.11.11.14.27.20.681.0 ]--
r 157         s = new Stack<>();
r 158 
--[ 2019.11.11.14.27.20.714.0 ]--
r 156         s = new Stack<>();
r 157 
--[ 2019.11.11.14.27.20.748.0 ]--
r 155         s = new Stack<>();
r 156         }
--[ 2019.11.11.14.27.20.767.0 ]--
r 155             s = new Stack<>();
--[ 2019.11.11.14.27.20.836.0 ]--
r 154             s = new Stack<>();
r 155 
--[ 2019.11.11.14.27.20.866.0 ]--
r 153             s = new Stack<>();
r 154             }
--[ 2019.11.11.14.27.20.875.0 ]--
r 153                     s = new Stack<>();
--[ 2019.11.11.14.27.20.885.0 ]--
- 151
+ 153             if(pfQueue.min().loc.equals(end)){
--[ 2019.11.11.14.27.20.894.0 ]--
r 151             while()
r 152                 s = new Stack<>();
--[ 2019.11.11.14.27.20.920.0 ]--
- 150
+ 152             }
--[ 2019.11.11.14.27.20.931.0 ]--
r 150                 while()
r 151                     s = new Stack<>();
--[ 2019.11.11.14.27.20.939.0 ]--
- 149
+ 151                 pfQueue.insert(p);
--[ 2019.11.11.14.27.20.967.0 ]--
- 148
+ 150             for(PFNode p : begin.neighbors()){
--[ 2019.11.11.14.27.20.980.0 ]--
r 148             while()
r 149                 s = new Stack<>();
--[ 2019.11.11.14.27.20.990.0 ]--
- 147
+ 149             board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getI()] = true;
--[ 2019.11.11.14.27.21.016.0 ]--
- 146
+ 148             }
--[ 2019.11.11.14.27.21.028.0 ]--
r 146                 while()
r 147                     s = new Stack<>();
--[ 2019.11.11.14.27.21.052.0 ]--
- 145
+ 147                 continue;
--[ 2019.11.11.14.27.21.084.0 ]--
- 144
+ 146             if(board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.27.21.100.0 ]--
r 144             while()
r 145                 s = new Stack<>();
--[ 2019.11.11.14.27.21.122.0 ]--
- 143
+ 145             pfQueue.delMin();
--[ 2019.11.11.14.27.21.141.0 ]--
- 142
+ 144         while(pfQueue.min().loc == end){
--[ 2019.11.11.14.27.21.155.0 ]--
r 140 
r 142         while()
r 143             s = new Stack<>();
--[ 2019.11.11.14.27.21.184.0 ]--
- 140
+ 143 
--[ 2019.11.11.14.27.21.210.0 ]--
- 140
+ 142 
--[ 2019.11.11.14.27.21.234.0 ]--
- 139
+ 141         pfQueue.insert(begin);
--[ 2019.11.11.14.27.21.270.0 ]--
- 138
+ 140 
--[ 2019.11.11.14.27.21.296.0 ]--
- 137
+ 139         PFNode begin = new PFNode(start, null);
--[ 2019.11.11.14.27.21.339.0 ]--
- 136
+ 138         MinPQ<PFNode> pfQueue = new MinPQ<>();
--[ 2019.11.11.14.27.21.367.0 ]--
- 134
+ 137 
--[ 2019.11.11.14.27.21.396.0 ]--
- 134
+ 136 
--[ 2019.11.11.14.27.21.423.0 ]--
- 133
+ 135         }
--[ 2019.11.11.14.27.21.438.0 ]--
r 133             while()
r 134                 s = new Stack<>();
--[ 2019.11.11.14.27.21.463.0 ]--
- 132
+ 134             //System.out.println();
--[ 2019.11.11.14.27.21.497.0 ]--
- 131
+ 133             }
--[ 2019.11.11.14.27.21.512.0 ]--
r 131                 while()
r 132                     s = new Stack<>();
--[ 2019.11.11.14.27.21.537.0 ]--
- 130
+ 132                 //System.out.print(board[i][j] + " ");
--[ 2019.11.11.14.27.21.579.0 ]--
- 129
+ 131                 board[i][j] = false;
--[ 2019.11.11.14.27.21.596.0 ]--
- 128
+ 130             for(int j = 0; j < terrain.getN(); j++){
--[ 2019.11.11.14.27.21.608.0 ]--
r 128             while()
r 129                 s = new Stack<>();
--[ 2019.11.11.14.27.21.635.0 ]--
- 127
+ 129         for(int i = 0; i < terrain.getN(); i++){
--[ 2019.11.11.14.27.21.651.0 ]--
r 127         while()
r 128             s = new Stack<>();
--[ 2019.11.11.14.27.21.681.0 ]--
- 126
+ 128         board = new Boolean[terrain.getN()][terrain.getN()];
--[ 2019.11.11.14.27.22.037.0 ]--
+ 126         board = new Boolean[terrain.getN()][terrain.getN()];
- 129
--[ 2019.11.11.14.27.22.147.0 ]--
+ 127         for(int i = 0; i < terrain.getN(); i++){
- 130
--[ 2019.11.11.14.27.22.158.0 ]--
r 128             while()
r 129                 s = new Stack<>();
--[ 2019.11.11.14.27.22.251.0 ]--
+ 128             for(int j = 0; j < terrain.getN(); j++){
- 131
--[ 2019.11.11.14.27.22.260.0 ]--
r 129                 while()
r 130                     s = new Stack<>();
--[ 2019.11.11.14.27.22.416.0 ]--
+ 129                 board[i][j] = false;
- 132
--[ 2019.11.11.14.27.22.471.0 ]--
+ 130                 //System.out.print(board[i][j] + " ");
- 133
--[ 2019.11.11.14.27.22.584.0 ]--
+ 131             }
- 134
--[ 2019.11.11.14.27.22.591.0 ]--
r 132             while()
r 133                 s = new Stack<>();
--[ 2019.11.11.14.27.22.697.0 ]--
+ 132             //System.out.println();
- 135
--[ 2019.11.11.14.27.22.968.0 ]--
+ 133         }
- 136
--[ 2019.11.11.14.27.22.979.0 ]--
r 134         while()
r 135             s = new Stack<>();
--[ 2019.11.11.14.27.23.429.0 ]--
+ 134 
- 137
--[ 2019.11.11.14.27.24.625.0 ]--
- 134
+ 136 
--[ 2019.11.11.14.27.25.064.0 ]--
r 133             while()
r 134                 s = new Stack<>();
r 135         }
--[ 2019.11.11.14.27.25.103.0 ]--
- 132
+ 134             //System.out.println();
--[ 2019.11.11.14.27.25.136.0 ]--
r 131                 while()
r 132                     s = new Stack<>();
r 133             }
--[ 2019.11.11.14.27.25.169.0 ]--
- 130
+ 132                 //System.out.print(board[i][j] + " ");
--[ 2019.11.11.14.27.25.199.0 ]--
- 129
+ 131                 board[i][j] = false;
--[ 2019.11.11.14.27.25.224.0 ]--
r 128             while()
r 129                 s = new Stack<>();
r 130             for(int j = 0; j < terrain.getN(); j++){
--[ 2019.11.11.14.27.25.254.0 ]--
r 127         while()
r 128             s = new Stack<>();
r 129         for(int i = 0; i < terrain.getN(); i++){
--[ 2019.11.11.14.27.25.283.0 ]--
- 126
+ 128         board = new Boolean[terrain.getN()][terrain.getN()];
--[ 2019.11.11.14.27.25.315.0 ]--
+ 126         board = new Boolean[terrain.getN()][terrain.getN()];
- 129
--[ 2019.11.11.14.27.25.344.0 ]--
r 127         for(int i = 0; i < terrain.getN(); i++){
r 128             while()
r 129                 s = new Stack<>();
--[ 2019.11.11.14.27.25.368.0 ]--
r 128             for(int j = 0; j < terrain.getN(); j++){
r 129                 while()
r 130                     s = new Stack<>();
--[ 2019.11.11.14.27.25.411.0 ]--
+ 129                 board[i][j] = false;
- 132
--[ 2019.11.11.14.27.25.435.0 ]--
+ 130                 //System.out.print(board[i][j] + " ");
- 133
--[ 2019.11.11.14.27.25.467.0 ]--
r 131             }
r 132             while()
r 133                 s = new Stack<>();
--[ 2019.11.11.14.27.25.504.0 ]--
+ 132             //System.out.println();
- 135
--[ 2019.11.11.14.27.25.530.0 ]--
r 133         }
r 134         while()
r 135             s = new Stack<>();
--[ 2019.11.11.14.27.25.556.0 ]--
+ 134 
- 137
--[ 2019.11.11.14.27.25.589.0 ]--
+ 134 
- 138
--[ 2019.11.11.14.27.25.625.0 ]--
+ 136         MinPQ<PFNode> pfQueue = new MinPQ<>();
- 139
--[ 2019.11.11.14.27.25.652.0 ]--
+ 137         PFNode begin = new PFNode(start, null);
- 140
--[ 2019.11.11.14.27.25.851.0 ]--
+ 138 
- 141
--[ 2019.11.11.14.27.26.360.0 ]--
+ 139         pfQueue.insert(begin);
- 142
--[ 2019.11.11.14.27.26.385.0 ]--
+ 140 
- 143
--[ 2019.11.11.14.27.26.428.0 ]--
+ 140 
- 144
--[ 2019.11.11.14.27.26.457.0 ]--
r 140         
r 142         while(pfQueue.min().loc == end){
r 143             while()
r 144                 s = new Stack<>();
--[ 2019.11.11.14.27.26.496.0 ]--
+ 143             pfQueue.delMin();
- 146
--[ 2019.11.11.14.27.26.532.0 ]--
r 144             if(board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
r 145                 while()
r 146                     s = new Stack<>();
--[ 2019.11.11.14.27.26.556.0 ]--
+ 145                 continue;
- 148
--[ 2019.11.11.14.27.26.584.0 ]--
r 146             }
r 147             while()
r 148                 s = new Stack<>();
--[ 2019.11.11.14.27.26.615.0 ]--
+ 147             board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getI()] = true;
- 150
--[ 2019.11.11.14.27.26.643.0 ]--
r 148             for(PFNode p : begin.neighbors()){
r 149                 while()
r 150                     s = new Stack<>();
--[ 2019.11.11.14.27.26.676.0 ]--
+ 149                 pfQueue.insert(p);
- 152
--[ 2019.11.11.14.27.26.709.0 ]--
r 150             }
r 151             while()
r 152                 s = new Stack<>();
--[ 2019.11.11.14.27.26.735.0 ]--
r 151             if(pfQueue.min().loc.equals(end)){
r 152                 while()
r 153                     s = new Stack<>();
--[ 2019.11.11.14.27.26.767.0 ]--
r 153             }
r 154             s = new Stack<>();
--[ 2019.11.11.14.27.26.800.0 ]--
r 154 
r 155             s = new Stack<>();
--[ 2019.11.11.14.27.26.828.0 ]--
r 155         }
r 156         s = new Stack<>();
--[ 2019.11.11.14.27.26.855.0 ]--
r 156 
r 157         s = new Stack<>();
--[ 2019.11.11.14.27.26.882.0 ]--
r 157 
r 158         s = new Stack<>();
--[ 2019.11.11.14.27.26.911.0 ]--
r 158 
r 159         s = new Stack<>();
--[ 2019.11.11.14.27.26.949.0 ]--
r 159 
r 160         s = new Stack<>();
--[ 2019.11.11.14.27.26.974.0 ]--
r 160 
r 161         s = new Stack<>();
--[ 2019.11.11.14.27.27.004.0 ]--
r 161 
r 162         s = new Stack<>();
--[ 2019.11.11.14.27.27.036.0 ]--
r 162 
r 163         s = new Stack<>();
--[ 2019.11.11.14.27.27.064.0 ]--
r 163 
r 164         s = new Stack<>();
--[ 2019.11.11.14.27.31.096.0 ]--
r 152                 
--[ 2019.11.11.14.27.35.263.0 ]--
r 164         
--[ 2019.11.11.14.27.41.083.0 ]--
+ 136         
--[ 2019.11.11.14.27.41.445.0 ]--
r 136         s = new Stack<>();
--[ 2019.11.11.14.27.44.340.0 ]--
r 153                  
--[ 2019.11.11.14.27.44.388.0 ]--
r 153                 
--[ 2019.11.11.14.27.45.056.0 ]--
r 153                 w
--[ 2019.11.11.14.27.45.149.0 ]--
r 153                 wh
--[ 2019.11.11.14.27.45.168.0 ]--
r 153                 whi
--[ 2019.11.11.14.27.45.421.0 ]--
r 153                 whil
--[ 2019.11.11.14.27.45.479.0 ]--
r 153                 while
--[ 2019.11.11.14.27.49.350.0 ]--
r 153                 whil
--[ 2019.11.11.14.27.49.488.0 ]--
r 153                 whi
--[ 2019.11.11.14.27.49.591.0 ]--
r 153                 wh
--[ 2019.11.11.14.27.49.693.0 ]--
r 153                 w
--[ 2019.11.11.14.27.49.942.0 ]--
r 153                 
--[ 2019.11.11.14.27.51.028.0 ]--
r 153                 c
--[ 2019.11.11.14.27.51.149.0 ]--
r 153                 cu
--[ 2019.11.11.14.27.51.201.0 ]--
r 153                 cur
--[ 2019.11.11.14.27.52.418.0 ]--
r 153                 cu
--[ 2019.11.11.14.27.52.519.0 ]--
r 153                 c
--[ 2019.11.11.14.27.52.615.0 ]--
r 153                 
--[ 2019.11.11.14.27.58.028.0 ]--
r 153                 c
--[ 2019.11.11.14.27.58.118.0 ]--
r 153                 cu
--[ 2019.11.11.14.27.58.229.0 ]--
r 153                 cur
--[ 2019.11.11.14.27.58.660.0 ]--
r 153                 cur 
--[ 2019.11.11.14.27.58.758.0 ]--
r 153                 cur =
--[ 2019.11.11.14.27.58.925.0 ]--
r 153                 cur = 
--[ 2019.11.11.14.27.59.738.0 ]--
r 153                 cur =
--[ 2019.11.11.14.27.59.888.0 ]--
r 153                 cur 
--[ 2019.11.11.14.28.00.103.0 ]--
r 153                 cur
--[ 2019.11.11.14.28.00.217.0 ]--
r 153                 cu
--[ 2019.11.11.14.28.00.363.0 ]--
r 153                 c
--[ 2019.11.11.14.28.00.512.0 ]--
r 153                 
--[ 2019.11.11.14.28.01.204.0 ]--
r 153                 p
--[ 2019.11.11.14.28.01.314.0 ]--
r 153                 pf
--[ 2019.11.11.14.28.02.054.0 ]--
r 153                 p
--[ 2019.11.11.14.28.02.139.0 ]--
r 153                 
--[ 2019.11.11.14.28.02.512.0 ]--
r 153                 P
--[ 2019.11.11.14.28.02.605.0 ]--
r 153                 PF
--[ 2019.11.11.14.28.02.682.0 ]--
r 153                 PFN
--[ 2019.11.11.14.28.02.860.0 ]--
r 153                 PFNo
--[ 2019.11.11.14.28.03.041.0 ]--
r 153                 PFNod
--[ 2019.11.11.14.28.03.079.0 ]--
r 153                 PFNode
--[ 2019.11.11.14.28.03.528.0 ]--
r 153                 PFNode 
--[ 2019.11.11.14.28.03.748.0 ]--
r 153                 PFNode c
--[ 2019.11.11.14.28.03.904.0 ]--
r 153                 PFNode cu
--[ 2019.11.11.14.28.03.923.0 ]--
r 153                 PFNode cur
--[ 2019.11.11.14.28.03.991.0 ]--
r 153                 PFNode cur 
--[ 2019.11.11.14.28.04.095.0 ]--
r 153                 PFNode cur =
--[ 2019.11.11.14.28.04.189.0 ]--
r 153                 PFNode cur = 
--[ 2019.11.11.14.28.07.933.0 ]--
r 153                 PFNode cur = p
--[ 2019.11.11.14.28.08.062.0 ]--
r 153                 PFNode cur = pf
--[ 2019.11.11.14.28.08.582.0 ]--
r 153                 PFNode cur = pfQueue
--[ 2019.11.11.14.28.08.983.0 ]--
r 153                 PFNode cur = pfQueue,
--[ 2019.11.11.14.28.09.114.0 ]--
r 153                 PFNode cur = pfQueue,n
--[ 2019.11.11.14.28.09.256.0 ]--
r 153                 PFNode cur = pfQueue,ni
--[ 2019.11.11.14.28.09.324.0 ]--
r 153                 PFNode cur = pfQueue,nin
--[ 2019.11.11.14.28.09.574.0 ]--
r 153                 PFNode cur = pfQueue,ni
--[ 2019.11.11.14.28.09.707.0 ]--
r 153                 PFNode cur = pfQueue,n
--[ 2019.11.11.14.28.09.764.0 ]--
r 153                 PFNode cur = pfQueue,
--[ 2019.11.11.14.28.09.861.0 ]--
r 153                 PFNode cur = pfQueue
--[ 2019.11.11.14.28.10.482.0 ]--
r 153                 PFNode cur = pfQueue.
--[ 2019.11.11.14.28.10.802.0 ]--
r 153                 PFNode cur = pfQueue.m
--[ 2019.11.11.14.28.10.871.0 ]--
r 153                 PFNode cur = pfQueue.mi
--[ 2019.11.11.14.28.10.929.0 ]--
r 153                 PFNode cur = pfQueue.min
--[ 2019.11.11.14.28.11.218.0 ]--
r 153                 PFNode cur = pfQueue.min()
--[ 2019.11.11.14.28.11.841.0 ]--
r 153                 PFNode cur = pfQueue.min();
--[ 2019.11.11.14.28.12.233.0 ]--
r 153                 PFNode cur = pfQueue.min(); 
--[ 2019.11.11.14.28.12.263.0 ]--
r 153                 PFNode cur = pfQueue.min();
--[ 2019.11.11.14.28.12.395.0 ]--
+ 154                 
--[ 2019.11.11.14.28.12.692.0 ]--
r 154                 w
--[ 2019.11.11.14.28.12.788.0 ]--
r 154                 wh
--[ 2019.11.11.14.28.12.835.0 ]--
r 154                 whi
--[ 2019.11.11.14.28.13.021.0 ]--
r 154                 whil
--[ 2019.11.11.14.28.13.143.0 ]--
r 154                 while
--[ 2019.11.11.14.28.13.440.0 ]--
r 154                 while()
--[ 2019.11.11.14.28.13.722.0 ]--
r 154                 while(c)
--[ 2019.11.11.14.28.13.825.0 ]--
r 154                 while(cu)
--[ 2019.11.11.14.28.13.856.0 ]--
r 154                 while(cur)
--[ 2019.11.11.14.28.14.557.0 ]--
r 154                 while(cur )
--[ 2019.11.11.14.28.14.810.0 ]--
r 154                 while(cur !)
--[ 2019.11.11.14.28.14.993.0 ]--
r 154                 while(cur !=)
--[ 2019.11.11.14.28.15.402.0 ]--
r 154                 while(cur !)
--[ 2019.11.11.14.28.15.477.0 ]--
r 154                 while(cur )
--[ 2019.11.11.14.28.15.622.0 ]--
r 154                 while(cur)
--[ 2019.11.11.14.28.17.613.0 ]--
r 154                 while(cur.)
--[ 2019.11.11.14.28.17.875.0 ]--
r 154                 while(cur.t)
--[ 2019.11.11.14.28.17.990.0 ]--
r 154                 while(cur.th)
--[ 2019.11.11.14.28.18.009.0 ]--
r 154                 while(cur.thi)
--[ 2019.11.11.14.28.18.130.0 ]--
r 154                 while(cur.this)
--[ 2019.11.11.14.28.18.507.0 ]--
r 154                 while(cur.thi)
--[ 2019.11.11.14.28.18.615.0 ]--
r 154                 while(cur.th)
--[ 2019.11.11.14.28.18.716.0 ]--
r 154                 while(cur.t)
--[ 2019.11.11.14.28.18.837.0 ]--
r 154                 while(cur.)
--[ 2019.11.11.14.28.18.963.0 ]--
r 154                 while(cur)
--[ 2019.11.11.14.28.19.067.0 ]--
r 154                 while(cur )
--[ 2019.11.11.14.28.19.236.0 ]--
r 154                 while(cur)
--[ 2019.11.11.14.28.19.441.0 ]--
r 154                 while(cur.)
--[ 2019.11.11.14.28.21.983.0 ]--
r 154                 while(cur.f)
--[ 2019.11.11.14.28.22.128.0 ]--
r 154                 while(cur.fr)
--[ 2019.11.11.14.28.22.229.0 ]--
r 154                 while(cur.fro)
--[ 2019.11.11.14.28.22.285.0 ]--
r 154                 while(cur.from)
--[ 2019.11.11.14.28.22.496.0 ]--
r 154                 while(cur.fromN)
--[ 2019.11.11.14.28.22.622.0 ]--
r 154                 while(cur.fromNo)
--[ 2019.11.11.14.28.22.674.0 ]--
r 154                 while(cur.fromNod)
--[ 2019.11.11.14.28.22.761.0 ]--
r 154                 while(cur.fromNode)
--[ 2019.11.11.14.28.23.349.0 ]--
r 154                 while(cur.fromNode )
--[ 2019.11.11.14.28.23.596.0 ]--
r 154                 while(cur.fromNode !)
--[ 2019.11.11.14.28.23.740.0 ]--
r 154                 while(cur.fromNode !=)
--[ 2019.11.11.14.28.23.900.0 ]--
r 154                 while(cur.fromNode != )
--[ 2019.11.11.14.28.24.465.0 ]--
r 154                 while(cur.fromNode != n)
--[ 2019.11.11.14.28.24.485.0 ]--
r 154                 while(cur.fromNode != nu)
--[ 2019.11.11.14.28.24.679.0 ]--
r 154                 while(cur.fromNode != nul)
--[ 2019.11.11.14.28.24.858.0 ]--
r 154                 while(cur.fromNode != null)
--[ 2019.11.11.14.28.25.770.0 ]--
r 154                 while(cur.fromNode != null){
--[ 2019.11.11.14.28.25.986.0 ]--
+ 155 
+ 156 }
--[ 2019.11.11.14.28.26.006.0 ]--
r 156                 }
--[ 2019.11.11.14.28.26.025.0 ]--
r 155                     
--[ 2019.11.11.14.28.27.809.0 ]--
r 155                     s
--[ 2019.11.11.14.28.27.894.0 ]--
r 155                     s.
--[ 2019.11.11.14.28.28.275.0 ]--
r 155                     s.p
--[ 2019.11.11.14.28.28.657.0 ]--
r 155                     s.pu
--[ 2019.11.11.14.28.28.882.0 ]--
r 155                     s.puh
--[ 2019.11.11.14.28.29.116.0 ]--
r 155                     s.pu
--[ 2019.11.11.14.28.29.169.0 ]--
r 155                     s.pus
--[ 2019.11.11.14.28.29.249.0 ]--
r 155                     s.push
--[ 2019.11.11.14.28.31.177.0 ]--
r 155                     s.push)
--[ 2019.11.11.14.28.31.334.0 ]--
r 155                     s.push)c
--[ 2019.11.11.14.28.31.422.0 ]--
r 155                     s.push)cu
--[ 2019.11.11.14.28.31.691.0 ]--
r 155                     s.push)c
--[ 2019.11.11.14.28.31.800.0 ]--
r 155                     s.push)
--[ 2019.11.11.14.28.31.860.0 ]--
r 155                     s.push
--[ 2019.11.11.14.28.32.159.0 ]--
r 155                     s.push()
--[ 2019.11.11.14.28.32.295.0 ]--
r 155                     s.push(c)
--[ 2019.11.11.14.28.32.414.0 ]--
r 155                     s.push(cu)
--[ 2019.11.11.14.28.32.496.0 ]--
r 155                     s.push(cur)
--[ 2019.11.11.14.28.33.352.0 ]--
r 155                     s.push(cur).
--[ 2019.11.11.14.28.33.644.0 ]--
r 155                     s.push(cur)
--[ 2019.11.11.14.28.33.773.0 ]--
r 155                     s.push(cur);
--[ 2019.11.11.14.28.34.085.0 ]--
r 155                     s.push(cur); 
--[ 2019.11.11.14.28.34.098.0 ]--
r 155                     s.push(cur);
--[ 2019.11.11.14.28.36.906.0 ]--
r 155                     s.push(cur.);
--[ 2019.11.11.14.28.37.086.0 ]--
r 155                     s.push(cur.l);
--[ 2019.11.11.14.28.37.208.0 ]--
r 155                     s.push(cur.lo);
--[ 2019.11.11.14.28.37.287.0 ]--
r 155                     s.push(cur.loc);
--[ 2019.11.11.14.28.38.066.0 ]--
+ 156                     
--[ 2019.11.11.14.28.38.782.0 ]--
r 156                     c
--[ 2019.11.11.14.28.38.879.0 ]--
r 156                     cu
--[ 2019.11.11.14.28.38.970.0 ]--
r 156                     cur
--[ 2019.11.11.14.28.39.201.0 ]--
r 156                     cur 
--[ 2019.11.11.14.28.39.270.0 ]--
r 156                     cur =
--[ 2019.11.11.14.28.39.354.0 ]--
r 156                     cur = 
--[ 2019.11.11.14.28.41.384.0 ]--
r 156                     cur = t
--[ 2019.11.11.14.28.41.474.0 ]--
r 156                     cur = th
--[ 2019.11.11.14.28.41.520.0 ]--
r 156                     cur = thi
--[ 2019.11.11.14.28.41.584.0 ]--
r 156                     cur = this
--[ 2019.11.11.14.28.41.745.0 ]--
r 156                     cur = this.
--[ 2019.11.11.14.28.41.954.0 ]--
r 156                     cur = this. 
--[ 2019.11.11.14.28.42.002.0 ]--
r 156                     cur = this.
--[ 2019.11.11.14.28.42.142.0 ]--
r 156                     cur = this
--[ 2019.11.11.14.28.42.471.0 ]--
r 156                     cur = 
--[ 2019.11.11.14.28.44.399.0 ]--
r 156                     cur = c
--[ 2019.11.11.14.28.44.478.0 ]--
r 156                     cur = cu
--[ 2019.11.11.14.28.44.945.0 ]--
r 156                     cur = cur
--[ 2019.11.11.14.28.45.014.0 ]--
r 156                     cur = cur.
--[ 2019.11.11.14.28.46.028.0 ]--
r 156                     cur = cur.fromNode
--[ 2019.11.11.14.28.46.591.0 ]--
r 156                     cur = cur.fromNode;
--[ 2019.11.11.14.28.57.484.0 ]--
r 173         /s.push(start);
--[ 2019.11.11.14.28.57.581.0 ]--
r 173         //s.push(start);
--[ 2019.11.11.14.28.58.410.0 ]--
r 174         /s.push(end);
--[ 2019.11.11.14.28.58.480.0 ]--
r 174         //s.push(end);
--[ 2019.11.11.14.29.00.345.0 ]--
r 141 
r 169 
--[ 2019.11.11.14.29.02.285.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.29.26.084.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.29.53.927.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.30.03.235.0 ]--
r 143         while(pfQueue.min().loc = end){
--[ 2019.11.11.14.30.03.305.0 ]--
r 143         while(pfQueue.min().loc  end){
--[ 2019.11.11.14.30.03.457.0 ]--
r 143         while(pfQueue.min().loc ! end){
--[ 2019.11.11.14.30.03.600.0 ]--
r 143         while(pfQueue.min().loc != end){
--[ 2019.11.11.14.30.07.185.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.33.47.623.0 ]--
+ 144             
--[ 2019.11.11.14.33.48.144.0 ]--
r 144             i
--[ 2019.11.11.14.33.48.250.0 ]--
r 144             if
--[ 2019.11.11.14.33.49.174.0 ]--
r 144             if()
--[ 2019.11.11.14.33.49.341.0 ]--
r 144             if(p)
--[ 2019.11.11.14.33.49.445.0 ]--
r 144             if(pf)
--[ 2019.11.11.14.33.50.114.0 ]--
r 144             if(pfQueue)
--[ 2019.11.11.14.33.50.226.0 ]--
r 144             if(pfQueue.)
--[ 2019.11.11.14.33.50.624.0 ]--
r 144             if(pfQueue.l)
--[ 2019.11.11.14.33.50.706.0 ]--
r 144             if(pfQueue.le)
--[ 2019.11.11.14.33.50.786.0 ]--
r 144             if(pfQueue.len)
--[ 2019.11.11.14.33.50.897.0 ]--
r 144             if(pfQueue.leng)
--[ 2019.11.11.14.33.51.043.0 ]--
r 144             if(pfQueue.lengt)
--[ 2019.11.11.14.33.51.139.0 ]--
r 144             if(pfQueue.length)
--[ 2019.11.11.14.33.51.855.0 ]--
r 144             if(pfQueue.length;)
--[ 2019.11.11.14.33.52.311.0 ]--
r 144             if(pfQueue.length)
--[ 2019.11.11.14.33.52.580.0 ]--
r 144             if(pfQueue.length())
--[ 2019.11.11.14.33.52.887.0 ]--
r 144             if(pfQueue.length();)
--[ 2019.11.11.14.33.53.613.0 ]--
r 144             if(pfQueue.length())
--[ 2019.11.11.14.33.53.756.0 ]--
r 144             if(pfQueue.length()
--[ 2019.11.11.14.33.54.132.0 ]--
r 144             if(pfQueue.length)
--[ 2019.11.11.14.33.54.647.0 ]--
r 144             if(pfQueue.)
--[ 2019.11.11.14.33.54.840.0 ]--
r 144             if(pfQueue.g)
--[ 2019.11.11.14.33.54.937.0 ]--
r 144             if(pfQueue.ge)
--[ 2019.11.11.14.33.55.058.0 ]--
r 144             if(pfQueue.get)
--[ 2019.11.11.14.33.55.632.0 ]--
r 144             if(pfQueue.ge)
--[ 2019.11.11.14.33.55.732.0 ]--
r 144             if(pfQueue.g)
--[ 2019.11.11.14.33.56.169.0 ]--
r 144             if(pfQueue.)
--[ 2019.11.11.14.33.56.644.0 ]--
r 144             if(pfQueue)
--[ 2019.11.11.14.33.56.787.0 ]--
r 144             if(pfQueue.)
--[ 2019.11.11.14.33.59.949.0 ]--
r 144             if(pfQueue.size)
--[ 2019.11.11.14.33.59.959.0 ]--
r 144             if(pfQueue.size())
--[ 2019.11.11.14.34.00.653.0 ]--
r 144             if(pfQueue.size() )
--[ 2019.11.11.14.34.00.759.0 ]--
r 144             if(pfQueue.size() >)
--[ 2019.11.11.14.34.01.038.0 ]--
r 144             if(pfQueue.size() >-)
--[ 2019.11.11.14.34.01.535.0 ]--
r 144             if(pfQueue.size() >)
--[ 2019.11.11.14.34.03.594.0 ]--
r 144             if(pfQueue.size() > )
--[ 2019.11.11.14.34.03.666.0 ]--
r 144             if(pfQueue.size() > 1)
--[ 2019.11.11.14.34.04.495.0 ]--
r 144             if(pfQueue.size() > 1){
--[ 2019.11.11.14.34.04.927.0 ]--
r 144             if(pfQueue.size() > 1)
--[ 2019.11.11.14.34.05.461.0 ]--
r 144             if(pfQueue.size() > 1)}
--[ 2019.11.11.14.34.06.453.0 ]--
+ 145         
--[ 2019.11.11.14.34.06.839.0 ]--
- 145
--[ 2019.11.11.14.34.07.058.0 ]--
r 144             if(pfQueue.size() > 1)
--[ 2019.11.11.14.34.07.397.0 ]--
r 144             if(pfQueue.size() > 1){
--[ 2019.11.11.14.34.07.551.0 ]--
+ 145 
+ 146 }
--[ 2019.11.11.14.34.07.572.0 ]--
r 146             }
--[ 2019.11.11.14.34.07.594.0 ]--
r 145                 
--[ 2019.11.11.14.34.12.432.0 ]--
r 146             pfQueue.delMin();
r 147             }
--[ 2019.11.11.14.34.12.500.0 ]--
r 145 
r 146                 pfQueue.delMin();
--[ 2019.11.11.14.34.13.583.0 ]--
r 145                 pfQueue.delMin();
r 146 
--[ 2019.11.11.14.34.16.619.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.34.24.152.0 ]--
r 145 
r 146                 pfQueue.delMin();
--[ 2019.11.11.14.34.24.420.0 ]--
r 145                 
r 146             }
r 147             pfQueue.delMin();
--[ 2019.11.11.14.34.24.804.0 ]--
- 145
- 145
--[ 2019.11.11.14.34.24.926.0 ]--
r 144             if(pfQueue.size() > 1)
--[ 2019.11.11.14.34.25.257.0 ]--
+ 144             if(pfQueue.size() > 1)}
r 145         
--[ 2019.11.11.14.34.25.400.0 ]--
- 145
--[ 2019.11.11.14.34.26.104.0 ]--
r 144             if(pfQueue.size() > 1)
--[ 2019.11.11.14.34.26.337.0 ]--
r 144             if(pfQueue.size() > 1){
--[ 2019.11.11.14.34.26.458.0 ]--
r 144             if(pfQueue.size() > 1)
--[ 2019.11.11.14.34.27.840.0 ]--
r 144             if()
--[ 2019.11.11.14.34.29.207.0 ]--
r 144             
--[ 2019.11.11.14.34.29.424.0 ]--
- 144
--[ 2019.11.11.14.34.33.320.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.34.44.294.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.35.03.749.0 ]--
r 145             if(pboard[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.03.806.0 ]--
r 145             if(pfboard[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.04.118.0 ]--
r 145             if(pfQboard[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.04.469.0 ]--
r 145             if(pfQueueboard[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.04.578.0 ]--
r 145             if(pfQueue.board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.05.166.0 ]--
r 145             if(pfQueue.sboard[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.05.191.0 ]--
r 145             if(pfQueue.siboard[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.05.227.0 ]--
r 145             if(pfQueue.sizboard[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.05.406.0 ]--
r 145             if(pfQueue.sizeboard[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.05.704.0 ]--
r 145             if(pfQueue.size(board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.05.836.0 ]--
r 145             if(pfQueue.size()board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.06.467.0 ]--
r 145             if(pfQueue.size() board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.06.587.0 ]--
r 145             if(pfQueue.size() >board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.06.691.0 ]--
r 145             if(pfQueue.size() > board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.06.825.0 ]--
r 145             if(pfQueue.size() > 1board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.07.133.0 ]--
r 145             if(pfQueue.size() > 1 board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.07.628.0 ]--
r 145             if(pfQueue.size() > 1 &board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.07.722.0 ]--
r 145             if(pfQueue.size() > 1 &&board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.07.862.0 ]--
r 145             if(pfQueue.size() > 1 && board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.35.15.061.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.35.23.197.0 ]--
r 145             if(board[pfQueue.min().loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.43.24.950.0 ]--
r 143         while(!){
--[ 2019.11.11.14.43.25.342.0 ]--
r 143         while(!p){
--[ 2019.11.11.14.43.25.418.0 ]--
r 143         while(!pf){
--[ 2019.11.11.14.43.25.743.0 ]--
r 143         while(!pfQ){
--[ 2019.11.11.14.43.26.528.0 ]--
r 143         while(!pfQueue){
--[ 2019.11.11.14.43.26.941.0 ]--
r 143         while(!pfQueue.){
--[ 2019.11.11.14.43.29.610.0 ]--
r 143         while(!pfQueue.min){
--[ 2019.11.11.14.43.29.629.0 ]--
r 143         while(!pfQueue.min()){
--[ 2019.11.11.14.43.30.746.0 ]--
r 143         while(!pfQueue.min().){
--[ 2019.11.11.14.43.30.992.0 ]--
r 143         while(!pfQueue.min().l){
--[ 2019.11.11.14.43.31.128.0 ]--
r 143         while(!pfQueue.min().lo){
--[ 2019.11.11.14.43.31.295.0 ]--
r 143         while(!pfQueue.min().loc){
--[ 2019.11.11.14.43.31.370.0 ]--
r 143         while(!pfQueue.min().loc.){
--[ 2019.11.11.14.43.31.651.0 ]--
r 143         while(!pfQueue.min().loc.e){
--[ 2019.11.11.14.43.32.064.0 ]--
r 143         while(!pfQueue.min().loc.equals){
--[ 2019.11.11.14.43.32.091.0 ]--
r 143         while(!pfQueue.min().loc.equals()){
--[ 2019.11.11.14.43.38.602.0 ]--
r 143         while(!pfQueue.min().loc.equals(e)){
--[ 2019.11.11.14.43.38.652.0 ]--
r 143         while(!pfQueue.min().loc.equals(en)){
--[ 2019.11.11.14.43.38.745.0 ]--
r 143         while(!pfQueue.min().loc.equals(end)){
--[ 2019.11.11.14.43.39.230.0 ]--
r 143         while(!pfQueue.min().loc.equals(end )){
--[ 2019.11.11.14.43.39.273.0 ]--
r 143         while(!pfQueue.min().loc.equals(end)){
--[ 2019.11.11.14.43.44.479.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.49.00.905.0 ]--
r 144             bpfQueue.delMin();
--[ 2019.11.11.14.49.01.120.0 ]--
r 144             bepfQueue.delMin();
--[ 2019.11.11.14.49.01.584.0 ]--
r 144             begpfQueue.delMin();
--[ 2019.11.11.14.49.01.688.0 ]--
r 144             begipfQueue.delMin();
--[ 2019.11.11.14.49.01.715.0 ]--
r 144             beginpfQueue.delMin();
--[ 2019.11.11.14.49.01.984.0 ]--
r 144             begin=pfQueue.delMin();
--[ 2019.11.11.14.49.02.204.0 ]--
r 144             beginpfQueue.delMin();
--[ 2019.11.11.14.49.02.388.0 ]--
r 144             begin =pfQueue.delMin();
--[ 2019.11.11.14.49.02.428.0 ]--
r 144             begin = pfQueue.delMin();
--[ 2019.11.11.14.49.11.476.0 ]--
r 145             if(board[b.loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.49.11.627.0 ]--
r 145             if(board[be.loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.49.12.007.0 ]--
r 145             if(board[beg.loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.49.12.085.0 ]--
r 145             if(board[begi.loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.49.12.136.0 ]--
r 145             if(board[begin.loc.getJ()][pfQueue.min().loc.getJ()] == true){
--[ 2019.11.11.14.49.16.385.0 ]--
r 145             if(board[begin.loc.getJ()][pfQueue.begin.loc.getJ()] == true){
--[ 2019.11.11.14.49.24.333.0 ]--
r 148             board[begin.loc.getJ()][pfQueue.min().loc.getI()] = true;
--[ 2019.11.11.14.49.27.156.0 ]--
r 148             board[begin.loc.getJ()][begin.loc.getI()] = true;
--[ 2019.11.11.14.49.30.568.0 ]--
r 145             if(board[begin.loc.getJ()][beginloc.getJ()] == true){
--[ 2019.11.11.14.49.31.567.0 ]--
r 145             if(board[begin.loc.getJ()][begin.loc.getJ()] == true){
--[ 2019.11.11.14.49.37.129.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.49.51.264.0 ]--
+ 150                 
--[ 2019.11.11.14.49.54.498.0 ]--
r 150                 i
--[ 2019.11.11.14.49.54.535.0 ]--
r 150                 if
--[ 2019.11.11.14.49.55.171.0 ]--
r 150                 if 
--[ 2019.11.11.14.49.55.184.0 ]--
r 150                 if
--[ 2019.11.11.14.49.55.364.0 ]--
r 150                 if()
--[ 2019.11.11.14.49.55.550.0 ]--
r 150                 if(b)
--[ 2019.11.11.14.49.55.634.0 ]--
r 150                 if(bo)
--[ 2019.11.11.14.49.55.692.0 ]--
r 150                 if(boa)
--[ 2019.11.11.14.49.55.763.0 ]--
r 150                 if(boar)
--[ 2019.11.11.14.49.55.960.0 ]--
r 150                 if(board)
--[ 2019.11.11.14.49.56.034.0 ]--
r 150                 if(board.)
--[ 2019.11.11.14.49.56.130.0 ]--
r 150                 if(board. )
--[ 2019.11.11.14.49.56.214.0 ]--
r 150                 if(board.)
--[ 2019.11.11.14.49.56.860.0 ]--
r 150                 if(board)
--[ 2019.11.11.14.49.57.312.0 ]--
r 150                 if()
--[ 2019.11.11.14.53.57.747.0 ]--
r 150                 if( )
--[ 2019.11.11.14.53.57.787.0 ]--
r 150                 if()
--[ 2019.11.11.14.54.14.756.0 ]--
r 150                 if(p)
--[ 2019.11.11.14.54.14.926.0 ]--
r 150                 if(p.)
--[ 2019.11.11.14.54.17.226.0 ]--
r 150                 if(p.l)
--[ 2019.11.11.14.54.18.005.0 ]--
r 150                 if(p.lo)
--[ 2019.11.11.14.54.18.879.0 ]--
r 150                 if(p.loc)
--[ 2019.11.11.14.54.19.693.0 ]--
r 150                 if(p.loc.)
--[ 2019.11.11.14.54.20.190.0 ]--
r 150                 if(p.loc.g)
--[ 2019.11.11.14.54.20.234.0 ]--
r 150                 if(p.loc.ge)
--[ 2019.11.11.14.54.20.384.0 ]--
r 150                 if(p.loc.get)
--[ 2019.11.11.14.54.20.990.0 ]--
r 150                 if(p.loc.getI)
--[ 2019.11.11.14.54.21.001.0 ]--
r 150                 if(p.loc.getI())
--[ 2019.11.11.14.54.22.939.0 ]--
r 150                 if(p.loc.getI() )
--[ 2019.11.11.14.54.28.425.0 ]--
r 150                 if(p.loc.getI())
--[ 2019.11.11.14.54.29.071.0 ]--
r 150                 if(p.loc.getI() )
--[ 2019.11.11.14.54.34.092.0 ]--
r 150                 if(p.loc.getI())
--[ 2019.11.11.14.54.35.157.0 ]--
r 150                 if(p.loc.get())
--[ 2019.11.11.14.54.35.394.0 ]--
r 150                 if(p.loc.getJ())
--[ 2019.11.11.14.54.36.340.0 ]--
r 150                 if(p.loc.getJ() )
--[ 2019.11.11.14.54.37.954.0 ]--
r 150                 if(p.loc.getJ() >)
--[ 2019.11.11.14.54.38.161.0 ]--
r 150                 if(p.loc.getJ() >=)
--[ 2019.11.11.14.54.38.852.0 ]--
r 150                 if(p.loc.getJ() >= )
--[ 2019.11.11.14.54.38.970.0 ]--
r 150                 if(p.loc.getJ() >= 0)
--[ 2019.11.11.14.54.39.845.0 ]--
r 150                 if(p.loc.getJ() >= 0 )
--[ 2019.11.11.14.54.40.863.0 ]--
r 150                 if(p.loc.getJ() >= 0 &)
--[ 2019.11.11.14.54.40.977.0 ]--
r 150                 if(p.loc.getJ() >= 0 &&)
--[ 2019.11.11.14.54.41.153.0 ]--
r 150                 if(p.loc.getJ() >= 0 && )
--[ 2019.11.11.14.54.42.324.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p)
--[ 2019.11.11.14.54.42.503.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.)
--[ 2019.11.11.14.54.42.730.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.l)
--[ 2019.11.11.14.54.42.848.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.lo)
--[ 2019.11.11.14.54.42.940.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc)
--[ 2019.11.11.14.54.43.067.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.)
--[ 2019.11.11.14.54.43.671.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.g)
--[ 2019.11.11.14.54.43.710.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.ge)
--[ 2019.11.11.14.54.43.865.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.get)
--[ 2019.11.11.14.54.44.182.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI)
--[ 2019.11.11.14.54.44.313.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI())
--[ 2019.11.11.14.54.45.061.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() )
--[ 2019.11.11.14.54.45.224.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() <)
--[ 2019.11.11.14.54.45.344.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() < )
--[ 2019.11.11.14.54.48.303.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() < t)
--[ 2019.11.11.14.54.48.399.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() < te)
--[ 2019.11.11.14.54.48.548.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() < ter)
--[ 2019.11.11.14.54.48.686.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() < terr)
--[ 2019.11.11.14.54.48.751.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() < terra)
--[ 2019.11.11.14.54.48.831.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrai)
--[ 2019.11.11.14.54.48.871.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain)
--[ 2019.11.11.14.54.49.129.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain.)
--[ 2019.11.11.14.54.49.146.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain.g)
--[ 2019.11.11.14.54.49.171.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain.ge)
--[ 2019.11.11.14.54.49.767.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain.getN)
--[ 2019.11.11.14.54.49.792.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain.getN())
--[ 2019.11.11.14.54.50.937.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain.getN()){
--[ 2019.11.11.14.54.51.229.0 ]--
+ 151 
+ 152 }
--[ 2019.11.11.14.54.51.284.0 ]--
r 152                 }
--[ 2019.11.11.14.54.51.308.0 ]--
r 151                     
--[ 2019.11.11.14.54.54.189.0 ]--
r 152                 pfQueue.insert(p);
r 153                 }
--[ 2019.11.11.14.54.54.211.0 ]--
r 151 
r 152                     pfQueue.insert(p);
--[ 2019.11.11.14.54.54.724.0 ]--
r 151                     pfQueue.insert(p);
r 152 
--[ 2019.11.11.14.54.58.026.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.55.03.869.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() =< terrain.getN()){
--[ 2019.11.11.14.55.07.213.0 ]--
UpdateTree (AD): 0 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class

--[ 2019.11.11.14.55.07.213.1 ]--
CompilationStatus (AEW): 0 2 0
[Ljava.lang.String;@4565f186
--[ 2019.11.11.14.55.11.302.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() < terrain.getN()){
--[ 2019.11.11.14.55.11.303.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.55.11.308.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.55.11.312.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.55.11.315.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.55.11.318.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.55.11.320.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.55.11.325.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.55.12.087.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getI() <= terrain.getN()){
--[ 2019.11.11.14.55.12.088.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.55.12.096.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.55.16.717.0 ]--
UpdateTree (AD): 2 0
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.11.11.14.55.16.717.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.55.27.126.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.14.56.18.799.0 ]--
r 151                      pfQueue.insert(p);
--[ 2019.11.11.14.56.18.851.0 ]--
r 151                     pfQueue.insert(p);
--[ 2019.11.11.14.56.24.749.0 ]--
- 153
--[ 2019.11.11.14.56.25.424.0 ]--
- 152
--[ 2019.11.11.14.56.31.339.0 ]--
r 150                 
--[ 2019.11.11.14.56.31.856.0 ]--
- 150
--[ 2019.11.11.14.56.35.553.0 ]--
r 150                 pfQueue.insert(p);
--[ 2019.11.11.15.55.14.112.0 ]--
NewLogger: P04_Pathfinding
Version: 1.3
--[ 2019.11.11.15.55.14.149.0 ]--
InitTree:
/out/production/P04_Pathfinding/.donotlog
/out/production/P04_Pathfinding/algs4.jar
/out/production/P04_Pathfinding/stdlib.jar
/out/production/P04_Pathfinding/Coord.class
/out/production/P04_Pathfinding/png2emap.py
/out/production/P04_Pathfinding/Walker.class
/out/production/P04_Pathfinding/Terrain.class
/out/production/P04_Pathfinding/ramp.png.emap
/out/production/P04_Pathfinding/ramp2.png.emap
/out/production/P04_Pathfinding/ramp3.png.emap
/out/production/P04_Pathfinding/mazeAB.png.emap
/out/production/P04_Pathfinding/usa128.png.emap
/out/production/P04_Pathfinding/usa256.png.emap
/out/production/P04_Pathfinding/Pathfinder.class
/out/production/P04_Pathfinding/usa1024.png.emap
/out/production/P04_Pathfinding/maze32_0.png.emap
/out/production/P04_Pathfinding/maze32_1.png.emap
/out/production/P04_Pathfinding/maze232_0.png.emap
/out/production/P04_Pathfinding/maze320_0.png.emap
/out/production/P04_Pathfinding/mazeBrain.png.emap
/out/production/P04_Pathfinding/TerrainEditor.class
/out/production/P04_Pathfinding/Pathfinder$PFNode.class
/out/production/P04_Pathfinding/PathfinderVisualizer.class
/out/production/P04_Pathfinding/InteractivePathfinderVisualizer.class
/src/algs4.jar
/src/Coord.java
/src/stdlib.jar
/src/Walker.java
/src/Terrain.java
/src/Pathfinder.java
/src/TerrainEditor.java
/src/PathfinderVisualizer.java
/src/InteractivePathfinderVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/heightmaps/.donotlog
/heightmaps/png2emap.py
/heightmaps/ramp.png.emap
/heightmaps/ramp2.png.emap
/heightmaps/ramp3.png.emap
/heightmaps/mazeAB.png.emap
/heightmaps/usa128.png.emap
/heightmaps/usa256.png.emap
/heightmaps/usa1024.png.emap
/heightmaps/maze32_0.png.emap
/heightmaps/maze32_1.png.emap
/heightmaps/maze232_0.png.emap
/heightmaps/maze320_0.png.emap
/heightmaps/mazeBrain.png.emap
/.cos265
/readme.html
/P04_Pathfinding.iml

--[ 2019.11.11.15.55.14.153.0 ]--
InitFile: /src/InteractivePathfinderVisualizer.java
import java.awt.event.KeyEvent;

/**
 * InteractivePathfinderVisualizer visualizes the terrain and the computed
 * path and allows the user to change parameters of the Pathfinder.  Below
 * is a list of commands and what they do.  Note: some of the commands
 * modify the properties of the path finder and some modify the terrain.
 *
 * Command        Action                                      Terrain
 * C              clear path
 * space          recompute path
 * S/E            set start/end location to mouse
 * left/right     halve/double path search heuristic value
 * 0/1            set path search heuristic to 0 or 1
 * W              start a walker to show the path
 * R              randomly generate a new terrain                *
 * M              smooths terrain under mouse                    *
 * shift+M        smooths all terrain                            *
 * up/down        increase/decrease terrain under mouse          *
 */

public class InteractivePathfinderVisualizer {
    private final static int DELAY = 10;

    // sets how many redraws it should take for the walker to reach its destination
    private final static float STEPS_TO_WALK = 100.0f;

    // for convenience, here are the emap files that are located under heightmaps/ folder
    // the python script in that folder converts png files to emap. \
    // you can use it to create your own maps to test your code
    private final static String[] emaps = {
            "maze32_0.png.emap",    // 0   (32x32 maze)
            "maze32_1.png.emap",    // 1   (another 32x32 maze)
            "maze232_0.png.emap",   // 2   (232x232 maze)
            "maze320_0.png.emap",   // 3   (same as maze32_0, only scaled up by 10x)
            "mazeAB.png.emap",      // 4   (a maze from a site no longer online :( )
            "mazeBrain.png.emap",   // 5   (...)
            "ramp.png.emap",        // 6   (some tests)
            "ramp2.png.emap",       // 7   (...)
            "ramp3.png.emap",       // 8   (...)
            "usa128.png.emap",      // 9   (elevation map of USA from https://bananas.openttd.org/en/heightmap/)
            "usa256.png.emap",      // 10  (same as usa128, only higher resolution)
            "usa1024.png.emap",     // 11  (same as usa128, only higher resolution
    };

    private final static String emapFilename = emaps[0];        // change index to load a different elevation map



    public static void main(String[] args) {
        Terrain terrain = new Terrain(emapFilename);
        Pathfinder pf = new Pathfinder(terrain);
        int N = terrain.getN();

        StdDraw.show(0);

        // set default starting and ending locations
        pf.setPathStart(new Coord(1, 1));
        pf.setPathEnd(new Coord(N-3, N-3));

        // find a path
        pf.computePath();

        PathfinderVisualizer.draw(terrain, pf, null, N);
        StdDraw.show(DELAY);

        // prevent repeated applications
        boolean keyboardR = false;
        boolean keyboardM = false;

        Walker walker = null;

        while(true) {
            boolean recompute = false;
            boolean redraw = false;

            // mouse location on map
            int mouseI = (int) ((StdDraw.mouseX()-24) / 464 * N);
            int mouseJ = (int) ((464 - (StdDraw.mouseY()-36)) / 464 * N);
            boolean isMouseOnMap = (mouseI >=0 && mouseI < N && mouseJ >= 0 && mouseJ < N);

            if(StdDraw.isKeyPressed(KeyEvent.VK_LEFT) || StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
                boolean keyboardLeft = StdDraw.isKeyPressed(KeyEvent.VK_LEFT);
                float m = keyboardLeft ? 0.5f : 2.0f;
                float h = pf.getHeuristic() * m;
                h = Math.max(1.0f/1024.0f, Math.min(1048576.0f, h));
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_0) || StdDraw.isKeyPressed(KeyEvent.VK_1)) {
                boolean keyboard0 = StdDraw.isKeyPressed(KeyEvent.VK_0);
                float h = keyboard0 ? 0 : 1;
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_C)) {
                pf.resetPath();
                walker = null;
                redraw = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_R) && !keyboardR) {
                TerrainEditor.setFractalHeights(terrain);
                TerrainEditor.clampHeights(terrain);
                recompute = true;
            }
            keyboardR = StdDraw.isKeyPressed(KeyEvent.VK_R);

            if(StdDraw.isKeyPressed(KeyEvent.VK_M)) {
                if(StdDraw.isKeyPressed(KeyEvent.VK_SHIFT)) {
                    if(!keyboardM) {
                        TerrainEditor.smoothHeights(terrain);
                        recompute = true;
                    }
                } else {
                    TerrainEditor.smoothHeights(mouseI, mouseJ, N / 20, true, terrain);
                    recompute = true;
                }
            }
            keyboardM = StdDraw.isKeyPressed(KeyEvent.VK_M);

            if(StdDraw.isKeyPressed(KeyEvent.VK_SPACE)) {
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_UP) || StdDraw.isKeyPressed(KeyEvent.VK_DOWN)) {
                boolean keyboardUp = StdDraw.isKeyPressed(KeyEvent.VK_UP);
                float add = keyboardUp ? 8.0f : -8.0f;
                TerrainEditor.addHeight(mouseI, mouseJ, N / 20, add, terrain);
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_S)) {
                pf.setPathStart(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_E)) {
                pf.setPathEnd(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_W)) {
                Iterable<Coord> path = pf.getPathSolution();
                if(path != null) {
                    walker = new Walker(terrain, pf.getPathSolution());
                }
            }

            if(walker != null) {
                if(walker.doneWalking()) {
                    walker = null;
                } else {
                    walker.advance(pf.getPathCost() / STEPS_TO_WALK);
                }
                redraw = true;
            }

            if(recompute) {
                walker = null;
                pf.resetPath();
                if(pf.getPathStart() != null && pf.getPathEnd() != null) {
                    pf.computePath();
                }
                redraw = true;
            }

            if(redraw) {
                PathfinderVisualizer.draw(terrain, pf, walker, N);
                StdDraw.show(DELAY);
            } else {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    /* do nothing */
                }
            }
        }
    }
}

--[ 2019.11.11.15.55.14.162.0 ]--
InitFile: /src/Terrain.java
import java.lang.IndexOutOfBoundsException;

/**
 * Terrain stores elevations for map and computes distance and
 * cost in traversing the terrain.
 */

public class Terrain {
    private int N;
    private int[][] heights;

    public Terrain(int N) {
        this.N = N;
        this.heights = new int[N][N];
    }

    public Terrain(int[][] heights) {
        this.N = heights.length;
        this.heights = heights;
    }

    public Terrain(String emapfile) {
        In in = new In(emapfile);
        this.N = in.readInt();
        this.heights = new int[N][N];
        for (int j = 0; j < N; j++) {
            for (int i = 0; i < N; i++) {
                this.heights[i][j] = in.readInt();
            }
        }
    }

    public int getN() {
        return N;
    }

    public void setHeight(int i, int j, int h) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        heights[i][j] = h;
    }
    public void setHeight(int i, int j, float h) {
        setHeight(i, j, (int) h);
    }
    public void setHeight(Coord loc, int h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }
    public void setHeight(Coord loc, float h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }

    public int getHeight(int i, int j) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        return heights[i][j];
    }
    public int getHeight(Coord loc) {
        return getHeight(loc.getI(), loc.getJ());
    }

    // computes distance between (i0,j0) and (i1,j1) as the crow flies
    public float computeDistance(int i0, int j0, int i1, int j1) {
        return (float)Math.sqrt((i0 - i1) * (i0 - i1) + (j0 - j1) * (j0 - j1));
    }
    public float computeDistance(Coord c0, Coord c1) {
        return computeDistance(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }

    public float computeTravelCost(int i0, int j0, int i1, int j1) {
        float h0 = getHeight(i0, j0), h1 = getHeight(i1, j1);
        float climb = (float)Math.pow(Math.abs(h0 - h1) * 1000.0, 1.5);
        float dist = computeDistance(i0,j0, i1,j1);
        return (1.0f + climb) * dist;
    }
    public float computeTravelCost(Coord c0, Coord c1) {
        return computeTravelCost(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }
    public float computeTravelCost(Iterable<Coord> cs) {
        Coord c0 = null;
        float cost = 0.0f;
        for(Coord c1 : cs) {
            if(c0 != null) cost += computeTravelCost(c0, c1);
            c0 = c1;
        }
        return cost;
    }
}

--[ 2019.11.11.15.55.14.165.0 ]--
InitFile: /src/Walker.java
import java.util.Iterator;

/**
 * Walker takes an Iterable of Coords and simulates an individual
 * walking along the path over the given Terrain
 */
public class Walker {

    // terrain: the Terrain the Walker traverses
    // path: the sequence of Coords the Walker follows
    public Walker(Terrain terrain, Iterable<Coord> path) {
    }

    // returns the Walker's current location
    public Coord getLocation() {
        return null;
    }

    // returns true if Walker has reached the end Coord (last in path)
    public boolean doneWalking() {
        return true;
    }

    // advances the Walker along path
    // byTime: how long the Walker should traverse (may be any non-negative value)
    public void advance(float byTime) {
    }

}

--[ 2019.11.11.15.55.14.167.0 ]--
InitFile: /src/PathfinderVisualizer.java
/**
 * PathfinderVisualizer visualizes the terrain and found path.
 */

import java.awt.Color;
import java.awt.Font;

public class PathfinderVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // color for different elevations.  must be in ascending order!
    private final static int[][] elevationColors = {
            // h    r   g   b   where h=height, r=red, g=green, b=blue
            {  0,   0,  0,  0},
            {  2,   0,  0,160},
            {  4,   0,224,224},
            { 16, 192,192,  0},
            { 64,  16,255, 16},
            {128,  32,224, 32},
            {192, 128,128,  8},
            {224, 164,164,164},
            {255, 255,255,255}
    };

    private final static Color cStart    = new Color(128, 128, 255);
    private final static Color cEnd      = new Color(255, 128, 128);
    private final static Color cSolution = new Color(255, 128, 255);
    private final static Color cSearched = new Color(128,   0, 128);

    // linearly interpolating between the corresponding rgb values
    private static Color colorLERP(float v1, int r0, int g0, int b0, int r1, int g1, int b1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * r0 + v1 * r1);
        int g = (int)(v0 * g0 + v1 * g1);
        int b = (int)(v0 * b0 + v1 * b1);
        return new Color(r, g, b);
    }
    private static Color colorLERP(float v1, Color c0, Color c1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * c0.getRed()   + v1 * c1.getRed());
        int g = (int)(v0 * c0.getGreen() + v1 * c1.getGreen());
        int b = (int)(v0 * c0.getBlue()  + v1 * c1.getBlue());
        int a = (int)(v0 * c0.getAlpha() + v1 * c1.getAlpha());
        return new Color(r, g, b, a);
    }

    // returns color for given height
    private static Color height2Color(int h) {
        h = Math.max(0, Math.min(255, h));

        int[] ec0 = elevationColors[0];  // default lower bound
        int[] ec1 = elevationColors[1];  // default upper bound

        // find upper bound while updating lower bound
        for(int i = 1; i < elevationColors.length; i++) {
            ec1 = elevationColors[i];
            if(h >= ec0[0] && h <= ec1[0]) break;
            ec0 = ec1;
        }

        int h0=ec0[0], r0=ec0[1], g0=ec0[2], b0=ec0[3];
        int h1=ec1[0], r1=ec1[1], g1=ec1[2], b1=ec1[3];
        float v1 = ((float)(h - h0)) / ((float)(h1 - h0));

        return colorLERP(v1, r0, g0, b0, r1, g1, b1);
    }

    private static void drawCircle(int i, int j, int N, double rad) {
        int c = (int)((i+0.5f) * 464.0f / N);
        int r = (int)((j+0.5f) * 464.0f / N);
        StdDraw.circle(c + 24, 464 - r + 36, rad);
    }
    public static void drawCircle(Coord loc, int N, double rad) {
        drawCircle(loc.getI(), loc.getJ(), N, rad);
    }

    private static void drawPath(Iterable<Coord> path, int N) {
        boolean first = true;
        int c0 = 0, r0 = 0;
        for (Coord loc : path) {
            int c1 = (int)((loc.getI()+0.5f) * 464.0f / N);
            int r1 = (int)((loc.getJ()+0.5f) * 464.0f / N);
            if(!first) {
                StdDraw.line(c0 + 24, 464 - r0 + 36, c1 + 24, 464 - r1 + 36);
            }
            first = false;
            c0 = c1; r0 = r1;
        }
    }

    // draw N-by-N pathfinding map
    public static void draw(Terrain terrain, Pathfinder pf, Walker walker, int N) {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.filledSquare(256, 256 + 12, 464 / 2);

        // draw terrain
        for(int row = 0; row < 464; row++) {
            int j = (int)((float)row/464.0f * N);
            for(int col = 0; col < 464; col++) {
                int i = (int)((float)col/464.0f * N);
                Coord loc = new Coord(i,j);
                Color c = height2Color(terrain.getHeight(loc));
                if(pf.wasSearched(loc)) {
                    c = colorLERP(0.50f, c, cSearched);
                }
                StdDraw.setPenColor(c);
                StdDraw.filledSquare(col + 24, 464 - row + 36, 1);
            }
        }

        // draw path start
        if(pf.getPathStart() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathStart(), N, 4.0);

            StdDraw.setPenColor(cStart);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathStart(), N, 4.0);
        }

        // draw path end
        if(pf.getPathEnd() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathEnd(), N, 4.0);

            StdDraw.setPenColor(cEnd);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathEnd(), N, 4.0);
        }

        // draw found path
        if(pf.foundPath()) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawPath(pf.getPathSolution(), N);

            StdDraw.setPenColor(cSolution);
            StdDraw.setPenRadius(0.002);
            drawPath(pf.getPathSolution(), N);
        }

        // draw walker
        if(walker != null) {
            Coord loc = walker.getLocation();
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);

            StdDraw.setPenColor(StdDraw.WHITE);
            StdDraw.setPenRadius(0.002);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);
        }

        // write status text
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.text(96, 12, "heuristic: " + pf.getHeuristic());
        if(pf.foundPath()) StdDraw.text(256, 12, "path: " + pf.getPathCost());
        else               StdDraw.text(256, 12, "no path found");
        StdDraw.text(512-96, 12, "searched: " + pf.getSearchSize() + " (" + (int)(100.0f * pf.getSearchSize() / (N*N)) + "%)");
    }
}

--[ 2019.11.11.15.55.14.170.0 ]--
InitFile: /.cos265


--[ 2019.11.11.15.55.14.173.0 ]--
InitFile: /src/Coord.java
/**
 * Coordinates is an immutable type that store the tuple (i, j)
 */
public final class Coord {
    private final int i;
    private final int j;

    public Coord(int i, int j) {
        this.i = i;
        this.j = j;
    }

    public int getI() { return i; }
    public int getJ() { return j; }

    public boolean isInBounds(int minI, int minJ, int maxI, int maxJ) {
        return i >= minI && j >= minJ && i <= maxI && j <= maxJ;
    }
    public boolean isInBounds(Coord min, Coord max) {
        return i >= min.i && i <= max.i && j >= min.j && j <= max.j;
    }

    public Coord add(int addI, int addJ) {
        return new Coord(i + addI, j + addJ);
    }
    public Coord add(Coord that) { return new Coord(i + that.i, j + that.j); }

    public String toString() { return "(" + i + "," + j + ")"; }

    public boolean equals(Object o) {
        if(this == o) return true;
        if(o == null) return false;
        if(o.getClass() != this.getClass()) return false;
        Coord that = (Coord) o;
        if(this.i != that.i) return false;
        if(this.j != that.j) return false;
        return true;
    }
}

--[ 2019.11.11.15.55.14.176.0 ]--
InitFile: /P04_Pathfinding.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/heightmaps" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.11.11.15.55.14.178.0 ]--
InitFile: /src/TerrainEditor.java
/**
 * The following class provides some simple terrain editing functions.
 */
public class TerrainEditor {
    private static float rndRadius(float d) {
        return (float)StdRandom.uniform(-d,d);
    }

    private static float getFractalHeight(int i, int j, float dh, Terrain terrain, boolean[] isset) {
        int N = terrain.getN();
        dh = Math.max(-64, Math.min(255+64, dh));   // allow the height to go just a bit out of range
        if(!isset[i + j * N]) {
            isset[i + j * N] = true;
            terrain.setHeight(i, j, dh);
        }
        return terrain.getHeight(i,j);
    }

    private static void setFractalHeights(int i0, int j0, int i1, int j1, Terrain terrain, boolean[] isset) {
        int id = i1-i0;
        int jd = j1-j0;
        int i01 = (i0+i1)/2;
        int j01 = (j0+j1)/2;

        if(id <= 1 && jd <= 1) return;

        float h00 = getFractalHeight(i0,j0,32,terrain,isset);
        float h01 = getFractalHeight(i0,j1,32,terrain,isset);
        float h10 = getFractalHeight(i1,j0,32,terrain,isset);
        float h11 = getFractalHeight(i1,j1,32,terrain,isset);

        float d = (float)(Math.sqrt((i1-i0)*(i1-i0) + (j1-j0)*(j1-j0)) * 0.5);

        float d0001 = (h00 + h01) / 2 + rndRadius(d);
        float d0010 = (h00 + h10) / 2 + rndRadius(d);
        float d1101 = (h11 + h01) / 2 + rndRadius(d);
        float d1110 = (h11 + h10) / 2 + rndRadius(d);

        float h0001 = getFractalHeight(i0, j01, d0001, terrain,isset);
        float h0010 = getFractalHeight(i01, j0, d0010, terrain,isset);
        float h1101 = getFractalHeight(i01, j1, d1101, terrain,isset);
        float h1110 = getFractalHeight(i1, j01, d1110, terrain,isset);

        float dm = (float)((h0001 + h0010 + h1101 + h1110) / 4.0);
        float hm = getFractalHeight(i01, j01, dm, terrain,isset);

        if(id > 1 && jd > 1) {
            setFractalHeights(i0, j0, i01, j01, terrain, isset);
            setFractalHeights(i01, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i01, j1, terrain, isset);
            setFractalHeights(i01, j01, i1, j1, terrain, isset);
        } else if(jd > 1) {
            setFractalHeights(i0, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i1, j1, terrain, isset);
        } else {
            setFractalHeights(i0, j0, i01, j1, terrain, isset);
            setFractalHeights(i01, j0, i1, j1, terrain, isset);
        }
    }

    public static void setFractalHeights(Terrain terrain) {
        int N = terrain.getN();
        boolean[] isset = new boolean[N*N];
        setFractalHeights(0, 0, N - 1, N - 1, terrain, isset);
    }

    public static void smoothHeights(Terrain terrain) {
        int N = terrain.getN();
        int radius = (int)Math.ceil(Math.sqrt(N*N/2.0f));
        smoothHeights(N/2, N/2, radius, false, terrain);
    }

    public static void smoothHeights(int ic, int jc, int radius, boolean fallOff, Terrain terrain) {
        final int N = terrain.getN();
        final int w = 2*radius+1;
        float[] s = new float[w*w];
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;

                float m = computeEffect(i, j, ic, jc, radius, fallOff, N);
                if(m <= 0.0000001) {
                    s[sidx] = terrain.getHeight(i,j);
                    continue;
                }
                float h = 0;
                int c = 0;
                if(i > 0 && j > 0) {
                    h += terrain.getHeight(i-1,j-1);
                    c += 1;
                }
                if(i < N-1 && j > 0) {
                    h += terrain.getHeight(i+1,j-1);
                    c += 1;
                }
                if(i > 0 && j < N-1) {
                    h += terrain.getHeight(i-1,j+1);
                    c += 1;
                }
                if(i < N-1 && j < N-1) {
                    h += terrain.getHeight(i+1,j+1);
                    c += 1;
                }
                if(i > 0) {
                    h += terrain.getHeight(i-1,j);
                    c += 1;
                }
                if(j > 0) {
                    h += terrain.getHeight(i,j-1);
                    c += 1;
                }
                if(i < N-1) {
                    h += terrain.getHeight(i+1,j);
                    c += 1;
                }
                if(j < N-1) {
                    h += terrain.getHeight(i,j+1);
                    c += 1;
                }
                s[sidx] = (1-m) * terrain.getHeight(i,j) + m * h / c;
            }
        }
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;
                terrain.setHeight(i, j, s[sidx]);
            }
        }
    }

    public static void clampHeights(Terrain terrain) {
        int N = terrain.getN();
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                terrain.setHeight(i, j, Math.max(0, Math.min(255, terrain.getHeight(i, j))));
            }
        }
    }

    private static float computeEffect(int i, int j, int ic, int jc, int radius, boolean fallOff, int N) {
        if(i < 0 || j < 0 || i >= N || j >= N) return 0;
        if(!fallOff) return 1;
        int d2 = (ic-i)*(ic-i)+(jc-j)*(jc-j);
        if(d2 > radius*radius) return 0;
        return ((float)radius - (float)Math.sqrt(d2)) / (float)radius;
    }

    public static void addHeight(int i, int j, int radius, float add, Terrain terrain) {
        final int N = terrain.getN();
        for(int ja = -radius; ja <= radius; ja++) {
            int r = j + ja;
            if(r < 0 || r >= N) continue;
            for(int ia = -radius; ia <= radius; ia++) {
                int c = i + ia;
                if(c < 0 || c >= N) continue;
                float v = add * computeEffect(c, r, i, j, radius, true, N);
                float h = terrain.getHeight(c, r) + v;
                h = Math.max(0, Math.min(255, h));
                terrain.setHeight(c, r, h);
            }
        }
    }
}

--[ 2019.11.11.15.55.14.181.0 ]--
InitFile: /src/Pathfinder.java
import java.lang.IndexOutOfBoundsException;
import java.lang.IllegalArgumentException;
import java.util.Iterator;

/**
 * Pathfinder uses A* search to find a near optimal path
 * between to locations with given terrain.
 */

public class Pathfinder {

    private Coord start;
    private Coord end;
    private float heuristic;
    private boolean pathFound;
    private Stack<Coord> s;
    private Terrain terrain;
    private Boolean[][] board;
    private int runningCost;

    /**
     * PFNode will be the key for MinPQ (used in computePath())
     */
    private class PFNode implements Comparable<PFNode> {
        Coord loc;
        PFNode fromNode;
        // loc: the location of the PFNode
        // fromNode: how did we get here? (linked list back to start)
        public PFNode(Coord loc, PFNode fromNode) {
            this.loc = loc;
            this.fromNode = fromNode;

        }

        // compares this with that, used to find minimum cost PFNode
        public int compareTo(PFNode that) {
            if(this.getCost(heuristic) < that.getCost(heuristic)) return -1;
            else if (this.getCost(heuristic) > that.getCost(heuristic)) return 1;
            return 0;
        }

        // returns the cost to travel from starting point to this
        // via the fromNode chain
        public float getCost(float heuristic) {
            float cost;
            if(this.fromNode == null){
                return 0;
            }
            cost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);

            return cost;
        }

        // returns if this PFNode is not marked invalid
        public boolean isValid() {
            return false;
        }

        // marks the PFNode as invalid
        public void invalidate() {
        }

        // returns if the PFNode is marked as used
        public boolean isUsed() {
            return true;
        }

        // marks the PFNode as used
        public void use() { }

        // returns an Iterable of PFNodes that surround this
        public Iterable<PFNode> neighbors() {
            Stack<PFNode> s = new Stack<>();
            s.push(new PFNode(new Coord(loc.getI() + 1, loc.getJ()), this));
            s.push(new PFNode(new Coord(loc.getI() - 1, loc.getJ()), this));
            s.push(new PFNode(new Coord(loc.getI() , loc.getJ() + 1), this));
            s.push(new PFNode(new Coord(loc.getI(), loc.getJ() - 1), this));
            return s;
        }

        public Coord getLoc(){
            return loc;
        }

        public PFNode getFromNode() {
            return fromNode;
        }
    }

    public Pathfinder(Terrain terrain) {
        this.terrain = terrain;
    }

    public void setPathStart(Coord loc) {
        start = loc;
    }

    public Coord getPathStart() {
        return start;
    }

    public void setPathEnd(Coord loc) {
        end = loc;
    }

    public Coord getPathEnd() {
        return end;
    }

    public void setHeuristic(float v)
    {
        heuristic = v;
    }

    public float getHeuristic() {
        return heuristic;
    }

    public void resetPath() {
    }

    public void computePath() {


        //Initialize the board and then print the current state of it
        board = new Boolean[terrain.getN()][terrain.getN()];
        for(int i = 0; i < terrain.getN(); i++){
            for(int j = 0; j < terrain.getN(); j++){
                board[i][j] = false;
                //System.out.print(board[i][j] + " ");
            }
            //System.out.println();
        }


        s = new Stack<>();
        MinPQ<PFNode> pfQueue = new MinPQ<>();
        PFNode begin = new PFNode(start, null);

        pfQueue.insert(begin);


        while(!pfQueue.min().loc.equals(end)){
            begin = pfQueue.delMin();
            if(board[begin.loc.getJ()][begin.loc.getJ()] == true){
                continue;
            }
            board[begin.loc.getJ()][begin.loc.getI()] = true;
            for(PFNode p : begin.neighbors()){
                pfQueue.insert(p);
            }
            if(pfQueue.min().loc.equals(end)){
                PFNode cur = pfQueue.min();
                while(cur.fromNode != null){
                    s.push(cur.loc);
                    cur = cur.fromNode;
                }
            }

        }











        //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerException
        //s.push(start);
        //s.push(end);


        pathFound = true;
    }

    public boolean foundPath() {
        return pathFound;
    }

    public float getPathCost() {
        return 0;
    }

    public int getSearchSize() {
        return 0;
    }

    public Iterable<Coord> getPathSolution() {

        //Return a stack of coordinates for the visualizer
        return s;
    }

    public boolean wasSearched(Coord loc) {
        return false;
    }
}

--[ 2019.11.11.15.55.34.428.0 ]--
:/src/Pathfinder.java
+ 150                 
--[ 2019.11.11.16.09.10.131.0 ]--
r 150                 i
--[ 2019.11.11.16.09.10.189.0 ]--
r 150                 if
--[ 2019.11.11.16.09.12.640.0 ]--
r 150                 if 
--[ 2019.11.11.16.09.12.660.0 ]--
r 150                 if
--[ 2019.11.11.16.09.12.985.0 ]--
r 150                 if()
--[ 2019.11.11.16.09.24.281.0 ]--
r 150                 if
--[ 2019.11.11.16.09.24.935.0 ]--
r 150                 if()
--[ 2019.11.11.16.09.25.310.0 ]--
r 150                 if( )
--[ 2019.11.11.16.09.25.358.0 ]--
r 150                 if()
--[ 2019.11.11.16.09.35.635.0 ]--
r 150                 if(
--[ 2019.11.11.16.09.36.046.0 ]--
r 150                 if(()
--[ 2019.11.11.16.09.39.711.0 ]--
r 150                 if((p)
--[ 2019.11.11.16.09.39.875.0 ]--
r 150                 if((p.)
--[ 2019.11.11.16.09.40.081.0 ]--
r 150                 if((p.l)
--[ 2019.11.11.16.09.40.272.0 ]--
r 150                 if((p.lo)
--[ 2019.11.11.16.09.40.749.0 ]--
r 150                 if((p.loc)
--[ 2019.11.11.16.09.40.997.0 ]--
r 150                 if((p.loc.)
--[ 2019.11.11.16.09.41.744.0 ]--
r 150                 if((p.loc.g)
--[ 2019.11.11.16.09.41.829.0 ]--
r 150                 if((p.loc.ge)
--[ 2019.11.11.16.09.41.942.0 ]--
r 150                 if((p.loc.get)
--[ 2019.11.11.16.09.42.422.0 ]--
r 150                 if((p.loc.get )
--[ 2019.11.11.16.09.42.469.0 ]--
r 150                 if((p.loc.get)
--[ 2019.11.11.16.09.42.981.0 ]--
r 150                 if((p.loc.get())
--[ 2019.11.11.16.09.43.062.0 ]--
r 150                 if((p.loc.get()))
--[ 2019.11.11.16.09.43.433.0 ]--
r 150                 if((p.loc.get())
--[ 2019.11.11.16.09.43.517.0 ]--
r 150                 if((p.loc.get))
--[ 2019.11.11.16.09.44.616.0 ]--
r 150                 if((p.loc.getJ))
--[ 2019.11.11.16.09.45.449.0 ]--
r 150                 if((p.loc.getJ()))
--[ 2019.11.11.16.09.46.054.0 ]--
r 150                 if((p.loc.getJ() ))
--[ 2019.11.11.16.09.46.305.0 ]--
r 150                 if((p.loc.getJ() >))
--[ 2019.11.11.16.09.48.149.0 ]--
r 150                 if((p.loc.getJ() >=))
--[ 2019.11.11.16.09.48.262.0 ]--
r 150                 if((p.loc.getJ() >= ))
--[ 2019.11.11.16.09.48.557.0 ]--
r 150                 if((p.loc.getJ() >= 0))
--[ 2019.11.11.16.09.53.880.0 ]--
r 150                 if((p.loc.getJ() >= 0)
--[ 2019.11.11.16.09.56.063.0 ]--
r 150                 if(p.loc.getJ() >= 0)
--[ 2019.11.11.16.09.58.822.0 ]--
r 150                 if(p.loc.getJ() >= 0 )
--[ 2019.11.11.16.09.59.286.0 ]--
r 150                 if(p.loc.getJ() >= 0 &)
--[ 2019.11.11.16.09.59.405.0 ]--
r 150                 if(p.loc.getJ() >= 0 &&)
--[ 2019.11.11.16.09.59.853.0 ]--
r 150                 if(p.loc.getJ() >= 0 && )
--[ 2019.11.11.16.10.00.973.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p)
--[ 2019.11.11.16.10.01.128.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.)
--[ 2019.11.11.16.10.01.382.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.l)
--[ 2019.11.11.16.10.01.497.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.lo)
--[ 2019.11.11.16.10.01.634.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc)
--[ 2019.11.11.16.10.02.880.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.)
--[ 2019.11.11.16.10.03.251.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.g)
--[ 2019.11.11.16.10.04.220.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ)
--[ 2019.11.11.16.10.04.237.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ())
--[ 2019.11.11.16.10.08.124.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() )
--[ 2019.11.11.16.10.08.302.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() <)
--[ 2019.11.11.16.10.08.405.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < )
--[ 2019.11.11.16.10.09.452.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < t)
--[ 2019.11.11.16.10.09.541.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < te)
--[ 2019.11.11.16.10.09.617.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < ter)
--[ 2019.11.11.16.10.09.744.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terr)
--[ 2019.11.11.16.10.09.831.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terra)
--[ 2019.11.11.16.10.09.935.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrai)
--[ 2019.11.11.16.10.09.992.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain)
--[ 2019.11.11.16.10.10.152.0 ]--
+ 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain
r 151                 )
--[ 2019.11.11.16.10.10.302.0 ]--
r 151                 .)
--[ 2019.11.11.16.10.10.395.0 ]--
r 151                 .g)
--[ 2019.11.11.16.10.10.446.0 ]--
r 151                 .ge)
--[ 2019.11.11.16.10.10.895.0 ]--
r 151                 .g)
--[ 2019.11.11.16.10.10.964.0 ]--
r 151                 .)
--[ 2019.11.11.16.10.11.051.0 ]--
r 151                 )
--[ 2019.11.11.16.10.11.309.0 ]--
- 150
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain)
--[ 2019.11.11.16.10.11.389.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrai)
--[ 2019.11.11.16.10.12.230.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain)
--[ 2019.11.11.16.10.12.414.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.)
--[ 2019.11.11.16.10.12.508.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.g)
--[ 2019.11.11.16.10.13.103.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.)
--[ 2019.11.11.16.10.13.200.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain)
--[ 2019.11.11.16.10.13.534.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.)
--[ 2019.11.11.16.10.14.417.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN)
--[ 2019.11.11.16.10.14.428.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN())
--[ 2019.11.11.16.10.15.472.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() )
--[ 2019.11.11.16.10.15.973.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() &)
--[ 2019.11.11.16.10.16.093.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() &&)
--[ 2019.11.11.16.10.16.351.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && )
--[ 2019.11.11.16.10.19.941.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p)
--[ 2019.11.11.16.10.20.079.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.)
--[ 2019.11.11.16.10.20.248.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.l)
--[ 2019.11.11.16.10.20.361.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.lo)
--[ 2019.11.11.16.10.20.456.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc)
--[ 2019.11.11.16.10.20.517.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.)
--[ 2019.11.11.16.10.20.697.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.g)
--[ 2019.11.11.16.10.20.784.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.ge)
--[ 2019.11.11.16.10.20.885.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.get)
--[ 2019.11.11.16.10.21.402.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getJ)
--[ 2019.11.11.16.10.21.411.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getJ())
--[ 2019.11.11.16.10.22.721.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.get())
--[ 2019.11.11.16.10.22.866.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI())
--[ 2019.11.11.16.10.24.454.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() )
--[ 2019.11.11.16.10.26.451.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() <)
--[ 2019.11.11.16.10.26.692.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < )
--[ 2019.11.11.16.10.27.860.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < t)
--[ 2019.11.11.16.10.27.927.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < te)
--[ 2019.11.11.16.10.28.040.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < ter)
--[ 2019.11.11.16.10.28.562.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain)
--[ 2019.11.11.16.10.28.726.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.)
--[ 2019.11.11.16.10.29.381.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN)
--[ 2019.11.11.16.10.29.393.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN())
--[ 2019.11.11.16.10.30.061.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() )
--[ 2019.11.11.16.10.30.501.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() &)
--[ 2019.11.11.16.10.30.628.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() &&)
--[ 2019.11.11.16.10.30.749.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && )
--[ 2019.11.11.16.10.33.309.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p)
--[ 2019.11.11.16.10.33.469.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p,)
--[ 2019.11.11.16.10.33.638.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p,l)
--[ 2019.11.11.16.10.33.795.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p,lo)
--[ 2019.11.11.16.10.34.064.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p,l)
--[ 2019.11.11.16.10.34.159.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p,)
--[ 2019.11.11.16.10.34.269.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p)
--[ 2019.11.11.16.10.34.721.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p.)
--[ 2019.11.11.16.10.34.835.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p.l)
--[ 2019.11.11.16.10.34.944.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p.lo)
--[ 2019.11.11.16.10.35.040.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p.loc)
--[ 2019.11.11.16.10.35.119.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p.loc.)
--[ 2019.11.11.16.10.35.334.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p.loc.g)
--[ 2019.11.11.16.10.37.447.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p.loc.getI)
--[ 2019.11.11.16.10.37.459.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p.loc.getI())
--[ 2019.11.11.16.10.38.200.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p.loc.getI() )
--[ 2019.11.11.16.10.38.291.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p.loc.getI() >)
--[ 2019.11.11.16.10.38.413.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p.loc.getI() >=)
--[ 2019.11.11.16.10.38.853.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p.loc.getI() >= )
--[ 2019.11.11.16.10.38.963.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p.loc.getI() >= 0)
--[ 2019.11.11.16.10.40.700.0 ]--
r 150                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p.loc.getI() >= 0){
--[ 2019.11.11.16.10.40.945.0 ]--
+ 151 
+ 152 }
--[ 2019.11.11.16.10.40.967.0 ]--
r 152                 }
--[ 2019.11.11.16.10.40.993.0 ]--
r 151                     
--[ 2019.11.11.16.10.46.253.0 ]--
r 152                 pfQueue.insert(p);
r 153                 }
--[ 2019.11.11.16.10.46.268.0 ]--
r 151 
r 152                     pfQueue.insert(p);
--[ 2019.11.11.16.10.47.213.0 ]--
r 151                     pfQueue.insert(p);
r 152 
--[ 2019.11.11.16.10.49.535.0 ]--
+ 150                 
--[ 2019.11.11.16.10.49.704.0 ]--
r 150                 /
--[ 2019.11.11.16.10.49.788.0 ]--
r 150                 //
--[ 2019.11.11.16.10.50.190.0 ]--
r 150                 //O
--[ 2019.11.11.16.10.50.313.0 ]--
r 150                 //On
--[ 2019.11.11.16.10.50.422.0 ]--
r 150                 //Onl
--[ 2019.11.11.16.10.50.539.0 ]--
r 150                 //Only
--[ 2019.11.11.16.10.50.597.0 ]--
r 150                 //Only 
--[ 2019.11.11.16.10.50.984.0 ]--
r 150                 //Only a
--[ 2019.11.11.16.10.51.127.0 ]--
r 150                 //Only ad
--[ 2019.11.11.16.10.51.329.0 ]--
r 150                 //Only ad 
--[ 2019.11.11.16.10.51.691.0 ]--
r 150                 //Only ad
--[ 2019.11.11.16.10.51.758.0 ]--
r 150                 //Only add
--[ 2019.11.11.16.10.51.828.0 ]--
r 150                 //Only add 
--[ 2019.11.11.16.10.51.935.0 ]--
r 150                 //Only add  t
--[ 2019.11.11.16.10.51.990.0 ]--
r 150                 //Only add  th
--[ 2019.11.11.16.10.52.057.0 ]--
r 150                 //Only add  the
--[ 2019.11.11.16.10.52.157.0 ]--
r 150                 //Only add  the 
--[ 2019.11.11.16.10.52.237.0 ]--
r 150                 //Only add  the n
--[ 2019.11.11.16.10.52.317.0 ]--
r 150                 //Only add  the ne
--[ 2019.11.11.16.10.52.405.0 ]--
r 150                 //Only add  the nei
--[ 2019.11.11.16.10.52.500.0 ]--
r 150                 //Only add  the neig
--[ 2019.11.11.16.10.52.767.0 ]--
r 150                 //Only add  the 
--[ 2019.11.11.16.10.52.860.0 ]--
r 150                 //Only add  
--[ 2019.11.11.16.10.52.986.0 ]--
r 150                 //Only 
--[ 2019.11.11.16.10.53.833.0 ]--
r 150                 //Only add  the neig
--[ 2019.11.11.16.10.54.310.0 ]--
r 150                 //Only add  the 
--[ 2019.11.11.16.10.54.507.0 ]--
r 150                 //Only add  
--[ 2019.11.11.16.10.55.016.0 ]--
r 150                 //Only add 
--[ 2019.11.11.16.10.55.189.0 ]--
r 150                 //Only add t
--[ 2019.11.11.16.10.55.254.0 ]--
r 150                 //Only add th
--[ 2019.11.11.16.10.55.332.0 ]--
r 150                 //Only add the
--[ 2019.11.11.16.10.55.421.0 ]--
r 150                 //Only add the 
--[ 2019.11.11.16.10.55.478.0 ]--
r 150                 //Only add the n
--[ 2019.11.11.16.10.55.581.0 ]--
r 150                 //Only add the ne
--[ 2019.11.11.16.10.55.665.0 ]--
r 150                 //Only add the nei
--[ 2019.11.11.16.10.55.757.0 ]--
r 150                 //Only add the neig
--[ 2019.11.11.16.10.55.908.0 ]--
r 150                 //Only add the neigh
--[ 2019.11.11.16.10.56.318.0 ]--
r 150                 //Only add the neighb
--[ 2019.11.11.16.10.56.391.0 ]--
r 150                 //Only add the neighbo
--[ 2019.11.11.16.10.56.477.0 ]--
r 150                 //Only add the neighbor
--[ 2019.11.11.16.10.56.876.0 ]--
r 150                 //Only add the neighbor 
--[ 2019.11.11.16.10.57.024.0 ]--
r 150                 //Only add the neighbor t
--[ 2019.11.11.16.10.57.080.0 ]--
r 150                 //Only add the neighbor to
--[ 2019.11.11.16.10.57.109.0 ]--
r 150                 //Only add the neighbor to 
--[ 2019.11.11.16.10.57.180.0 ]--
r 150                 //Only add the neighbor to t
--[ 2019.11.11.16.10.57.260.0 ]--
r 150                 //Only add the neighbor to th
--[ 2019.11.11.16.10.57.309.0 ]--
r 150                 //Only add the neighbor to the
--[ 2019.11.11.16.10.57.421.0 ]--
r 150                 //Only add the neighbor to the 
--[ 2019.11.11.16.10.57.518.0 ]--
r 150                 //Only add the neighbor to the q
--[ 2019.11.11.16.10.57.669.0 ]--
r 150                 //Only add the neighbor to the qu
--[ 2019.11.11.16.10.57.773.0 ]--
r 150                 //Only add the neighbor to the que
--[ 2019.11.11.16.10.57.876.0 ]--
r 150                 //Only add the neighbor to the queu
--[ 2019.11.11.16.10.57.921.0 ]--
r 150                 //Only add the neighbor to the queue
--[ 2019.11.11.16.10.58.752.0 ]--
r 150                 //Only add the neighbor to the 
--[ 2019.11.11.16.10.58.844.0 ]--
r 150                 //Only add the neighbor to 
--[ 2019.11.11.16.10.58.995.0 ]--
r 150                 //Only add the neighbor 
--[ 2019.11.11.16.10.59.344.0 ]--
r 150                 //Only add the neighbor
--[ 2019.11.11.16.10.59.461.0 ]--
r 150                 //Only add the neighbors
--[ 2019.11.11.16.10.59.548.0 ]--
r 150                 //Only add the neighbors 
--[ 2019.11.11.16.10.59.650.0 ]--
r 150                 //Only add the neighbors t
--[ 2019.11.11.16.10.59.741.0 ]--
r 150                 //Only add the neighbors to
--[ 2019.11.11.16.10.59.812.0 ]--
r 150                 //Only add the neighbors to 
--[ 2019.11.11.16.11.00.050.0 ]--
r 150                 //Only add the neighbors to t
--[ 2019.11.11.16.11.00.101.0 ]--
r 150                 //Only add the neighbors to th
--[ 2019.11.11.16.11.00.181.0 ]--
r 150                 //Only add the neighbors to the
--[ 2019.11.11.16.11.00.267.0 ]--
r 150                 //Only add the neighbors to the 
--[ 2019.11.11.16.11.00.343.0 ]--
r 150                 //Only add the neighbors to the q
--[ 2019.11.11.16.11.00.457.0 ]--
r 150                 //Only add the neighbors to the qu
--[ 2019.11.11.16.11.00.533.0 ]--
r 150                 //Only add the neighbors to the que
--[ 2019.11.11.16.11.00.597.0 ]--
r 150                 //Only add the neighbors to the queu
--[ 2019.11.11.16.11.00.669.0 ]--
r 150                 //Only add the neighbors to the queue
--[ 2019.11.11.16.11.00.792.0 ]--
r 150                 //Only add the neighbors to the queue 
--[ 2019.11.11.16.11.00.869.0 ]--
r 150                 //Only add the neighbors to the queue i
--[ 2019.11.11.16.11.00.991.0 ]--
r 150                 //Only add the neighbors to the queue if
--[ 2019.11.11.16.11.01.092.0 ]--
r 150                 //Only add the neighbors to the queue if 
--[ 2019.11.11.16.11.01.176.0 ]--
r 150                 //Only add the neighbors to the queue if t
--[ 2019.11.11.16.11.01.213.0 ]--
r 150                 //Only add the neighbors to the queue if th
--[ 2019.11.11.16.11.01.335.0 ]--
r 150                 //Only add the neighbors to the queue if the
--[ 2019.11.11.16.11.01.365.0 ]--
r 150                 //Only add the neighbors to the queue if they
--[ 2019.11.11.16.11.01.605.0 ]--
r 150                 //Only add the neighbors to the queue if they'
--[ 2019.11.11.16.11.01.644.0 ]--
r 150                 //Only add the neighbors to the queue if they'r
--[ 2019.11.11.16.11.01.668.0 ]--
r 150                 //Only add the neighbors to the queue if they're
--[ 2019.11.11.16.11.01.751.0 ]--
r 150                 //Only add the neighbors to the queue if they're 
--[ 2019.11.11.16.11.01.876.0 ]--
r 150                 //Only add the neighbors to the queue if they're i
--[ 2019.11.11.16.11.01.927.0 ]--
r 150                 //Only add the neighbors to the queue if they're in
--[ 2019.11.11.16.11.02.016.0 ]--
r 150                 //Only add the neighbors to the queue if they're in 
--[ 2019.11.11.16.11.02.086.0 ]--
r 150                 //Only add the neighbors to the queue if they're in r
--[ 2019.11.11.16.11.02.247.0 ]--
r 150                 //Only add the neighbors to the queue if they're in ra
--[ 2019.11.11.16.11.02.341.0 ]--
r 150                 //Only add the neighbors to the queue if they're in ran
--[ 2019.11.11.16.11.02.433.0 ]--
r 150                 //Only add the neighbors to the queue if they're in rang
--[ 2019.11.11.16.11.02.463.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range
--[ 2019.11.11.16.11.03.684.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range 
--[ 2019.11.11.16.11.04.077.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range
--[ 2019.11.11.16.11.04.354.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range 
--[ 2019.11.11.16.11.05.981.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range  
--[ 2019.11.11.16.11.06.061.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range 
--[ 2019.11.11.16.11.07.276.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range o
--[ 2019.11.11.16.11.07.409.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of
--[ 2019.11.11.16.11.07.492.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of 
--[ 2019.11.11.16.11.07.565.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of t
--[ 2019.11.11.16.11.07.644.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of th
--[ 2019.11.11.16.11.07.742.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of the
--[ 2019.11.11.16.11.07.956.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of the 
--[ 2019.11.11.16.11.08.475.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of 
--[ 2019.11.11.16.11.08.581.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range 
--[ 2019.11.11.16.11.09.236.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range o
--[ 2019.11.11.16.11.09.310.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of
--[ 2019.11.11.16.11.09.380.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of 
--[ 2019.11.11.16.11.09.458.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of t
--[ 2019.11.11.16.11.09.514.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of th
--[ 2019.11.11.16.11.09.767.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of 
--[ 2019.11.11.16.11.09.885.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range 
--[ 2019.11.11.16.11.11.045.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range o
--[ 2019.11.11.16.11.11.103.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of
--[ 2019.11.11.16.11.11.154.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of 
--[ 2019.11.11.16.11.11.239.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of t
--[ 2019.11.11.16.11.11.279.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of th
--[ 2019.11.11.16.11.11.335.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of the
--[ 2019.11.11.16.11.11.386.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of the 
--[ 2019.11.11.16.11.11.468.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of the b
--[ 2019.11.11.16.11.11.589.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of the ba
--[ 2019.11.11.16.11.11.624.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of the bao
--[ 2019.11.11.16.11.11.676.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of the baor
--[ 2019.11.11.16.11.11.822.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of the baord
--[ 2019.11.11.16.11.12.451.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of the 
--[ 2019.11.11.16.11.12.557.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of the b
--[ 2019.11.11.16.11.12.645.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of the bo
--[ 2019.11.11.16.11.12.693.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of the boa
--[ 2019.11.11.16.11.12.776.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of the boar
--[ 2019.11.11.16.11.12.904.0 ]--
r 150                 //Only add the neighbors to the queue if they're in range of the board
--[ 2019.11.11.16.11.19.964.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.11.39.905.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.16.45.630.0 ]--
+ 125         
--[ 2019.11.11.16.16.47.344.0 ]--
+ 121     
--[ 2019.11.11.16.16.47.624.0 ]--
+ 121     
--[ 2019.11.11.16.16.48.214.0 ]--
r 122     p
--[ 2019.11.11.16.16.48.271.0 ]--
r 122     pu
--[ 2019.11.11.16.16.48.374.0 ]--
r 122     pub
--[ 2019.11.11.16.16.48.397.0 ]--
r 122     publ
--[ 2019.11.11.16.16.48.539.0 ]--
r 122     publi
--[ 2019.11.11.16.16.48.634.0 ]--
r 122     public
--[ 2019.11.11.16.16.48.748.0 ]--
r 122     public 
--[ 2019.11.11.16.16.48.815.0 ]--
r 122     public v
--[ 2019.11.11.16.16.49.427.0 ]--
r 122     public vo
--[ 2019.11.11.16.16.49.508.0 ]--
r 122     public voi
--[ 2019.11.11.16.16.49.560.0 ]--
r 122     public void
--[ 2019.11.11.16.16.49.659.0 ]--
r 122     public void 
--[ 2019.11.11.16.16.49.980.0 ]--
r 122     public void ()
--[ 2019.11.11.16.16.50.161.0 ]--
r 122     public void (p)
--[ 2019.11.11.16.16.50.417.0 ]--
r 122     public void ()
--[ 2019.11.11.16.16.50.568.0 ]--
r 122     public void 
--[ 2019.11.11.16.16.51.060.0 ]--
r 122     public void p
--[ 2019.11.11.16.16.51.147.0 ]--
r 122     public void pr
--[ 2019.11.11.16.16.51.207.0 ]--
r 122     public void proi
--[ 2019.11.11.16.16.51.238.0 ]--
r 122     public void proin
--[ 2019.11.11.16.16.51.342.0 ]--
r 122     public void proint
--[ 2019.11.11.16.16.51.695.0 ]--
r 122     public void proin
--[ 2019.11.11.16.16.51.797.0 ]--
r 122     public void proi
--[ 2019.11.11.16.16.51.908.0 ]--
r 122     public void pro
--[ 2019.11.11.16.16.52.325.0 ]--
r 122     public void pr
--[ 2019.11.11.16.16.52.476.0 ]--
r 122     public void pri
--[ 2019.11.11.16.16.52.531.0 ]--
r 122     public void prin
--[ 2019.11.11.16.16.52.588.0 ]--
r 122     public void print
--[ 2019.11.11.16.16.52.993.0 ]--
r 122     public void printB
--[ 2019.11.11.16.16.53.094.0 ]--
r 122     public void printBo
--[ 2019.11.11.16.16.53.157.0 ]--
r 122     public void printBoa
--[ 2019.11.11.16.16.53.230.0 ]--
r 122     public void printBoar
--[ 2019.11.11.16.16.53.384.0 ]--
r 122     public void printBoard
--[ 2019.11.11.16.16.53.630.0 ]--
r 122     public void printBoard()
--[ 2019.11.11.16.16.53.872.0 ]--
r 122     public void printBoard(){}
--[ 2019.11.11.16.16.54.054.0 ]--
+ 122     public void printBoard(){
r 123     }
--[ 2019.11.11.16.16.54.083.0 ]--
+ 123         
--[ 2019.11.11.16.16.54.334.0 ]--
+ 123         for(int i = 0; i < terrain.getN(); i++){
+ 124             for(int j = 0; j < terrain.getN(); j++){
+ 125                 board[i][j] = false;
+ 126                 //System.out.print(board[i][j] + " ");
+ 127             }
+ 128             //System.out.println();
r 129         }
--[ 2019.11.11.16.17.03.775.0 ]--
r 125                 
--[ 2019.11.11.16.17.03.938.0 ]--
- 125
--[ 2019.11.11.16.17.06.983.0 ]--
r 125                 /System.out.print(board[i][j] + " ");
--[ 2019.11.11.16.17.07.081.0 ]--
r 125                 System.out.print(board[i][j] + " ");
--[ 2019.11.11.16.17.08.850.0 ]--
r 127             /System.out.println();
--[ 2019.11.11.16.17.08.941.0 ]--
r 127             System.out.println();
--[ 2019.11.11.16.17.22.314.0 ]--
+ 159             
--[ 2019.11.11.16.17.22.838.0 ]--
r 159             p
--[ 2019.11.11.16.17.22.904.0 ]--
r 159             pr
--[ 2019.11.11.16.17.22.983.0 ]--
r 159             pri
--[ 2019.11.11.16.17.23.031.0 ]--
r 159             prin
--[ 2019.11.11.16.17.23.111.0 ]--
r 159             print
--[ 2019.11.11.16.17.23.483.0 ]--
r 159             printBoard
--[ 2019.11.11.16.17.23.499.0 ]--
r 159             printBoard()
--[ 2019.11.11.16.17.23.510.0 ]--
r 159             printBoard();
--[ 2019.11.11.16.17.25.217.0 ]--
r 121 
r 134 
--[ 2019.11.11.16.17.26.602.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.18.22.789.0 ]--
r 159 
--[ 2019.11.11.16.18.22.968.0 ]--
- 159
--[ 2019.11.11.16.18.25.868.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.25.54.974.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.27.10.525.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.27.36.906.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.32.08.049.0 ]--
+ 120     }
+ 121 
+ 122     public void printBoard(){
+ 123         for(int i = 0; i < terrain.getN(); i++){
+ 124             for(int j = 0; j < terrain.getN(); j++){
+ 125                 System.out.print(board[i][j] + " ");
+ 126             }
+ 127             System.out.println();
+ 128         }
+ 132 
r 155             if(board[begin.loc.getJ()][begin.loc.getJ()] == true){
+ 160                 //Only add the neighbors to the queue if they're in range of the board
+ 161                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p.loc.getI() >= 0){
+ 162                     pfQueue.insert(p);
+ 163 
r 164                 }
--[ 2019.11.11.16.32.26.157.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.32.32.853.0 ]--
r 155             if(board[begin.loc.getJ()][begin.loc.getJ()] ){
--[ 2019.11.11.16.32.32.947.0 ]--
r 155             if(board[begin.loc.getJ()][begin.loc.getJ()]){
--[ 2019.11.11.16.32.41.827.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.33.28.111.0 ]--
r 187         /\s.push(start);
--[ 2019.11.11.16.33.28.182.0 ]--
r 187         /s.push(start);
--[ 2019.11.11.16.33.29.058.0 ]--
r 187         s.push(start);
--[ 2019.11.11.16.33.30.297.0 ]--
r 188         s.push(end);
--[ 2019.11.11.16.33.33.610.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.33.41.894.0 ]--
r 188         /s.push(end);
--[ 2019.11.11.16.33.41.997.0 ]--
r 188         //s.push(end);
--[ 2019.11.11.16.33.42.786.0 ]--
r 187         /s.push(start);
--[ 2019.11.11.16.33.42.897.0 ]--
r 187         //s.push(start);
--[ 2019.11.11.16.33.57.576.0 ]--
r 145     
--[ 2019.11.11.16.33.57.626.0 ]--
r 145         
--[ 2019.11.11.16.35.04.209.0 ]--
r 155             if(board[begin.loc.getJ()][begin.loc.get()]){
--[ 2019.11.11.16.35.04.394.0 ]--
r 155             if(board[begin.loc.getJ()][begin.loc.getI()]){
--[ 2019.11.11.16.35.07.178.0 ]--
r 145 
--[ 2019.11.11.16.35.09.104.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.37.10.548.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.39.17.444.0 ]--
r 166             if(b.loc.equals(end)){
--[ 2019.11.11.16.39.17.703.0 ]--
r 166             if(bg.loc.equals(end)){
--[ 2019.11.11.16.39.18.017.0 ]--
r 166             if(b.loc.equals(end)){
--[ 2019.11.11.16.39.18.062.0 ]--
r 166             if(be.loc.equals(end)){
--[ 2019.11.11.16.39.18.138.0 ]--
r 166             if(beg.loc.equals(end)){
--[ 2019.11.11.16.39.18.207.0 ]--
r 166             if(begi.loc.equals(end)){
--[ 2019.11.11.16.39.18.279.0 ]--
r 166             if(begin.loc.equals(end)){
--[ 2019.11.11.16.39.21.991.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.40.33.135.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.42.05.068.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.42.15.477.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.42.46.483.0 ]--
r 166             if(p.loc.equals(end)){
--[ 2019.11.11.16.42.46.527.0 ]--
r 166             if(pf.loc.equals(end)){
--[ 2019.11.11.16.42.46.797.0 ]--
r 166             if(pfQ.loc.equals(end)){
--[ 2019.11.11.16.42.47.210.0 ]--
r 166             if(pfQueue.loc.equals(end)){
--[ 2019.11.11.16.42.48.310.0 ]--
r 166             if(pfQueue..loc.equals(end)){
--[ 2019.11.11.16.42.48.685.0 ]--
r 166             if(pfQueue.m.loc.equals(end)){
--[ 2019.11.11.16.42.48.776.0 ]--
r 166             if(pfQueue.mi.loc.equals(end)){
--[ 2019.11.11.16.42.48.855.0 ]--
r 166             if(pfQueue.min.loc.equals(end)){
--[ 2019.11.11.16.42.49.093.0 ]--
r 166             if(pfQueue.min().loc.equals(end)){
--[ 2019.11.11.16.42.55.424.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.43.19.812.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.43.28.665.0 ]--
r 146 
--[ 2019.11.11.16.43.33.201.0 ]--
+ 169                     
--[ 2019.11.11.16.43.33.337.0 ]--
r 169                             s = new Stack<>();
--[ 2019.11.11.16.43.33.365.0 ]--
r 169                     s = new Stack<>();
--[ 2019.11.11.16.43.39.447.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.43.46.013.0 ]--
r 169                     
--[ 2019.11.11.16.43.48.683.0 ]--
+ 167                 
--[ 2019.11.11.16.43.48.880.0 ]--
r 167                 s = new Stack<>();
--[ 2019.11.11.16.43.51.356.0 ]--
r 170 
--[ 2019.11.11.16.43.53.254.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.44.09.884.0 ]--
r 167                 
--[ 2019.11.11.16.44.10.148.0 ]--
- 167
--[ 2019.11.11.16.44.11.988.0 ]--
r 170                     s.push(cur.loc)
--[ 2019.11.11.16.44.12.512.0 ]--
r 170                     s.push(cur.loc);
--[ 2019.11.11.16.44.13.183.0 ]--
- 169
--[ 2019.11.11.16.44.17.655.0 ]--
r 145     
--[ 2019.11.11.16.44.18.916.0 ]--
r 145         
--[ 2019.11.11.16.44.21.747.0 ]--
r 146     
--[ 2019.11.11.16.44.21.914.0 ]--
r 146         
--[ 2019.11.11.16.44.22.313.0 ]--
r 146         s = new Stack<>();
--[ 2019.11.11.16.44.22.326.0 ]--
r 145 
--[ 2019.11.11.16.44.26.181.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.44.55.544.0 ]--
r 146         
--[ 2019.11.11.16.44.57.091.0 ]--
r 154                 begin = pfQueue.delMin();
--[ 2019.11.11.16.44.58.032.0 ]--
r 154             begin = pfQueue.delMin();
--[ 2019.11.11.16.44.59.264.0 ]--
+ 154             
--[ 2019.11.11.16.45.00.061.0 ]--
r 154             s = new Stack<>();
--[ 2019.11.11.16.45.01.707.0 ]--
r 146 
--[ 2019.11.11.16.45.03.586.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.45.08.824.0 ]--
r 154             
--[ 2019.11.11.16.45.09.011.0 ]--
- 154
--[ 2019.11.11.16.45.12.352.0 ]--
+ 147         
--[ 2019.11.11.16.45.12.701.0 ]--
r 147         s = new Stack<>();
--[ 2019.11.11.16.45.20.443.0 ]--
r 19 
--[ 2019.11.11.16.45.20.815.0 ]--
- 19
--[ 2019.11.11.16.45.30.266.0 ]--
r 187         /s.push(start);
--[ 2019.11.11.16.45.30.350.0 ]--
r 187         s.push(start);
--[ 2019.11.11.16.45.32.654.0 ]--
r 188         /s.push(end);
--[ 2019.11.11.16.45.32.729.0 ]--
r 188         s.push(end);
--[ 2019.11.11.16.45.35.787.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.45.50.228.0 ]--
- 167
- 167
- 167
r 167                 
--[ 2019.11.11.16.45.50.727.0 ]--
r 167                 b
--[ 2019.11.11.16.45.50.933.0 ]--
r 167                 br
--[ 2019.11.11.16.45.50.993.0 ]--
r 167                 bre
--[ 2019.11.11.16.45.51.017.0 ]--
r 167                 brea
--[ 2019.11.11.16.45.51.091.0 ]--
r 167                 break
--[ 2019.11.11.16.45.52.006.0 ]--
r 167                     break
--[ 2019.11.11.16.45.52.729.0 ]--
r 167                     break;
--[ 2019.11.11.16.46.02.492.0 ]--
r 167                 break;
--[ 2019.11.11.16.46.02.976.0 ]--
- 166
r 166             if(pfQueue.min().loc.equals(end)){ break;
--[ 2019.11.11.16.46.04.035.0 ]--
+ 166             if(pfQueue.min().loc.equals(end)){ 
r 167                 break;
--[ 2019.11.11.16.46.06.682.0 ]--
r 168                 
--[ 2019.11.11.16.46.06.962.0 ]--
- 168
--[ 2019.11.11.16.46.07.069.0 ]--
r 167                 break
--[ 2019.11.11.16.46.07.758.0 ]--
+ 167                 break;
r 168                 }
--[ 2019.11.11.16.46.08.084.0 ]--
- 166
r 166             if(pfQueue.min().loc.equals(end)){ break;
--[ 2019.11.11.16.46.08.196.0 ]--
+ 166             if(pfQueue.min().loc.equals(end)){
r 167                     break;
--[ 2019.11.11.16.46.08.659.0 ]--
r 167                     break
--[ 2019.11.11.16.46.08.947.0 ]--
r 167                 break
--[ 2019.11.11.16.46.09.207.0 ]--
r 167                 
--[ 2019.11.11.16.46.09.339.0 ]--
+ 167                 PFNode cur = pfQueue.min();
+ 168                 while(cur.fromNode != null){
+ 169                     s.push(cur.loc);
r 170                     cur = cur.fromNode;
--[ 2019.11.11.16.46.14.577.0 ]--
- 167
- 167
- 167
- 167
r 167                 
--[ 2019.11.11.16.46.15.035.0 ]--
- 167
--[ 2019.11.11.16.46.15.593.0 ]--
+ 167                 
--[ 2019.11.11.16.46.15.940.0 ]--
r 167                 b
--[ 2019.11.11.16.46.16.067.0 ]--
r 167                 br
--[ 2019.11.11.16.46.16.125.0 ]--
r 167                 bre
--[ 2019.11.11.16.46.16.152.0 ]--
r 167                 brea
--[ 2019.11.11.16.46.16.203.0 ]--
r 167                 break
--[ 2019.11.11.16.46.16.391.0 ]--
r 167                 break;
--[ 2019.11.11.16.46.22.004.0 ]--
+ 185         
--[ 2019.11.11.16.46.22.155.0 ]--
+ 185         
--[ 2019.11.11.16.46.22.347.0 ]--
+ 186         PFNode cur = pfQueue.min();
+ 187                 while(cur.fromNode != null){
+ 188                     s.push(cur.loc);
+ 189                     cur = cur.fromNode;
r 190                 }
--[ 2019.11.11.16.46.22.366.0 ]--
r 185 
r 187         while(cur.fromNode != null){
r 188             s.push(cur.loc);
r 189             cur = cur.fromNode;
r 190         }
--[ 2019.11.11.16.46.24.672.0 ]--
r 183         /s.push(start);
--[ 2019.11.11.16.46.24.749.0 ]--
r 183         //s.push(start);
--[ 2019.11.11.16.46.25.427.0 ]--
r 184         /s.push(end);
--[ 2019.11.11.16.46.25.502.0 ]--
r 184         //s.push(end);
--[ 2019.11.11.16.46.29.400.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.46.54.113.0 ]--
+ 215         
--[ 2019.11.11.16.46.55.030.0 ]--
- 215
--[ 2019.11.11.16.46.57.090.0 ]--
r 215         return b;
--[ 2019.11.11.16.46.57.223.0 ]--
r 215         return bo;
--[ 2019.11.11.16.46.57.248.0 ]--
r 215         return boa;
--[ 2019.11.11.16.46.57.310.0 ]--
r 215         return boar;
--[ 2019.11.11.16.46.57.459.0 ]--
r 215         return board;
--[ 2019.11.11.16.46.57.604.0 ]--
r 215         return boardp;
--[ 2019.11.11.16.46.58.311.0 ]--
r 215         return board;
--[ 2019.11.11.16.46.59.150.0 ]--
r 215         return board[];
--[ 2019.11.11.16.46.59.398.0 ]--
r 215         return board[l];
--[ 2019.11.11.16.46.59.508.0 ]--
r 215         return board[lo];
--[ 2019.11.11.16.46.59.567.0 ]--
r 215         return board[loc];
--[ 2019.11.11.16.46.59.654.0 ]--
r 215         return board[loc.];
--[ 2019.11.11.16.46.59.930.0 ]--
r 215         return board[loc];
--[ 2019.11.11.16.47.00.039.0 ]--
r 215         return board[lo];
--[ 2019.11.11.16.47.00.306.0 ]--
r 215         return board[l];
--[ 2019.11.11.16.47.00.777.0 ]--
r 215         return board[];
--[ 2019.11.11.16.47.00.987.0 ]--
r 215         return board[ ];
--[ 2019.11.11.16.47.01.085.0 ]--
r 215         return board[];
--[ 2019.11.11.16.47.01.488.0 ]--
r 215         return board[ ];
--[ 2019.11.11.16.47.01.536.0 ]--
r 215         return board[];
--[ 2019.11.11.16.47.01.982.0 ]--
r 215         return board[l];
--[ 2019.11.11.16.47.02.110.0 ]--
r 215         return board[lo];
--[ 2019.11.11.16.47.02.185.0 ]--
r 215         return board[loc];
--[ 2019.11.11.16.47.02.256.0 ]--
r 215         return board[loc.];
--[ 2019.11.11.16.47.02.455.0 ]--
r 215         return board[loc.g];
--[ 2019.11.11.16.47.02.590.0 ]--
r 215         return board[loc.ge];
--[ 2019.11.11.16.47.02.663.0 ]--
r 215         return board[loc.get];
--[ 2019.11.11.16.47.04.037.0 ]--
r 215         return board[loc.getJ];
--[ 2019.11.11.16.47.04.043.0 ]--
r 215         return board[loc.getJ()];
--[ 2019.11.11.16.47.04.963.0 ]--
r 215         return board[loc.getJ()][];
--[ 2019.11.11.16.47.05.664.0 ]--
r 215         return board[loc.getJ()][l];
--[ 2019.11.11.16.47.05.915.0 ]--
r 215         return board[loc.getJ()][lc];
--[ 2019.11.11.16.47.06.015.0 ]--
r 215         return board[loc.getJ()][lc.];
--[ 2019.11.11.16.47.06.296.0 ]--
r 215         return board[loc.getJ()][lc.g];
--[ 2019.11.11.16.47.06.422.0 ]--
r 215         return board[loc.getJ()][lc.ge];
--[ 2019.11.11.16.47.06.521.0 ]--
r 215         return board[loc.getJ()][lc.g];
--[ 2019.11.11.16.47.06.634.0 ]--
r 215         return board[loc.getJ()][lc.];
--[ 2019.11.11.16.47.06.777.0 ]--
r 215         return board[loc.getJ()][lc];
--[ 2019.11.11.16.47.06.824.0 ]--
r 215         return board[loc.getJ()][l];
--[ 2019.11.11.16.47.06.979.0 ]--
r 215         return board[loc.getJ()][lo];
--[ 2019.11.11.16.47.07.075.0 ]--
r 215         return board[loc.getJ()][loc];
--[ 2019.11.11.16.47.07.211.0 ]--
r 215         return board[loc.getJ()][locl];
--[ 2019.11.11.16.47.07.595.0 ]--
r 215         return board[loc.getJ()][loc];
--[ 2019.11.11.16.47.07.693.0 ]--
r 215         return board[loc.getJ()][loc.];
--[ 2019.11.11.16.47.07.713.0 ]--
r 215         return board[loc.getJ()][loc.g];
--[ 2019.11.11.16.47.08.709.0 ]--
r 215         return board[loc.getJ()][loc.getI];
--[ 2019.11.11.16.47.08.728.0 ]--
r 215         return board[loc.getJ()][loc.getI()];
--[ 2019.11.11.16.47.12.443.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.47.33.360.0 ]--
:/src/InteractivePathfinderVisualizer.java
r 46     private final static String emapFilename = emaps[];        // change index to load a different elevation map
--[ 2019.11.11.16.47.33.410.0 ]--
r 46     private final static String emapFilename = emaps[2];        // change index to load a different elevation map
--[ 2019.11.11.16.47.36.836.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.48.23.261.0 ]--
:/src/Pathfinder.java
+ 185 
--[ 2019.11.11.16.48.23.277.0 ]--
r 186         
--[ 2019.11.11.16.48.23.961.0 ]--
r 186         /
--[ 2019.11.11.16.48.24.086.0 ]--
r 186         /*
--[ 2019.11.11.16.48.26.182.0 ]--
- 192
--[ 2019.11.11.16.48.26.341.0 ]--
+ 192         
+ 193          */
--[ 2019.11.11.16.48.26.577.0 ]--
r 192         *
--[ 2019.11.11.16.48.26.782.0 ]--
r 192         */
--[ 2019.11.11.16.48.27.157.0 ]--
r 192         *
--[ 2019.11.11.16.48.27.542.0 ]--
r 192         
--[ 2019.11.11.16.48.27.790.0 ]--
r 192        
--[ 2019.11.11.16.48.30.682.0 ]--
r 183         /s.push(start);
--[ 2019.11.11.16.48.30.765.0 ]--
r 183         s.push(start);
--[ 2019.11.11.16.48.31.210.0 ]--
r 184         /s.push(end);
--[ 2019.11.11.16.48.31.322.0 ]--
r 184         s.push(end);
--[ 2019.11.11.16.48.32.828.0 ]--
r 192 
--[ 2019.11.11.16.48.34.720.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.48.47.989.0 ]--
:/src/InteractivePathfinderVisualizer.java
r 46     private final static String emapFilename = emaps[];        // change index to load a different elevation map
--[ 2019.11.11.16.48.48.115.0 ]--
r 46     private final static String emapFilename = emaps[1];        // change index to load a different elevation map
--[ 2019.11.11.16.48.51.431.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.48.58.757.0 ]--
:/src/Pathfinder.java
r 184         /s.push(end);
--[ 2019.11.11.16.48.58.854.0 ]--
r 184         //s.push(end);
--[ 2019.11.11.16.48.59.509.0 ]--
r 183         /s.push(start);
--[ 2019.11.11.16.48.59.620.0 ]--
r 183         //s.push(start);
--[ 2019.11.11.16.49.01.039.0 ]--
r 186         /
--[ 2019.11.11.16.49.01.129.0 ]--
r 186         
--[ 2019.11.11.16.49.03.556.0 ]--
r 193          /
--[ 2019.11.11.16.49.03.654.0 ]--
r 193          
--[ 2019.11.11.16.49.05.444.0 ]--
r 186 
--[ 2019.11.11.16.49.07.106.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.49.33.262.0 ]--
- 121
- 121
- 121
- 121
- 121
- 121
- 121
r 121     p
--[ 2019.11.11.16.49.33.563.0 ]--
r 121     
--[ 2019.11.11.16.49.33.827.0 ]--
- 120
--[ 2019.11.11.16.49.34.257.0 ]--
- 120
--[ 2019.11.11.16.49.34.649.0 ]--
r 119     } 
--[ 2019.11.11.16.49.34.676.0 ]--
r 119     }
--[ 2019.11.11.16.49.37.517.0 ]--
r 184 
--[ 2019.11.11.16.49.39.258.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.50.25.446.0 ]--
r 182             }
--[ 2019.11.11.16.50.25.979.0 ]--
r 182         }
--[ 2019.11.11.16.50.27.227.0 ]--
+ 183         
--[ 2019.11.11.16.50.27.644.0 ]--
r 183         /
--[ 2019.11.11.16.50.27.682.0 ]--
r 183         //
--[ 2019.11.11.16.50.28.019.0 ]--
r 183         // 
--[ 2019.11.11.16.50.28.052.0 ]--
r 183         //
--[ 2019.11.11.16.50.28.509.0 ]--
r 183         /
--[ 2019.11.11.16.50.28.629.0 ]--
r 183         
--[ 2019.11.11.16.50.29.647.0 ]--
r 183         s
--[ 2019.11.11.16.50.29.730.0 ]--
r 183         s.
--[ 2019.11.11.16.50.29.870.0 ]--
r 183         s.p
--[ 2019.11.11.16.50.30.102.0 ]--
r 183         s.ps
--[ 2019.11.11.16.50.30.234.0 ]--
r 183         s.p
--[ 2019.11.11.16.50.30.569.0 ]--
r 183         s.ps
--[ 2019.11.11.16.50.30.855.0 ]--
r 183         s.p
--[ 2019.11.11.16.50.31.107.0 ]--
r 183         s.pu
--[ 2019.11.11.16.50.31.233.0 ]--
r 183         s.pus
--[ 2019.11.11.16.50.31.311.0 ]--
r 183         s.push
--[ 2019.11.11.16.50.31.494.0 ]--
r 183         s.push()
--[ 2019.11.11.16.50.31.582.0 ]--
r 183         s.push(s)
--[ 2019.11.11.16.50.31.705.0 ]--
r 183         s.push(st)
--[ 2019.11.11.16.50.31.763.0 ]--
r 183         s.push(sta)
--[ 2019.11.11.16.50.31.855.0 ]--
r 183         s.push(star)
--[ 2019.11.11.16.50.31.990.0 ]--
r 183         s.push(start)
--[ 2019.11.11.16.50.33.130.0 ]--
r 183         s.push(start);
--[ 2019.11.11.16.50.36.905.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.50.45.295.0 ]--
:/src/InteractivePathfinderVisualizer.java
r 46     private final static String emapFilename = emaps[];        // change index to load a different elevation map
--[ 2019.11.11.16.50.45.380.0 ]--
r 46     private final static String emapFilename = emaps[3];        // change index to load a different elevation map
--[ 2019.11.11.16.50.51.221.0 ]--
r 46     private final static String emapFilename = emaps[];        // change index to load a different elevation map
--[ 2019.11.11.16.50.51.239.0 ]--
r 46     private final static String emapFilename = emaps[2];        // change index to load a different elevation map
--[ 2019.11.11.16.50.53.791.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.16.57.24.257.0 ]--
:/src/Pathfinder.java
r 64             return b;
--[ 2019.11.11.16.57.24.367.0 ]--
r 64             return bo;
--[ 2019.11.11.16.57.24.391.0 ]--
r 64             return boa;
--[ 2019.11.11.16.57.24.483.0 ]--
r 64             return boar;
--[ 2019.11.11.16.57.24.652.0 ]--
r 64             return board;
--[ 2019.11.11.16.57.24.771.0 ]--
r 64             return board[];
--[ 2019.11.11.16.57.25.097.0 ]--
r 64             return board[ ];
--[ 2019.11.11.16.57.25.151.0 ]--
r 64             return board[];
--[ 2019.11.11.16.57.25.910.0 ]--
r 64             return board[b];
--[ 2019.11.11.16.57.26.679.0 ]--
r 64             return board[];
--[ 2019.11.11.16.57.27.632.0 ]--
r 64             return board[l];
--[ 2019.11.11.16.57.27.783.0 ]--
r 64             return board[lo];
--[ 2019.11.11.16.57.27.854.0 ]--
r 64             return board[loc];
--[ 2019.11.11.16.57.28.623.0 ]--
r 64             return board[loc.];
--[ 2019.11.11.16.57.30.838.0 ]--
r 64             return board[loc.getJ];
--[ 2019.11.11.16.57.30.852.0 ]--
r 64             return board[loc.getJ()];
--[ 2019.11.11.16.57.32.134.0 ]--
r 64             return board[loc.getJ()][];
--[ 2019.11.11.16.57.32.347.0 ]--
r 64             return board[loc.getJ()][l];
--[ 2019.11.11.16.57.32.485.0 ]--
r 64             return board[loc.getJ()][lo];
--[ 2019.11.11.16.57.32.554.0 ]--
r 64             return board[loc.getJ()][loc];
--[ 2019.11.11.16.57.32.755.0 ]--
r 64             return board[loc.getJ()][loc.];
--[ 2019.11.11.16.57.33.734.0 ]--
r 64             return board[loc.getJ()][loc.getI];
--[ 2019.11.11.16.57.33.743.0 ]--
r 64             return board[loc.getJ()][loc.getI()];
--[ 2019.11.11.16.58.39.173.0 ]--
+ 119         
--[ 2019.11.11.16.58.39.751.0 ]--
r 119         p
--[ 2019.11.11.16.58.39.888.0 ]--
r 119         pf
--[ 2019.11.11.16.58.40.623.0 ]--
r 119         p
--[ 2019.11.11.16.58.40.711.0 ]--
r 119         
--[ 2019.11.11.16.58.41.084.0 ]--
r 119          
--[ 2019.11.11.16.58.41.132.0 ]--
r 119         
--[ 2019.11.11.16.58.44.122.0 ]--
r 119          
--[ 2019.11.11.16.58.44.171.0 ]--
r 119         
--[ 2019.11.11.16.58.49.927.0 ]--
r 119         s
--[ 2019.11.11.16.58.50.068.0 ]--
r 119         st
--[ 2019.11.11.16.58.50.966.0 ]--
r 119         s
--[ 2019.11.11.16.58.51.258.0 ]--
r 119         
--[ 2019.11.11.16.58.51.543.0 ]--
r 119         S
--[ 2019.11.11.16.58.51.669.0 ]--
r 119         St
--[ 2019.11.11.16.58.52.477.0 ]--
r 119         S
--[ 2019.11.11.16.58.52.611.0 ]--
r 119         
--[ 2019.11.11.16.58.55.766.0 ]--
- 119
--[ 2019.11.11.17.05.34.483.0 ]--
+ 26         
--[ 2019.11.11.17.05.36.951.0 ]--
r 26         f
--[ 2019.11.11.17.05.37.136.0 ]--
r 26         fl
--[ 2019.11.11.17.05.37.174.0 ]--
r 26         flo
--[ 2019.11.11.17.05.37.223.0 ]--
r 26         floa
--[ 2019.11.11.17.05.37.341.0 ]--
r 26         float
--[ 2019.11.11.17.05.37.539.0 ]--
r 26         float 
--[ 2019.11.11.17.05.38.959.0 ]--
r 26         float r
--[ 2019.11.11.17.05.39.003.0 ]--
r 26         float ru
--[ 2019.11.11.17.05.39.151.0 ]--
r 26         float run
--[ 2019.11.11.17.05.39.305.0 ]--
r 26         float runn
--[ 2019.11.11.17.05.39.399.0 ]--
r 26         float runni
--[ 2019.11.11.17.05.39.481.0 ]--
r 26         float runnin
--[ 2019.11.11.17.05.39.547.0 ]--
r 26         float running
--[ 2019.11.11.17.05.39.718.0 ]--
r 26         float runningC
--[ 2019.11.11.17.05.39.774.0 ]--
r 26         float runningCO
--[ 2019.11.11.17.05.39.854.0 ]--
r 26         float runningCOs
--[ 2019.11.11.17.05.39.967.0 ]--
r 26         float runningCOst
--[ 2019.11.11.17.05.40.082.0 ]--
r 26         float runningCOst;
--[ 2019.11.11.17.05.40.346.0 ]--
r 26         float runningCOst
--[ 2019.11.11.17.05.40.424.0 ]--
r 26         float runningCOs
--[ 2019.11.11.17.05.40.519.0 ]--
r 26         float runningCO
--[ 2019.11.11.17.05.40.643.0 ]--
r 26         float runningC
--[ 2019.11.11.17.05.40.744.0 ]--
r 26         float runningCo
--[ 2019.11.11.17.05.40.801.0 ]--
r 26         float runningCos
--[ 2019.11.11.17.05.40.861.0 ]--
r 26         float runningCost
--[ 2019.11.11.17.05.40.954.0 ]--
r 26         float runningCost;
--[ 2019.11.11.17.05.42.730.0 ]--
r 26         float runningCost; 
--[ 2019.11.11.17.05.42.787.0 ]--
r 26         float runningCost;
--[ 2019.11.11.17.06.07.898.0 ]--
- 32
--[ 2019.11.11.17.06.08.086.0 ]--
+ 32             
--[ 2019.11.11.17.06.59.105.0 ]--
r 32             r
--[ 2019.11.11.17.06.59.211.0 ]--
r 32             ru
--[ 2019.11.11.17.06.59.435.0 ]--
r 32             run
--[ 2019.11.11.17.06.59.581.0 ]--
r 32             runn
--[ 2019.11.11.17.06.59.682.0 ]--
r 32             runni
--[ 2019.11.11.17.06.59.760.0 ]--
r 32             runnin
--[ 2019.11.11.17.06.59.847.0 ]--
r 32             running
--[ 2019.11.11.17.07.00.689.0 ]--
r 32             runningC
--[ 2019.11.11.17.07.00.764.0 ]--
r 32             runningCo
--[ 2019.11.11.17.07.00.816.0 ]--
r 32             runningCos
--[ 2019.11.11.17.07.00.935.0 ]--
r 32             runningCost
--[ 2019.11.11.17.07.01.026.0 ]--
r 32             runningCost 
--[ 2019.11.11.17.07.01.113.0 ]--
r 32             runningCost =
--[ 2019.11.11.17.07.01.212.0 ]--
r 32             runningCost = 
--[ 2019.11.11.17.07.02.261.0 ]--
r 32             runningCost = f
--[ 2019.11.11.17.07.02.458.0 ]--
r 32             runningCost = fr
--[ 2019.11.11.17.07.02.578.0 ]--
r 32             runningCost = frt
--[ 2019.11.11.17.07.02.663.0 ]--
r 32             runningCost = frto
--[ 2019.11.11.17.07.02.699.0 ]--
r 32             runningCost = frtom
--[ 2019.11.11.17.07.03.114.0 ]--
r 32             runningCost = frto
--[ 2019.11.11.17.07.03.218.0 ]--
r 32             runningCost = frt
--[ 2019.11.11.17.07.03.346.0 ]--
r 32             runningCost = fr
--[ 2019.11.11.17.07.03.476.0 ]--
r 32             runningCost = f
--[ 2019.11.11.17.07.03.777.0 ]--
r 32             runningCost = fr
--[ 2019.11.11.17.07.03.853.0 ]--
r 32             runningCost = fro
--[ 2019.11.11.17.07.03.886.0 ]--
r 32             runningCost = from
--[ 2019.11.11.17.07.04.082.0 ]--
r 32             runningCost = fromN
--[ 2019.11.11.17.07.04.212.0 ]--
r 32             runningCost = fromNo
--[ 2019.11.11.17.07.04.282.0 ]--
r 32             runningCost = fromNod
--[ 2019.11.11.17.07.04.330.0 ]--
r 32             runningCost = fromNode
--[ 2019.11.11.17.07.04.607.0 ]--
r 32             runningCost = fromNode.
--[ 2019.11.11.17.07.04.705.0 ]--
r 32             runningCost = fromNode.g
--[ 2019.11.11.17.07.04.768.0 ]--
r 32             runningCost = fromNode.ge
--[ 2019.11.11.17.07.04.873.0 ]--
r 32             runningCost = fromNode.get
--[ 2019.11.11.17.07.05.166.0 ]--
r 32             runningCost = fromNode.getC
--[ 2019.11.11.17.07.05.224.0 ]--
r 32             runningCost = fromNode.getCO
--[ 2019.11.11.17.07.05.342.0 ]--
r 32             runningCost = fromNode.getCOs
--[ 2019.11.11.17.07.05.578.0 ]--
r 32             runningCost = fromNode.getCOst
--[ 2019.11.11.17.07.05.751.0 ]--
r 32             runningCost = fromNode.getCOs
--[ 2019.11.11.17.07.05.862.0 ]--
r 32             runningCost = fromNode.getCO
--[ 2019.11.11.17.07.05.969.0 ]--
r 32             runningCost = fromNode.getC
--[ 2019.11.11.17.07.06.078.0 ]--
r 32             runningCost = fromNode.getCo
--[ 2019.11.11.17.07.06.130.0 ]--
r 32             runningCost = fromNode.getCos
--[ 2019.11.11.17.07.06.184.0 ]--
r 32             runningCost = fromNode.getCost
--[ 2019.11.11.17.07.07.665.0 ]--
r 32             runningCost = fromNode.getCost()
--[ 2019.11.11.17.07.07.822.0 ]--
r 32             runningCost = fromNode.getCost(0)
--[ 2019.11.11.17.07.26.972.0 ]--
r 32             runningCost = fromNode.getCost(0) 
--[ 2019.11.11.17.07.27.158.0 ]--
r 32             runningCost = fromNode.getCost(0) +
--[ 2019.11.11.17.07.27.446.0 ]--
r 32             runningCost = fromNode.getCost(0) + 
--[ 2019.11.11.17.07.31.161.0 ]--
r 32             runningCost = fromNode.getCost(0) + t
--[ 2019.11.11.17.07.31.254.0 ]--
r 32             runningCost = fromNode.getCost(0) + te
--[ 2019.11.11.17.07.31.340.0 ]--
r 32             runningCost = fromNode.getCost(0) + ter
--[ 2019.11.11.17.07.31.483.0 ]--
r 32             runningCost = fromNode.getCost(0) + terr
--[ 2019.11.11.17.07.31.560.0 ]--
r 32             runningCost = fromNode.getCost(0) + terra
--[ 2019.11.11.17.07.31.638.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrai
--[ 2019.11.11.17.07.31.692.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain
--[ 2019.11.11.17.07.31.999.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.
--[ 2019.11.11.17.07.32.021.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.c
--[ 2019.11.11.17.07.32.037.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.co
--[ 2019.11.11.17.07.32.103.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.com
--[ 2019.11.11.17.07.32.884.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost
--[ 2019.11.11.17.07.32.905.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost()
--[ 2019.11.11.17.07.33.740.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(t)
--[ 2019.11.11.17.07.33.877.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(ti)
--[ 2019.11.11.17.07.34.169.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(t)
--[ 2019.11.11.17.07.34.410.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(th)
--[ 2019.11.11.17.07.34.461.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(thi)
--[ 2019.11.11.17.07.34.544.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this)
--[ 2019.11.11.17.07.34.695.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.)
--[ 2019.11.11.17.07.34.866.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.l)
--[ 2019.11.11.17.07.34.995.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.lo)
--[ 2019.11.11.17.07.35.089.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc)
--[ 2019.11.11.17.07.36.272.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc,)
--[ 2019.11.11.17.07.36.346.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, )
--[ 2019.11.11.17.07.36.407.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, f)
--[ 2019.11.11.17.07.36.546.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fr)
--[ 2019.11.11.17.07.36.670.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fro)
--[ 2019.11.11.17.07.36.718.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, from)
--[ 2019.11.11.17.07.37.331.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromN)
--[ 2019.11.11.17.07.37.425.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNo)
--[ 2019.11.11.17.07.37.476.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNod)
--[ 2019.11.11.17.07.37.523.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode)
--[ 2019.11.11.17.07.37.585.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.)
--[ 2019.11.11.17.07.37.728.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.l)
--[ 2019.11.11.17.07.37.861.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.lo)
--[ 2019.11.11.17.07.37.914.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc)
--[ 2019.11.11.17.07.38.344.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.07.39.270.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc); 
--[ 2019.11.11.17.07.39.317.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.07.48.869.0 ]--
- 45
- 45
- 45
- 45
r 45             
--[ 2019.11.11.17.07.53.459.0 ]--
r 47             return r;
--[ 2019.11.11.17.07.53.525.0 ]--
r 47             return ru;
--[ 2019.11.11.17.07.53.616.0 ]--
r 47             return run;
--[ 2019.11.11.17.07.53.753.0 ]--
r 47             return runn;
--[ 2019.11.11.17.07.54.204.0 ]--
r 47             return runningCost;
--[ 2019.11.11.17.08.02.606.0 ]--
r 45 
--[ 2019.11.11.17.08.04.571.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.17.08.15.918.0 ]--
+ 32             
--[ 2019.11.11.17.08.16.420.0 ]--
r 32             i
--[ 2019.11.11.17.08.16.512.0 ]--
r 32             if
--[ 2019.11.11.17.08.17.332.0 ]--
r 32             if()
--[ 2019.11.11.17.08.18.283.0 ]--
r 32             if(f)
--[ 2019.11.11.17.08.18.447.0 ]--
r 32             if(fr)
--[ 2019.11.11.17.08.18.515.0 ]--
r 32             if(fro)
--[ 2019.11.11.17.08.18.539.0 ]--
r 32             if(from)
--[ 2019.11.11.17.08.18.741.0 ]--
r 32             if(fromN)
--[ 2019.11.11.17.08.18.866.0 ]--
r 32             if(fromNo)
--[ 2019.11.11.17.08.18.896.0 ]--
r 32             if(fromNod)
--[ 2019.11.11.17.08.18.957.0 ]--
r 32             if(fromNode)
--[ 2019.11.11.17.08.19.995.0 ]--
r 32             if(fromNode )
--[ 2019.11.11.17.08.20.366.0 ]--
r 32             if(fromNode)
--[ 2019.11.11.17.08.21.285.0 ]--
r 32             if(fromNode )
--[ 2019.11.11.17.08.21.504.0 ]--
r 32             if(fromNode)
--[ 2019.11.11.17.08.22.961.0 ]--
r 32             if(fromNode )
--[ 2019.11.11.17.08.23.214.0 ]--
r 32             if(fromNode =)
--[ 2019.11.11.17.08.23.348.0 ]--
r 32             if(fromNode ==)
--[ 2019.11.11.17.08.23.431.0 ]--
r 32             if(fromNode == )
--[ 2019.11.11.17.08.23.749.0 ]--
r 32             if(fromNode == n)
--[ 2019.11.11.17.08.23.779.0 ]--
r 32             if(fromNode == nu)
--[ 2019.11.11.17.08.23.949.0 ]--
r 32             if(fromNode == nul)
--[ 2019.11.11.17.08.24.071.0 ]--
r 32             if(fromNode == null)
--[ 2019.11.11.17.08.24.936.0 ]--
r 32             if(fromNode == null){
--[ 2019.11.11.17.08.25.095.0 ]--
+ 33 
+ 34 }
--[ 2019.11.11.17.08.25.104.0 ]--
r 34             }
--[ 2019.11.11.17.08.25.122.0 ]--
r 33                 
--[ 2019.11.11.17.08.26.702.0 ]--
r 33                 r
--[ 2019.11.11.17.08.26.782.0 ]--
r 33                 ru
--[ 2019.11.11.17.08.26.942.0 ]--
r 33                 run
--[ 2019.11.11.17.08.27.063.0 ]--
r 33                 runn
--[ 2019.11.11.17.08.27.128.0 ]--
r 33                 runni
--[ 2019.11.11.17.08.27.211.0 ]--
r 33                 runnin
--[ 2019.11.11.17.08.27.282.0 ]--
r 33                 running
--[ 2019.11.11.17.08.27.850.0 ]--
r 33                 runningCost
--[ 2019.11.11.17.08.28.004.0 ]--
r 33                 runningCost 
--[ 2019.11.11.17.08.28.283.0 ]--
r 33                 runningCost =
--[ 2019.11.11.17.08.28.380.0 ]--
r 33                 runningCost = 
--[ 2019.11.11.17.08.28.438.0 ]--
r 33                 runningCost = 0
--[ 2019.11.11.17.08.28.689.0 ]--
r 33                 runningCost = 0;
--[ 2019.11.11.17.08.32.677.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.17.08.58.537.0 ]--
- 32
- 32
r 32             
--[ 2019.11.11.17.08.58.761.0 ]--
- 32
--[ 2019.11.11.17.09.00.720.0 ]--
r 31             this.fromNode = fromNode; 
--[ 2019.11.11.17.09.01.313.0 ]--
r 31             this.fromNode = fromNode;
--[ 2019.11.11.17.09.06.955.0 ]--
r 32             runningCost = tfromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.09.07.055.0 ]--
r 32             runningCost = thfromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.09.07.119.0 ]--
r 32             runningCost = thifromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.09.07.152.0 ]--
r 32             runningCost = thisfromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.09.07.351.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.09.10.856.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, tfromNode.loc);
--[ 2019.11.11.17.09.11.002.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, thfromNode.loc);
--[ 2019.11.11.17.09.11.045.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, thifromNode.loc);
--[ 2019.11.11.17.09.11.121.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, thisfromNode.loc);
--[ 2019.11.11.17.09.11.267.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, this.fromNode.loc);
--[ 2019.11.11.17.09.15.342.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.17.09.18.819.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.09.19.353.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.09.39.035.0 ]--
r 32             trunningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.09.39.238.0 ]--
r 32             thrunningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.09.39.261.0 ]--
r 32             thirunningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.09.39.335.0 ]--
r 32             thisrunningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.09.39.519.0 ]--
r 32             this.runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.09.43.865.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.17.09.49.896.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.10.06.508.0 ]--
- 45
r 45             
--[ 2019.11.11.17.10.06.631.0 ]--
- 45
--[ 2019.11.11.17.10.27.805.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(F, fromNode.loc);
--[ 2019.11.11.17.10.27.975.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(Fr, fromNode.loc);
--[ 2019.11.11.17.10.28.368.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(F, fromNode.loc);
--[ 2019.11.11.17.10.28.453.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(, fromNode.loc);
--[ 2019.11.11.17.10.28.540.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(f, fromNode.loc);
--[ 2019.11.11.17.10.28.669.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fr, fromNode.loc);
--[ 2019.11.11.17.10.28.775.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fro, fromNode.loc);
--[ 2019.11.11.17.10.28.813.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(from, fromNode.loc);
--[ 2019.11.11.17.10.28.997.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromN, fromNode.loc);
--[ 2019.11.11.17.10.29.141.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNo, fromNode.loc);
--[ 2019.11.11.17.10.29.239.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNod, fromNode.loc);
--[ 2019.11.11.17.10.29.276.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode, fromNode.loc);
--[ 2019.11.11.17.10.31.795.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode., fromNode.loc);
--[ 2019.11.11.17.10.31.924.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.l, fromNode.loc);
--[ 2019.11.11.17.10.32.063.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.lo, fromNode.loc);
--[ 2019.11.11.17.10.32.116.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, fromNode.loc);
--[ 2019.11.11.17.10.34.425.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, loc);
--[ 2019.11.11.17.10.34.660.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, hloc);
--[ 2019.11.11.17.10.34.731.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, hiloc);
--[ 2019.11.11.17.10.34.881.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, hloc);
--[ 2019.11.11.17.10.35.024.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, loc);
--[ 2019.11.11.17.10.35.044.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, tloc);
--[ 2019.11.11.17.10.35.138.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, thloc);
--[ 2019.11.11.17.10.35.172.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, thiloc);
--[ 2019.11.11.17.10.35.259.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, thisloc);
--[ 2019.11.11.17.10.35.372.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, this.loc);
--[ 2019.11.11.17.10.39.331.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.17.10.44.902.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, floc);
--[ 2019.11.11.17.10.45.013.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, frloc);
--[ 2019.11.11.17.10.45.101.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, froloc);
--[ 2019.11.11.17.10.45.143.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, fromloc);
--[ 2019.11.11.17.10.45.310.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, fromNloc);
--[ 2019.11.11.17.10.45.429.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, fromNoloc);
--[ 2019.11.11.17.10.45.483.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, fromNodloc);
--[ 2019.11.11.17.10.45.520.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, fromNodeloc);
--[ 2019.11.11.17.10.45.966.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, this.loc);
--[ 2019.11.11.17.10.46.466.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, loc);
--[ 2019.11.11.17.10.46.492.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, hiloc);
--[ 2019.11.11.17.10.46.526.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, loc);
--[ 2019.11.11.17.10.46.553.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode.loc, fromNode.loc);
--[ 2019.11.11.17.10.46.618.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(fromNode, fromNode.loc);
--[ 2019.11.11.17.10.46.682.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(, fromNode.loc);
--[ 2019.11.11.17.10.46.708.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(Fr, fromNode.loc);
--[ 2019.11.11.17.10.46.834.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.10.46.859.0 ]--
+ 45             
--[ 2019.11.11.17.10.46.895.0 ]--
+ 45 
r 46 
--[ 2019.11.11.17.10.46.936.0 ]--
r 32             this.runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.10.46.996.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.10.47.056.0 ]--
r 31             this.fromNode = fromNode; 
--[ 2019.11.11.17.10.47.087.0 ]--
r 31             this.fromNode = fromNode;
--[ 2019.11.11.17.10.47.136.0 ]--
+ 32             if(fromNode == null){
+ 33                 runningCost = 0;
+ 34             }
--[ 2019.11.11.17.10.47.176.0 ]--
r 33                 runningCost
--[ 2019.11.11.17.10.47.208.0 ]--
r 33                 running
--[ 2019.11.11.17.10.47.239.0 ]--
r 33                 
--[ 2019.11.11.17.10.47.290.0 ]--
- 33
- 33
--[ 2019.11.11.17.10.47.311.0 ]--
r 32             if(fromNode == null)
--[ 2019.11.11.17.10.47.365.0 ]--
r 32             if(fromNode)
--[ 2019.11.11.17.10.47.389.0 ]--
r 32             if(fromNode )
--[ 2019.11.11.17.10.47.430.0 ]--
r 32             if(fromNode)
--[ 2019.11.11.17.10.47.453.0 ]--
r 32             if(fromNode )
--[ 2019.11.11.17.10.47.556.0 ]--
r 32             
--[ 2019.11.11.17.10.47.581.0 ]--
- 32
--[ 2019.11.11.17.10.47.632.0 ]--
r 45             
r 47             return runn;
--[ 2019.11.11.17.10.47.649.0 ]--
r 47             return cost;
--[ 2019.11.11.17.10.47.717.0 ]--
+ 45             float cost;
+ 46             if(this.fromNode == null){
+ 47                 return 0;
+ 48             }
r 49             cost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.10.47.769.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc); 
--[ 2019.11.11.17.10.47.810.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(t)
--[ 2019.11.11.17.10.47.824.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(ti)
--[ 2019.11.11.17.10.47.972.0 ]--
r 32             runningCost = fromNode.getC
--[ 2019.11.11.17.10.47.985.0 ]--
r 32             runningCost = fromNode.getCOst
--[ 2019.11.11.17.10.48.007.0 ]--
r 32             runningCost = f
--[ 2019.11.11.17.10.48.031.0 ]--
r 32             runningCost = frtom
--[ 2019.11.11.17.10.48.078.0 ]--
r 32             
--[ 2019.11.11.17.10.48.681.0 ]--
- 32
--[ 2019.11.11.17.10.48.869.0 ]--
+ 32 
--[ 2019.11.11.17.10.49.381.0 ]--
r 26         float runningCost; 
--[ 2019.11.11.17.10.49.716.0 ]--
r 26         float runningC
--[ 2019.11.11.17.10.49.891.0 ]--
r 26         float runningCOst;
--[ 2019.11.11.17.10.50.039.0 ]--
r 26         
--[ 2019.11.11.17.10.50.177.0 ]--
- 26
--[ 2019.11.11.17.10.51.180.0 ]--
+ 119         St
--[ 2019.11.11.17.10.51.563.0 ]--
r 119         
--[ 2019.11.11.17.10.51.841.0 ]--
r 119         st
--[ 2019.11.11.17.10.51.983.0 ]--
r 119         
--[ 2019.11.11.17.10.52.368.0 ]--
r 119          
--[ 2019.11.11.17.10.52.526.0 ]--
r 119         
--[ 2019.11.11.17.10.52.732.0 ]--
r 119          
--[ 2019.11.11.17.10.52.933.0 ]--
r 119         
--[ 2019.11.11.17.10.53.183.0 ]--
r 119         pf
--[ 2019.11.11.17.10.53.885.0 ]--
r 119         p
--[ 2019.11.11.17.10.53.986.0 ]--
r 119         
--[ 2019.11.11.17.10.54.105.0 ]--
- 119
--[ 2019.11.11.17.11.01.034.0 ]--
+ 26         
--[ 2019.11.11.17.11.02.066.0 ]--
r 26         f
--[ 2019.11.11.17.11.02.153.0 ]--
r 26         fl
--[ 2019.11.11.17.11.02.265.0 ]--
r 26         flo
--[ 2019.11.11.17.11.02.290.0 ]--
r 26         floa
--[ 2019.11.11.17.11.02.384.0 ]--
r 26         float
--[ 2019.11.11.17.11.08.103.0 ]--
r 26         float 
--[ 2019.11.11.17.11.08.191.0 ]--
r 26         float r
--[ 2019.11.11.17.11.08.247.0 ]--
r 26         float ru
--[ 2019.11.11.17.11.08.387.0 ]--
r 26         float run
--[ 2019.11.11.17.11.08.520.0 ]--
r 26         float runn
--[ 2019.11.11.17.11.08.575.0 ]--
r 26         float runni
--[ 2019.11.11.17.11.08.646.0 ]--
r 26         float runnin
--[ 2019.11.11.17.11.08.717.0 ]--
r 26         float running
--[ 2019.11.11.17.11.08.924.0 ]--
r 26         float runningC
--[ 2019.11.11.17.11.09.022.0 ]--
r 26         float runningCo
--[ 2019.11.11.17.11.09.090.0 ]--
r 26         float runningCos
--[ 2019.11.11.17.11.09.211.0 ]--
r 26         float runningCost
--[ 2019.11.11.17.11.09.518.0 ]--
r 26         float runningCost;
--[ 2019.11.11.17.11.22.460.0 ]--
- 32
--[ 2019.11.11.17.11.22.631.0 ]--
r 31             this.fromNode = fromNode; 
--[ 2019.11.11.17.11.22.651.0 ]--
r 31             this.fromNode = fromNode;
--[ 2019.11.11.17.11.22.839.0 ]--
+ 32             
--[ 2019.11.11.17.11.23.816.0 ]--
r 32             r
--[ 2019.11.11.17.11.23.861.0 ]--
r 32             ru
--[ 2019.11.11.17.11.24.015.0 ]--
r 32             run
--[ 2019.11.11.17.11.24.163.0 ]--
r 32             runn
--[ 2019.11.11.17.11.24.230.0 ]--
r 32             runni
--[ 2019.11.11.17.11.24.284.0 ]--
r 32             runnin
--[ 2019.11.11.17.11.24.379.0 ]--
r 32             running
--[ 2019.11.11.17.11.24.644.0 ]--
r 32             runningC
--[ 2019.11.11.17.11.24.680.0 ]--
r 32             runningCo
--[ 2019.11.11.17.11.24.943.0 ]--
r 32             runningCos
--[ 2019.11.11.17.11.24.996.0 ]--
r 32             runningCost
--[ 2019.11.11.17.11.25.136.0 ]--
r 32             runningCost 
--[ 2019.11.11.17.11.25.228.0 ]--
r 32             runningCost =
--[ 2019.11.11.17.11.25.336.0 ]--
r 32             runningCost = 
--[ 2019.11.11.17.11.26.942.0 ]--
r 32             runningCost = t
--[ 2019.11.11.17.11.27.027.0 ]--
r 32             runningCost = th
--[ 2019.11.11.17.11.27.090.0 ]--
r 32             runningCost = thi
--[ 2019.11.11.17.11.27.192.0 ]--
r 32             runningCost = this
--[ 2019.11.11.17.11.27.337.0 ]--
r 32             runningCost = this.
--[ 2019.11.11.17.11.27.420.0 ]--
r 32             runningCost = this.f
--[ 2019.11.11.17.11.28.213.0 ]--
r 32             runningCost = this.f 
--[ 2019.11.11.17.11.28.254.0 ]--
r 32             runningCost = this.f
--[ 2019.11.11.17.11.28.948.0 ]--
r 32             runningCost = this.ff
--[ 2019.11.11.17.11.29.081.0 ]--
r 32             runningCost = this.ffr
--[ 2019.11.11.17.11.29.325.0 ]--
r 32             runningCost = this.ff
--[ 2019.11.11.17.11.29.392.0 ]--
r 32             runningCost = this.f
--[ 2019.11.11.17.11.29.711.0 ]--
r 32             runningCost = this.
--[ 2019.11.11.17.11.30.723.0 ]--
r 32             runningCost = this.f
--[ 2019.11.11.17.11.30.827.0 ]--
r 32             runningCost = this.fo
--[ 2019.11.11.17.11.30.943.0 ]--
r 32             runningCost = this.fom
--[ 2019.11.11.17.11.31.228.0 ]--
r 32             runningCost = this.fo
--[ 2019.11.11.17.11.31.326.0 ]--
r 32             runningCost = this.f
--[ 2019.11.11.17.11.31.419.0 ]--
r 32             runningCost = this.fr
--[ 2019.11.11.17.11.31.486.0 ]--
r 32             runningCost = this.fro
--[ 2019.11.11.17.11.31.542.0 ]--
r 32             runningCost = this.from
--[ 2019.11.11.17.11.31.739.0 ]--
r 32             runningCost = this.fromN
--[ 2019.11.11.17.11.31.894.0 ]--
r 32             runningCost = this.fromNo
--[ 2019.11.11.17.11.31.946.0 ]--
r 32             runningCost = this.fromNod
--[ 2019.11.11.17.11.32.001.0 ]--
r 32             runningCost = this.fromNode
--[ 2019.11.11.17.11.32.967.0 ]--
r 32             runningCost = this.fromNode.
--[ 2019.11.11.17.11.33.094.0 ]--
r 32             runningCost = this.fromNode.g
--[ 2019.11.11.17.11.33.162.0 ]--
r 32             runningCost = this.fromNode.ge
--[ 2019.11.11.17.11.33.294.0 ]--
r 32             runningCost = this.fromNode.get
--[ 2019.11.11.17.11.33.502.0 ]--
r 32             runningCost = this.fromNode.getC
--[ 2019.11.11.17.11.33.612.0 ]--
r 32             runningCost = this.fromNode.getCo
--[ 2019.11.11.17.11.33.644.0 ]--
r 32             runningCost = this.fromNode.getCos
--[ 2019.11.11.17.11.33.807.0 ]--
r 32             runningCost = this.fromNode.getCost
--[ 2019.11.11.17.11.34.973.0 ]--
r 32             runningCost = this.fromNode.getCost()
--[ 2019.11.11.17.11.35.133.0 ]--
r 32             runningCost = this.fromNode.getCost(0)
--[ 2019.11.11.17.11.36.008.0 ]--
r 32             runningCost = this.fromNode.getCost(0) 
--[ 2019.11.11.17.11.36.114.0 ]--
r 32             runningCost = this.fromNode.getCost(0) +
--[ 2019.11.11.17.11.36.205.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + 
--[ 2019.11.11.17.11.36.449.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + t
--[ 2019.11.11.17.11.36.553.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + te
--[ 2019.11.11.17.11.36.658.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + ter
--[ 2019.11.11.17.11.36.764.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terr
--[ 2019.11.11.17.11.36.845.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terra
--[ 2019.11.11.17.11.36.957.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrai
--[ 2019.11.11.17.11.37.002.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain
--[ 2019.11.11.17.11.37.219.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.
--[ 2019.11.11.17.11.37.260.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.g
--[ 2019.11.11.17.11.37.330.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.ge
--[ 2019.11.11.17.11.37.595.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.g
--[ 2019.11.11.17.11.37.778.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.
--[ 2019.11.11.17.11.38.275.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.c
--[ 2019.11.11.17.11.38.351.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.co
--[ 2019.11.11.17.11.38.383.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.com
--[ 2019.11.11.17.11.38.573.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.comp
--[ 2019.11.11.17.11.38.621.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.compu
--[ 2019.11.11.17.11.38.670.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.comput
--[ 2019.11.11.17.11.38.752.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.compute
--[ 2019.11.11.17.11.39.468.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost
--[ 2019.11.11.17.11.39.477.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost()
--[ 2019.11.11.17.11.39.892.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(t)
--[ 2019.11.11.17.11.39.910.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(th)
--[ 2019.11.11.17.11.39.956.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(thi)
--[ 2019.11.11.17.11.40.008.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this)
--[ 2019.11.11.17.11.40.127.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.)
--[ 2019.11.11.17.11.40.840.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.l)
--[ 2019.11.11.17.11.40.999.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.lo)
--[ 2019.11.11.17.11.41.044.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc)
--[ 2019.11.11.17.11.41.104.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc,)
--[ 2019.11.11.17.11.41.236.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, )
--[ 2019.11.11.17.11.41.485.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, f)
--[ 2019.11.11.17.11.41.662.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fr)
--[ 2019.11.11.17.11.41.746.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fro)
--[ 2019.11.11.17.11.41.793.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, from)
--[ 2019.11.11.17.11.41.876.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromN)
--[ 2019.11.11.17.11.42.023.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNo)
--[ 2019.11.11.17.11.42.099.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNod)
--[ 2019.11.11.17.11.42.137.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode)
--[ 2019.11.11.17.11.42.224.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.)
--[ 2019.11.11.17.11.42.352.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.l)
--[ 2019.11.11.17.11.42.524.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.lo)
--[ 2019.11.11.17.11.42.680.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc)
--[ 2019.11.11.17.11.43.303.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);
--[ 2019.11.11.17.11.48.090.0 ]--
+ 45             
--[ 2019.11.11.17.11.49.197.0 ]--
r 45             /
--[ 2019.11.11.17.11.49.325.0 ]--
r 45             /*
--[ 2019.11.11.17.11.51.451.0 ]--
+ 51 
+ 53              */
--[ 2019.11.11.17.11.53.906.0 ]--
r 54             return r;
--[ 2019.11.11.17.11.53.986.0 ]--
r 54             return ru;
--[ 2019.11.11.17.11.54.118.0 ]--
r 54             return run;
--[ 2019.11.11.17.11.54.378.0 ]--
r 54             return runn;
--[ 2019.11.11.17.11.54.637.0 ]--
r 54             return runningCost;
--[ 2019.11.11.17.11.57.947.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.17.12.55.220.0 ]--
r 32             runningCost = this.fromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);
--[ 2019.11.11.17.13.01.415.0 ]--
r 32             runningCost = thisfromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);
--[ 2019.11.11.17.13.01.536.0 ]--
r 32             runningCost = thifromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);
--[ 2019.11.11.17.13.01.635.0 ]--
r 32             runningCost = thfromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);
--[ 2019.11.11.17.13.01.790.0 ]--
r 32             runningCost = tfromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);
--[ 2019.11.11.17.13.02.428.0 ]--
r 32             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);
--[ 2019.11.11.17.13.05.713.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.17.13.36.655.0 ]--
+ 32             
--[ 2019.11.11.17.13.36.985.0 ]--
r 32             i
--[ 2019.11.11.17.13.37.061.0 ]--
r 32             if
--[ 2019.11.11.17.13.37.444.0 ]--
r 32             if()
--[ 2019.11.11.17.13.37.883.0 ]--
r 32             if(f)
--[ 2019.11.11.17.13.37.994.0 ]--
r 32             if(fr)
--[ 2019.11.11.17.13.38.085.0 ]--
r 32             if(fro)
--[ 2019.11.11.17.13.38.128.0 ]--
r 32             if(from)
--[ 2019.11.11.17.13.38.600.0 ]--
r 32             if(fromN)
--[ 2019.11.11.17.13.38.725.0 ]--
r 32             if(fromNo)
--[ 2019.11.11.17.13.38.787.0 ]--
r 32             if(fromNod)
--[ 2019.11.11.17.13.38.836.0 ]--
r 32             if(fromNode)
--[ 2019.11.11.17.13.38.909.0 ]--
r 32             if(fromNode.)
--[ 2019.11.11.17.13.40.758.0 ]--
r 32             if(fromNode)
--[ 2019.11.11.17.13.41.121.0 ]--
r 32             if(fromNode )
--[ 2019.11.11.17.13.41.172.0 ]--
r 32             if(fromNode =)
--[ 2019.11.11.17.13.41.281.0 ]--
r 32             if(fromNode ==)
--[ 2019.11.11.17.13.41.581.0 ]--
r 32             if(fromNode == )
--[ 2019.11.11.17.13.41.769.0 ]--
r 32             if(fromNode == n)
--[ 2019.11.11.17.13.41.854.0 ]--
r 32             if(fromNode == nu)
--[ 2019.11.11.17.13.42.000.0 ]--
r 32             if(fromNode == nul)
--[ 2019.11.11.17.13.42.117.0 ]--
r 32             if(fromNode == null)
--[ 2019.11.11.17.13.43.564.0 ]--
r 32             if(fromNode == null){
--[ 2019.11.11.17.13.43.741.0 ]--
+ 33 
+ 34 }
--[ 2019.11.11.17.13.43.759.0 ]--
r 34             }
--[ 2019.11.11.17.13.43.800.0 ]--
r 33                 
--[ 2019.11.11.17.13.48.348.0 ]--
r 33                 r
--[ 2019.11.11.17.13.48.394.0 ]--
r 33                 ru
--[ 2019.11.11.17.13.48.563.0 ]--
r 33                 run
--[ 2019.11.11.17.13.48.680.0 ]--
r 33                 runn
--[ 2019.11.11.17.13.48.751.0 ]--
r 33                 runni
--[ 2019.11.11.17.13.48.861.0 ]--
r 33                 runnin
--[ 2019.11.11.17.13.48.932.0 ]--
r 33                 running
--[ 2019.11.11.17.13.49.234.0 ]--
r 33                 runningCost
--[ 2019.11.11.17.13.49.583.0 ]--
r 33                 runningCost 
--[ 2019.11.11.17.13.49.643.0 ]--
r 33                 runningCost =
--[ 2019.11.11.17.13.49.791.0 ]--
r 33                 runningCost = 
--[ 2019.11.11.17.13.49.953.0 ]--
r 33                 runningCost = 0
--[ 2019.11.11.17.13.50.160.0 ]--
r 33                 runningCost = 0;
--[ 2019.11.11.17.13.57.444.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.11.17.14.01.706.0 ]--
+ 35             
--[ 2019.11.11.17.14.01.814.0 ]--
r 35             e
--[ 2019.11.11.17.14.01.926.0 ]--
r 35             el
--[ 2019.11.11.17.14.01.971.0 ]--
r 35             els
--[ 2019.11.11.17.14.02.119.0 ]--
r 35             else
--[ 2019.11.11.17.14.02.676.0 ]--
r 35             else{
--[ 2019.11.11.17.14.03.097.0 ]--
+ 36 
+ 37 }
--[ 2019.11.11.17.14.03.112.0 ]--
r 37             }
--[ 2019.11.11.17.14.03.134.0 ]--
r 36                 
--[ 2019.11.11.17.14.09.255.0 ]--
r 37             runningCost = fromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);
r 38             }
--[ 2019.11.11.17.14.09.280.0 ]--
r 36 
r 37                 runningCost = fromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);
--[ 2019.11.11.17.14.09.853.0 ]--
r 36                 runningCost = fromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);
r 37 
--[ 2019.11.11.17.14.12.679.0 ]--
- 35
r 35             else{ runningCost = fromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);
--[ 2019.11.11.17.14.13.496.0 ]--
r 35             else{runningCost = fromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);
--[ 2019.11.11.17.14.13.880.0 ]--
+ 35             else{
r 36                 runningCost = fromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);
--[ 2019.11.11.17.14.14.789.0 ]--
- 35
r 35             else{ runningCost = fromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);
--[ 2019.11.11.17.14.15.257.0 ]--
+ 35             else{ 
r 36                 runningCost = fromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);
--[ 2019.11.11.17.14.17.086.0 ]--
r 35             else{
--[ 2019.11.11.17.14.18.911.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.11.12.01.32.05.491.0 ]--
DisposeComponent
--[ 2019.11.12.13.36.17.223.0 ]--
NewLogger: P04_Pathfinding
Version: 1.3
--[ 2019.11.12.13.36.17.598.0 ]--
InitTree:
/out/production/P04_Pathfinding/.donotlog
/out/production/P04_Pathfinding/algs4.jar
/out/production/P04_Pathfinding/stdlib.jar
/out/production/P04_Pathfinding/Coord.class
/out/production/P04_Pathfinding/png2emap.py
/out/production/P04_Pathfinding/Walker.class
/out/production/P04_Pathfinding/Terrain.class
/out/production/P04_Pathfinding/ramp.png.emap
/out/production/P04_Pathfinding/ramp2.png.emap
/out/production/P04_Pathfinding/ramp3.png.emap
/out/production/P04_Pathfinding/mazeAB.png.emap
/out/production/P04_Pathfinding/usa128.png.emap
/out/production/P04_Pathfinding/usa256.png.emap
/out/production/P04_Pathfinding/Pathfinder.class
/out/production/P04_Pathfinding/usa1024.png.emap
/out/production/P04_Pathfinding/maze32_0.png.emap
/out/production/P04_Pathfinding/maze32_1.png.emap
/out/production/P04_Pathfinding/maze232_0.png.emap
/out/production/P04_Pathfinding/maze320_0.png.emap
/out/production/P04_Pathfinding/mazeBrain.png.emap
/out/production/P04_Pathfinding/TerrainEditor.class
/out/production/P04_Pathfinding/Pathfinder$PFNode.class
/out/production/P04_Pathfinding/PathfinderVisualizer.class
/out/production/P04_Pathfinding/InteractivePathfinderVisualizer.class
/src/algs4.jar
/src/Coord.java
/src/stdlib.jar
/src/Walker.java
/src/Terrain.java
/src/Pathfinder.java
/src/TerrainEditor.java
/src/PathfinderVisualizer.java
/src/InteractivePathfinderVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/heightmaps/.donotlog
/heightmaps/png2emap.py
/heightmaps/ramp.png.emap
/heightmaps/ramp2.png.emap
/heightmaps/ramp3.png.emap
/heightmaps/mazeAB.png.emap
/heightmaps/usa128.png.emap
/heightmaps/usa256.png.emap
/heightmaps/usa1024.png.emap
/heightmaps/maze32_0.png.emap
/heightmaps/maze32_1.png.emap
/heightmaps/maze232_0.png.emap
/heightmaps/maze320_0.png.emap
/heightmaps/mazeBrain.png.emap
/.cos265
/readme.html
/P04_Pathfinding.iml

--[ 2019.11.12.13.36.17.599.0 ]--
InitFile: /src/InteractivePathfinderVisualizer.java
import java.awt.event.KeyEvent;

/**
 * InteractivePathfinderVisualizer visualizes the terrain and the computed
 * path and allows the user to change parameters of the Pathfinder.  Below
 * is a list of commands and what they do.  Note: some of the commands
 * modify the properties of the path finder and some modify the terrain.
 *
 * Command        Action                                      Terrain
 * C              clear path
 * space          recompute path
 * S/E            set start/end location to mouse
 * left/right     halve/double path search heuristic value
 * 0/1            set path search heuristic to 0 or 1
 * W              start a walker to show the path
 * R              randomly generate a new terrain                *
 * M              smooths terrain under mouse                    *
 * shift+M        smooths all terrain                            *
 * up/down        increase/decrease terrain under mouse          *
 */

public class InteractivePathfinderVisualizer {
    private final static int DELAY = 10;

    // sets how many redraws it should take for the walker to reach its destination
    private final static float STEPS_TO_WALK = 100.0f;

    // for convenience, here are the emap files that are located under heightmaps/ folder
    // the python script in that folder converts png files to emap. \
    // you can use it to create your own maps to test your code
    private final static String[] emaps = {
            "maze32_0.png.emap",    // 0   (32x32 maze)
            "maze32_1.png.emap",    // 1   (another 32x32 maze)
            "maze232_0.png.emap",   // 2   (232x232 maze)
            "maze320_0.png.emap",   // 3   (same as maze32_0, only scaled up by 10x)
            "mazeAB.png.emap",      // 4   (a maze from a site no longer online :( )
            "mazeBrain.png.emap",   // 5   (...)
            "ramp.png.emap",        // 6   (some tests)
            "ramp2.png.emap",       // 7   (...)
            "ramp3.png.emap",       // 8   (...)
            "usa128.png.emap",      // 9   (elevation map of USA from https://bananas.openttd.org/en/heightmap/)
            "usa256.png.emap",      // 10  (same as usa128, only higher resolution)
            "usa1024.png.emap",     // 11  (same as usa128, only higher resolution
    };

    private final static String emapFilename = emaps[2];        // change index to load a different elevation map



    public static void main(String[] args) {
        Terrain terrain = new Terrain(emapFilename);
        Pathfinder pf = new Pathfinder(terrain);
        int N = terrain.getN();

        StdDraw.show(0);

        // set default starting and ending locations
        pf.setPathStart(new Coord(1, 1));
        pf.setPathEnd(new Coord(N-3, N-3));

        // find a path
        pf.computePath();

        PathfinderVisualizer.draw(terrain, pf, null, N);
        StdDraw.show(DELAY);

        // prevent repeated applications
        boolean keyboardR = false;
        boolean keyboardM = false;

        Walker walker = null;

        while(true) {
            boolean recompute = false;
            boolean redraw = false;

            // mouse location on map
            int mouseI = (int) ((StdDraw.mouseX()-24) / 464 * N);
            int mouseJ = (int) ((464 - (StdDraw.mouseY()-36)) / 464 * N);
            boolean isMouseOnMap = (mouseI >=0 && mouseI < N && mouseJ >= 0 && mouseJ < N);

            if(StdDraw.isKeyPressed(KeyEvent.VK_LEFT) || StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
                boolean keyboardLeft = StdDraw.isKeyPressed(KeyEvent.VK_LEFT);
                float m = keyboardLeft ? 0.5f : 2.0f;
                float h = pf.getHeuristic() * m;
                h = Math.max(1.0f/1024.0f, Math.min(1048576.0f, h));
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_0) || StdDraw.isKeyPressed(KeyEvent.VK_1)) {
                boolean keyboard0 = StdDraw.isKeyPressed(KeyEvent.VK_0);
                float h = keyboard0 ? 0 : 1;
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_C)) {
                pf.resetPath();
                walker = null;
                redraw = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_R) && !keyboardR) {
                TerrainEditor.setFractalHeights(terrain);
                TerrainEditor.clampHeights(terrain);
                recompute = true;
            }
            keyboardR = StdDraw.isKeyPressed(KeyEvent.VK_R);

            if(StdDraw.isKeyPressed(KeyEvent.VK_M)) {
                if(StdDraw.isKeyPressed(KeyEvent.VK_SHIFT)) {
                    if(!keyboardM) {
                        TerrainEditor.smoothHeights(terrain);
                        recompute = true;
                    }
                } else {
                    TerrainEditor.smoothHeights(mouseI, mouseJ, N / 20, true, terrain);
                    recompute = true;
                }
            }
            keyboardM = StdDraw.isKeyPressed(KeyEvent.VK_M);

            if(StdDraw.isKeyPressed(KeyEvent.VK_SPACE)) {
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_UP) || StdDraw.isKeyPressed(KeyEvent.VK_DOWN)) {
                boolean keyboardUp = StdDraw.isKeyPressed(KeyEvent.VK_UP);
                float add = keyboardUp ? 8.0f : -8.0f;
                TerrainEditor.addHeight(mouseI, mouseJ, N / 20, add, terrain);
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_S)) {
                pf.setPathStart(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_E)) {
                pf.setPathEnd(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_W)) {
                Iterable<Coord> path = pf.getPathSolution();
                if(path != null) {
                    walker = new Walker(terrain, pf.getPathSolution());
                }
            }

            if(walker != null) {
                if(walker.doneWalking()) {
                    walker = null;
                } else {
                    walker.advance(pf.getPathCost() / STEPS_TO_WALK);
                }
                redraw = true;
            }

            if(recompute) {
                walker = null;
                pf.resetPath();
                if(pf.getPathStart() != null && pf.getPathEnd() != null) {
                    pf.computePath();
                }
                redraw = true;
            }

            if(redraw) {
                PathfinderVisualizer.draw(terrain, pf, walker, N);
                StdDraw.show(DELAY);
            } else {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    /* do nothing */
                }
            }
        }
    }
}

--[ 2019.11.12.13.36.17.599.1 ]--
InitFile: /src/PathfinderVisualizer.java
/**
 * PathfinderVisualizer visualizes the terrain and found path.
 */

import java.awt.Color;
import java.awt.Font;

public class PathfinderVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // color for different elevations.  must be in ascending order!
    private final static int[][] elevationColors = {
            // h    r   g   b   where h=height, r=red, g=green, b=blue
            {  0,   0,  0,  0},
            {  2,   0,  0,160},
            {  4,   0,224,224},
            { 16, 192,192,  0},
            { 64,  16,255, 16},
            {128,  32,224, 32},
            {192, 128,128,  8},
            {224, 164,164,164},
            {255, 255,255,255}
    };

    private final static Color cStart    = new Color(128, 128, 255);
    private final static Color cEnd      = new Color(255, 128, 128);
    private final static Color cSolution = new Color(255, 128, 255);
    private final static Color cSearched = new Color(128,   0, 128);

    // linearly interpolating between the corresponding rgb values
    private static Color colorLERP(float v1, int r0, int g0, int b0, int r1, int g1, int b1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * r0 + v1 * r1);
        int g = (int)(v0 * g0 + v1 * g1);
        int b = (int)(v0 * b0 + v1 * b1);
        return new Color(r, g, b);
    }
    private static Color colorLERP(float v1, Color c0, Color c1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * c0.getRed()   + v1 * c1.getRed());
        int g = (int)(v0 * c0.getGreen() + v1 * c1.getGreen());
        int b = (int)(v0 * c0.getBlue()  + v1 * c1.getBlue());
        int a = (int)(v0 * c0.getAlpha() + v1 * c1.getAlpha());
        return new Color(r, g, b, a);
    }

    // returns color for given height
    private static Color height2Color(int h) {
        h = Math.max(0, Math.min(255, h));

        int[] ec0 = elevationColors[0];  // default lower bound
        int[] ec1 = elevationColors[1];  // default upper bound

        // find upper bound while updating lower bound
        for(int i = 1; i < elevationColors.length; i++) {
            ec1 = elevationColors[i];
            if(h >= ec0[0] && h <= ec1[0]) break;
            ec0 = ec1;
        }

        int h0=ec0[0], r0=ec0[1], g0=ec0[2], b0=ec0[3];
        int h1=ec1[0], r1=ec1[1], g1=ec1[2], b1=ec1[3];
        float v1 = ((float)(h - h0)) / ((float)(h1 - h0));

        return colorLERP(v1, r0, g0, b0, r1, g1, b1);
    }

    private static void drawCircle(int i, int j, int N, double rad) {
        int c = (int)((i+0.5f) * 464.0f / N);
        int r = (int)((j+0.5f) * 464.0f / N);
        StdDraw.circle(c + 24, 464 - r + 36, rad);
    }
    public static void drawCircle(Coord loc, int N, double rad) {
        drawCircle(loc.getI(), loc.getJ(), N, rad);
    }

    private static void drawPath(Iterable<Coord> path, int N) {
        boolean first = true;
        int c0 = 0, r0 = 0;
        for (Coord loc : path) {
            int c1 = (int)((loc.getI()+0.5f) * 464.0f / N);
            int r1 = (int)((loc.getJ()+0.5f) * 464.0f / N);
            if(!first) {
                StdDraw.line(c0 + 24, 464 - r0 + 36, c1 + 24, 464 - r1 + 36);
            }
            first = false;
            c0 = c1; r0 = r1;
        }
    }

    // draw N-by-N pathfinding map
    public static void draw(Terrain terrain, Pathfinder pf, Walker walker, int N) {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.filledSquare(256, 256 + 12, 464 / 2);

        // draw terrain
        for(int row = 0; row < 464; row++) {
            int j = (int)((float)row/464.0f * N);
            for(int col = 0; col < 464; col++) {
                int i = (int)((float)col/464.0f * N);
                Coord loc = new Coord(i,j);
                Color c = height2Color(terrain.getHeight(loc));
                if(pf.wasSearched(loc)) {
                    c = colorLERP(0.50f, c, cSearched);
                }
                StdDraw.setPenColor(c);
                StdDraw.filledSquare(col + 24, 464 - row + 36, 1);
            }
        }

        // draw path start
        if(pf.getPathStart() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathStart(), N, 4.0);

            StdDraw.setPenColor(cStart);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathStart(), N, 4.0);
        }

        // draw path end
        if(pf.getPathEnd() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathEnd(), N, 4.0);

            StdDraw.setPenColor(cEnd);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathEnd(), N, 4.0);
        }

        // draw found path
        if(pf.foundPath()) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawPath(pf.getPathSolution(), N);

            StdDraw.setPenColor(cSolution);
            StdDraw.setPenRadius(0.002);
            drawPath(pf.getPathSolution(), N);
        }

        // draw walker
        if(walker != null) {
            Coord loc = walker.getLocation();
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);

            StdDraw.setPenColor(StdDraw.WHITE);
            StdDraw.setPenRadius(0.002);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);
        }

        // write status text
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.text(96, 12, "heuristic: " + pf.getHeuristic());
        if(pf.foundPath()) StdDraw.text(256, 12, "path: " + pf.getPathCost());
        else               StdDraw.text(256, 12, "no path found");
        StdDraw.text(512-96, 12, "searched: " + pf.getSearchSize() + " (" + (int)(100.0f * pf.getSearchSize() / (N*N)) + "%)");
    }
}

--[ 2019.11.12.13.36.17.599.2 ]--
InitFile: /src/Terrain.java
import java.lang.IndexOutOfBoundsException;

/**
 * Terrain stores elevations for map and computes distance and
 * cost in traversing the terrain.
 */

public class Terrain {
    private int N;
    private int[][] heights;

    public Terrain(int N) {
        this.N = N;
        this.heights = new int[N][N];
    }

    public Terrain(int[][] heights) {
        this.N = heights.length;
        this.heights = heights;
    }

    public Terrain(String emapfile) {
        In in = new In(emapfile);
        this.N = in.readInt();
        this.heights = new int[N][N];
        for (int j = 0; j < N; j++) {
            for (int i = 0; i < N; i++) {
                this.heights[i][j] = in.readInt();
            }
        }
    }

    public int getN() {
        return N;
    }

    public void setHeight(int i, int j, int h) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        heights[i][j] = h;
    }
    public void setHeight(int i, int j, float h) {
        setHeight(i, j, (int) h);
    }
    public void setHeight(Coord loc, int h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }
    public void setHeight(Coord loc, float h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }

    public int getHeight(int i, int j) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        return heights[i][j];
    }
    public int getHeight(Coord loc) {
        return getHeight(loc.getI(), loc.getJ());
    }

    // computes distance between (i0,j0) and (i1,j1) as the crow flies
    public float computeDistance(int i0, int j0, int i1, int j1) {
        return (float)Math.sqrt((i0 - i1) * (i0 - i1) + (j0 - j1) * (j0 - j1));
    }
    public float computeDistance(Coord c0, Coord c1) {
        return computeDistance(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }

    public float computeTravelCost(int i0, int j0, int i1, int j1) {
        float h0 = getHeight(i0, j0), h1 = getHeight(i1, j1);
        float climb = (float)Math.pow(Math.abs(h0 - h1) * 1000.0, 1.5);
        float dist = computeDistance(i0,j0, i1,j1);
        return (1.0f + climb) * dist;
    }
    public float computeTravelCost(Coord c0, Coord c1) {
        return computeTravelCost(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }
    public float computeTravelCost(Iterable<Coord> cs) {
        Coord c0 = null;
        float cost = 0.0f;
        for(Coord c1 : cs) {
            if(c0 != null) cost += computeTravelCost(c0, c1);
            c0 = c1;
        }
        return cost;
    }
}

--[ 2019.11.12.13.36.17.600.0 ]--
InitFile: /src/Walker.java
import java.util.Iterator;

/**
 * Walker takes an Iterable of Coords and simulates an individual
 * walking along the path over the given Terrain
 */
public class Walker {

    // terrain: the Terrain the Walker traverses
    // path: the sequence of Coords the Walker follows
    public Walker(Terrain terrain, Iterable<Coord> path) {
    }

    // returns the Walker's current location
    public Coord getLocation() {
        return null;
    }

    // returns true if Walker has reached the end Coord (last in path)
    public boolean doneWalking() {
        return true;
    }

    // advances the Walker along path
    // byTime: how long the Walker should traverse (may be any non-negative value)
    public void advance(float byTime) {
    }

}

--[ 2019.11.12.13.36.17.600.1 ]--
InitFile: /src/Coord.java
/**
 * Coordinates is an immutable type that store the tuple (i, j)
 */
public final class Coord {
    private final int i;
    private final int j;

    public Coord(int i, int j) {
        this.i = i;
        this.j = j;
    }

    public int getI() { return i; }
    public int getJ() { return j; }

    public boolean isInBounds(int minI, int minJ, int maxI, int maxJ) {
        return i >= minI && j >= minJ && i <= maxI && j <= maxJ;
    }
    public boolean isInBounds(Coord min, Coord max) {
        return i >= min.i && i <= max.i && j >= min.j && j <= max.j;
    }

    public Coord add(int addI, int addJ) {
        return new Coord(i + addI, j + addJ);
    }
    public Coord add(Coord that) { return new Coord(i + that.i, j + that.j); }

    public String toString() { return "(" + i + "," + j + ")"; }

    public boolean equals(Object o) {
        if(this == o) return true;
        if(o == null) return false;
        if(o.getClass() != this.getClass()) return false;
        Coord that = (Coord) o;
        if(this.i != that.i) return false;
        if(this.j != that.j) return false;
        return true;
    }
}

--[ 2019.11.12.13.36.17.600.2 ]--
InitFile: /src/Pathfinder.java
import java.lang.IndexOutOfBoundsException;
import java.lang.IllegalArgumentException;
import java.util.Iterator;

/**
 * Pathfinder uses A* search to find a near optimal path
 * between to locations with given terrain.
 */

public class Pathfinder {

    private Coord start;
    private Coord end;
    private float heuristic;
    private boolean pathFound;
    private Stack<Coord> s;
    private Terrain terrain;
    private Boolean[][] board;

    /**
     * PFNode will be the key for MinPQ (used in computePath())
     */
    private class PFNode implements Comparable<PFNode> {
        Coord loc;
        PFNode fromNode;
        float runningCost;
        // loc: the location of the PFNode
        // fromNode: how did we get here? (linked list back to start)
        public PFNode(Coord loc, PFNode fromNode) {
            this.loc = loc;
            this.fromNode = fromNode;
            if(fromNode == null){
                runningCost = 0;
            }
            else{
                runningCost = fromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);

            }
        }

        // compares this with that, used to find minimum cost PFNode
        public int compareTo(PFNode that) {
            if(this.getCost(heuristic) < that.getCost(heuristic)) return -1;
            else if (this.getCost(heuristic) > that.getCost(heuristic)) return 1;
            return 0;
        }

        // returns the cost to travel from starting point to this
        // via the fromNode chain
        public float getCost(float heuristic) {
            /*
            float cost;
            if(this.fromNode == null){
                return 0;
            }
            cost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);


             */
            return runningCost;
        }

        // returns if this PFNode is not marked invalid
        public boolean isValid() {
            return false;
        }

        // marks the PFNode as invalid
        public void invalidate() {
        }

        // returns if the PFNode is marked as used
        public boolean isUsed() {
            return board[loc.getJ()][loc.getI()];
        }

        // marks the PFNode as used
        public void use() { }

        // returns an Iterable of PFNodes that surround this
        public Iterable<PFNode> neighbors() {
            Stack<PFNode> s = new Stack<>();
            s.push(new PFNode(new Coord(loc.getI() + 1, loc.getJ()), this));
            s.push(new PFNode(new Coord(loc.getI() - 1, loc.getJ()), this));
            s.push(new PFNode(new Coord(loc.getI() , loc.getJ() + 1), this));
            s.push(new PFNode(new Coord(loc.getI(), loc.getJ() - 1), this));
            return s;
        }

        public Coord getLoc(){
            return loc;
        }

        public PFNode getFromNode() {
            return fromNode;
        }
    }

    public Pathfinder(Terrain terrain) {
        this.terrain = terrain;
    }

    public void setPathStart(Coord loc) {
        start = loc;
    }

    public Coord getPathStart() {
        return start;
    }

    public void setPathEnd(Coord loc) {
        end = loc;
    }

    public Coord getPathEnd() {
        return end;
    }

    public void setHeuristic(float v)
    {
        heuristic = v;
    }

    public float getHeuristic() {
        return heuristic;
    }

    public void resetPath() {
    }

    public void computePath() {



        //Initialize the board and then print the current state of it
        board = new Boolean[terrain.getN()][terrain.getN()];
        for(int i = 0; i < terrain.getN(); i++){
            for(int j = 0; j < terrain.getN(); j++){
                board[i][j] = false;
                //System.out.print(board[i][j] + " ");
            }
            //System.out.println();
        }



        s = new Stack<>();
        MinPQ<PFNode> pfQueue = new MinPQ<>();
        PFNode begin = new PFNode(start, null);

        pfQueue.insert(begin);


        while(!pfQueue.min().loc.equals(end)){
            begin = pfQueue.delMin();
            if(board[begin.loc.getJ()][begin.loc.getI()]){
                continue;
            }
            board[begin.loc.getJ()][begin.loc.getI()] = true;
            for(PFNode p : begin.neighbors()){
                //Only add the neighbors to the queue if they're in range of the board
                if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p.loc.getI() >= 0){
                    pfQueue.insert(p);

                }
            }
            if(pfQueue.min().loc.equals(end)){
                break;
            }

        }











        //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerException
        //s.push(start);
        //s.push(end);


        PFNode cur = pfQueue.min();
        while(cur.fromNode != null){
            s.push(cur.loc);
            cur = cur.fromNode;
        }
        s.push(start);



        pathFound = true;
    }

    public boolean foundPath() {
        return pathFound;
    }

    public float getPathCost() {
        return 0;
    }

    public int getSearchSize() {
        return 0;
    }

    public Iterable<Coord> getPathSolution() {

        //Return a stack of coordinates for the visualizer
        return s;
    }

    public boolean wasSearched(Coord loc) {
        return board[loc.getJ()][loc.getI()];
    }
}

--[ 2019.11.12.13.36.17.600.3 ]--
InitFile: /src/TerrainEditor.java
/**
 * The following class provides some simple terrain editing functions.
 */
public class TerrainEditor {
    private static float rndRadius(float d) {
        return (float)StdRandom.uniform(-d,d);
    }

    private static float getFractalHeight(int i, int j, float dh, Terrain terrain, boolean[] isset) {
        int N = terrain.getN();
        dh = Math.max(-64, Math.min(255+64, dh));   // allow the height to go just a bit out of range
        if(!isset[i + j * N]) {
            isset[i + j * N] = true;
            terrain.setHeight(i, j, dh);
        }
        return terrain.getHeight(i,j);
    }

    private static void setFractalHeights(int i0, int j0, int i1, int j1, Terrain terrain, boolean[] isset) {
        int id = i1-i0;
        int jd = j1-j0;
        int i01 = (i0+i1)/2;
        int j01 = (j0+j1)/2;

        if(id <= 1 && jd <= 1) return;

        float h00 = getFractalHeight(i0,j0,32,terrain,isset);
        float h01 = getFractalHeight(i0,j1,32,terrain,isset);
        float h10 = getFractalHeight(i1,j0,32,terrain,isset);
        float h11 = getFractalHeight(i1,j1,32,terrain,isset);

        float d = (float)(Math.sqrt((i1-i0)*(i1-i0) + (j1-j0)*(j1-j0)) * 0.5);

        float d0001 = (h00 + h01) / 2 + rndRadius(d);
        float d0010 = (h00 + h10) / 2 + rndRadius(d);
        float d1101 = (h11 + h01) / 2 + rndRadius(d);
        float d1110 = (h11 + h10) / 2 + rndRadius(d);

        float h0001 = getFractalHeight(i0, j01, d0001, terrain,isset);
        float h0010 = getFractalHeight(i01, j0, d0010, terrain,isset);
        float h1101 = getFractalHeight(i01, j1, d1101, terrain,isset);
        float h1110 = getFractalHeight(i1, j01, d1110, terrain,isset);

        float dm = (float)((h0001 + h0010 + h1101 + h1110) / 4.0);
        float hm = getFractalHeight(i01, j01, dm, terrain,isset);

        if(id > 1 && jd > 1) {
            setFractalHeights(i0, j0, i01, j01, terrain, isset);
            setFractalHeights(i01, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i01, j1, terrain, isset);
            setFractalHeights(i01, j01, i1, j1, terrain, isset);
        } else if(jd > 1) {
            setFractalHeights(i0, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i1, j1, terrain, isset);
        } else {
            setFractalHeights(i0, j0, i01, j1, terrain, isset);
            setFractalHeights(i01, j0, i1, j1, terrain, isset);
        }
    }

    public static void setFractalHeights(Terrain terrain) {
        int N = terrain.getN();
        boolean[] isset = new boolean[N*N];
        setFractalHeights(0, 0, N - 1, N - 1, terrain, isset);
    }

    public static void smoothHeights(Terrain terrain) {
        int N = terrain.getN();
        int radius = (int)Math.ceil(Math.sqrt(N*N/2.0f));
        smoothHeights(N/2, N/2, radius, false, terrain);
    }

    public static void smoothHeights(int ic, int jc, int radius, boolean fallOff, Terrain terrain) {
        final int N = terrain.getN();
        final int w = 2*radius+1;
        float[] s = new float[w*w];
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;

                float m = computeEffect(i, j, ic, jc, radius, fallOff, N);
                if(m <= 0.0000001) {
                    s[sidx] = terrain.getHeight(i,j);
                    continue;
                }
                float h = 0;
                int c = 0;
                if(i > 0 && j > 0) {
                    h += terrain.getHeight(i-1,j-1);
                    c += 1;
                }
                if(i < N-1 && j > 0) {
                    h += terrain.getHeight(i+1,j-1);
                    c += 1;
                }
                if(i > 0 && j < N-1) {
                    h += terrain.getHeight(i-1,j+1);
                    c += 1;
                }
                if(i < N-1 && j < N-1) {
                    h += terrain.getHeight(i+1,j+1);
                    c += 1;
                }
                if(i > 0) {
                    h += terrain.getHeight(i-1,j);
                    c += 1;
                }
                if(j > 0) {
                    h += terrain.getHeight(i,j-1);
                    c += 1;
                }
                if(i < N-1) {
                    h += terrain.getHeight(i+1,j);
                    c += 1;
                }
                if(j < N-1) {
                    h += terrain.getHeight(i,j+1);
                    c += 1;
                }
                s[sidx] = (1-m) * terrain.getHeight(i,j) + m * h / c;
            }
        }
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;
                terrain.setHeight(i, j, s[sidx]);
            }
        }
    }

    public static void clampHeights(Terrain terrain) {
        int N = terrain.getN();
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                terrain.setHeight(i, j, Math.max(0, Math.min(255, terrain.getHeight(i, j))));
            }
        }
    }

    private static float computeEffect(int i, int j, int ic, int jc, int radius, boolean fallOff, int N) {
        if(i < 0 || j < 0 || i >= N || j >= N) return 0;
        if(!fallOff) return 1;
        int d2 = (ic-i)*(ic-i)+(jc-j)*(jc-j);
        if(d2 > radius*radius) return 0;
        return ((float)radius - (float)Math.sqrt(d2)) / (float)radius;
    }

    public static void addHeight(int i, int j, int radius, float add, Terrain terrain) {
        final int N = terrain.getN();
        for(int ja = -radius; ja <= radius; ja++) {
            int r = j + ja;
            if(r < 0 || r >= N) continue;
            for(int ia = -radius; ia <= radius; ia++) {
                int c = i + ia;
                if(c < 0 || c >= N) continue;
                float v = add * computeEffect(c, r, i, j, radius, true, N);
                float h = terrain.getHeight(c, r) + v;
                h = Math.max(0, Math.min(255, h));
                terrain.setHeight(c, r, h);
            }
        }
    }
}

--[ 2019.11.12.13.36.17.600.4 ]--
InitFile: /.cos265


--[ 2019.11.12.13.36.17.600.5 ]--
InitFile: /P04_Pathfinding.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/heightmaps" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.11.12.13.36.58.207.0 ]--
DisposeComponent
--[ 2019.12.01.15.13.40.270.0 ]--
NewLogger: P04_Pathfinding
Version: 1.3
--[ 2019.12.01.15.13.40.343.0 ]--
InitTree:
/out/production/P04_Pathfinding/.donotlog
/out/production/P04_Pathfinding/algs4.jar
/out/production/P04_Pathfinding/stdlib.jar
/out/production/P04_Pathfinding/Coord.class
/out/production/P04_Pathfinding/png2emap.py
/out/production/P04_Pathfinding/Walker.class
/out/production/P04_Pathfinding/Terrain.class
/out/production/P04_Pathfinding/ramp.png.emap
/out/production/P04_Pathfinding/ramp2.png.emap
/out/production/P04_Pathfinding/ramp3.png.emap
/out/production/P04_Pathfinding/mazeAB.png.emap
/out/production/P04_Pathfinding/usa128.png.emap
/out/production/P04_Pathfinding/usa256.png.emap
/out/production/P04_Pathfinding/Pathfinder.class
/out/production/P04_Pathfinding/usa1024.png.emap
/out/production/P04_Pathfinding/maze32_0.png.emap
/out/production/P04_Pathfinding/maze32_1.png.emap
/out/production/P04_Pathfinding/maze232_0.png.emap
/out/production/P04_Pathfinding/maze320_0.png.emap
/out/production/P04_Pathfinding/mazeBrain.png.emap
/out/production/P04_Pathfinding/TerrainEditor.class
/out/production/P04_Pathfinding/Pathfinder$PFNode.class
/out/production/P04_Pathfinding/PathfinderVisualizer.class
/out/production/P04_Pathfinding/InteractivePathfinderVisualizer.class
/src/algs4.jar
/src/Coord.java
/src/stdlib.jar
/src/Walker.java
/src/Terrain.java
/src/Pathfinder.java
/src/TerrainEditor.java
/src/PathfinderVisualizer.java
/src/InteractivePathfinderVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/heightmaps/.donotlog
/heightmaps/png2emap.py
/heightmaps/ramp.png.emap
/heightmaps/ramp2.png.emap
/heightmaps/ramp3.png.emap
/heightmaps/mazeAB.png.emap
/heightmaps/usa128.png.emap
/heightmaps/usa256.png.emap
/heightmaps/usa1024.png.emap
/heightmaps/maze32_0.png.emap
/heightmaps/maze32_1.png.emap
/heightmaps/maze232_0.png.emap
/heightmaps/maze320_0.png.emap
/heightmaps/mazeBrain.png.emap
/.cos265
/readme.html
/P04_Pathfinding.iml

--[ 2019.12.01.15.13.40.344.0 ]--
InitFile: /src/InteractivePathfinderVisualizer.java
import java.awt.event.KeyEvent;

/**
 * InteractivePathfinderVisualizer visualizes the terrain and the computed
 * path and allows the user to change parameters of the Pathfinder.  Below
 * is a list of commands and what they do.  Note: some of the commands
 * modify the properties of the path finder and some modify the terrain.
 *
 * Command        Action                                      Terrain
 * C              clear path
 * space          recompute path
 * S/E            set start/end location to mouse
 * left/right     halve/double path search heuristic value
 * 0/1            set path search heuristic to 0 or 1
 * W              start a walker to show the path
 * R              randomly generate a new terrain                *
 * M              smooths terrain under mouse                    *
 * shift+M        smooths all terrain                            *
 * up/down        increase/decrease terrain under mouse          *
 */

public class InteractivePathfinderVisualizer {
    private final static int DELAY = 10;

    // sets how many redraws it should take for the walker to reach its destination
    private final static float STEPS_TO_WALK = 100.0f;

    // for convenience, here are the emap files that are located under heightmaps/ folder
    // the python script in that folder converts png files to emap. \
    // you can use it to create your own maps to test your code
    private final static String[] emaps = {
            "maze32_0.png.emap",    // 0   (32x32 maze)
            "maze32_1.png.emap",    // 1   (another 32x32 maze)
            "maze232_0.png.emap",   // 2   (232x232 maze)
            "maze320_0.png.emap",   // 3   (same as maze32_0, only scaled up by 10x)
            "mazeAB.png.emap",      // 4   (a maze from a site no longer online :( )
            "mazeBrain.png.emap",   // 5   (...)
            "ramp.png.emap",        // 6   (some tests)
            "ramp2.png.emap",       // 7   (...)
            "ramp3.png.emap",       // 8   (...)
            "usa128.png.emap",      // 9   (elevation map of USA from https://bananas.openttd.org/en/heightmap/)
            "usa256.png.emap",      // 10  (same as usa128, only higher resolution)
            "usa1024.png.emap",     // 11  (same as usa128, only higher resolution
    };

    private final static String emapFilename = emaps[2];        // change index to load a different elevation map



    public static void main(String[] args) {
        Terrain terrain = new Terrain(emapFilename);
        Pathfinder pf = new Pathfinder(terrain);
        int N = terrain.getN();

        StdDraw.show(0);

        // set default starting and ending locations
        pf.setPathStart(new Coord(1, 1));
        pf.setPathEnd(new Coord(N-3, N-3));

        // find a path
        pf.computePath();

        PathfinderVisualizer.draw(terrain, pf, null, N);
        StdDraw.show(DELAY);

        // prevent repeated applications
        boolean keyboardR = false;
        boolean keyboardM = false;

        Walker walker = null;

        while(true) {
            boolean recompute = false;
            boolean redraw = false;

            // mouse location on map
            int mouseI = (int) ((StdDraw.mouseX()-24) / 464 * N);
            int mouseJ = (int) ((464 - (StdDraw.mouseY()-36)) / 464 * N);
            boolean isMouseOnMap = (mouseI >=0 && mouseI < N && mouseJ >= 0 && mouseJ < N);

            if(StdDraw.isKeyPressed(KeyEvent.VK_LEFT) || StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
                boolean keyboardLeft = StdDraw.isKeyPressed(KeyEvent.VK_LEFT);
                float m = keyboardLeft ? 0.5f : 2.0f;
                float h = pf.getHeuristic() * m;
                h = Math.max(1.0f/1024.0f, Math.min(1048576.0f, h));
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_0) || StdDraw.isKeyPressed(KeyEvent.VK_1)) {
                boolean keyboard0 = StdDraw.isKeyPressed(KeyEvent.VK_0);
                float h = keyboard0 ? 0 : 1;
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_C)) {
                pf.resetPath();
                walker = null;
                redraw = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_R) && !keyboardR) {
                TerrainEditor.setFractalHeights(terrain);
                TerrainEditor.clampHeights(terrain);
                recompute = true;
            }
            keyboardR = StdDraw.isKeyPressed(KeyEvent.VK_R);

            if(StdDraw.isKeyPressed(KeyEvent.VK_M)) {
                if(StdDraw.isKeyPressed(KeyEvent.VK_SHIFT)) {
                    if(!keyboardM) {
                        TerrainEditor.smoothHeights(terrain);
                        recompute = true;
                    }
                } else {
                    TerrainEditor.smoothHeights(mouseI, mouseJ, N / 20, true, terrain);
                    recompute = true;
                }
            }
            keyboardM = StdDraw.isKeyPressed(KeyEvent.VK_M);

            if(StdDraw.isKeyPressed(KeyEvent.VK_SPACE)) {
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_UP) || StdDraw.isKeyPressed(KeyEvent.VK_DOWN)) {
                boolean keyboardUp = StdDraw.isKeyPressed(KeyEvent.VK_UP);
                float add = keyboardUp ? 8.0f : -8.0f;
                TerrainEditor.addHeight(mouseI, mouseJ, N / 20, add, terrain);
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_S)) {
                pf.setPathStart(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_E)) {
                pf.setPathEnd(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_W)) {
                Iterable<Coord> path = pf.getPathSolution();
                if(path != null) {
                    walker = new Walker(terrain, pf.getPathSolution());
                }
            }

            if(walker != null) {
                if(walker.doneWalking()) {
                    walker = null;
                } else {
                    walker.advance(pf.getPathCost() / STEPS_TO_WALK);
                }
                redraw = true;
            }

            if(recompute) {
                walker = null;
                pf.resetPath();
                if(pf.getPathStart() != null && pf.getPathEnd() != null) {
                    pf.computePath();
                }
                redraw = true;
            }

            if(redraw) {
                PathfinderVisualizer.draw(terrain, pf, walker, N);
                StdDraw.show(DELAY);
            } else {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    /* do nothing */
                }
            }
        }
    }
}

--[ 2019.12.01.15.13.40.344.1 ]--
InitFile: /src/PathfinderVisualizer.java
/**
 * PathfinderVisualizer visualizes the terrain and found path.
 */

import java.awt.Color;
import java.awt.Font;

public class PathfinderVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // color for different elevations.  must be in ascending order!
    private final static int[][] elevationColors = {
            // h    r   g   b   where h=height, r=red, g=green, b=blue
            {  0,   0,  0,  0},
            {  2,   0,  0,160},
            {  4,   0,224,224},
            { 16, 192,192,  0},
            { 64,  16,255, 16},
            {128,  32,224, 32},
            {192, 128,128,  8},
            {224, 164,164,164},
            {255, 255,255,255}
    };

    private final static Color cStart    = new Color(128, 128, 255);
    private final static Color cEnd      = new Color(255, 128, 128);
    private final static Color cSolution = new Color(255, 128, 255);
    private final static Color cSearched = new Color(128,   0, 128);

    // linearly interpolating between the corresponding rgb values
    private static Color colorLERP(float v1, int r0, int g0, int b0, int r1, int g1, int b1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * r0 + v1 * r1);
        int g = (int)(v0 * g0 + v1 * g1);
        int b = (int)(v0 * b0 + v1 * b1);
        return new Color(r, g, b);
    }
    private static Color colorLERP(float v1, Color c0, Color c1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * c0.getRed()   + v1 * c1.getRed());
        int g = (int)(v0 * c0.getGreen() + v1 * c1.getGreen());
        int b = (int)(v0 * c0.getBlue()  + v1 * c1.getBlue());
        int a = (int)(v0 * c0.getAlpha() + v1 * c1.getAlpha());
        return new Color(r, g, b, a);
    }

    // returns color for given height
    private static Color height2Color(int h) {
        h = Math.max(0, Math.min(255, h));

        int[] ec0 = elevationColors[0];  // default lower bound
        int[] ec1 = elevationColors[1];  // default upper bound

        // find upper bound while updating lower bound
        for(int i = 1; i < elevationColors.length; i++) {
            ec1 = elevationColors[i];
            if(h >= ec0[0] && h <= ec1[0]) break;
            ec0 = ec1;
        }

        int h0=ec0[0], r0=ec0[1], g0=ec0[2], b0=ec0[3];
        int h1=ec1[0], r1=ec1[1], g1=ec1[2], b1=ec1[3];
        float v1 = ((float)(h - h0)) / ((float)(h1 - h0));

        return colorLERP(v1, r0, g0, b0, r1, g1, b1);
    }

    private static void drawCircle(int i, int j, int N, double rad) {
        int c = (int)((i+0.5f) * 464.0f / N);
        int r = (int)((j+0.5f) * 464.0f / N);
        StdDraw.circle(c + 24, 464 - r + 36, rad);
    }
    public static void drawCircle(Coord loc, int N, double rad) {
        drawCircle(loc.getI(), loc.getJ(), N, rad);
    }

    private static void drawPath(Iterable<Coord> path, int N) {
        boolean first = true;
        int c0 = 0, r0 = 0;
        for (Coord loc : path) {
            int c1 = (int)((loc.getI()+0.5f) * 464.0f / N);
            int r1 = (int)((loc.getJ()+0.5f) * 464.0f / N);
            if(!first) {
                StdDraw.line(c0 + 24, 464 - r0 + 36, c1 + 24, 464 - r1 + 36);
            }
            first = false;
            c0 = c1; r0 = r1;
        }
    }

    // draw N-by-N pathfinding map
    public static void draw(Terrain terrain, Pathfinder pf, Walker walker, int N) {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.filledSquare(256, 256 + 12, 464 / 2);

        // draw terrain
        for(int row = 0; row < 464; row++) {
            int j = (int)((float)row/464.0f * N);
            for(int col = 0; col < 464; col++) {
                int i = (int)((float)col/464.0f * N);
                Coord loc = new Coord(i,j);
                Color c = height2Color(terrain.getHeight(loc));
                if(pf.wasSearched(loc)) {
                    c = colorLERP(0.50f, c, cSearched);
                }
                StdDraw.setPenColor(c);
                StdDraw.filledSquare(col + 24, 464 - row + 36, 1);
            }
        }

        // draw path start
        if(pf.getPathStart() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathStart(), N, 4.0);

            StdDraw.setPenColor(cStart);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathStart(), N, 4.0);
        }

        // draw path end
        if(pf.getPathEnd() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathEnd(), N, 4.0);

            StdDraw.setPenColor(cEnd);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathEnd(), N, 4.0);
        }

        // draw found path
        if(pf.foundPath()) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawPath(pf.getPathSolution(), N);

            StdDraw.setPenColor(cSolution);
            StdDraw.setPenRadius(0.002);
            drawPath(pf.getPathSolution(), N);
        }

        // draw walker
        if(walker != null) {
            Coord loc = walker.getLocation();
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);

            StdDraw.setPenColor(StdDraw.WHITE);
            StdDraw.setPenRadius(0.002);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);
        }

        // write status text
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.text(96, 12, "heuristic: " + pf.getHeuristic());
        if(pf.foundPath()) StdDraw.text(256, 12, "path: " + pf.getPathCost());
        else               StdDraw.text(256, 12, "no path found");
        StdDraw.text(512-96, 12, "searched: " + pf.getSearchSize() + " (" + (int)(100.0f * pf.getSearchSize() / (N*N)) + "%)");
    }
}

--[ 2019.12.01.15.13.40.344.2 ]--
InitFile: /src/Terrain.java
import java.lang.IndexOutOfBoundsException;

/**
 * Terrain stores elevations for map and computes distance and
 * cost in traversing the terrain.
 */

public class Terrain {
    private int N;
    private int[][] heights;

    public Terrain(int N) {
        this.N = N;
        this.heights = new int[N][N];
    }

    public Terrain(int[][] heights) {
        this.N = heights.length;
        this.heights = heights;
    }

    public Terrain(String emapfile) {
        In in = new In(emapfile);
        this.N = in.readInt();
        this.heights = new int[N][N];
        for (int j = 0; j < N; j++) {
            for (int i = 0; i < N; i++) {
                this.heights[i][j] = in.readInt();
            }
        }
    }

    public int getN() {
        return N;
    }

    public void setHeight(int i, int j, int h) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        heights[i][j] = h;
    }
    public void setHeight(int i, int j, float h) {
        setHeight(i, j, (int) h);
    }
    public void setHeight(Coord loc, int h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }
    public void setHeight(Coord loc, float h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }

    public int getHeight(int i, int j) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        return heights[i][j];
    }
    public int getHeight(Coord loc) {
        return getHeight(loc.getI(), loc.getJ());
    }

    // computes distance between (i0,j0) and (i1,j1) as the crow flies
    public float computeDistance(int i0, int j0, int i1, int j1) {
        return (float)Math.sqrt((i0 - i1) * (i0 - i1) + (j0 - j1) * (j0 - j1));
    }
    public float computeDistance(Coord c0, Coord c1) {
        return computeDistance(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }

    public float computeTravelCost(int i0, int j0, int i1, int j1) {
        float h0 = getHeight(i0, j0), h1 = getHeight(i1, j1);
        float climb = (float)Math.pow(Math.abs(h0 - h1) * 1000.0, 1.5);
        float dist = computeDistance(i0,j0, i1,j1);
        return (1.0f + climb) * dist;
    }
    public float computeTravelCost(Coord c0, Coord c1) {
        return computeTravelCost(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }
    public float computeTravelCost(Iterable<Coord> cs) {
        Coord c0 = null;
        float cost = 0.0f;
        for(Coord c1 : cs) {
            if(c0 != null) cost += computeTravelCost(c0, c1);
            c0 = c1;
        }
        return cost;
    }
}

--[ 2019.12.01.15.13.40.345.0 ]--
InitFile: /src/Walker.java
import java.util.Iterator;

/**
 * Walker takes an Iterable of Coords and simulates an individual
 * walking along the path over the given Terrain
 */
public class Walker {

    // terrain: the Terrain the Walker traverses
    // path: the sequence of Coords the Walker follows
    public Walker(Terrain terrain, Iterable<Coord> path) {
    }

    // returns the Walker's current location
    public Coord getLocation() {
        return null;
    }

    // returns true if Walker has reached the end Coord (last in path)
    public boolean doneWalking() {
        return true;
    }

    // advances the Walker along path
    // byTime: how long the Walker should traverse (may be any non-negative value)
    public void advance(float byTime) {
    }

}

--[ 2019.12.01.15.13.40.345.1 ]--
InitFile: /src/Coord.java
/**
 * Coordinates is an immutable type that store the tuple (i, j)
 */
public final class Coord {
    private final int i;
    private final int j;

    public Coord(int i, int j) {
        this.i = i;
        this.j = j;
    }

    public int getI() { return i; }
    public int getJ() { return j; }

    public boolean isInBounds(int minI, int minJ, int maxI, int maxJ) {
        return i >= minI && j >= minJ && i <= maxI && j <= maxJ;
    }
    public boolean isInBounds(Coord min, Coord max) {
        return i >= min.i && i <= max.i && j >= min.j && j <= max.j;
    }

    public Coord add(int addI, int addJ) {
        return new Coord(i + addI, j + addJ);
    }
    public Coord add(Coord that) { return new Coord(i + that.i, j + that.j); }

    public String toString() { return "(" + i + "," + j + ")"; }

    public boolean equals(Object o) {
        if(this == o) return true;
        if(o == null) return false;
        if(o.getClass() != this.getClass()) return false;
        Coord that = (Coord) o;
        if(this.i != that.i) return false;
        if(this.j != that.j) return false;
        return true;
    }
}

--[ 2019.12.01.15.13.40.345.2 ]--
InitFile: /src/Pathfinder.java
import java.lang.IndexOutOfBoundsException;
import java.lang.IllegalArgumentException;
import java.util.Iterator;

/**
 * Pathfinder uses A* search to find a near optimal path
 * between to locations with given terrain.
 */

public class Pathfinder {

    private Coord start;
    private Coord end;
    private float heuristic;
    private boolean pathFound;
    private Stack<Coord> s;
    private Terrain terrain;
    private Boolean[][] board;

    /**
     * PFNode will be the key for MinPQ (used in computePath())
     */
    private class PFNode implements Comparable<PFNode> {
        Coord loc;
        PFNode fromNode;
        float runningCost;
        // loc: the location of the PFNode
        // fromNode: how did we get here? (linked list back to start)
        public PFNode(Coord loc, PFNode fromNode) {
            this.loc = loc;
            this.fromNode = fromNode;
            if(fromNode == null){
                runningCost = 0;
            }
            else{
                runningCost = fromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);

            }
        }

        // compares this with that, used to find minimum cost PFNode
        public int compareTo(PFNode that) {
            if(this.getCost(heuristic) < that.getCost(heuristic)) return -1;
            else if (this.getCost(heuristic) > that.getCost(heuristic)) return 1;
            return 0;
        }

        // returns the cost to travel from starting point to this
        // via the fromNode chain
        public float getCost(float heuristic) {
            /*
            float cost;
            if(this.fromNode == null){
                return 0;
            }
            cost = this.fromNode.getCost(0) + terrain.computeTravelCost(this.loc, fromNode.loc);


             */
            return runningCost;
        }

        // returns if this PFNode is not marked invalid
        public boolean isValid() {
            return false;
        }

        // marks the PFNode as invalid
        public void invalidate() {
        }

        // returns if the PFNode is marked as used
        public boolean isUsed() {
            return board[loc.getJ()][loc.getI()];
        }

        // marks the PFNode as used
        public void use() { }

        // returns an Iterable of PFNodes that surround this
        public Iterable<PFNode> neighbors() {
            Stack<PFNode> s = new Stack<>();
            s.push(new PFNode(new Coord(loc.getI() + 1, loc.getJ()), this));
            s.push(new PFNode(new Coord(loc.getI() - 1, loc.getJ()), this));
            s.push(new PFNode(new Coord(loc.getI() , loc.getJ() + 1), this));
            s.push(new PFNode(new Coord(loc.getI(), loc.getJ() - 1), this));
            return s;
        }

        public Coord getLoc(){
            return loc;
        }

        public PFNode getFromNode() {
            return fromNode;
        }
    }

    public Pathfinder(Terrain terrain) {
        this.terrain = terrain;
    }

    public void setPathStart(Coord loc) {
        start = loc;
    }

    public Coord getPathStart() {
        return start;
    }

    public void setPathEnd(Coord loc) {
        end = loc;
    }

    public Coord getPathEnd() {
        return end;
    }

    public void setHeuristic(float v)
    {
        heuristic = v;
    }

    public float getHeuristic() {
        return heuristic;
    }

    public void resetPath() {
    }

    public void computePath() {



        //Initialize the board and then print the current state of it
        board = new Boolean[terrain.getN()][terrain.getN()];
        for(int i = 0; i < terrain.getN(); i++){
            for(int j = 0; j < terrain.getN(); j++){
                board[i][j] = false;
                //System.out.print(board[i][j] + " ");
            }
            //System.out.println();
        }



        s = new Stack<>();
        MinPQ<PFNode> pfQueue = new MinPQ<>();
        PFNode begin = new PFNode(start, null);

        pfQueue.insert(begin);


        while(!pfQueue.min().loc.equals(end)){
            begin = pfQueue.delMin();
            if(board[begin.loc.getJ()][begin.loc.getI()]){
                continue;
            }
            board[begin.loc.getJ()][begin.loc.getI()] = true;
            for(PFNode p : begin.neighbors()){
                //Only add the neighbors to the queue if they're in range of the board
                if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() < terrain.getN() && p.loc.getI() >= 0){
                    pfQueue.insert(p);

                }
            }
            if(pfQueue.min().loc.equals(end)){
                break;
            }

        }











        //Temporary stack just so that something shows up when the program gets run and we don't get a NullPointerException
        //s.push(start);
        //s.push(end);


        PFNode cur = pfQueue.min();
        while(cur.fromNode != null){
            s.push(cur.loc);
            cur = cur.fromNode;
        }
        s.push(start);



        pathFound = true;
    }

    public boolean foundPath() {
        return pathFound;
    }

    public float getPathCost() {
        return 0;
    }

    public int getSearchSize() {
        return 0;
    }

    public Iterable<Coord> getPathSolution() {

        //Return a stack of coordinates for the visualizer
        return s;
    }

    public boolean wasSearched(Coord loc) {
        return board[loc.getJ()][loc.getI()];
    }
}

--[ 2019.12.01.15.13.40.345.3 ]--
InitFile: /src/TerrainEditor.java
/**
 * The following class provides some simple terrain editing functions.
 */
public class TerrainEditor {
    private static float rndRadius(float d) {
        return (float)StdRandom.uniform(-d,d);
    }

    private static float getFractalHeight(int i, int j, float dh, Terrain terrain, boolean[] isset) {
        int N = terrain.getN();
        dh = Math.max(-64, Math.min(255+64, dh));   // allow the height to go just a bit out of range
        if(!isset[i + j * N]) {
            isset[i + j * N] = true;
            terrain.setHeight(i, j, dh);
        }
        return terrain.getHeight(i,j);
    }

    private static void setFractalHeights(int i0, int j0, int i1, int j1, Terrain terrain, boolean[] isset) {
        int id = i1-i0;
        int jd = j1-j0;
        int i01 = (i0+i1)/2;
        int j01 = (j0+j1)/2;

        if(id <= 1 && jd <= 1) return;

        float h00 = getFractalHeight(i0,j0,32,terrain,isset);
        float h01 = getFractalHeight(i0,j1,32,terrain,isset);
        float h10 = getFractalHeight(i1,j0,32,terrain,isset);
        float h11 = getFractalHeight(i1,j1,32,terrain,isset);

        float d = (float)(Math.sqrt((i1-i0)*(i1-i0) + (j1-j0)*(j1-j0)) * 0.5);

        float d0001 = (h00 + h01) / 2 + rndRadius(d);
        float d0010 = (h00 + h10) / 2 + rndRadius(d);
        float d1101 = (h11 + h01) / 2 + rndRadius(d);
        float d1110 = (h11 + h10) / 2 + rndRadius(d);

        float h0001 = getFractalHeight(i0, j01, d0001, terrain,isset);
        float h0010 = getFractalHeight(i01, j0, d0010, terrain,isset);
        float h1101 = getFractalHeight(i01, j1, d1101, terrain,isset);
        float h1110 = getFractalHeight(i1, j01, d1110, terrain,isset);

        float dm = (float)((h0001 + h0010 + h1101 + h1110) / 4.0);
        float hm = getFractalHeight(i01, j01, dm, terrain,isset);

        if(id > 1 && jd > 1) {
            setFractalHeights(i0, j0, i01, j01, terrain, isset);
            setFractalHeights(i01, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i01, j1, terrain, isset);
            setFractalHeights(i01, j01, i1, j1, terrain, isset);
        } else if(jd > 1) {
            setFractalHeights(i0, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i1, j1, terrain, isset);
        } else {
            setFractalHeights(i0, j0, i01, j1, terrain, isset);
            setFractalHeights(i01, j0, i1, j1, terrain, isset);
        }
    }

    public static void setFractalHeights(Terrain terrain) {
        int N = terrain.getN();
        boolean[] isset = new boolean[N*N];
        setFractalHeights(0, 0, N - 1, N - 1, terrain, isset);
    }

    public static void smoothHeights(Terrain terrain) {
        int N = terrain.getN();
        int radius = (int)Math.ceil(Math.sqrt(N*N/2.0f));
        smoothHeights(N/2, N/2, radius, false, terrain);
    }

    public static void smoothHeights(int ic, int jc, int radius, boolean fallOff, Terrain terrain) {
        final int N = terrain.getN();
        final int w = 2*radius+1;
        float[] s = new float[w*w];
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;

                float m = computeEffect(i, j, ic, jc, radius, fallOff, N);
                if(m <= 0.0000001) {
                    s[sidx] = terrain.getHeight(i,j);
                    continue;
                }
                float h = 0;
                int c = 0;
                if(i > 0 && j > 0) {
                    h += terrain.getHeight(i-1,j-1);
                    c += 1;
                }
                if(i < N-1 && j > 0) {
                    h += terrain.getHeight(i+1,j-1);
                    c += 1;
                }
                if(i > 0 && j < N-1) {
                    h += terrain.getHeight(i-1,j+1);
                    c += 1;
                }
                if(i < N-1 && j < N-1) {
                    h += terrain.getHeight(i+1,j+1);
                    c += 1;
                }
                if(i > 0) {
                    h += terrain.getHeight(i-1,j);
                    c += 1;
                }
                if(j > 0) {
                    h += terrain.getHeight(i,j-1);
                    c += 1;
                }
                if(i < N-1) {
                    h += terrain.getHeight(i+1,j);
                    c += 1;
                }
                if(j < N-1) {
                    h += terrain.getHeight(i,j+1);
                    c += 1;
                }
                s[sidx] = (1-m) * terrain.getHeight(i,j) + m * h / c;
            }
        }
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;
                terrain.setHeight(i, j, s[sidx]);
            }
        }
    }

    public static void clampHeights(Terrain terrain) {
        int N = terrain.getN();
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                terrain.setHeight(i, j, Math.max(0, Math.min(255, terrain.getHeight(i, j))));
            }
        }
    }

    private static float computeEffect(int i, int j, int ic, int jc, int radius, boolean fallOff, int N) {
        if(i < 0 || j < 0 || i >= N || j >= N) return 0;
        if(!fallOff) return 1;
        int d2 = (ic-i)*(ic-i)+(jc-j)*(jc-j);
        if(d2 > radius*radius) return 0;
        return ((float)radius - (float)Math.sqrt(d2)) / (float)radius;
    }

    public static void addHeight(int i, int j, int radius, float add, Terrain terrain) {
        final int N = terrain.getN();
        for(int ja = -radius; ja <= radius; ja++) {
            int r = j + ja;
            if(r < 0 || r >= N) continue;
            for(int ia = -radius; ia <= radius; ia++) {
                int c = i + ia;
                if(c < 0 || c >= N) continue;
                float v = add * computeEffect(c, r, i, j, radius, true, N);
                float h = terrain.getHeight(c, r) + v;
                h = Math.max(0, Math.min(255, h));
                terrain.setHeight(c, r, h);
            }
        }
    }
}

--[ 2019.12.01.15.13.40.345.4 ]--
InitFile: /.cos265


--[ 2019.12.01.15.13.40.345.5 ]--
InitFile: /P04_Pathfinding.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/heightmaps" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.12.01.15.16.14.891.0 ]--
:/src/Pathfinder.java
r 219         return \board[loc.getJ()][loc.getI()];
--[ 2019.12.01.15.16.15.859.0 ]--
r 219         return board[loc.getJ()][loc.getI()];
--[ 2019.12.01.15.16.16.122.0 ]--
+ 219         return 
r 220         board[loc.getJ()][loc.getI()];
--[ 2019.12.01.15.16.16.235.0 ]--
r 220                 board[loc.getJ()][loc.getI()];
--[ 2019.12.01.15.16.16.304.0 ]--
r 220                 //board[loc.getJ()][loc.getI()];
--[ 2019.12.01.15.16.17.528.0 ]--
r 219         return n
--[ 2019.12.01.15.16.17.557.0 ]--
r 219         return nu
--[ 2019.12.01.15.16.17.859.0 ]--
r 219         return nul
--[ 2019.12.01.15.16.18.249.0 ]--
r 219         return null
--[ 2019.12.01.15.16.18.385.0 ]--
r 219         return null;
--[ 2019.12.01.15.16.24.349.0 ]--
UpdateTree (AD): 0 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class

--[ 2019.12.01.15.16.24.350.0 ]--
CompilationStatus (AEW): 0 1 0
[Ljava.lang.String;@4b801a44
--[ 2019.12.01.15.16.28.572.0 ]--
r 219         return f;
--[ 2019.12.01.15.16.28.573.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.28.588.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.28.770.0 ]--
r 219         return fa;
--[ 2019.12.01.15.16.28.770.1 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.28.773.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.28.797.0 ]--
r 219         return fak;
--[ 2019.12.01.15.16.28.797.1 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.28.802.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.28.860.0 ]--
r 219         return faks;
--[ 2019.12.01.15.16.28.860.1 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.28.864.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.28.986.0 ]--
r 219         return fakse;
--[ 2019.12.01.15.16.28.987.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.28.990.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.29.405.0 ]--
r 219         return faks;
--[ 2019.12.01.15.16.29.406.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.29.413.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.29.500.0 ]--
r 219         return fak;
--[ 2019.12.01.15.16.29.501.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.29.504.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.29.599.0 ]--
r 219         return fa;
--[ 2019.12.01.15.16.29.599.1 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.29.602.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.29.752.0 ]--
r 219         return fal;
--[ 2019.12.01.15.16.29.752.1 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.29.756.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.29.854.0 ]--
r 219         return fals;
--[ 2019.12.01.15.16.29.855.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.29.859.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.30.057.0 ]--
r 219         return false;
--[ 2019.12.01.15.16.30.058.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.30.061.0 ]--
UpdateTree (AD): 2 2
- /out/production/P04_Pathfinding/Pathfinder$PFNode.class
- /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.33.800.0 ]--
UpdateTree (AD): 2 0
+ /out/production/P04_Pathfinding/Pathfinder.class
+ /out/production/P04_Pathfinding/Pathfinder$PFNode.class

--[ 2019.12.01.15.16.33.801.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.12.01.15.16.53.762.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.12.01.15.17.05.744.0 ]--
:/src/InteractivePathfinderVisualizer.java
r 46     private final static String emapFilename = emaps[];        // change index to load a different elevation map
--[ 2019.12.01.15.17.05.787.0 ]--
r 46     private final static String emapFilename = emaps[0];        // change index to load a different elevation map
--[ 2019.12.01.15.17.09.509.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.12.01.15.17.34.366.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.12.01.15.19.33.591.0 ]--
:/src/Pathfinder.java
+ 18     private boolean[][] board;
r 19     private int searchSize;
+ 37                 if(loc.getJ() >= 0 && loc.getJ() < terrain.getN() && loc.getI() >= 0 && loc.getI() < terrain.getN()){
+ 38                     runningCost = fromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);
r 39                     searchSize = (int)runningCost;
r 40                 }
r 46             if(this.getCost(0) < that.getCost(0)) return -1;
r 47             else if (this.getCost(0) > that.getCost(0)) return 1;
- 54
- 54
- 54
- 54
- 54
- 54
- 54
- 54
- 54
- 82
- 82
- 82
- 82
- 82
- 82
- 82
- 82
r 122         board = new boolean[terrain.getN()][terrain.getN()];
r 148                 if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() >= 0 && p.loc.getI() < terrain.getN()){
- 150
- 157
- 167
- 167
- 167
r 186         return searchSize;
r 190         return searchSize;
r 200         return board[loc.getJ()][loc.getI()];
--[ 2019.12.01.15.19.40.722.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.12.01.15.19.52.313.0 ]--
r 200         return f;
--[ 2019.12.01.15.19.52.533.0 ]--
r 200         return fa;
--[ 2019.12.01.15.19.52.574.0 ]--
r 200         return fal;
--[ 2019.12.01.15.19.52.613.0 ]--
r 200         return fals;
--[ 2019.12.01.15.19.52.731.0 ]--
r 200         return false;
--[ 2019.12.01.15.19.52.849.0 ]--
r 200         return false ;
--[ 2019.12.01.15.19.52.905.0 ]--
r 200         return false;
--[ 2019.12.01.15.19.56.721.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.12.01.15.20.14.669.0 ]--
:/src/InteractivePathfinderVisualizer.java
r 46     private final static String emapFilename = emaps[];        // change index to load a different elevation map
--[ 2019.12.01.15.20.14.725.0 ]--
r 46     private final static String emapFilename = emaps[2];        // change index to load a different elevation map
--[ 2019.12.01.15.20.18.592.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.12.01.15.20.25.748.0 ]--
r 46     private final static String emapFilename = emaps[];        // change index to load a different elevation map
--[ 2019.12.01.15.20.25.848.0 ]--
r 46     private final static String emapFilename = emaps[1];        // change index to load a different elevation map
--[ 2019.12.01.15.20.25.964.0 ]--
r 46     private final static String emapFilename = emaps[11];        // change index to load a different elevation map
--[ 2019.12.01.15.20.29.244.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2019.12.01.15.30.49.584.0 ]--
DisposeComponent
--[ 2019.12.08.13.58.38.703.0 ]--
NewLogger: P04_Pathfinding
Version: 1.3
--[ 2019.12.08.13.58.38.945.0 ]--
InitTree:
/out/production/P04_Pathfinding/.donotlog
/out/production/P04_Pathfinding/algs4.jar
/out/production/P04_Pathfinding/stdlib.jar
/out/production/P04_Pathfinding/Coord.class
/out/production/P04_Pathfinding/png2emap.py
/out/production/P04_Pathfinding/Walker.class
/out/production/P04_Pathfinding/Terrain.class
/out/production/P04_Pathfinding/ramp.png.emap
/out/production/P04_Pathfinding/ramp2.png.emap
/out/production/P04_Pathfinding/ramp3.png.emap
/out/production/P04_Pathfinding/mazeAB.png.emap
/out/production/P04_Pathfinding/usa128.png.emap
/out/production/P04_Pathfinding/usa256.png.emap
/out/production/P04_Pathfinding/Pathfinder.class
/out/production/P04_Pathfinding/usa1024.png.emap
/out/production/P04_Pathfinding/maze32_0.png.emap
/out/production/P04_Pathfinding/maze32_1.png.emap
/out/production/P04_Pathfinding/maze232_0.png.emap
/out/production/P04_Pathfinding/maze320_0.png.emap
/out/production/P04_Pathfinding/mazeBrain.png.emap
/out/production/P04_Pathfinding/TerrainEditor.class
/out/production/P04_Pathfinding/Pathfinder$PFNode.class
/out/production/P04_Pathfinding/PathfinderVisualizer.class
/out/production/P04_Pathfinding/InteractivePathfinderVisualizer.class
/src/algs4.jar
/src/Coord.java
/src/stdlib.jar
/src/Walker.java
/src/Terrain.java
/src/Pathfinder.java
/src/TerrainEditor.java
/src/PathfinderVisualizer.java
/src/InteractivePathfinderVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/heightmaps/.donotlog
/heightmaps/png2emap.py
/heightmaps/ramp.png.emap
/heightmaps/ramp2.png.emap
/heightmaps/ramp3.png.emap
/heightmaps/mazeAB.png.emap
/heightmaps/usa128.png.emap
/heightmaps/usa256.png.emap
/heightmaps/usa1024.png.emap
/heightmaps/maze32_0.png.emap
/heightmaps/maze32_1.png.emap
/heightmaps/maze232_0.png.emap
/heightmaps/maze320_0.png.emap
/heightmaps/mazeBrain.png.emap
/.cos265
/readme.html
/P04_Pathfinding.iml

--[ 2019.12.08.13.58.38.946.0 ]--
InitFile: /src/InteractivePathfinderVisualizer.java
import java.awt.event.KeyEvent;

/**
 * InteractivePathfinderVisualizer visualizes the terrain and the computed
 * path and allows the user to change parameters of the Pathfinder.  Below
 * is a list of commands and what they do.  Note: some of the commands
 * modify the properties of the path finder and some modify the terrain.
 *
 * Command        Action                                      Terrain
 * C              clear path
 * space          recompute path
 * S/E            set start/end location to mouse
 * left/right     halve/double path search heuristic value
 * 0/1            set path search heuristic to 0 or 1
 * W              start a walker to show the path
 * R              randomly generate a new terrain                *
 * M              smooths terrain under mouse                    *
 * shift+M        smooths all terrain                            *
 * up/down        increase/decrease terrain under mouse          *
 */

public class InteractivePathfinderVisualizer {
    private final static int DELAY = 10;

    // sets how many redraws it should take for the walker to reach its destination
    private final static float STEPS_TO_WALK = 100.0f;

    // for convenience, here are the emap files that are located under heightmaps/ folder
    // the python script in that folder converts png files to emap. \
    // you can use it to create your own maps to test your code
    private final static String[] emaps = {
            "maze32_0.png.emap",    // 0   (32x32 maze)
            "maze32_1.png.emap",    // 1   (another 32x32 maze)
            "maze232_0.png.emap",   // 2   (232x232 maze)
            "maze320_0.png.emap",   // 3   (same as maze32_0, only scaled up by 10x)
            "mazeAB.png.emap",      // 4   (a maze from a site no longer online :( )
            "mazeBrain.png.emap",   // 5   (...)
            "ramp.png.emap",        // 6   (some tests)
            "ramp2.png.emap",       // 7   (...)
            "ramp3.png.emap",       // 8   (...)
            "usa128.png.emap",      // 9   (elevation map of USA from https://bananas.openttd.org/en/heightmap/)
            "usa256.png.emap",      // 10  (same as usa128, only higher resolution)
            "usa1024.png.emap",     // 11  (same as usa128, only higher resolution
    };

    private final static String emapFilename = emaps[11];        // change index to load a different elevation map



    public static void main(String[] args) {
        Terrain terrain = new Terrain(emapFilename);
        Pathfinder pf = new Pathfinder(terrain);
        int N = terrain.getN();

        StdDraw.show(0);

        // set default starting and ending locations
        pf.setPathStart(new Coord(1, 1));
        pf.setPathEnd(new Coord(N-3, N-3));

        // find a path
        pf.computePath();

        PathfinderVisualizer.draw(terrain, pf, null, N);
        StdDraw.show(DELAY);

        // prevent repeated applications
        boolean keyboardR = false;
        boolean keyboardM = false;

        Walker walker = null;

        while(true) {
            boolean recompute = false;
            boolean redraw = false;

            // mouse location on map
            int mouseI = (int) ((StdDraw.mouseX()-24) / 464 * N);
            int mouseJ = (int) ((464 - (StdDraw.mouseY()-36)) / 464 * N);
            boolean isMouseOnMap = (mouseI >=0 && mouseI < N && mouseJ >= 0 && mouseJ < N);

            if(StdDraw.isKeyPressed(KeyEvent.VK_LEFT) || StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
                boolean keyboardLeft = StdDraw.isKeyPressed(KeyEvent.VK_LEFT);
                float m = keyboardLeft ? 0.5f : 2.0f;
                float h = pf.getHeuristic() * m;
                h = Math.max(1.0f/1024.0f, Math.min(1048576.0f, h));
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_0) || StdDraw.isKeyPressed(KeyEvent.VK_1)) {
                boolean keyboard0 = StdDraw.isKeyPressed(KeyEvent.VK_0);
                float h = keyboard0 ? 0 : 1;
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_C)) {
                pf.resetPath();
                walker = null;
                redraw = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_R) && !keyboardR) {
                TerrainEditor.setFractalHeights(terrain);
                TerrainEditor.clampHeights(terrain);
                recompute = true;
            }
            keyboardR = StdDraw.isKeyPressed(KeyEvent.VK_R);

            if(StdDraw.isKeyPressed(KeyEvent.VK_M)) {
                if(StdDraw.isKeyPressed(KeyEvent.VK_SHIFT)) {
                    if(!keyboardM) {
                        TerrainEditor.smoothHeights(terrain);
                        recompute = true;
                    }
                } else {
                    TerrainEditor.smoothHeights(mouseI, mouseJ, N / 20, true, terrain);
                    recompute = true;
                }
            }
            keyboardM = StdDraw.isKeyPressed(KeyEvent.VK_M);

            if(StdDraw.isKeyPressed(KeyEvent.VK_SPACE)) {
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_UP) || StdDraw.isKeyPressed(KeyEvent.VK_DOWN)) {
                boolean keyboardUp = StdDraw.isKeyPressed(KeyEvent.VK_UP);
                float add = keyboardUp ? 8.0f : -8.0f;
                TerrainEditor.addHeight(mouseI, mouseJ, N / 20, add, terrain);
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_S)) {
                pf.setPathStart(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_E)) {
                pf.setPathEnd(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_W)) {
                Iterable<Coord> path = pf.getPathSolution();
                if(path != null) {
                    walker = new Walker(terrain, pf.getPathSolution());
                }
            }

            if(walker != null) {
                if(walker.doneWalking()) {
                    walker = null;
                } else {
                    walker.advance(pf.getPathCost() / STEPS_TO_WALK);
                }
                redraw = true;
            }

            if(recompute) {
                walker = null;
                pf.resetPath();
                if(pf.getPathStart() != null && pf.getPathEnd() != null) {
                    pf.computePath();
                }
                redraw = true;
            }

            if(redraw) {
                PathfinderVisualizer.draw(terrain, pf, walker, N);
                StdDraw.show(DELAY);
            } else {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    /* do nothing */
                }
            }
        }
    }
}

--[ 2019.12.08.13.58.38.946.1 ]--
InitFile: /src/PathfinderVisualizer.java
/**
 * PathfinderVisualizer visualizes the terrain and found path.
 */

import java.awt.Color;
import java.awt.Font;

public class PathfinderVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // color for different elevations.  must be in ascending order!
    private final static int[][] elevationColors = {
            // h    r   g   b   where h=height, r=red, g=green, b=blue
            {  0,   0,  0,  0},
            {  2,   0,  0,160},
            {  4,   0,224,224},
            { 16, 192,192,  0},
            { 64,  16,255, 16},
            {128,  32,224, 32},
            {192, 128,128,  8},
            {224, 164,164,164},
            {255, 255,255,255}
    };

    private final static Color cStart    = new Color(128, 128, 255);
    private final static Color cEnd      = new Color(255, 128, 128);
    private final static Color cSolution = new Color(255, 128, 255);
    private final static Color cSearched = new Color(128,   0, 128);

    // linearly interpolating between the corresponding rgb values
    private static Color colorLERP(float v1, int r0, int g0, int b0, int r1, int g1, int b1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * r0 + v1 * r1);
        int g = (int)(v0 * g0 + v1 * g1);
        int b = (int)(v0 * b0 + v1 * b1);
        return new Color(r, g, b);
    }
    private static Color colorLERP(float v1, Color c0, Color c1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * c0.getRed()   + v1 * c1.getRed());
        int g = (int)(v0 * c0.getGreen() + v1 * c1.getGreen());
        int b = (int)(v0 * c0.getBlue()  + v1 * c1.getBlue());
        int a = (int)(v0 * c0.getAlpha() + v1 * c1.getAlpha());
        return new Color(r, g, b, a);
    }

    // returns color for given height
    private static Color height2Color(int h) {
        h = Math.max(0, Math.min(255, h));

        int[] ec0 = elevationColors[0];  // default lower bound
        int[] ec1 = elevationColors[1];  // default upper bound

        // find upper bound while updating lower bound
        for(int i = 1; i < elevationColors.length; i++) {
            ec1 = elevationColors[i];
            if(h >= ec0[0] && h <= ec1[0]) break;
            ec0 = ec1;
        }

        int h0=ec0[0], r0=ec0[1], g0=ec0[2], b0=ec0[3];
        int h1=ec1[0], r1=ec1[1], g1=ec1[2], b1=ec1[3];
        float v1 = ((float)(h - h0)) / ((float)(h1 - h0));

        return colorLERP(v1, r0, g0, b0, r1, g1, b1);
    }

    private static void drawCircle(int i, int j, int N, double rad) {
        int c = (int)((i+0.5f) * 464.0f / N);
        int r = (int)((j+0.5f) * 464.0f / N);
        StdDraw.circle(c + 24, 464 - r + 36, rad);
    }
    public static void drawCircle(Coord loc, int N, double rad) {
        drawCircle(loc.getI(), loc.getJ(), N, rad);
    }

    private static void drawPath(Iterable<Coord> path, int N) {
        boolean first = true;
        int c0 = 0, r0 = 0;
        for (Coord loc : path) {
            int c1 = (int)((loc.getI()+0.5f) * 464.0f / N);
            int r1 = (int)((loc.getJ()+0.5f) * 464.0f / N);
            if(!first) {
                StdDraw.line(c0 + 24, 464 - r0 + 36, c1 + 24, 464 - r1 + 36);
            }
            first = false;
            c0 = c1; r0 = r1;
        }
    }

    // draw N-by-N pathfinding map
    public static void draw(Terrain terrain, Pathfinder pf, Walker walker, int N) {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.filledSquare(256, 256 + 12, 464 / 2);

        // draw terrain
        for(int row = 0; row < 464; row++) {
            int j = (int)((float)row/464.0f * N);
            for(int col = 0; col < 464; col++) {
                int i = (int)((float)col/464.0f * N);
                Coord loc = new Coord(i,j);
                Color c = height2Color(terrain.getHeight(loc));
                if(pf.wasSearched(loc)) {
                    c = colorLERP(0.50f, c, cSearched);
                }
                StdDraw.setPenColor(c);
                StdDraw.filledSquare(col + 24, 464 - row + 36, 1);
            }
        }

        // draw path start
        if(pf.getPathStart() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathStart(), N, 4.0);

            StdDraw.setPenColor(cStart);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathStart(), N, 4.0);
        }

        // draw path end
        if(pf.getPathEnd() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathEnd(), N, 4.0);

            StdDraw.setPenColor(cEnd);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathEnd(), N, 4.0);
        }

        // draw found path
        if(pf.foundPath()) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawPath(pf.getPathSolution(), N);

            StdDraw.setPenColor(cSolution);
            StdDraw.setPenRadius(0.002);
            drawPath(pf.getPathSolution(), N);
        }

        // draw walker
        if(walker != null) {
            Coord loc = walker.getLocation();
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);

            StdDraw.setPenColor(StdDraw.WHITE);
            StdDraw.setPenRadius(0.002);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);
        }

        // write status text
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.text(96, 12, "heuristic: " + pf.getHeuristic());
        if(pf.foundPath()) StdDraw.text(256, 12, "path: " + pf.getPathCost());
        else               StdDraw.text(256, 12, "no path found");
        StdDraw.text(512-96, 12, "searched: " + pf.getSearchSize() + " (" + (int)(100.0f * pf.getSearchSize() / (N*N)) + "%)");
    }
}

--[ 2019.12.08.13.58.38.947.0 ]--
InitFile: /src/Terrain.java
import java.lang.IndexOutOfBoundsException;

/**
 * Terrain stores elevations for map and computes distance and
 * cost in traversing the terrain.
 */

public class Terrain {
    private int N;
    private int[][] heights;

    public Terrain(int N) {
        this.N = N;
        this.heights = new int[N][N];
    }

    public Terrain(int[][] heights) {
        this.N = heights.length;
        this.heights = heights;
    }

    public Terrain(String emapfile) {
        In in = new In(emapfile);
        this.N = in.readInt();
        this.heights = new int[N][N];
        for (int j = 0; j < N; j++) {
            for (int i = 0; i < N; i++) {
                this.heights[i][j] = in.readInt();
            }
        }
    }

    public int getN() {
        return N;
    }

    public void setHeight(int i, int j, int h) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        heights[i][j] = h;
    }
    public void setHeight(int i, int j, float h) {
        setHeight(i, j, (int) h);
    }
    public void setHeight(Coord loc, int h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }
    public void setHeight(Coord loc, float h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }

    public int getHeight(int i, int j) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        return heights[i][j];
    }
    public int getHeight(Coord loc) {
        return getHeight(loc.getI(), loc.getJ());
    }

    // computes distance between (i0,j0) and (i1,j1) as the crow flies
    public float computeDistance(int i0, int j0, int i1, int j1) {
        return (float)Math.sqrt((i0 - i1) * (i0 - i1) + (j0 - j1) * (j0 - j1));
    }
    public float computeDistance(Coord c0, Coord c1) {
        return computeDistance(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }

    public float computeTravelCost(int i0, int j0, int i1, int j1) {
        float h0 = getHeight(i0, j0), h1 = getHeight(i1, j1);
        float climb = (float)Math.pow(Math.abs(h0 - h1) * 1000.0, 1.5);
        float dist = computeDistance(i0,j0, i1,j1);
        return (1.0f + climb) * dist;
    }
    public float computeTravelCost(Coord c0, Coord c1) {
        return computeTravelCost(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }
    public float computeTravelCost(Iterable<Coord> cs) {
        Coord c0 = null;
        float cost = 0.0f;
        for(Coord c1 : cs) {
            if(c0 != null) cost += computeTravelCost(c0, c1);
            c0 = c1;
        }
        return cost;
    }
}

--[ 2019.12.08.13.58.38.947.1 ]--
InitFile: /src/Walker.java
import java.util.Iterator;

/**
 * Walker takes an Iterable of Coords and simulates an individual
 * walking along the path over the given Terrain
 */
public class Walker {

    // terrain: the Terrain the Walker traverses
    // path: the sequence of Coords the Walker follows
    public Walker(Terrain terrain, Iterable<Coord> path) {
    }

    // returns the Walker's current location
    public Coord getLocation() {
        return null;
    }

    // returns true if Walker has reached the end Coord (last in path)
    public boolean doneWalking() {
        return true;
    }

    // advances the Walker along path
    // byTime: how long the Walker should traverse (may be any non-negative value)
    public void advance(float byTime) {
    }

}

--[ 2019.12.08.13.58.38.947.2 ]--
InitFile: /src/Coord.java
/**
 * Coordinates is an immutable type that store the tuple (i, j)
 */
public final class Coord {
    private final int i;
    private final int j;

    public Coord(int i, int j) {
        this.i = i;
        this.j = j;
    }

    public int getI() { return i; }
    public int getJ() { return j; }

    public boolean isInBounds(int minI, int minJ, int maxI, int maxJ) {
        return i >= minI && j >= minJ && i <= maxI && j <= maxJ;
    }
    public boolean isInBounds(Coord min, Coord max) {
        return i >= min.i && i <= max.i && j >= min.j && j <= max.j;
    }

    public Coord add(int addI, int addJ) {
        return new Coord(i + addI, j + addJ);
    }
    public Coord add(Coord that) { return new Coord(i + that.i, j + that.j); }

    public String toString() { return "(" + i + "," + j + ")"; }

    public boolean equals(Object o) {
        if(this == o) return true;
        if(o == null) return false;
        if(o.getClass() != this.getClass()) return false;
        Coord that = (Coord) o;
        if(this.i != that.i) return false;
        if(this.j != that.j) return false;
        return true;
    }
}

--[ 2019.12.08.13.58.38.947.3 ]--
InitFile: /src/Pathfinder.java
import java.lang.IndexOutOfBoundsException;
import java.lang.IllegalArgumentException;
import java.util.Iterator;

/**
 * Pathfinder uses A* search to find a near optimal path
 * between to locations with given terrain.
 */

public class Pathfinder {

    private Coord start;
    private Coord end;
    private float heuristic;
    private boolean pathFound;
    private Stack<Coord> s;
    private Terrain terrain;
    private boolean[][] board;
    private int searchSize;

    /**
     * PFNode will be the key for MinPQ (used in computePath())
     */
    private class PFNode implements Comparable<PFNode> {
        Coord loc;
        PFNode fromNode;
        float runningCost;
        // loc: the location of the PFNode
        // fromNode: how did we get here? (linked list back to start)
        public PFNode(Coord loc, PFNode fromNode) {
            this.loc = loc;
            this.fromNode = fromNode;
            if(fromNode == null){
                runningCost = 0;
            }
            else{
                if(loc.getJ() >= 0 && loc.getJ() < terrain.getN() && loc.getI() >= 0 && loc.getI() < terrain.getN()){
                    runningCost = fromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);
                    searchSize = (int)runningCost;
                }
            }
        }

        // compares this with that, used to find minimum cost PFNode
        public int compareTo(PFNode that) {
            if(this.getCost(0) < that.getCost(0)) return -1;
            else if (this.getCost(0) > that.getCost(0)) return 1;
            return 0;
        }

        // returns the cost to travel from starting point to this
        // via the fromNode chain
        public float getCost(float heuristic) {
            return runningCost;
        }

        // returns if this PFNode is not marked invalid
        public boolean isValid() {
            return false;
        }

        // marks the PFNode as invalid
        public void invalidate() {
        }

        // returns if the PFNode is marked as used
        public boolean isUsed() {
            return board[loc.getJ()][loc.getI()];
        }

        // marks the PFNode as used
        public void use() { }

        // returns an Iterable of PFNodes that surround this
        public Iterable<PFNode> neighbors() {
            Stack<PFNode> s = new Stack<>();
            s.push(new PFNode(new Coord(loc.getI() + 1, loc.getJ()), this));
            s.push(new PFNode(new Coord(loc.getI() - 1, loc.getJ()), this));
            s.push(new PFNode(new Coord(loc.getI() , loc.getJ() + 1), this));
            s.push(new PFNode(new Coord(loc.getI(), loc.getJ() - 1), this));
            return s;
        }
    }

    public Pathfinder(Terrain terrain) {
        this.terrain = terrain;
    }

    public void setPathStart(Coord loc) {
        start = loc;
    }

    public Coord getPathStart() {
        return start;
    }

    public void setPathEnd(Coord loc) {
        end = loc;
    }

    public Coord getPathEnd() {
        return end;
    }

    public void setHeuristic(float v)
    {
        heuristic = v;
    }

    public float getHeuristic() {
        return heuristic;
    }

    public void resetPath() {
    }

    public void computePath() {



        //Initialize the board and then print the current state of it
        board = new boolean[terrain.getN()][terrain.getN()];
        for(int i = 0; i < terrain.getN(); i++){
            for(int j = 0; j < terrain.getN(); j++){
                board[i][j] = false;
                //System.out.print(board[i][j] + " ");
            }
            //System.out.println();
        }



        s = new Stack<>();
        MinPQ<PFNode> pfQueue = new MinPQ<>();
        PFNode begin = new PFNode(start, null);

        pfQueue.insert(begin);


        while(!pfQueue.min().loc.equals(end)){
            begin = pfQueue.delMin();
            if(board[begin.loc.getJ()][begin.loc.getI()]){
                continue;
            }
            board[begin.loc.getJ()][begin.loc.getI()] = true;
            for(PFNode p : begin.neighbors()){
                //Only add the neighbors to the queue if they're in range of the board
                if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() >= 0 && p.loc.getI() < terrain.getN()){
                    pfQueue.insert(p);
                }
            }
            if(pfQueue.min().loc.equals(end)){
                break;
            }

        }












        PFNode cur = pfQueue.min();
        while(cur.fromNode != null){
            s.push(cur.loc);
            cur = cur.fromNode;
        }
        s.push(start);



        pathFound = true;
    }

    public boolean foundPath() {
        return pathFound;
    }

    public float getPathCost() {
        return searchSize;
    }

    public int getSearchSize() {
        return searchSize;
    }

    public Iterable<Coord> getPathSolution() {

        //Return a stack of coordinates for the visualizer
        return s;
    }

    public boolean wasSearched(Coord loc) {
        return false;
                //board[loc.getJ()][loc.getI()];
    }
}

--[ 2019.12.08.13.58.38.948.0 ]--
InitFile: /src/TerrainEditor.java
/**
 * The following class provides some simple terrain editing functions.
 */
public class TerrainEditor {
    private static float rndRadius(float d) {
        return (float)StdRandom.uniform(-d,d);
    }

    private static float getFractalHeight(int i, int j, float dh, Terrain terrain, boolean[] isset) {
        int N = terrain.getN();
        dh = Math.max(-64, Math.min(255+64, dh));   // allow the height to go just a bit out of range
        if(!isset[i + j * N]) {
            isset[i + j * N] = true;
            terrain.setHeight(i, j, dh);
        }
        return terrain.getHeight(i,j);
    }

    private static void setFractalHeights(int i0, int j0, int i1, int j1, Terrain terrain, boolean[] isset) {
        int id = i1-i0;
        int jd = j1-j0;
        int i01 = (i0+i1)/2;
        int j01 = (j0+j1)/2;

        if(id <= 1 && jd <= 1) return;

        float h00 = getFractalHeight(i0,j0,32,terrain,isset);
        float h01 = getFractalHeight(i0,j1,32,terrain,isset);
        float h10 = getFractalHeight(i1,j0,32,terrain,isset);
        float h11 = getFractalHeight(i1,j1,32,terrain,isset);

        float d = (float)(Math.sqrt((i1-i0)*(i1-i0) + (j1-j0)*(j1-j0)) * 0.5);

        float d0001 = (h00 + h01) / 2 + rndRadius(d);
        float d0010 = (h00 + h10) / 2 + rndRadius(d);
        float d1101 = (h11 + h01) / 2 + rndRadius(d);
        float d1110 = (h11 + h10) / 2 + rndRadius(d);

        float h0001 = getFractalHeight(i0, j01, d0001, terrain,isset);
        float h0010 = getFractalHeight(i01, j0, d0010, terrain,isset);
        float h1101 = getFractalHeight(i01, j1, d1101, terrain,isset);
        float h1110 = getFractalHeight(i1, j01, d1110, terrain,isset);

        float dm = (float)((h0001 + h0010 + h1101 + h1110) / 4.0);
        float hm = getFractalHeight(i01, j01, dm, terrain,isset);

        if(id > 1 && jd > 1) {
            setFractalHeights(i0, j0, i01, j01, terrain, isset);
            setFractalHeights(i01, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i01, j1, terrain, isset);
            setFractalHeights(i01, j01, i1, j1, terrain, isset);
        } else if(jd > 1) {
            setFractalHeights(i0, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i1, j1, terrain, isset);
        } else {
            setFractalHeights(i0, j0, i01, j1, terrain, isset);
            setFractalHeights(i01, j0, i1, j1, terrain, isset);
        }
    }

    public static void setFractalHeights(Terrain terrain) {
        int N = terrain.getN();
        boolean[] isset = new boolean[N*N];
        setFractalHeights(0, 0, N - 1, N - 1, terrain, isset);
    }

    public static void smoothHeights(Terrain terrain) {
        int N = terrain.getN();
        int radius = (int)Math.ceil(Math.sqrt(N*N/2.0f));
        smoothHeights(N/2, N/2, radius, false, terrain);
    }

    public static void smoothHeights(int ic, int jc, int radius, boolean fallOff, Terrain terrain) {
        final int N = terrain.getN();
        final int w = 2*radius+1;
        float[] s = new float[w*w];
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;

                float m = computeEffect(i, j, ic, jc, radius, fallOff, N);
                if(m <= 0.0000001) {
                    s[sidx] = terrain.getHeight(i,j);
                    continue;
                }
                float h = 0;
                int c = 0;
                if(i > 0 && j > 0) {
                    h += terrain.getHeight(i-1,j-1);
                    c += 1;
                }
                if(i < N-1 && j > 0) {
                    h += terrain.getHeight(i+1,j-1);
                    c += 1;
                }
                if(i > 0 && j < N-1) {
                    h += terrain.getHeight(i-1,j+1);
                    c += 1;
                }
                if(i < N-1 && j < N-1) {
                    h += terrain.getHeight(i+1,j+1);
                    c += 1;
                }
                if(i > 0) {
                    h += terrain.getHeight(i-1,j);
                    c += 1;
                }
                if(j > 0) {
                    h += terrain.getHeight(i,j-1);
                    c += 1;
                }
                if(i < N-1) {
                    h += terrain.getHeight(i+1,j);
                    c += 1;
                }
                if(j < N-1) {
                    h += terrain.getHeight(i,j+1);
                    c += 1;
                }
                s[sidx] = (1-m) * terrain.getHeight(i,j) + m * h / c;
            }
        }
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;
                terrain.setHeight(i, j, s[sidx]);
            }
        }
    }

    public static void clampHeights(Terrain terrain) {
        int N = terrain.getN();
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                terrain.setHeight(i, j, Math.max(0, Math.min(255, terrain.getHeight(i, j))));
            }
        }
    }

    private static float computeEffect(int i, int j, int ic, int jc, int radius, boolean fallOff, int N) {
        if(i < 0 || j < 0 || i >= N || j >= N) return 0;
        if(!fallOff) return 1;
        int d2 = (ic-i)*(ic-i)+(jc-j)*(jc-j);
        if(d2 > radius*radius) return 0;
        return ((float)radius - (float)Math.sqrt(d2)) / (float)radius;
    }

    public static void addHeight(int i, int j, int radius, float add, Terrain terrain) {
        final int N = terrain.getN();
        for(int ja = -radius; ja <= radius; ja++) {
            int r = j + ja;
            if(r < 0 || r >= N) continue;
            for(int ia = -radius; ia <= radius; ia++) {
                int c = i + ia;
                if(c < 0 || c >= N) continue;
                float v = add * computeEffect(c, r, i, j, radius, true, N);
                float h = terrain.getHeight(c, r) + v;
                h = Math.max(0, Math.min(255, h));
                terrain.setHeight(c, r, h);
            }
        }
    }
}

--[ 2019.12.08.13.58.38.948.1 ]--
InitFile: /.cos265


--[ 2019.12.08.13.58.38.948.2 ]--
InitFile: /P04_Pathfinding.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/heightmaps" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2019.12.08.17.18.38.088.0 ]--
DisposeComponent
--[ 2020.02.13.16.06.11.417.0 ]--
NewLogger: P04_Pathfinding
Version: 1.3
--[ 2020.02.13.16.06.11.755.0 ]--
InitTree:
/out/production/P04_Pathfinding/.donotlog
/out/production/P04_Pathfinding/algs4.jar
/out/production/P04_Pathfinding/stdlib.jar
/out/production/P04_Pathfinding/Coord.class
/out/production/P04_Pathfinding/png2emap.py
/out/production/P04_Pathfinding/Walker.class
/out/production/P04_Pathfinding/Terrain.class
/out/production/P04_Pathfinding/ramp.png.emap
/out/production/P04_Pathfinding/ramp2.png.emap
/out/production/P04_Pathfinding/ramp3.png.emap
/out/production/P04_Pathfinding/mazeAB.png.emap
/out/production/P04_Pathfinding/usa128.png.emap
/out/production/P04_Pathfinding/usa256.png.emap
/out/production/P04_Pathfinding/Pathfinder.class
/out/production/P04_Pathfinding/usa1024.png.emap
/out/production/P04_Pathfinding/maze32_0.png.emap
/out/production/P04_Pathfinding/maze32_1.png.emap
/out/production/P04_Pathfinding/maze232_0.png.emap
/out/production/P04_Pathfinding/maze320_0.png.emap
/out/production/P04_Pathfinding/mazeBrain.png.emap
/out/production/P04_Pathfinding/TerrainEditor.class
/out/production/P04_Pathfinding/Pathfinder$PFNode.class
/out/production/P04_Pathfinding/PathfinderVisualizer.class
/out/production/P04_Pathfinding/InteractivePathfinderVisualizer.class
/src/algs4.jar
/src/Coord.java
/src/stdlib.jar
/src/Walker.java
/src/Terrain.java
/src/Pathfinder.java
/src/TerrainEditor.java
/src/PathfinderVisualizer.java
/src/InteractivePathfinderVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/heightmaps/.donotlog
/heightmaps/png2emap.py
/heightmaps/ramp.png.emap
/heightmaps/ramp2.png.emap
/heightmaps/ramp3.png.emap
/heightmaps/mazeAB.png.emap
/heightmaps/usa128.png.emap
/heightmaps/usa256.png.emap
/heightmaps/usa1024.png.emap
/heightmaps/maze32_0.png.emap
/heightmaps/maze32_1.png.emap
/heightmaps/maze232_0.png.emap
/heightmaps/maze320_0.png.emap
/heightmaps/mazeBrain.png.emap
/.cos265
/readme.html
/P04_Pathfinding.iml
/P04_Pathfinding.zip

--[ 2020.02.13.16.06.11.756.0 ]--
InitFile: /src/InteractivePathfinderVisualizer.java
import java.awt.event.KeyEvent;

/**
 * InteractivePathfinderVisualizer visualizes the terrain and the computed
 * path and allows the user to change parameters of the Pathfinder.  Below
 * is a list of commands and what they do.  Note: some of the commands
 * modify the properties of the path finder and some modify the terrain.
 *
 * Command        Action                                      Terrain
 * C              clear path
 * space          recompute path
 * S/E            set start/end location to mouse
 * left/right     halve/double path search heuristic value
 * 0/1            set path search heuristic to 0 or 1
 * W              start a walker to show the path
 * R              randomly generate a new terrain                *
 * M              smooths terrain under mouse                    *
 * shift+M        smooths all terrain                            *
 * up/down        increase/decrease terrain under mouse          *
 */

public class InteractivePathfinderVisualizer {
    private final static int DELAY = 10;

    // sets how many redraws it should take for the walker to reach its destination
    private final static float STEPS_TO_WALK = 100.0f;

    // for convenience, here are the emap files that are located under heightmaps/ folder
    // the python script in that folder converts png files to emap. \
    // you can use it to create your own maps to test your code
    private final static String[] emaps = {
            "maze32_0.png.emap",    // 0   (32x32 maze)
            "maze32_1.png.emap",    // 1   (another 32x32 maze)
            "maze232_0.png.emap",   // 2   (232x232 maze)
            "maze320_0.png.emap",   // 3   (same as maze32_0, only scaled up by 10x)
            "mazeAB.png.emap",      // 4   (a maze from a site no longer online :( )
            "mazeBrain.png.emap",   // 5   (...)
            "ramp.png.emap",        // 6   (some tests)
            "ramp2.png.emap",       // 7   (...)
            "ramp3.png.emap",       // 8   (...)
            "usa128.png.emap",      // 9   (elevation map of USA from https://bananas.openttd.org/en/heightmap/)
            "usa256.png.emap",      // 10  (same as usa128, only higher resolution)
            "usa1024.png.emap",     // 11  (same as usa128, only higher resolution
    };

    private final static String emapFilename = emaps[11];        // change index to load a different elevation map



    public static void main(String[] args) {
        Terrain terrain = new Terrain(emapFilename);
        Pathfinder pf = new Pathfinder(terrain);
        int N = terrain.getN();

        StdDraw.show(0);

        // set default starting and ending locations
        pf.setPathStart(new Coord(1, 1));
        pf.setPathEnd(new Coord(N-3, N-3));

        // find a path
        pf.computePath();

        PathfinderVisualizer.draw(terrain, pf, null, N);
        StdDraw.show(DELAY);

        // prevent repeated applications
        boolean keyboardR = false;
        boolean keyboardM = false;

        Walker walker = null;

        while(true) {
            boolean recompute = false;
            boolean redraw = false;

            // mouse location on map
            int mouseI = (int) ((StdDraw.mouseX()-24) / 464 * N);
            int mouseJ = (int) ((464 - (StdDraw.mouseY()-36)) / 464 * N);
            boolean isMouseOnMap = (mouseI >=0 && mouseI < N && mouseJ >= 0 && mouseJ < N);

            if(StdDraw.isKeyPressed(KeyEvent.VK_LEFT) || StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
                boolean keyboardLeft = StdDraw.isKeyPressed(KeyEvent.VK_LEFT);
                float m = keyboardLeft ? 0.5f : 2.0f;
                float h = pf.getHeuristic() * m;
                h = Math.max(1.0f/1024.0f, Math.min(1048576.0f, h));
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_0) || StdDraw.isKeyPressed(KeyEvent.VK_1)) {
                boolean keyboard0 = StdDraw.isKeyPressed(KeyEvent.VK_0);
                float h = keyboard0 ? 0 : 1;
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_C)) {
                pf.resetPath();
                walker = null;
                redraw = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_R) && !keyboardR) {
                TerrainEditor.setFractalHeights(terrain);
                TerrainEditor.clampHeights(terrain);
                recompute = true;
            }
            keyboardR = StdDraw.isKeyPressed(KeyEvent.VK_R);

            if(StdDraw.isKeyPressed(KeyEvent.VK_M)) {
                if(StdDraw.isKeyPressed(KeyEvent.VK_SHIFT)) {
                    if(!keyboardM) {
                        TerrainEditor.smoothHeights(terrain);
                        recompute = true;
                    }
                } else {
                    TerrainEditor.smoothHeights(mouseI, mouseJ, N / 20, true, terrain);
                    recompute = true;
                }
            }
            keyboardM = StdDraw.isKeyPressed(KeyEvent.VK_M);

            if(StdDraw.isKeyPressed(KeyEvent.VK_SPACE)) {
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_UP) || StdDraw.isKeyPressed(KeyEvent.VK_DOWN)) {
                boolean keyboardUp = StdDraw.isKeyPressed(KeyEvent.VK_UP);
                float add = keyboardUp ? 8.0f : -8.0f;
                TerrainEditor.addHeight(mouseI, mouseJ, N / 20, add, terrain);
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_S)) {
                pf.setPathStart(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_E)) {
                pf.setPathEnd(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_W)) {
                Iterable<Coord> path = pf.getPathSolution();
                if(path != null) {
                    walker = new Walker(terrain, pf.getPathSolution());
                }
            }

            if(walker != null) {
                if(walker.doneWalking()) {
                    walker = null;
                } else {
                    walker.advance(pf.getPathCost() / STEPS_TO_WALK);
                }
                redraw = true;
            }

            if(recompute) {
                walker = null;
                pf.resetPath();
                if(pf.getPathStart() != null && pf.getPathEnd() != null) {
                    pf.computePath();
                }
                redraw = true;
            }

            if(redraw) {
                PathfinderVisualizer.draw(terrain, pf, walker, N);
                StdDraw.show(DELAY);
            } else {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    /* do nothing */
                }
            }
        }
    }
}

--[ 2020.02.13.16.06.11.756.1 ]--
InitFile: /src/PathfinderVisualizer.java
/**
 * PathfinderVisualizer visualizes the terrain and found path.
 */

import java.awt.Color;
import java.awt.Font;

public class PathfinderVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // color for different elevations.  must be in ascending order!
    private final static int[][] elevationColors = {
            // h    r   g   b   where h=height, r=red, g=green, b=blue
            {  0,   0,  0,  0},
            {  2,   0,  0,160},
            {  4,   0,224,224},
            { 16, 192,192,  0},
            { 64,  16,255, 16},
            {128,  32,224, 32},
            {192, 128,128,  8},
            {224, 164,164,164},
            {255, 255,255,255}
    };

    private final static Color cStart    = new Color(128, 128, 255);
    private final static Color cEnd      = new Color(255, 128, 128);
    private final static Color cSolution = new Color(255, 128, 255);
    private final static Color cSearched = new Color(128,   0, 128);

    // linearly interpolating between the corresponding rgb values
    private static Color colorLERP(float v1, int r0, int g0, int b0, int r1, int g1, int b1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * r0 + v1 * r1);
        int g = (int)(v0 * g0 + v1 * g1);
        int b = (int)(v0 * b0 + v1 * b1);
        return new Color(r, g, b);
    }
    private static Color colorLERP(float v1, Color c0, Color c1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * c0.getRed()   + v1 * c1.getRed());
        int g = (int)(v0 * c0.getGreen() + v1 * c1.getGreen());
        int b = (int)(v0 * c0.getBlue()  + v1 * c1.getBlue());
        int a = (int)(v0 * c0.getAlpha() + v1 * c1.getAlpha());
        return new Color(r, g, b, a);
    }

    // returns color for given height
    private static Color height2Color(int h) {
        h = Math.max(0, Math.min(255, h));

        int[] ec0 = elevationColors[0];  // default lower bound
        int[] ec1 = elevationColors[1];  // default upper bound

        // find upper bound while updating lower bound
        for(int i = 1; i < elevationColors.length; i++) {
            ec1 = elevationColors[i];
            if(h >= ec0[0] && h <= ec1[0]) break;
            ec0 = ec1;
        }

        int h0=ec0[0], r0=ec0[1], g0=ec0[2], b0=ec0[3];
        int h1=ec1[0], r1=ec1[1], g1=ec1[2], b1=ec1[3];
        float v1 = ((float)(h - h0)) / ((float)(h1 - h0));

        return colorLERP(v1, r0, g0, b0, r1, g1, b1);
    }

    private static void drawCircle(int i, int j, int N, double rad) {
        int c = (int)((i+0.5f) * 464.0f / N);
        int r = (int)((j+0.5f) * 464.0f / N);
        StdDraw.circle(c + 24, 464 - r + 36, rad);
    }
    public static void drawCircle(Coord loc, int N, double rad) {
        drawCircle(loc.getI(), loc.getJ(), N, rad);
    }

    private static void drawPath(Iterable<Coord> path, int N) {
        boolean first = true;
        int c0 = 0, r0 = 0;
        for (Coord loc : path) {
            int c1 = (int)((loc.getI()+0.5f) * 464.0f / N);
            int r1 = (int)((loc.getJ()+0.5f) * 464.0f / N);
            if(!first) {
                StdDraw.line(c0 + 24, 464 - r0 + 36, c1 + 24, 464 - r1 + 36);
            }
            first = false;
            c0 = c1; r0 = r1;
        }
    }

    // draw N-by-N pathfinding map
    public static void draw(Terrain terrain, Pathfinder pf, Walker walker, int N) {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.filledSquare(256, 256 + 12, 464 / 2);

        // draw terrain
        for(int row = 0; row < 464; row++) {
            int j = (int)((float)row/464.0f * N);
            for(int col = 0; col < 464; col++) {
                int i = (int)((float)col/464.0f * N);
                Coord loc = new Coord(i,j);
                Color c = height2Color(terrain.getHeight(loc));
                if(pf.wasSearched(loc)) {
                    c = colorLERP(0.50f, c, cSearched);
                }
                StdDraw.setPenColor(c);
                StdDraw.filledSquare(col + 24, 464 - row + 36, 1);
            }
        }

        // draw path start
        if(pf.getPathStart() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathStart(), N, 4.0);

            StdDraw.setPenColor(cStart);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathStart(), N, 4.0);
        }

        // draw path end
        if(pf.getPathEnd() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathEnd(), N, 4.0);

            StdDraw.setPenColor(cEnd);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathEnd(), N, 4.0);
        }

        // draw found path
        if(pf.foundPath()) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawPath(pf.getPathSolution(), N);

            StdDraw.setPenColor(cSolution);
            StdDraw.setPenRadius(0.002);
            drawPath(pf.getPathSolution(), N);
        }

        // draw walker
        if(walker != null) {
            Coord loc = walker.getLocation();
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);

            StdDraw.setPenColor(StdDraw.WHITE);
            StdDraw.setPenRadius(0.002);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);
        }

        // write status text
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.text(96, 12, "heuristic: " + pf.getHeuristic());
        if(pf.foundPath()) StdDraw.text(256, 12, "path: " + pf.getPathCost());
        else               StdDraw.text(256, 12, "no path found");
        StdDraw.text(512-96, 12, "searched: " + pf.getSearchSize() + " (" + (int)(100.0f * pf.getSearchSize() / (N*N)) + "%)");
    }
}

--[ 2020.02.13.16.06.11.756.2 ]--
InitFile: /src/Terrain.java
import java.lang.IndexOutOfBoundsException;

/**
 * Terrain stores elevations for map and computes distance and
 * cost in traversing the terrain.
 */

public class Terrain {
    private int N;
    private int[][] heights;

    public Terrain(int N) {
        this.N = N;
        this.heights = new int[N][N];
    }

    public Terrain(int[][] heights) {
        this.N = heights.length;
        this.heights = heights;
    }

    public Terrain(String emapfile) {
        In in = new In(emapfile);
        this.N = in.readInt();
        this.heights = new int[N][N];
        for (int j = 0; j < N; j++) {
            for (int i = 0; i < N; i++) {
                this.heights[i][j] = in.readInt();
            }
        }
    }

    public int getN() {
        return N;
    }

    public void setHeight(int i, int j, int h) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        heights[i][j] = h;
    }
    public void setHeight(int i, int j, float h) {
        setHeight(i, j, (int) h);
    }
    public void setHeight(Coord loc, int h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }
    public void setHeight(Coord loc, float h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }

    public int getHeight(int i, int j) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        return heights[i][j];
    }
    public int getHeight(Coord loc) {
        return getHeight(loc.getI(), loc.getJ());
    }

    // computes distance between (i0,j0) and (i1,j1) as the crow flies
    public float computeDistance(int i0, int j0, int i1, int j1) {
        return (float)Math.sqrt((i0 - i1) * (i0 - i1) + (j0 - j1) * (j0 - j1));
    }
    public float computeDistance(Coord c0, Coord c1) {
        return computeDistance(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }

    public float computeTravelCost(int i0, int j0, int i1, int j1) {
        float h0 = getHeight(i0, j0), h1 = getHeight(i1, j1);
        float climb = (float)Math.pow(Math.abs(h0 - h1) * 1000.0, 1.5);
        float dist = computeDistance(i0,j0, i1,j1);
        return (1.0f + climb) * dist;
    }
    public float computeTravelCost(Coord c0, Coord c1) {
        return computeTravelCost(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }
    public float computeTravelCost(Iterable<Coord> cs) {
        Coord c0 = null;
        float cost = 0.0f;
        for(Coord c1 : cs) {
            if(c0 != null) cost += computeTravelCost(c0, c1);
            c0 = c1;
        }
        return cost;
    }
}

--[ 2020.02.13.16.06.11.757.0 ]--
InitFile: /src/Walker.java
import java.util.Iterator;

/**
 * Walker takes an Iterable of Coords and simulates an individual
 * walking along the path over the given Terrain
 */
public class Walker {

    // terrain: the Terrain the Walker traverses
    // path: the sequence of Coords the Walker follows
    public Walker(Terrain terrain, Iterable<Coord> path) {
    }

    // returns the Walker's current location
    public Coord getLocation() {
        return null;
    }

    // returns true if Walker has reached the end Coord (last in path)
    public boolean doneWalking() {
        return true;
    }

    // advances the Walker along path
    // byTime: how long the Walker should traverse (may be any non-negative value)
    public void advance(float byTime) {
    }

}

--[ 2020.02.13.16.06.11.757.1 ]--
InitFile: /src/Coord.java
/**
 * Coordinates is an immutable type that store the tuple (i, j)
 */
public final class Coord {
    private final int i;
    private final int j;

    public Coord(int i, int j) {
        this.i = i;
        this.j = j;
    }

    public int getI() { return i; }
    public int getJ() { return j; }

    public boolean isInBounds(int minI, int minJ, int maxI, int maxJ) {
        return i >= minI && j >= minJ && i <= maxI && j <= maxJ;
    }
    public boolean isInBounds(Coord min, Coord max) {
        return i >= min.i && i <= max.i && j >= min.j && j <= max.j;
    }

    public Coord add(int addI, int addJ) {
        return new Coord(i + addI, j + addJ);
    }
    public Coord add(Coord that) { return new Coord(i + that.i, j + that.j); }

    public String toString() { return "(" + i + "," + j + ")"; }

    public boolean equals(Object o) {
        if(this == o) return true;
        if(o == null) return false;
        if(o.getClass() != this.getClass()) return false;
        Coord that = (Coord) o;
        if(this.i != that.i) return false;
        if(this.j != that.j) return false;
        return true;
    }
}

--[ 2020.02.13.16.06.11.757.2 ]--
InitFile: /src/Pathfinder.java
import java.lang.IndexOutOfBoundsException;
import java.lang.IllegalArgumentException;
import java.util.Iterator;

/**
 * Pathfinder uses A* search to find a near optimal path
 * between to locations with given terrain.
 */

public class Pathfinder {

    private Coord start;
    private Coord end;
    private float heuristic;
    private boolean pathFound;
    private Stack<Coord> s;
    private Terrain terrain;
    private boolean[][] board;
    private int searchSize;

    /**
     * PFNode will be the key for MinPQ (used in computePath())
     */
    private class PFNode implements Comparable<PFNode> {
        Coord loc;
        PFNode fromNode;
        float runningCost;
        // loc: the location of the PFNode
        // fromNode: how did we get here? (linked list back to start)
        public PFNode(Coord loc, PFNode fromNode) {
            this.loc = loc;
            this.fromNode = fromNode;
            if(fromNode == null){
                runningCost = 0;
            }
            else{
                if(loc.getJ() >= 0 && loc.getJ() < terrain.getN() && loc.getI() >= 0 && loc.getI() < terrain.getN()){
                    runningCost = fromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);
                    searchSize = (int)runningCost;
                }
            }
        }

        // compares this with that, used to find minimum cost PFNode
        public int compareTo(PFNode that) {
            if(this.getCost(0) < that.getCost(0)) return -1;
            else if (this.getCost(0) > that.getCost(0)) return 1;
            return 0;
        }

        // returns the cost to travel from starting point to this
        // via the fromNode chain
        public float getCost(float heuristic) {
            return runningCost;
        }

        // returns if this PFNode is not marked invalid
        public boolean isValid() {
            return false;
        }

        // marks the PFNode as invalid
        public void invalidate() {
        }

        // returns if the PFNode is marked as used
        public boolean isUsed() {
            return board[loc.getJ()][loc.getI()];
        }

        // marks the PFNode as used
        public void use() { }

        // returns an Iterable of PFNodes that surround this
        public Iterable<PFNode> neighbors() {
            Stack<PFNode> s = new Stack<>();
            s.push(new PFNode(new Coord(loc.getI() + 1, loc.getJ()), this));
            s.push(new PFNode(new Coord(loc.getI() - 1, loc.getJ()), this));
            s.push(new PFNode(new Coord(loc.getI() , loc.getJ() + 1), this));
            s.push(new PFNode(new Coord(loc.getI(), loc.getJ() - 1), this));
            return s;
        }
    }

    public Pathfinder(Terrain terrain) {
        this.terrain = terrain;
    }

    public void setPathStart(Coord loc) {
        start = loc;
    }

    public Coord getPathStart() {
        return start;
    }

    public void setPathEnd(Coord loc) {
        end = loc;
    }

    public Coord getPathEnd() {
        return end;
    }

    public void setHeuristic(float v)
    {
        heuristic = v;
    }

    public float getHeuristic() {
        return heuristic;
    }

    public void resetPath() {
    }

    public void computePath() {



        //Initialize the board and then print the current state of it
        board = new boolean[terrain.getN()][terrain.getN()];
        for(int i = 0; i < terrain.getN(); i++){
            for(int j = 0; j < terrain.getN(); j++){
                board[i][j] = false;
                //System.out.print(board[i][j] + " ");
            }
            //System.out.println();
        }



        s = new Stack<>();
        MinPQ<PFNode> pfQueue = new MinPQ<>();
        PFNode begin = new PFNode(start, null);

        pfQueue.insert(begin);


        while(!pfQueue.min().loc.equals(end)){
            begin = pfQueue.delMin();
            if(board[begin.loc.getJ()][begin.loc.getI()]){
                continue;
            }
            board[begin.loc.getJ()][begin.loc.getI()] = true;
            for(PFNode p : begin.neighbors()){
                //Only add the neighbors to the queue if they're in range of the board
                if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() >= 0 && p.loc.getI() < terrain.getN()){
                    pfQueue.insert(p);
                }
            }
            if(pfQueue.min().loc.equals(end)){
                break;
            }

        }












        PFNode cur = pfQueue.min();
        while(cur.fromNode != null){
            s.push(cur.loc);
            cur = cur.fromNode;
        }
        s.push(start);



        pathFound = true;
    }

    public boolean foundPath() {
        return pathFound;
    }

    public float getPathCost() {
        return searchSize;
    }

    public int getSearchSize() {
        return searchSize;
    }

    public Iterable<Coord> getPathSolution() {

        //Return a stack of coordinates for the visualizer
        return s;
    }

    public boolean wasSearched(Coord loc) {
        return false;
                //board[loc.getJ()][loc.getI()];
    }
}

--[ 2020.02.13.16.06.11.757.3 ]--
InitFile: /src/TerrainEditor.java
/**
 * The following class provides some simple terrain editing functions.
 */
public class TerrainEditor {
    private static float rndRadius(float d) {
        return (float)StdRandom.uniform(-d,d);
    }

    private static float getFractalHeight(int i, int j, float dh, Terrain terrain, boolean[] isset) {
        int N = terrain.getN();
        dh = Math.max(-64, Math.min(255+64, dh));   // allow the height to go just a bit out of range
        if(!isset[i + j * N]) {
            isset[i + j * N] = true;
            terrain.setHeight(i, j, dh);
        }
        return terrain.getHeight(i,j);
    }

    private static void setFractalHeights(int i0, int j0, int i1, int j1, Terrain terrain, boolean[] isset) {
        int id = i1-i0;
        int jd = j1-j0;
        int i01 = (i0+i1)/2;
        int j01 = (j0+j1)/2;

        if(id <= 1 && jd <= 1) return;

        float h00 = getFractalHeight(i0,j0,32,terrain,isset);
        float h01 = getFractalHeight(i0,j1,32,terrain,isset);
        float h10 = getFractalHeight(i1,j0,32,terrain,isset);
        float h11 = getFractalHeight(i1,j1,32,terrain,isset);

        float d = (float)(Math.sqrt((i1-i0)*(i1-i0) + (j1-j0)*(j1-j0)) * 0.5);

        float d0001 = (h00 + h01) / 2 + rndRadius(d);
        float d0010 = (h00 + h10) / 2 + rndRadius(d);
        float d1101 = (h11 + h01) / 2 + rndRadius(d);
        float d1110 = (h11 + h10) / 2 + rndRadius(d);

        float h0001 = getFractalHeight(i0, j01, d0001, terrain,isset);
        float h0010 = getFractalHeight(i01, j0, d0010, terrain,isset);
        float h1101 = getFractalHeight(i01, j1, d1101, terrain,isset);
        float h1110 = getFractalHeight(i1, j01, d1110, terrain,isset);

        float dm = (float)((h0001 + h0010 + h1101 + h1110) / 4.0);
        float hm = getFractalHeight(i01, j01, dm, terrain,isset);

        if(id > 1 && jd > 1) {
            setFractalHeights(i0, j0, i01, j01, terrain, isset);
            setFractalHeights(i01, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i01, j1, terrain, isset);
            setFractalHeights(i01, j01, i1, j1, terrain, isset);
        } else if(jd > 1) {
            setFractalHeights(i0, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i1, j1, terrain, isset);
        } else {
            setFractalHeights(i0, j0, i01, j1, terrain, isset);
            setFractalHeights(i01, j0, i1, j1, terrain, isset);
        }
    }

    public static void setFractalHeights(Terrain terrain) {
        int N = terrain.getN();
        boolean[] isset = new boolean[N*N];
        setFractalHeights(0, 0, N - 1, N - 1, terrain, isset);
    }

    public static void smoothHeights(Terrain terrain) {
        int N = terrain.getN();
        int radius = (int)Math.ceil(Math.sqrt(N*N/2.0f));
        smoothHeights(N/2, N/2, radius, false, terrain);
    }

    public static void smoothHeights(int ic, int jc, int radius, boolean fallOff, Terrain terrain) {
        final int N = terrain.getN();
        final int w = 2*radius+1;
        float[] s = new float[w*w];
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;

                float m = computeEffect(i, j, ic, jc, radius, fallOff, N);
                if(m <= 0.0000001) {
                    s[sidx] = terrain.getHeight(i,j);
                    continue;
                }
                float h = 0;
                int c = 0;
                if(i > 0 && j > 0) {
                    h += terrain.getHeight(i-1,j-1);
                    c += 1;
                }
                if(i < N-1 && j > 0) {
                    h += terrain.getHeight(i+1,j-1);
                    c += 1;
                }
                if(i > 0 && j < N-1) {
                    h += terrain.getHeight(i-1,j+1);
                    c += 1;
                }
                if(i < N-1 && j < N-1) {
                    h += terrain.getHeight(i+1,j+1);
                    c += 1;
                }
                if(i > 0) {
                    h += terrain.getHeight(i-1,j);
                    c += 1;
                }
                if(j > 0) {
                    h += terrain.getHeight(i,j-1);
                    c += 1;
                }
                if(i < N-1) {
                    h += terrain.getHeight(i+1,j);
                    c += 1;
                }
                if(j < N-1) {
                    h += terrain.getHeight(i,j+1);
                    c += 1;
                }
                s[sidx] = (1-m) * terrain.getHeight(i,j) + m * h / c;
            }
        }
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;
                terrain.setHeight(i, j, s[sidx]);
            }
        }
    }

    public static void clampHeights(Terrain terrain) {
        int N = terrain.getN();
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                terrain.setHeight(i, j, Math.max(0, Math.min(255, terrain.getHeight(i, j))));
            }
        }
    }

    private static float computeEffect(int i, int j, int ic, int jc, int radius, boolean fallOff, int N) {
        if(i < 0 || j < 0 || i >= N || j >= N) return 0;
        if(!fallOff) return 1;
        int d2 = (ic-i)*(ic-i)+(jc-j)*(jc-j);
        if(d2 > radius*radius) return 0;
        return ((float)radius - (float)Math.sqrt(d2)) / (float)radius;
    }

    public static void addHeight(int i, int j, int radius, float add, Terrain terrain) {
        final int N = terrain.getN();
        for(int ja = -radius; ja <= radius; ja++) {
            int r = j + ja;
            if(r < 0 || r >= N) continue;
            for(int ia = -radius; ia <= radius; ia++) {
                int c = i + ia;
                if(c < 0 || c >= N) continue;
                float v = add * computeEffect(c, r, i, j, radius, true, N);
                float h = terrain.getHeight(c, r) + v;
                h = Math.max(0, Math.min(255, h));
                terrain.setHeight(c, r, h);
            }
        }
    }
}

--[ 2020.02.13.16.06.11.758.0 ]--
InitFile: /.cos265


--[ 2020.02.13.16.06.11.758.1 ]--
InitFile: /P04_Pathfinding.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/heightmaps" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2020.02.13.16.07.31.296.0 ]--
DisposeComponent
--[ 2020.07.10.21.29.19.447.0 ]--
NewLogger: P04_Pathfinding
Version: 1.3
--[ 2020.07.10.21.29.19.480.0 ]--
InitTree:
/out/production/P04_Pathfinding/.donotlog
/out/production/P04_Pathfinding/algs4.jar
/out/production/P04_Pathfinding/stdlib.jar
/out/production/P04_Pathfinding/Coord.class
/out/production/P04_Pathfinding/png2emap.py
/out/production/P04_Pathfinding/Walker.class
/out/production/P04_Pathfinding/Terrain.class
/out/production/P04_Pathfinding/ramp.png.emap
/out/production/P04_Pathfinding/ramp2.png.emap
/out/production/P04_Pathfinding/ramp3.png.emap
/out/production/P04_Pathfinding/mazeAB.png.emap
/out/production/P04_Pathfinding/usa128.png.emap
/out/production/P04_Pathfinding/usa256.png.emap
/out/production/P04_Pathfinding/Pathfinder.class
/out/production/P04_Pathfinding/usa1024.png.emap
/out/production/P04_Pathfinding/maze32_0.png.emap
/out/production/P04_Pathfinding/maze32_1.png.emap
/out/production/P04_Pathfinding/maze232_0.png.emap
/out/production/P04_Pathfinding/maze320_0.png.emap
/out/production/P04_Pathfinding/mazeBrain.png.emap
/out/production/P04_Pathfinding/TerrainEditor.class
/out/production/P04_Pathfinding/Pathfinder$PFNode.class
/out/production/P04_Pathfinding/PathfinderVisualizer.class
/out/production/P04_Pathfinding/InteractivePathfinderVisualizer.class
/src/algs4.jar
/src/Coord.java
/src/stdlib.jar
/src/Walker.java
/src/Terrain.java
/src/Pathfinder.java
/src/TerrainEditor.java
/src/PathfinderVisualizer.java
/src/InteractivePathfinderVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/misc.xml
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/heightmaps/.donotlog
/heightmaps/png2emap.py
/heightmaps/ramp.png.emap
/heightmaps/ramp2.png.emap
/heightmaps/ramp3.png.emap
/heightmaps/mazeAB.png.emap
/heightmaps/usa128.png.emap
/heightmaps/usa256.png.emap
/heightmaps/usa1024.png.emap
/heightmaps/maze32_0.png.emap
/heightmaps/maze32_1.png.emap
/heightmaps/maze232_0.png.emap
/heightmaps/maze320_0.png.emap
/heightmaps/mazeBrain.png.emap
/.cos265
/readme.html
/P04_Pathfinding.iml
/P04_Pathfinding.zip

--[ 2020.07.10.21.29.19.492.0 ]--
InitFile: /src/InteractivePathfinderVisualizer.java
import java.awt.event.KeyEvent;

/**
 * InteractivePathfinderVisualizer visualizes the terrain and the computed
 * path and allows the user to change parameters of the Pathfinder.  Below
 * is a list of commands and what they do.  Note: some of the commands
 * modify the properties of the path finder and some modify the terrain.
 *
 * Command        Action                                      Terrain
 * C              clear path
 * space          recompute path
 * S/E            set start/end location to mouse
 * left/right     halve/double path search heuristic value
 * 0/1            set path search heuristic to 0 or 1
 * W              start a walker to show the path
 * R              randomly generate a new terrain                *
 * M              smooths terrain under mouse                    *
 * shift+M        smooths all terrain                            *
 * up/down        increase/decrease terrain under mouse          *
 */

public class InteractivePathfinderVisualizer {
    private final static int DELAY = 10;

    // sets how many redraws it should take for the walker to reach its destination
    private final static float STEPS_TO_WALK = 100.0f;

    // for convenience, here are the emap files that are located under heightmaps/ folder
    // the python script in that folder converts png files to emap. \
    // you can use it to create your own maps to test your code
    private final static String[] emaps = {
            "maze32_0.png.emap",    // 0   (32x32 maze)
            "maze32_1.png.emap",    // 1   (another 32x32 maze)
            "maze232_0.png.emap",   // 2   (232x232 maze)
            "maze320_0.png.emap",   // 3   (same as maze32_0, only scaled up by 10x)
            "mazeAB.png.emap",      // 4   (a maze from a site no longer online :( )
            "mazeBrain.png.emap",   // 5   (...)
            "ramp.png.emap",        // 6   (some tests)
            "ramp2.png.emap",       // 7   (...)
            "ramp3.png.emap",       // 8   (...)
            "usa128.png.emap",      // 9   (elevation map of USA from https://bananas.openttd.org/en/heightmap/)
            "usa256.png.emap",      // 10  (same as usa128, only higher resolution)
            "usa1024.png.emap",     // 11  (same as usa128, only higher resolution
    };

    private final static String emapFilename = emaps[11];        // change index to load a different elevation map



    public static void main(String[] args) {
        Terrain terrain = new Terrain(emapFilename);
        Pathfinder pf = new Pathfinder(terrain);
        int N = terrain.getN();

        StdDraw.show(0);

        // set default starting and ending locations
        pf.setPathStart(new Coord(1, 1));
        pf.setPathEnd(new Coord(N-3, N-3));

        // find a path
        pf.computePath();

        PathfinderVisualizer.draw(terrain, pf, null, N);
        StdDraw.show(DELAY);

        // prevent repeated applications
        boolean keyboardR = false;
        boolean keyboardM = false;

        Walker walker = null;

        while(true) {
            boolean recompute = false;
            boolean redraw = false;

            // mouse location on map
            int mouseI = (int) ((StdDraw.mouseX()-24) / 464 * N);
            int mouseJ = (int) ((464 - (StdDraw.mouseY()-36)) / 464 * N);
            boolean isMouseOnMap = (mouseI >=0 && mouseI < N && mouseJ >= 0 && mouseJ < N);

            if(StdDraw.isKeyPressed(KeyEvent.VK_LEFT) || StdDraw.isKeyPressed(KeyEvent.VK_RIGHT)) {
                boolean keyboardLeft = StdDraw.isKeyPressed(KeyEvent.VK_LEFT);
                float m = keyboardLeft ? 0.5f : 2.0f;
                float h = pf.getHeuristic() * m;
                h = Math.max(1.0f/1024.0f, Math.min(1048576.0f, h));
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_0) || StdDraw.isKeyPressed(KeyEvent.VK_1)) {
                boolean keyboard0 = StdDraw.isKeyPressed(KeyEvent.VK_0);
                float h = keyboard0 ? 0 : 1;
                pf.setHeuristic(h);
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_C)) {
                pf.resetPath();
                walker = null;
                redraw = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_R) && !keyboardR) {
                TerrainEditor.setFractalHeights(terrain);
                TerrainEditor.clampHeights(terrain);
                recompute = true;
            }
            keyboardR = StdDraw.isKeyPressed(KeyEvent.VK_R);

            if(StdDraw.isKeyPressed(KeyEvent.VK_M)) {
                if(StdDraw.isKeyPressed(KeyEvent.VK_SHIFT)) {
                    if(!keyboardM) {
                        TerrainEditor.smoothHeights(terrain);
                        recompute = true;
                    }
                } else {
                    TerrainEditor.smoothHeights(mouseI, mouseJ, N / 20, true, terrain);
                    recompute = true;
                }
            }
            keyboardM = StdDraw.isKeyPressed(KeyEvent.VK_M);

            if(StdDraw.isKeyPressed(KeyEvent.VK_SPACE)) {
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_UP) || StdDraw.isKeyPressed(KeyEvent.VK_DOWN)) {
                boolean keyboardUp = StdDraw.isKeyPressed(KeyEvent.VK_UP);
                float add = keyboardUp ? 8.0f : -8.0f;
                TerrainEditor.addHeight(mouseI, mouseJ, N / 20, add, terrain);
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_S)) {
                pf.setPathStart(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(isMouseOnMap && StdDraw.isKeyPressed(KeyEvent.VK_E)) {
                pf.setPathEnd(new Coord(mouseI, mouseJ));
                recompute = true;
            }

            if(StdDraw.isKeyPressed(KeyEvent.VK_W)) {
                Iterable<Coord> path = pf.getPathSolution();
                if(path != null) {
                    walker = new Walker(terrain, pf.getPathSolution());
                }
            }

            if(walker != null) {
                if(walker.doneWalking()) {
                    walker = null;
                } else {
                    walker.advance(pf.getPathCost() / STEPS_TO_WALK);
                }
                redraw = true;
            }

            if(recompute) {
                walker = null;
                pf.resetPath();
                if(pf.getPathStart() != null && pf.getPathEnd() != null) {
                    pf.computePath();
                }
                redraw = true;
            }

            if(redraw) {
                PathfinderVisualizer.draw(terrain, pf, walker, N);
                StdDraw.show(DELAY);
            } else {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    /* do nothing */
                }
            }
        }
    }
}

--[ 2020.07.10.21.29.19.521.0 ]--
InitFile: /src/PathfinderVisualizer.java
/**
 * PathfinderVisualizer visualizes the terrain and found path.
 */

import java.awt.Color;
import java.awt.Font;

public class PathfinderVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 100;

    // color for different elevations.  must be in ascending order!
    private final static int[][] elevationColors = {
            // h    r   g   b   where h=height, r=red, g=green, b=blue
            {  0,   0,  0,  0},
            {  2,   0,  0,160},
            {  4,   0,224,224},
            { 16, 192,192,  0},
            { 64,  16,255, 16},
            {128,  32,224, 32},
            {192, 128,128,  8},
            {224, 164,164,164},
            {255, 255,255,255}
    };

    private final static Color cStart    = new Color(128, 128, 255);
    private final static Color cEnd      = new Color(255, 128, 128);
    private final static Color cSolution = new Color(255, 128, 255);
    private final static Color cSearched = new Color(128,   0, 128);

    // linearly interpolating between the corresponding rgb values
    private static Color colorLERP(float v1, int r0, int g0, int b0, int r1, int g1, int b1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * r0 + v1 * r1);
        int g = (int)(v0 * g0 + v1 * g1);
        int b = (int)(v0 * b0 + v1 * b1);
        return new Color(r, g, b);
    }
    private static Color colorLERP(float v1, Color c0, Color c1) {
        v1 = Math.max(0.0f, Math.min(1.0f, v1));
        float v0 = 1.0f - v1;
        int r = (int)(v0 * c0.getRed()   + v1 * c1.getRed());
        int g = (int)(v0 * c0.getGreen() + v1 * c1.getGreen());
        int b = (int)(v0 * c0.getBlue()  + v1 * c1.getBlue());
        int a = (int)(v0 * c0.getAlpha() + v1 * c1.getAlpha());
        return new Color(r, g, b, a);
    }

    // returns color for given height
    private static Color height2Color(int h) {
        h = Math.max(0, Math.min(255, h));

        int[] ec0 = elevationColors[0];  // default lower bound
        int[] ec1 = elevationColors[1];  // default upper bound

        // find upper bound while updating lower bound
        for(int i = 1; i < elevationColors.length; i++) {
            ec1 = elevationColors[i];
            if(h >= ec0[0] && h <= ec1[0]) break;
            ec0 = ec1;
        }

        int h0=ec0[0], r0=ec0[1], g0=ec0[2], b0=ec0[3];
        int h1=ec1[0], r1=ec1[1], g1=ec1[2], b1=ec1[3];
        float v1 = ((float)(h - h0)) / ((float)(h1 - h0));

        return colorLERP(v1, r0, g0, b0, r1, g1, b1);
    }

    private static void drawCircle(int i, int j, int N, double rad) {
        int c = (int)((i+0.5f) * 464.0f / N);
        int r = (int)((j+0.5f) * 464.0f / N);
        StdDraw.circle(c + 24, 464 - r + 36, rad);
    }
    public static void drawCircle(Coord loc, int N, double rad) {
        drawCircle(loc.getI(), loc.getJ(), N, rad);
    }

    private static void drawPath(Iterable<Coord> path, int N) {
        boolean first = true;
        int c0 = 0, r0 = 0;
        for (Coord loc : path) {
            int c1 = (int)((loc.getI()+0.5f) * 464.0f / N);
            int r1 = (int)((loc.getJ()+0.5f) * 464.0f / N);
            if(!first) {
                StdDraw.line(c0 + 24, 464 - r0 + 36, c1 + 24, 464 - r1 + 36);
            }
            first = false;
            c0 = c1; r0 = r1;
        }
    }

    // draw N-by-N pathfinding map
    public static void draw(Terrain terrain, Pathfinder pf, Walker walker, int N) {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.filledSquare(256, 256 + 12, 464 / 2);

        // draw terrain
        for(int row = 0; row < 464; row++) {
            int j = (int)((float)row/464.0f * N);
            for(int col = 0; col < 464; col++) {
                int i = (int)((float)col/464.0f * N);
                Coord loc = new Coord(i,j);
                Color c = height2Color(terrain.getHeight(loc));
                if(pf.wasSearched(loc)) {
                    c = colorLERP(0.50f, c, cSearched);
                }
                StdDraw.setPenColor(c);
                StdDraw.filledSquare(col + 24, 464 - row + 36, 1);
            }
        }

        // draw path start
        if(pf.getPathStart() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathStart(), N, 4.0);

            StdDraw.setPenColor(cStart);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathStart(), N, 4.0);
        }

        // draw path end
        if(pf.getPathEnd() != null) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawCircle(pf.getPathEnd(), N, 4.0);

            StdDraw.setPenColor(cEnd);
            StdDraw.setPenRadius(0.002);
            drawCircle(pf.getPathEnd(), N, 4.0);
        }

        // draw found path
        if(pf.foundPath()) {
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            drawPath(pf.getPathSolution(), N);

            StdDraw.setPenColor(cSolution);
            StdDraw.setPenRadius(0.002);
            drawPath(pf.getPathSolution(), N);
        }

        // draw walker
        if(walker != null) {
            Coord loc = walker.getLocation();
            StdDraw.setPenColor(StdDraw.BLACK);
            StdDraw.setPenRadius(0.006);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);

            StdDraw.setPenColor(StdDraw.WHITE);
            StdDraw.setPenRadius(0.002);
            PathfinderVisualizer.drawCircle(loc, N, 2.0);
        }

        // write status text
        StdDraw.setFont(new Font("SansSerif", Font.PLAIN, 12));
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.text(96, 12, "heuristic: " + pf.getHeuristic());
        if(pf.foundPath()) StdDraw.text(256, 12, "path: " + pf.getPathCost());
        else               StdDraw.text(256, 12, "no path found");
        StdDraw.text(512-96, 12, "searched: " + pf.getSearchSize() + " (" + (int)(100.0f * pf.getSearchSize() / (N*N)) + "%)");
    }
}

--[ 2020.07.10.21.29.19.543.0 ]--
InitFile: /src/Terrain.java
import java.lang.IndexOutOfBoundsException;

/**
 * Terrain stores elevations for map and computes distance and
 * cost in traversing the terrain.
 */

public class Terrain {
    private int N;
    private int[][] heights;

    public Terrain(int N) {
        this.N = N;
        this.heights = new int[N][N];
    }

    public Terrain(int[][] heights) {
        this.N = heights.length;
        this.heights = heights;
    }

    public Terrain(String emapfile) {
        In in = new In(emapfile);
        this.N = in.readInt();
        this.heights = new int[N][N];
        for (int j = 0; j < N; j++) {
            for (int i = 0; i < N; i++) {
                this.heights[i][j] = in.readInt();
            }
        }
    }

    public int getN() {
        return N;
    }

    public void setHeight(int i, int j, int h) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        heights[i][j] = h;
    }
    public void setHeight(int i, int j, float h) {
        setHeight(i, j, (int) h);
    }
    public void setHeight(Coord loc, int h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }
    public void setHeight(Coord loc, float h) {
        setHeight(loc.getI(), loc.getJ(), h);
    }

    public int getHeight(int i, int j) {
        if(i < 0 || j < 0 || i >= N || j >= N)
            throw new IndexOutOfBoundsException("i and j must be in [0,N)");
        return heights[i][j];
    }
    public int getHeight(Coord loc) {
        return getHeight(loc.getI(), loc.getJ());
    }

    // computes distance between (i0,j0) and (i1,j1) as the crow flies
    public float computeDistance(int i0, int j0, int i1, int j1) {
        return (float)Math.sqrt((i0 - i1) * (i0 - i1) + (j0 - j1) * (j0 - j1));
    }
    public float computeDistance(Coord c0, Coord c1) {
        return computeDistance(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }

    public float computeTravelCost(int i0, int j0, int i1, int j1) {
        float h0 = getHeight(i0, j0), h1 = getHeight(i1, j1);
        float climb = (float)Math.pow(Math.abs(h0 - h1) * 1000.0, 1.5);
        float dist = computeDistance(i0,j0, i1,j1);
        return (1.0f + climb) * dist;
    }
    public float computeTravelCost(Coord c0, Coord c1) {
        return computeTravelCost(c0.getI(), c0.getJ(), c1.getI(), c1.getJ());
    }
    public float computeTravelCost(Iterable<Coord> cs) {
        Coord c0 = null;
        float cost = 0.0f;
        for(Coord c1 : cs) {
            if(c0 != null) cost += computeTravelCost(c0, c1);
            c0 = c1;
        }
        return cost;
    }
}

--[ 2020.07.10.21.29.19.567.0 ]--
InitFile: /src/Walker.java
import java.util.Iterator;

/**
 * Walker takes an Iterable of Coords and simulates an individual
 * walking along the path over the given Terrain
 */
public class Walker {

    // terrain: the Terrain the Walker traverses
    // path: the sequence of Coords the Walker follows
    public Walker(Terrain terrain, Iterable<Coord> path) {
    }

    // returns the Walker's current location
    public Coord getLocation() {
        return null;
    }

    // returns true if Walker has reached the end Coord (last in path)
    public boolean doneWalking() {
        return true;
    }

    // advances the Walker along path
    // byTime: how long the Walker should traverse (may be any non-negative value)
    public void advance(float byTime) {
    }

}

--[ 2020.07.10.21.29.19.607.0 ]--
InitFile: /src/Coord.java
/**
 * Coordinates is an immutable type that store the tuple (i, j)
 */
public final class Coord {
    private final int i;
    private final int j;

    public Coord(int i, int j) {
        this.i = i;
        this.j = j;
    }

    public int getI() { return i; }
    public int getJ() { return j; }

    public boolean isInBounds(int minI, int minJ, int maxI, int maxJ) {
        return i >= minI && j >= minJ && i <= maxI && j <= maxJ;
    }
    public boolean isInBounds(Coord min, Coord max) {
        return i >= min.i && i <= max.i && j >= min.j && j <= max.j;
    }

    public Coord add(int addI, int addJ) {
        return new Coord(i + addI, j + addJ);
    }
    public Coord add(Coord that) { return new Coord(i + that.i, j + that.j); }

    public String toString() { return "(" + i + "," + j + ")"; }

    public boolean equals(Object o) {
        if(this == o) return true;
        if(o == null) return false;
        if(o.getClass() != this.getClass()) return false;
        Coord that = (Coord) o;
        if(this.i != that.i) return false;
        if(this.j != that.j) return false;
        return true;
    }
}

--[ 2020.07.10.21.29.19.625.0 ]--
InitFile: /src/Pathfinder.java
import java.lang.IndexOutOfBoundsException;
import java.lang.IllegalArgumentException;
import java.util.Iterator;

/**
 * Pathfinder uses A* search to find a near optimal path
 * between to locations with given terrain.
 */

public class Pathfinder {

    private Coord start;
    private Coord end;
    private float heuristic;
    private boolean pathFound;
    private Stack<Coord> s;
    private Terrain terrain;
    private boolean[][] board;
    private int searchSize;

    /**
     * PFNode will be the key for MinPQ (used in computePath())
     */
    private class PFNode implements Comparable<PFNode> {
        Coord loc;
        PFNode fromNode;
        float runningCost;
        // loc: the location of the PFNode
        // fromNode: how did we get here? (linked list back to start)
        public PFNode(Coord loc, PFNode fromNode) {
            this.loc = loc;
            this.fromNode = fromNode;
            if(fromNode == null){
                runningCost = 0;
            }
            else{
                if(loc.getJ() >= 0 && loc.getJ() < terrain.getN() && loc.getI() >= 0 && loc.getI() < terrain.getN()){
                    runningCost = fromNode.getCost(0) + terrain.computeTravelCost(loc, fromNode.loc);
                    searchSize = (int)runningCost;
                }
            }
        }

        // compares this with that, used to find minimum cost PFNode
        public int compareTo(PFNode that) {
            if(this.getCost(0) < that.getCost(0)) return -1;
            else if (this.getCost(0) > that.getCost(0)) return 1;
            return 0;
        }

        // returns the cost to travel from starting point to this
        // via the fromNode chain
        public float getCost(float heuristic) {
            return runningCost;
        }

        // returns if this PFNode is not marked invalid
        public boolean isValid() {
            return false;
        }

        // marks the PFNode as invalid
        public void invalidate() {
        }

        // returns if the PFNode is marked as used
        public boolean isUsed() {
            return board[loc.getJ()][loc.getI()];
        }

        // marks the PFNode as used
        public void use() { }

        // returns an Iterable of PFNodes that surround this
        public Iterable<PFNode> neighbors() {
            Stack<PFNode> s = new Stack<>();
            s.push(new PFNode(new Coord(loc.getI() + 1, loc.getJ()), this));
            s.push(new PFNode(new Coord(loc.getI() - 1, loc.getJ()), this));
            s.push(new PFNode(new Coord(loc.getI() , loc.getJ() + 1), this));
            s.push(new PFNode(new Coord(loc.getI(), loc.getJ() - 1), this));
            return s;
        }
    }

    public Pathfinder(Terrain terrain) {
        this.terrain = terrain;
    }

    public void setPathStart(Coord loc) {
        start = loc;
    }

    public Coord getPathStart() {
        return start;
    }

    public void setPathEnd(Coord loc) {
        end = loc;
    }

    public Coord getPathEnd() {
        return end;
    }

    public void setHeuristic(float v)
    {
        heuristic = v;
    }

    public float getHeuristic() {
        return heuristic;
    }

    public void resetPath() {
    }

    public void computePath() {



        //Initialize the board and then print the current state of it
        board = new boolean[terrain.getN()][terrain.getN()];
        for(int i = 0; i < terrain.getN(); i++){
            for(int j = 0; j < terrain.getN(); j++){
                board[i][j] = false;
                //System.out.print(board[i][j] + " ");
            }
            //System.out.println();
        }



        s = new Stack<>();
        MinPQ<PFNode> pfQueue = new MinPQ<>();
        PFNode begin = new PFNode(start, null);

        pfQueue.insert(begin);


        while(!pfQueue.min().loc.equals(end)){
            begin = pfQueue.delMin();
            if(board[begin.loc.getJ()][begin.loc.getI()]){
                continue;
            }
            board[begin.loc.getJ()][begin.loc.getI()] = true;
            for(PFNode p : begin.neighbors()){
                //Only add the neighbors to the queue if they're in range of the board
                if(p.loc.getJ() >= 0 && p.loc.getJ() < terrain.getN() && p.loc.getI() >= 0 && p.loc.getI() < terrain.getN()){
                    pfQueue.insert(p);
                }
            }
            if(pfQueue.min().loc.equals(end)){
                break;
            }

        }












        PFNode cur = pfQueue.min();
        while(cur.fromNode != null){
            s.push(cur.loc);
            cur = cur.fromNode;
        }
        s.push(start);



        pathFound = true;
    }

    public boolean foundPath() {
        return pathFound;
    }

    public float getPathCost() {
        return searchSize;
    }

    public int getSearchSize() {
        return searchSize;
    }

    public Iterable<Coord> getPathSolution() {

        //Return a stack of coordinates for the visualizer
        return s;
    }

    public boolean wasSearched(Coord loc) {
        return false;
                //board[loc.getJ()][loc.getI()];
    }
}

--[ 2020.07.10.21.29.19.644.0 ]--
InitFile: /src/TerrainEditor.java
/**
 * The following class provides some simple terrain editing functions.
 */
public class TerrainEditor {
    private static float rndRadius(float d) {
        return (float)StdRandom.uniform(-d,d);
    }

    private static float getFractalHeight(int i, int j, float dh, Terrain terrain, boolean[] isset) {
        int N = terrain.getN();
        dh = Math.max(-64, Math.min(255+64, dh));   // allow the height to go just a bit out of range
        if(!isset[i + j * N]) {
            isset[i + j * N] = true;
            terrain.setHeight(i, j, dh);
        }
        return terrain.getHeight(i,j);
    }

    private static void setFractalHeights(int i0, int j0, int i1, int j1, Terrain terrain, boolean[] isset) {
        int id = i1-i0;
        int jd = j1-j0;
        int i01 = (i0+i1)/2;
        int j01 = (j0+j1)/2;

        if(id <= 1 && jd <= 1) return;

        float h00 = getFractalHeight(i0,j0,32,terrain,isset);
        float h01 = getFractalHeight(i0,j1,32,terrain,isset);
        float h10 = getFractalHeight(i1,j0,32,terrain,isset);
        float h11 = getFractalHeight(i1,j1,32,terrain,isset);

        float d = (float)(Math.sqrt((i1-i0)*(i1-i0) + (j1-j0)*(j1-j0)) * 0.5);

        float d0001 = (h00 + h01) / 2 + rndRadius(d);
        float d0010 = (h00 + h10) / 2 + rndRadius(d);
        float d1101 = (h11 + h01) / 2 + rndRadius(d);
        float d1110 = (h11 + h10) / 2 + rndRadius(d);

        float h0001 = getFractalHeight(i0, j01, d0001, terrain,isset);
        float h0010 = getFractalHeight(i01, j0, d0010, terrain,isset);
        float h1101 = getFractalHeight(i01, j1, d1101, terrain,isset);
        float h1110 = getFractalHeight(i1, j01, d1110, terrain,isset);

        float dm = (float)((h0001 + h0010 + h1101 + h1110) / 4.0);
        float hm = getFractalHeight(i01, j01, dm, terrain,isset);

        if(id > 1 && jd > 1) {
            setFractalHeights(i0, j0, i01, j01, terrain, isset);
            setFractalHeights(i01, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i01, j1, terrain, isset);
            setFractalHeights(i01, j01, i1, j1, terrain, isset);
        } else if(jd > 1) {
            setFractalHeights(i0, j0, i1, j01, terrain, isset);
            setFractalHeights(i0, j01, i1, j1, terrain, isset);
        } else {
            setFractalHeights(i0, j0, i01, j1, terrain, isset);
            setFractalHeights(i01, j0, i1, j1, terrain, isset);
        }
    }

    public static void setFractalHeights(Terrain terrain) {
        int N = terrain.getN();
        boolean[] isset = new boolean[N*N];
        setFractalHeights(0, 0, N - 1, N - 1, terrain, isset);
    }

    public static void smoothHeights(Terrain terrain) {
        int N = terrain.getN();
        int radius = (int)Math.ceil(Math.sqrt(N*N/2.0f));
        smoothHeights(N/2, N/2, radius, false, terrain);
    }

    public static void smoothHeights(int ic, int jc, int radius, boolean fallOff, Terrain terrain) {
        final int N = terrain.getN();
        final int w = 2*radius+1;
        float[] s = new float[w*w];
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;

                float m = computeEffect(i, j, ic, jc, radius, fallOff, N);
                if(m <= 0.0000001) {
                    s[sidx] = terrain.getHeight(i,j);
                    continue;
                }
                float h = 0;
                int c = 0;
                if(i > 0 && j > 0) {
                    h += terrain.getHeight(i-1,j-1);
                    c += 1;
                }
                if(i < N-1 && j > 0) {
                    h += terrain.getHeight(i+1,j-1);
                    c += 1;
                }
                if(i > 0 && j < N-1) {
                    h += terrain.getHeight(i-1,j+1);
                    c += 1;
                }
                if(i < N-1 && j < N-1) {
                    h += terrain.getHeight(i+1,j+1);
                    c += 1;
                }
                if(i > 0) {
                    h += terrain.getHeight(i-1,j);
                    c += 1;
                }
                if(j > 0) {
                    h += terrain.getHeight(i,j-1);
                    c += 1;
                }
                if(i < N-1) {
                    h += terrain.getHeight(i+1,j);
                    c += 1;
                }
                if(j < N-1) {
                    h += terrain.getHeight(i,j+1);
                    c += 1;
                }
                s[sidx] = (1-m) * terrain.getHeight(i,j) + m * h / c;
            }
        }
        for(int ia = -radius; ia <= radius; ia++) {
            int i = ic + ia;
            if(i < 0 || i >= N) continue;
            for(int ja = -radius; ja <= radius; ja++) {
                int j = jc + ja;
                if(j < 0 || j >= N) continue;
                int sidx = (ia+radius) + (ja+radius)*w;
                terrain.setHeight(i, j, s[sidx]);
            }
        }
    }

    public static void clampHeights(Terrain terrain) {
        int N = terrain.getN();
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                terrain.setHeight(i, j, Math.max(0, Math.min(255, terrain.getHeight(i, j))));
            }
        }
    }

    private static float computeEffect(int i, int j, int ic, int jc, int radius, boolean fallOff, int N) {
        if(i < 0 || j < 0 || i >= N || j >= N) return 0;
        if(!fallOff) return 1;
        int d2 = (ic-i)*(ic-i)+(jc-j)*(jc-j);
        if(d2 > radius*radius) return 0;
        return ((float)radius - (float)Math.sqrt(d2)) / (float)radius;
    }

    public static void addHeight(int i, int j, int radius, float add, Terrain terrain) {
        final int N = terrain.getN();
        for(int ja = -radius; ja <= radius; ja++) {
            int r = j + ja;
            if(r < 0 || r >= N) continue;
            for(int ia = -radius; ia <= radius; ia++) {
                int c = i + ia;
                if(c < 0 || c >= N) continue;
                float v = add * computeEffect(c, r, i, j, radius, true, N);
                float h = terrain.getHeight(c, r) + v;
                h = Math.max(0, Math.min(255, h));
                terrain.setHeight(c, r, h);
            }
        }
    }
}

--[ 2020.07.10.21.29.19.665.0 ]--
InitFile: /.cos265


--[ 2020.07.10.21.29.19.687.0 ]--
InitFile: /P04_Pathfinding.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/heightmaps" type="java-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.log" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2020.07.10.21.29.58.014.0 ]--
UpdateTree (AD): 1 0
+ /.idea/vcs.xml

--[ 2020.07.10.21.30.01.710.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2020.07.10.21.31.01.952.0 ]--
DisposeComponent
